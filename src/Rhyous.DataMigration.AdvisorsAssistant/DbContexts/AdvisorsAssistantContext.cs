// <auto-generated>
// This file has been auto generated by EF Core Power Tools.
// It has also been manually modified since to auto trim char(n) fields.
// </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rhyous.StringLibrary;

namespace Rhyous.DataMigration.AdvisorsAssistant.Models;

public partial class AdvisorsAssistantContext : DbContext, IAdvisorsAssistantContext
{
    public AdvisorsAssistantContext(DbContextOptions<AdvisorsAssistantContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Aaaddress> Addresses { get; set; }

    public virtual DbSet<AaaddressZip> AddressZips { get; set; }

    public virtual DbSet<AaaddressZipCustom> AddressZipCustoms { get; set; }

    public virtual DbSet<AaapplicationInfo> ApplicationInfos { get; set; }

    public virtual DbSet<AabenchMarkReport> BenchMarkReports { get; set; }

    public virtual DbSet<AabenchMarkReportAccount> BenchMarkReportAccounts { get; set; }

    public virtual DbSet<AabenchMarkReportInvestment> BenchMarkReportInvestments { get; set; }

    public virtual DbSet<AabenchMarkReportValue> BenchMarkReportValues { get; set; }

    public virtual DbSet<AacalEvent> CalEvents { get; set; }

    public virtual DbSet<AacalEventDetail> CalEventDetails { get; set; }

    public virtual DbSet<AacalEventException> CalEventExceptions { get; set; }

    public virtual DbSet<AacalEventNameLink> CalEventNameLinks { get; set; }

    public virtual DbSet<AacalEventNotification> CalEventNotifications { get; set; }

    public virtual DbSet<AacalEventNotificationLog> CalEventNotificationLogs { get; set; }

    public virtual DbSet<AacalUser> CalUsers { get; set; }

    public virtual DbSet<AacalUserAccess> CalUserAccesses { get; set; }

    public virtual DbSet<AacalUserEventLink> CalUserEventLinks { get; set; }

    public virtual DbSet<Aacode> Codes { get; set; }

    public virtual DbSet<AacodeAccountTypeProductClass> CodeAccountTypeProductClasses { get; set; }

    public virtual DbSet<AacodeAnnuitySurrenderPeriod> CodeAnnuitySurrenderPeriods { get; set; }

    public virtual DbSet<AacodeCustodianContactInfo> CodeCustodianContactInfos { get; set; }

    public virtual DbSet<AacodeCustom> CodeCustoms { get; set; }

    public virtual DbSet<AacodeDeceased> CodeDeceaseds { get; set; }

    public virtual DbSet<AacodeEventSubtypeColor> CodeEventSubtypeColors { get; set; }

    public virtual DbSet<AacodePaymentModeFrequency> CodePaymentModeFrequencies { get; set; }

    public virtual DbSet<AacodePolicyStatus> CodePolicyStatuses { get; set; }

    public virtual DbSet<AacodeReciprocal> CodeReciprocals { get; set; }

    public virtual DbSet<AacodeType> CodeTypes { get; set; }

    public virtual DbSet<AacomDue> ComDues { get; set; }

    public virtual DbSet<AacustomLink> CustomLinks { get; set; }

    public virtual DbSet<AacustomLinkParameter> CustomLinkParameters { get; set; }

    public virtual DbSet<Aadebug> Debugs { get; set; }

    public virtual DbSet<AadownloadRegistration> DownloadRegistrations { get; set; }

    public virtual DbSet<AadownloadRegistrationAddress> DownloadRegistrationAddresses { get; set; }

    public virtual DbSet<AadownloadRegistrationEmail> DownloadRegistrationEmails { get; set; }

    public virtual DbSet<AadownloadRegistrationParty> DownloadRegistrationParties { get; set; }

    public virtual DbSet<AadownloadRegistrationPartyAddressLink> DownloadRegistrationPartyAddressLinks { get; set; }

    public virtual DbSet<AadownloadRegistrationPartyEmailLink> DownloadRegistrationPartyEmailLinks { get; set; }

    public virtual DbSet<AadownloadRegistrationPartyLink> DownloadRegistrationPartyLinks { get; set; }

    public virtual DbSet<AadownloadRegistrationPartyPhoneLink> DownloadRegistrationPartyPhoneLinks { get; set; }

    public virtual DbSet<AadownloadRegistrationPhone> DownloadRegistrationPhones { get; set; }

    public virtual DbSet<Aaemail> Emails { get; set; }

    public virtual DbSet<AaexchangeAccount> ExchangeAccounts { get; set; }

    public virtual DbSet<Aafile> Files { get; set; }

    public virtual DbSet<AafileAccount> FileAccounts { get; set; }

    public virtual DbSet<AafileHistoryLog> FileHistoryLogs { get; set; }

    public virtual DbSet<AafileHistoryLogDetail> FileHistoryLogDetails { get; set; }

    public virtual DbSet<AafilePolicy> FilePolicies { get; set; }

    public virtual DbSet<AaflexAccount> FlexAccounts { get; set; }

    public virtual DbSet<AaflexCoverage> FlexCoverages { get; set; }

    public virtual DbSet<AaflexLabelWorkflow> FlexLabelWorkflows { get; set; }

    public virtual DbSet<AaflexName> FlexNames { get; set; }

    public virtual DbSet<AaflexNvst> FlexNvsts { get; set; }

    public virtual DbSet<AaflexWorkflow> FlexWorkflows { get; set; }

    public virtual DbSet<Aaflexlabel> Flexlabels { get; set; }

    public virtual DbSet<AaforeignKey> ForeignKeys { get; set; }

    public virtual DbSet<AaformAccount> FormAccounts { get; set; }

    public virtual DbSet<AaformCoverage> FormCoverages { get; set; }

    public virtual DbSet<AaformMaster> FormMasters { get; set; }

    public virtual DbSet<AaformName> FormNames { get; set; }

    public virtual DbSet<AaformNvst> FormNvsts { get; set; }

    public virtual DbSet<AagoogleAccount> GoogleAccounts { get; set; }

    public virtual DbSet<AahouseHold> HouseHolds { get; set; }

    public virtual DbSet<AahouseHoldMember> HouseHoldMembers { get; set; }

    public virtual DbSet<AahouseholdMemberCoverage> HouseholdMemberCoverages { get; set; }

    public virtual DbSet<Aaimage> Images { get; set; }

    public virtual DbSet<AainsuranceRelation> InsuranceRelations { get; set; }

    public virtual DbSet<AakeyId> KeyIds { get; set; }

    public virtual DbSet<AakeyIdProperty> KeyIdProperties { get; set; }

    public virtual DbSet<Aalabel> Labels { get; set; }

    public virtual DbSet<Aalanguage> Languages { get; set; }

    public virtual DbSet<Aalicense> Licenses { get; set; }

    public virtual DbSet<AalicenseModule> LicenseModules { get; set; }

    public virtual DbSet<Aalink> Links { get; set; }

    public virtual DbSet<AamailingList> MailingLists { get; set; }

    public virtual DbSet<AamailingListMap> MailingListMaps { get; set; }

    public virtual DbSet<Aamarket> Markets { get; set; }

    public virtual DbSet<Aamessage> Messages { get; set; }

    public virtual DbSet<Aamodule> Modules { get; set; }

    public virtual DbSet<Aaname> Names { get; set; }

    public virtual DbSet<AanameAdvisorVault> NameAdvisorVaults { get; set; }

    public virtual DbSet<AanameDeleted> NameDeleteds { get; set; }

    public virtual DbSet<AanameDownloadId> NameDownloadIds { get; set; }

    public virtual DbSet<AanameFilter> NameFilters { get; set; }

    public virtual DbSet<AanameProducer> NameProducers { get; set; }

    public virtual DbSet<AanameType> NameTypes { get; set; }

    public virtual DbSet<AanewBiz> NewBizs { get; set; }

    public virtual DbSet<Aanote> Notes { get; set; }

    public virtual DbSet<AanoteAccountLink> NoteAccountLinks { get; set; }

    public virtual DbSet<AanoteFileLink> NoteFileLinks { get; set; }

    public virtual DbSet<AanotePolicyLink> NotePolicyLinks { get; set; }

    public virtual DbSet<AanoteTopic> NoteTopics { get; set; }

    public virtual DbSet<AanoteTopicLink> NoteTopicLinks { get; set; }

    public virtual DbSet<AanvSum> NvSums { get; set; }

    public virtual DbSet<AanvTran> NvTrans { get; set; }

    public virtual DbSet<AanvTransBasisAdjustmentLink> NvTransBasisAdjustmentLinks { get; set; }

    public virtual DbSet<AanvTransBlotter> NvTransBlotters { get; set; }

    public virtual DbSet<AanvTransFlow> NvTransFlows { get; set; }

    public virtual DbSet<AanvTransPositionOverride> NvTransPositionOverrides { get; set; }

    public virtual DbSet<AanvTransType> NvTransTypes { get; set; }

    public virtual DbSet<Aanvst> Nvsts { get; set; }

    public virtual DbSet<AanvstAccount> NvstAccounts { get; set; }

    public virtual DbSet<AanvstAccountDownloadedInfo> NvstAccountDownloadedInfos { get; set; }

    public virtual DbSet<AanvstAccountPartnerExportLink> NvstAccountPartnerExportLinks { get; set; }

    public virtual DbSet<AanvstAccountPdcr> NvstAccountPdcrs { get; set; }

    public virtual DbSet<AanvstAccountRelation> NvstAccountRelations { get; set; }

    public virtual DbSet<AanvstCalculationFormula> NvstCalculationFormulas { get; set; }

    public virtual DbSet<AanvstControl> NvstControls { get; set; }

    public virtual DbSet<AanvstIndex> NvstIndices { get; set; }

    public virtual DbSet<AanvstIndexFamily> NvstIndexFamilies { get; set; }

    public virtual DbSet<AanvstIndexPrice> NvstIndexPrices { get; set; }

    public virtual DbSet<AanvstIndexSubSet> NvstIndexSubSets { get; set; }

    public virtual DbSet<AanvstLotAndSplitLink> NvstLotAndSplitLinks { get; set; }

    public virtual DbSet<AanvstMarketValuation> NvstMarketValuations { get; set; }

    public virtual DbSet<AanvstNav> NvstNavs { get; set; }

    public virtual DbSet<AanvstNavReturn> NvstNavReturns { get; set; }

    public virtual DbSet<AanvstNavTemp> NvstNavTemps { get; set; }

    public virtual DbSet<AanvstNewBiz> NvstNewBizs { get; set; }

    public virtual DbSet<AanvstPosition> NvstPositions { get; set; }

    public virtual DbSet<AanvstProcessTransactionKey> NvstProcessTransactionKeys { get; set; }

    public virtual DbSet<AanvstSale> NvstSales { get; set; }

    public virtual DbSet<AanvstSymbol> NvstSymbols { get; set; }

    public virtual DbSet<AanvstSymbolSplit> NvstSymbolSplits { get; set; }

    public virtual DbSet<AanvstTaxLot> NvstTaxLots { get; set; }

    public virtual DbSet<AanvstTaxLotHoldingDateLink> NvstTaxLotHoldingDateLinks { get; set; }

    public virtual DbSet<AanvstValue> NvstValues { get; set; }

    public virtual DbSet<Aaoffice> Offices { get; set; }

    public virtual DbSet<AaoutlookEntryCalendar> OutlookEntryCalendars { get; set; }

    public virtual DbSet<AaoutlookEntryEmail> OutlookEntryEmails { get; set; }

    public virtual DbSet<AaoutlookEntryName> OutlookEntryNames { get; set; }

    public virtual DbSet<AaoutlookStore> OutlookStores { get; set; }

    public virtual DbSet<Aaperspective> Perspectives { get; set; }

    public virtual DbSet<AaperspectiveCode> PerspectiveCodes { get; set; }

    public virtual DbSet<AaperspectiveTransCode> PerspectiveTransCodes { get; set; }

    public virtual DbSet<Aaphone> Phones { get; set; }

    public virtual DbSet<Aapolicy> Policies { get; set; }

    public virtual DbSet<AapolicyBenefitCoverage> PolicyBenefitCoverages { get; set; }

    public virtual DbSet<AapolicyBenefitSeries> PolicyBenefitSeries { get; set; }

    public virtual DbSet<AapolicyCommAdjustment> PolicyCommAdjustments { get; set; }

    public virtual DbSet<AapolicyCommTableSet> PolicyCommTableSets { get; set; }

    public virtual DbSet<AapolicyCommTableSetBlackout> PolicyCommTableSetBlackouts { get; set; }

    public virtual DbSet<AapolicyCommTableSetFixedAmount> PolicyCommTableSetFixedAmounts { get; set; }

    public virtual DbSet<AapolicyCommTableSetFixedAmountYear> PolicyCommTableSetFixedAmountYears { get; set; }

    public virtual DbSet<AapolicyCommTableSetLevel> PolicyCommTableSetLevels { get; set; }

    public virtual DbSet<AapolicyCommTableSetNonCommAmount> PolicyCommTableSetNonCommAmounts { get; set; }

    public virtual DbSet<AapolicyCommTableSetRate> PolicyCommTableSetRates { get; set; }

    public virtual DbSet<AapolicyCommTransaction> PolicyCommTransactions { get; set; }

    public virtual DbSet<AapolicyCommTransactionCoverageLink> PolicyCommTransactionCoverageLinks { get; set; }

    public virtual DbSet<AapolicyCommTransactionDue> PolicyCommTransactionDues { get; set; }

    public virtual DbSet<AapolicyCommTransactionDueRiderLink> PolicyCommTransactionDueRiderLinks { get; set; }

    public virtual DbSet<AapolicyCommTransactionPaid> PolicyCommTransactionPaids { get; set; }

    public virtual DbSet<AapolicyCommTransactionRemainder> PolicyCommTransactionRemainders { get; set; }

    public virtual DbSet<AapolicyCoverage> PolicyCoverages { get; set; }

    public virtual DbSet<AapolicyCoveragePosition> PolicyCoveragePositions { get; set; }

    public virtual DbSet<AapolicyCoverageRelation> PolicyCoverageRelations { get; set; }

    public virtual DbSet<AapolicyModalPremiumCoverage> PolicyModalPremiumCoverages { get; set; }

    public virtual DbSet<AapolicyModalPremiumRider> PolicyModalPremiumRiders { get; set; }

    public virtual DbSet<AapolicyNewBiz> PolicyNewBizs { get; set; }

    public virtual DbSet<AapolicyPdcr> PolicyPdcrs { get; set; }

    public virtual DbSet<AapolicyPremiumDue> PolicyPremiumDues { get; set; }

    public virtual DbSet<AapolicyRelation> PolicyRelations { get; set; }

    public virtual DbSet<AapolicyRider> PolicyRiders { get; set; }

    public virtual DbSet<AapolicySeries> PolicySeries { get; set; }

    public virtual DbSet<AapolicySur> PolicySurs { get; set; }

    public virtual DbSet<AaprocessLog> ProcessLogs { get; set; }

    public virtual DbSet<AaprocessLogDetail> ProcessLogDetails { get; set; }

    public virtual DbSet<AaprocessValue> ProcessValues { get; set; }

    public virtual DbSet<AaprocessValuesAccount> ProcessValuesAccounts { get; set; }

    public virtual DbSet<Aaproducer> Producers { get; set; }

    public virtual DbSet<AaproducerGroup> ProducerGroups { get; set; }

    public virtual DbSet<AaproducerGroupLink> ProducerGroupLinks { get; set; }

    public virtual DbSet<AaproducerReference> ProducerReferences { get; set; }

    public virtual DbSet<AaqueryCondition> QueryConditions { get; set; }

    public virtual DbSet<AaqueryConditionItemSource> QueryConditionItemSources { get; set; }

    public virtual DbSet<AaqueryConditionJoin> QueryConditionJoins { get; set; }

    public virtual DbSet<AaquerySavedCondition> QuerySavedConditions { get; set; }

    public virtual DbSet<AaquerySavedConditionSet> QuerySavedConditionSets { get; set; }

    public virtual DbSet<AaquerySavedConditionSetUserLink> QuerySavedConditionSetUserLinks { get; set; }

    public virtual DbSet<Aareport> Reports { get; set; }

    public virtual DbSet<AareportCustomTitle> ReportCustomTitles { get; set; }

    public virtual DbSet<AareportFavorite> ReportFavorites { get; set; }

    public virtual DbSet<AareportField> ReportFields { get; set; }

    public virtual DbSet<AareportFootNote> ReportFootNotes { get; set; }

    public virtual DbSet<AareportGroup> ReportGroups { get; set; }

    public virtual DbSet<AareportPreference> ReportPreferences { get; set; }

    public virtual DbSet<AareportProgram> ReportPrograms { get; set; }

    public virtual DbSet<Aasystem> Systems { get; set; }

    public virtual DbSet<AasystemPreference> SystemPreferences { get; set; }

    public virtual DbSet<AatempDatum> TempData { get; set; }

    public virtual DbSet<AatempKeys1> TempKeys1s { get; set; }

    public virtual DbSet<AatempKeys2> TempKeys2s { get; set; }

    public virtual DbSet<AatempKeys3> TempKeys3s { get; set; }

    public virtual DbSet<AatempKeys4> TempKeys4s { get; set; }

    public virtual DbSet<AatempKeys5> TempKeys5s { get; set; }

    public virtual DbSet<Aauser> Users { get; set; }

    public virtual DbSet<AauserDashboardWidget> UserDashboardWidgets { get; set; }

    public virtual DbSet<AauserGroup> UserGroups { get; set; }

    public virtual DbSet<AauserGroupLink> UserGroupLinks { get; set; }

    public virtual DbSet<AauserMemo> UserMemos { get; set; }

    public virtual DbSet<AauserMessage> UserMessages { get; set; }

    public virtual DbSet<AauserMessageNotificationLog> UserMessageNotificationLogs { get; set; }

    public virtual DbSet<AauserMessageView> UserMessageViews { get; set; }

    public virtual DbSet<AauserModule> UserModules { get; set; }

    public virtual DbSet<AauserProducer> UserProducers { get; set; }

    public virtual DbSet<AauserRecentName> UserRecentNames { get; set; }

    public virtual DbSet<AauserRoleTask> UserRoleTasks { get; set; }

    public virtual DbSet<AauserRoleType> UserRoleTypes { get; set; }

    public virtual DbSet<AauserTaskOverRide> UserTaskOverRides { get; set; }

    public virtual DbSet<AauserTaskType> UserTaskTypes { get; set; }

    public virtual DbSet<AauserTaskTypeGroup> UserTaskTypeGroups { get; set; }

    public virtual DbSet<AauserTaskTypeSplit> UserTaskTypeSplits { get; set; }

    public virtual DbSet<AauserView> UserViews { get; set; }

    public virtual DbSet<AauserViewAccess> UserViewAccesses { get; set; }

    public virtual DbSet<AauserViewOffice> UserViewOffices { get; set; }

    public virtual DbSet<AauserViewPdcr> UserViewPdcrs { get; set; }

    public virtual DbSet<Aaweb> Webs { get; set; }

    public virtual DbSet<AaworkFlow> WorkFlows { get; set; }

    public virtual DbSet<AaworkFlowEvent> WorkFlowEvents { get; set; }

    public virtual DbSet<AaworkFlowEventMaster> WorkFlowEventMasters { get; set; }

    public virtual DbSet<AaworkFlowEventTemplate> WorkFlowEventTemplates { get; set; }

    public virtual DbSet<AaworkFlowMaster> WorkFlowMasters { get; set; }

    public virtual DbSet<DlfAddress> DlfAddresses { get; set; }

    public virtual DbSet<DlfAddressPartyLink> DlfAddressPartyLinks { get; set; }

    public virtual DbSet<DlfAddressPolicyLink> DlfAddressPolicyLinks { get; set; }

    public virtual DbSet<DlfAddressRegistrationLink> DlfAddressRegistrationLinks { get; set; }

    public virtual DbSet<DlfBalance> DlfBalances { get; set; }

    public virtual DbSet<DlfBatch> DlfBatches { get; set; }

    public virtual DbSet<DlfCodeMap> DlfCodeMaps { get; set; }

    public virtual DbSet<DlfCoverage> DlfCoverages { get; set; }

    public virtual DbSet<DlfCoveragePage> DlfCoveragePages { get; set; }

    public virtual DbSet<DlfEmail> DlfEmails { get; set; }

    public virtual DbSet<DlfEmailPartyLink> DlfEmailPartyLinks { get; set; }

    public virtual DbSet<DlfEmailPolicyLink> DlfEmailPolicyLinks { get; set; }

    public virtual DbSet<DlfEmailRegistrationLink> DlfEmailRegistrationLinks { get; set; }

    public virtual DbSet<DlfFile> DlfFiles { get; set; }

    public virtual DbSet<DlfParty> DlfParties { get; set; }

    public virtual DbSet<DlfPartyCoverageLink> DlfPartyCoverageLinks { get; set; }

    public virtual DbSet<DlfPartyPolicyLink> DlfPartyPolicyLinks { get; set; }

    public virtual DbSet<DlfPartyRegistrationLink> DlfPartyRegistrationLinks { get; set; }

    public virtual DbSet<DlfPartyRiderLink> DlfPartyRiderLinks { get; set; }

    public virtual DbSet<DlfPhone> DlfPhones { get; set; }

    public virtual DbSet<DlfPhonePartyLink> DlfPhonePartyLinks { get; set; }

    public virtual DbSet<DlfPhonePolicyLink> DlfPhonePolicyLinks { get; set; }

    public virtual DbSet<DlfPhoneRegistrationLink> DlfPhoneRegistrationLinks { get; set; }

    public virtual DbSet<DlfPolicy> DlfPolicies { get; set; }

    public virtual DbSet<DlfPolicyNewBiz> DlfPolicyNewBizs { get; set; }

    public virtual DbSet<DlfPolicyPosition> DlfPolicyPositions { get; set; }

    public virtual DbSet<DlfPosition> DlfPositions { get; set; }

    public virtual DbSet<DlfPositionAccountSet> DlfPositionAccountSets { get; set; }

    public virtual DbSet<DlfPositionInvestmentSet> DlfPositionInvestmentSets { get; set; }

    public virtual DbSet<DlfPositionPositionSet> DlfPositionPositionSets { get; set; }

    public virtual DbSet<DlfPositionPriceSet> DlfPositionPriceSets { get; set; }

    public virtual DbSet<DlfPositionReconcileSet> DlfPositionReconcileSets { get; set; }

    public virtual DbSet<DlfPositionSecuritySet> DlfPositionSecuritySets { get; set; }

    public virtual DbSet<DlfPrice> DlfPrices { get; set; }

    public virtual DbSet<DlfProcess> DlfProcesses { get; set; }

    public virtual DbSet<DlfProcessFile> DlfProcessFiles { get; set; }

    public virtual DbSet<DlfRegistration> DlfRegistrations { get; set; }

    public virtual DbSet<DlfRider> DlfRiders { get; set; }

    public virtual DbSet<DlfSecurity> DlfSecurities { get; set; }

    public virtual DbSet<DlfTransaction> DlfTransactions { get; set; }

    public virtual DbSet<DlfTransactionMap> DlfTransactionMaps { get; set; }

    public virtual DbSet<DstcusipChange> DstcusipChanges { get; set; }

    public virtual DbSet<Dstsecurity> Dstsecurities { get; set; }

    public virtual DbSet<Fchsecurity> Fchsecurities { get; set; }

    public virtual DbSet<InfinetLink> InfinetLinks { get; set; }

    public virtual DbSet<InfinetLinkExtension> InfinetLinkExtensions { get; set; }

    public virtual DbSet<InfinetLinkNewAa> InfinetLinkNewAas { get; set; }

    public virtual DbSet<MsSqledStatementLog> MsSqledStatementLogs { get; set; }

    public virtual DbSet<Prsfund> Prsfunds { get; set; }

    public virtual DbSet<PrssecurityMatrix> PrssecurityMatrices { get; set; }

    public virtual DbSet<SwbmoneyMarket> SwbmoneyMarkets { get; set; }

    public virtual DbSet<VwAanameKey000001> VwAanameKey000001s { get; set; }

    public virtual DbSet<VwAanameKey001000> VwAanameKey001000s { get; set; }

    public virtual DbSet<VwAppAutomationDataByName> VwAppAutomationDataByNames { get; set; }

    public virtual DbSet<VwDlfbalance> VwDlfbalances { get; set; }

    public virtual DbSet<VwDlffile> VwDlffiles { get; set; }

    public virtual DbSet<VwDlfoutOfBalance> VwDlfoutOfBalances { get; set; }

    public virtual DbSet<VwDlfpolicyCoverage> VwDlfpolicyCoverages { get; set; }

    public virtual DbSet<VwDlfpolicyPosition> VwDlfpolicyPositions { get; set; }

    public virtual DbSet<VwDlfposition> VwDlfpositions { get; set; }

    public virtual DbSet<VwDlfregistration> VwDlfregistrations { get; set; }

    public virtual DbSet<VwDlftransaction> VwDlftransactions { get; set; }

    public virtual DbSet<VwDstsecurity> VwDstsecurities { get; set; }

    public virtual DbSet<VwExchangeAccountUser> VwExchangeAccountUsers { get; set; }

    public virtual DbSet<VwExportClient> VwExportClients { get; set; }

    public virtual DbSet<VwInsuranceCommissionTransactionSummary> VwInsuranceCommissionTransactionSummaries { get; set; }

    public virtual DbSet<VwMobileClient> VwMobileClients { get; set; }

    public virtual DbSet<VwNameFilter0000000106> VwNameFilter0000000106s { get; set; }

    public virtual DbSet<VwNameFilter0000000107> VwNameFilter0000000107s { get; set; }

    public virtual DbSet<VwNameFilter09999999> VwNameFilter09999999s { get; set; }

    public virtual DbSet<VwNameFilter10000019> VwNameFilter10000019s { get; set; }

    public virtual DbSet<VwNameFilter10000028> VwNameFilter10000028s { get; set; }

    public virtual DbSet<VwNameFilter10000030> VwNameFilter10000030s { get; set; }

    public virtual DbSet<VwNameFilter10000033> VwNameFilter10000033s { get; set; }

    public virtual DbSet<VwNameFilter10000034> VwNameFilter10000034s { get; set; }

    public virtual DbSet<VwNameFilter10000037> VwNameFilter10000037s { get; set; }

    public virtual DbSet<VwNameFilter10000038> VwNameFilter10000038s { get; set; }

    public virtual DbSet<VwNameFilter10000040> VwNameFilter10000040s { get; set; }

    public virtual DbSet<VwNameFilter10000046> VwNameFilter10000046s { get; set; }

    public virtual DbSet<VwNameFilter10000048> VwNameFilter10000048s { get; set; }

    public virtual DbSet<VwNameFilter10000049> VwNameFilter10000049s { get; set; }

    public virtual DbSet<VwNameFilter10000058> VwNameFilter10000058s { get; set; }

    public virtual DbSet<VwOutlookExportName> VwOutlookExportNames { get; set; }

    public virtual DbSet<VwPlanningExportAddress> VwPlanningExportAddresses { get; set; }

    public virtual DbSet<VwPlanningExportInsured> VwPlanningExportInsureds { get; set; }

    public virtual DbSet<VwPlanningExportInvestment> VwPlanningExportInvestments { get; set; }

    public virtual DbSet<VwPlanningExportNameType> VwPlanningExportNameTypes { get; set; }

    public virtual DbSet<VwPlanningExportPhone> VwPlanningExportPhones { get; set; }

    public virtual DbSet<VwPlanningExportPolicy> VwPlanningExportPolicies { get; set; }

    public virtual DbSet<VwReportAccount> VwReportAccounts { get; set; }

    public virtual DbSet<VwReportAccountProfile> VwReportAccountProfiles { get; set; }

    public virtual DbSet<VwReportAccountRelatedName> VwReportAccountRelatedNames { get; set; }

    public virtual DbSet<VwReportAddress> VwReportAddresses { get; set; }

    public virtual DbSet<VwReportAnnuity> VwReportAnnuities { get; set; }

    public virtual DbSet<VwReportAttachForm> VwReportAttachForms { get; set; }

    public virtual DbSet<VwReportCalendarEvent> VwReportCalendarEvents { get; set; }

    public virtual DbSet<VwReportClient> VwReportClients { get; set; }

    public virtual DbSet<VwReportClientHhtotal> VwReportClientHhtotals { get; set; }

    public virtual DbSet<VwReportClientHhtotalsInforce> VwReportClientHhtotalsInforces { get; set; }

    public virtual DbSet<VwReportClientNameType> VwReportClientNameTypes { get; set; }

    public virtual DbSet<VwReportCommDistribution> VwReportCommDistributions { get; set; }

    public virtual DbSet<VwReportCommTransaction> VwReportCommTransactions { get; set; }

    public virtual DbSet<VwReportCommTransactionComment> VwReportCommTransactionComments { get; set; }

    public virtual DbSet<VwReportDisclosure> VwReportDisclosures { get; set; }

    public virtual DbSet<VwReportDownloadRegistration> VwReportDownloadRegistrations { get; set; }

    public virtual DbSet<VwReportEmail> VwReportEmails { get; set; }

    public virtual DbSet<VwReportFileHistory> VwReportFileHistories { get; set; }

    public virtual DbSet<VwReportFileHistoryAccount> VwReportFileHistoryAccounts { get; set; }

    public virtual DbSet<VwReportFileHistoryClient> VwReportFileHistoryClients { get; set; }

    public virtual DbSet<VwReportFileHistoryPolicy> VwReportFileHistoryPolicies { get; set; }

    public virtual DbSet<VwReportFlexFieldLabel> VwReportFlexFieldLabels { get; set; }

    public virtual DbSet<VwReportFlexFieldWorkflowLabel> VwReportFlexFieldWorkflowLabels { get; set; }

    public virtual DbSet<VwReportFlexFieldWorkflowValue> VwReportFlexFieldWorkflowValues { get; set; }

    public virtual DbSet<VwReportHouseholdMember> VwReportHouseholdMembers { get; set; }

    public virtual DbSet<VwReportHouseholdOf> VwReportHouseholdOfs { get; set; }

    public virtual DbSet<VwReportHouseholdTotal> VwReportHouseholdTotals { get; set; }

    public virtual DbSet<VwReportInsuranceNote> VwReportInsuranceNotes { get; set; }

    public virtual DbSet<VwReportInsuranceProduction> VwReportInsuranceProductions { get; set; }

    public virtual DbSet<VwReportInsuranceRelatedName> VwReportInsuranceRelatedNames { get; set; }

    public virtual DbSet<VwReportInsured> VwReportInsureds { get; set; }

    public virtual DbSet<VwReportInvestment> VwReportInvestments { get; set; }

    public virtual DbSet<VwReportInvestmentIce> VwReportInvestmentIces { get; set; }

    public virtual DbSet<VwReportInvestmentMgmt> VwReportInvestmentMgmts { get; set; }

    public virtual DbSet<VwReportInvestmentNewBiz> VwReportInvestmentNewBizs { get; set; }

    public virtual DbSet<VwReportInvestmentNote> VwReportInvestmentNotes { get; set; }

    public virtual DbSet<VwReportInvestmentSecurity> VwReportInvestmentSecurities { get; set; }

    public virtual DbSet<VwReportInvestmentTrailerComm> VwReportInvestmentTrailerComms { get; set; }

    public virtual DbSet<VwReportLink> VwReportLinks { get; set; }

    public virtual DbSet<VwReportMarket> VwReportMarkets { get; set; }

    public virtual DbSet<VwReportNameFile> VwReportNameFiles { get; set; }

    public virtual DbSet<VwReportNameNewBiz> VwReportNameNewBizs { get; set; }

    public virtual DbSet<VwReportNameNote> VwReportNameNotes { get; set; }

    public virtual DbSet<VwReportPerformance> VwReportPerformances { get; set; }

    public virtual DbSet<VwReportPerformanceMp> VwReportPerformanceMps { get; set; }

    public virtual DbSet<VwReportPhone> VwReportPhones { get; set; }

    public virtual DbSet<VwReportPolicyCoverage> VwReportPolicyCoverages { get; set; }

    public virtual DbSet<VwReportPolicyNewBiz> VwReportPolicyNewBizs { get; set; }

    public virtual DbSet<VwReportPolicyNewBizInsured> VwReportPolicyNewBizInsureds { get; set; }

    public virtual DbSet<VwReportRider> VwReportRiders { get; set; }

    public virtual DbSet<VwReportRiderInsured> VwReportRiderInsureds { get; set; }

    public virtual DbSet<VwReportSymbol> VwReportSymbols { get; set; }

    public virtual DbSet<VwReportTransaction> VwReportTransactions { get; set; }

    public virtual DbSet<VwReportWeb> VwReportWebs { get; set; }

    public virtual DbSet<VwReportWorkFlow> VwReportWorkFlows { get; set; }

    public virtual DbSet<VwReportWorkFlowEvent> VwReportWorkFlowEvents { get; set; }

    public virtual DbSet<VwReportWorkFlowMaster> VwReportWorkFlowMasters { get; set; }

    public virtual DbSet<VwReportWorkFlowMasterEvent> VwReportWorkFlowMasterEvents { get; set; }

    public virtual DbSet<VwReportWorkflowTeamMember> VwReportWorkflowTeamMembers { get; set; }

    public virtual DbSet<VwViewscreenReportClientInsurance> VwViewscreenReportClientInsurances { get; set; }

    public virtual DbSet<VwViewscreenReportPolicyCommission> VwViewscreenReportPolicyCommissions { get; set; }

    public virtual DbSet<VwViewscreenReportPolicyCommissionsAgency> VwViewscreenReportPolicyCommissionsAgencies { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Aaaddress>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAADdr");

            entity.ToTable("AAAddress", tb =>
                {
                    tb.HasTrigger("tg_AddressDelete");
                    tb.HasTrigger("tg_AddressUpdate");
                    tb.HasTrigger("tg_InsertAddressCheckZip");
                    tb.HasTrigger("tg_UpdateAddressCheckZip");
                });

            entity.HasIndex(e => e.IKeyHouseHold, "AAAddress_ByHouseHold");

            entity.HasIndex(e => e.Icodeaddress, "AAAddress_byAddressType");

            entity.HasIndex(e => e.Ccity, "IX_AAAddress_ByCity");

            entity.HasIndex(e => e.Czip, "IX_AAAddress_ByZip");

            entity.HasIndex(e => e.Ikeyid, "IX_AAAddress_NameLookup").IsUnique();

            entity.HasIndex(e => e.Cstate, "IX_AAAddress_byState");

            entity.HasIndex(e => e.Cstreet1, "IX_AAAddress_byStreet1");

            entity.HasIndex(e => e.Ctitle, "IX_AAAddress_byTitle");

            entity.HasIndex(e => e.GUid, "by_Guid_AAAddr").IsUnique();

            entity.HasIndex(e => e.Ikeyclient, "by_client");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagPrimary).HasColumnName("bFlagPrimary");
            entity.Property(e => e.CBusinessName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cBusinessName");
            entity.Property(e => e.CCounty)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCounty");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Caddressee)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("caddressee");
            entity.Property(e => e.Caddrpoint)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("caddrpoint");
            entity.Property(e => e.Ccity)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccity");
            entity.Property(e => e.Ccountry)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccountry");
            entity.Property(e => e.Cgreet)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cgreet");
            entity.Property(e => e.Croute)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("croute");
            entity.Property(e => e.Cstate)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstate");
            entity.Property(e => e.Cstreet1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstreet1");
            entity.Property(e => e.Cstreet2)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstreet2");
            entity.Property(e => e.Cstreet3)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstreet3");
            entity.Property(e => e.Ctitle)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ctitle");
            entity.Property(e => e.Czip)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("czip");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.IKeyHouseHold).HasColumnName("iKeyHouseHold");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IUpdateVersion).HasColumnName("iUpdateVersion");
            entity.Property(e => e.Icodeaddress).HasColumnName("icodeaddress");
            entity.Property(e => e.Ikeyclient).HasColumnName("ikeyclient");
            entity.Property(e => e.MComment)
                .IsUnicode(false)
                .HasColumnName("mComment");

            entity.HasOne(d => d.IkeyclientNavigation).WithMany(p => p.Aaaddresses)
                .HasForeignKey(d => d.Ikeyclient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAAddress_AAName");
        });

        modelBuilder.Entity<AaaddressZip>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAAddressZip");

            entity.HasIndex(e => e.GUid, "by_Guid_AAAddressZip");

            entity.HasIndex(e => e.CZip, "by_cZip_AAAddress").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CCity)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCity");
            entity.Property(e => e.CCountry)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCountry");
            entity.Property(e => e.CCounty)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCounty");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CState)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cState");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CZip)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cZip");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaaddressZipCustom>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAAddressZipCustom_ByKey");

            entity.ToTable("AAAddressZipCustom");

            entity.HasIndex(e => e.GUid, "AAAddressZipCustom_ByGuid").IsUnique();

            entity.HasIndex(e => e.CZip, "AAAddressZipCustom_ByZip").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CCity)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCity");
            entity.Property(e => e.CCountry)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCountry");
            entity.Property(e => e.CCounty)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCounty");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CState)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cState");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CZip)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cZip");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaapplicationInfo>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAApplicationInfo");

            entity.HasIndex(e => e.IKeyClient, "AAApplicationInfo_ByClient");

            entity.HasIndex(e => e.GUid, "AAApplicationInfo_ByGuid").IsUnique();

            entity.HasIndex(e => e.ICodeAccountantPhone, "IX_AAApplicationInfo");

            entity.HasIndex(e => e.ICodeAddress, "IX_AAApplicationInfo_1");

            entity.HasIndex(e => e.ICodeInsuredAddress, "IX_AAApplicationInfo_10");

            entity.HasIndex(e => e.ICodeJointAddress, "IX_AAApplicationInfo_11");

            entity.HasIndex(e => e.ICodePrimaryObjective, "IX_AAApplicationInfo_12");

            entity.HasIndex(e => e.ICodeRegistrationType, "IX_AAApplicationInfo_13");

            entity.HasIndex(e => e.ICodeRiskTolerance, "IX_AAApplicationInfo_14");

            entity.HasIndex(e => e.ICodeSecondaryObjective, "IX_AAApplicationInfo_15");

            entity.HasIndex(e => e.ICodeSpouseAddress, "IX_AAApplicationInfo_16");

            entity.HasIndex(e => e.ICodeTimeHorizon, "IX_AAApplicationInfo_17");

            entity.HasIndex(e => e.IKeyAccountant, "IX_AAApplicationInfo_18");

            entity.HasIndex(e => e.IKeyAddress, "IX_AAApplicationInfo_19");

            entity.HasIndex(e => e.ICodeAttorneyPhone, "IX_AAApplicationInfo_2");

            entity.HasIndex(e => e.IKeyAccountantPhone, "IX_AAApplicationInfo_20");

            entity.HasIndex(e => e.IKeyAttorney, "IX_AAApplicationInfo_21");

            entity.HasIndex(e => e.IKeyAttorneyPhone, "IX_AAApplicationInfo_22");

            entity.HasIndex(e => e.IKeyBank, "IX_AAApplicationInfo_23");

            entity.HasIndex(e => e.IKeyBankPhone, "IX_AAApplicationInfo_24");

            entity.HasIndex(e => e.IKeyBankAddress, "IX_AAApplicationInfo_25");

            entity.HasIndex(e => e.IKeyBeneficiary1, "IX_AAApplicationInfo_26");

            entity.HasIndex(e => e.IKeyBeneficiary2, "IX_AAApplicationInfo_27");

            entity.HasIndex(e => e.IKeyBeneficiary3, "IX_AAApplicationInfo_28");

            entity.HasIndex(e => e.IKeyBeneficiaryContingent, "IX_AAApplicationInfo_29");

            entity.HasIndex(e => e.ICodeBankAccountType, "IX_AAApplicationInfo_3");

            entity.HasIndex(e => e.IKeyEmployer, "IX_AAApplicationInfo_30");

            entity.HasIndex(e => e.IKeyEmployerAddress, "IX_AAApplicationInfo_31");

            entity.HasIndex(e => e.IKeyInsuredApplicant, "IX_AAApplicationInfo_32");

            entity.HasIndex(e => e.IKeyInsuredEmployer, "IX_AAApplicationInfo_33");

            entity.HasIndex(e => e.IKeyJointAddress, "IX_AAApplicationInfo_34");

            entity.HasIndex(e => e.IKeyJointEmployer, "IX_AAApplicationInfo_35");

            entity.HasIndex(e => e.IKeyJointApplicant, "IX_AAApplicationInfo_36");

            entity.HasIndex(e => e.IKeyJointEmployerAddress, "IX_AAApplicationInfo_37");

            entity.HasIndex(e => e.IKeyJointLegalAddress, "IX_AAApplicationInfo_38");

            entity.HasIndex(e => e.ICodeBankAddress, "IX_AAApplicationInfo_4");

            entity.HasIndex(e => e.IKeyLegalAddress, "IX_AAApplicationInfo_40");

            entity.HasIndex(e => e.IKeySpouseAddress, "IX_AAApplicationInfo_41");

            entity.HasIndex(e => e.IKeySpouseEmployer, "IX_AAApplicationInfo_42");

            entity.HasIndex(e => e.IKeySpouseEmployerAddress, "IX_AAApplicationInfo_43");

            entity.HasIndex(e => e.IKeySpouseLegalAddress, "IX_AAApplicationInfo_44");

            entity.HasIndex(e => e.IKeyTrustOther, "IX_AAApplicationInfo_45");

            entity.HasIndex(e => e.ICodeBankPhone, "IX_AAApplicationInfo_5");

            entity.HasIndex(e => e.ICodeBeneficiary1Relation, "IX_AAApplicationInfo_6");

            entity.HasIndex(e => e.ICodeBeneficiary2Relation, "IX_AAApplicationInfo_7");

            entity.HasIndex(e => e.ICodeBeneficiary3Relation, "IX_AAApplicationInfo_8");

            entity.HasIndex(e => e.ICodeBeneficiaryContingentRelation, "IX_AAApplicationInfo_9");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CBankAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cBankAccountNumber");
            entity.Property(e => e.CBankBranch)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cBankBranch");
            entity.Property(e => e.CBankRoutingNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cBankRoutingNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRetire)
                .HasColumnType("date")
                .HasColumnName("dRetire");
            entity.Property(e => e.DTrustDate)
                .HasColumnType("date")
                .HasColumnName("dTrustDate");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAccountantPhone).HasColumnName("iCodeAccountantPhone");
            entity.Property(e => e.ICodeAddress).HasColumnName("iCodeAddress");
            entity.Property(e => e.ICodeAttorneyPhone).HasColumnName("iCodeAttorneyPhone");
            entity.Property(e => e.ICodeBankAccountType).HasColumnName("iCodeBankAccountType");
            entity.Property(e => e.ICodeBankAddress).HasColumnName("iCodeBankAddress");
            entity.Property(e => e.ICodeBankPhone).HasColumnName("iCodeBankPhone");
            entity.Property(e => e.ICodeBeneficiary1Relation).HasColumnName("iCodeBeneficiary1Relation");
            entity.Property(e => e.ICodeBeneficiary2Relation).HasColumnName("iCodeBeneficiary2Relation");
            entity.Property(e => e.ICodeBeneficiary3Relation).HasColumnName("iCodeBeneficiary3Relation");
            entity.Property(e => e.ICodeBeneficiaryContingentRelation).HasColumnName("iCodeBeneficiaryContingentRelation");
            entity.Property(e => e.ICodeCompanyAddress).HasColumnName("iCodeCompanyAddress");
            entity.Property(e => e.ICodeInsuredAddress).HasColumnName("iCodeInsuredAddress");
            entity.Property(e => e.ICodeJointAddress).HasColumnName("iCodeJointAddress");
            entity.Property(e => e.ICodePrimaryObjective).HasColumnName("iCodePrimaryObjective");
            entity.Property(e => e.ICodeRegistrationType).HasColumnName("iCodeRegistrationType");
            entity.Property(e => e.ICodeRiskTolerance).HasColumnName("iCodeRiskTolerance");
            entity.Property(e => e.ICodeSecondaryObjective).HasColumnName("iCodeSecondaryObjective");
            entity.Property(e => e.ICodeSpouseAddress).HasColumnName("iCodeSpouseAddress");
            entity.Property(e => e.ICodeTimeHorizon).HasColumnName("iCodeTimeHorizon");
            entity.Property(e => e.ICodeTrustAddress).HasColumnName("iCodeTrustAddress");
            entity.Property(e => e.IKeyAccountant).HasColumnName("iKeyAccountant");
            entity.Property(e => e.IKeyAccountantPhone).HasColumnName("iKeyAccountantPhone");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyAttorney).HasColumnName("iKeyAttorney");
            entity.Property(e => e.IKeyAttorneyPhone).HasColumnName("iKeyAttorneyPhone");
            entity.Property(e => e.IKeyBank).HasColumnName("iKeyBank");
            entity.Property(e => e.IKeyBankAddress).HasColumnName("iKeyBankAddress");
            entity.Property(e => e.IKeyBankPhone).HasColumnName("iKeyBankPhone");
            entity.Property(e => e.IKeyBeneficiary1).HasColumnName("iKeyBeneficiary1");
            entity.Property(e => e.IKeyBeneficiary2).HasColumnName("iKeyBeneficiary2");
            entity.Property(e => e.IKeyBeneficiary3).HasColumnName("iKeyBeneficiary3");
            entity.Property(e => e.IKeyBeneficiaryContingent).HasColumnName("iKeyBeneficiaryContingent");
            entity.Property(e => e.IKeyClient).HasColumnName("iKeyClient");
            entity.Property(e => e.IKeyCompany).HasColumnName("iKeyCompany");
            entity.Property(e => e.IKeyEmployer).HasColumnName("iKeyEmployer");
            entity.Property(e => e.IKeyEmployerAddress).HasColumnName("iKeyEmployerAddress");
            entity.Property(e => e.IKeyInsuredApplicant).HasColumnName("iKeyInsuredApplicant");
            entity.Property(e => e.IKeyInsuredEmployer).HasColumnName("iKeyInsuredEmployer");
            entity.Property(e => e.IKeyJointAddress).HasColumnName("iKeyJointAddress");
            entity.Property(e => e.IKeyJointApplicant).HasColumnName("iKeyJointApplicant");
            entity.Property(e => e.IKeyJointEmployer).HasColumnName("iKeyJointEmployer");
            entity.Property(e => e.IKeyJointEmployerAddress).HasColumnName("iKeyJointEmployerAddress");
            entity.Property(e => e.IKeyJointLegalAddress).HasColumnName("iKeyJointLegalAddress");
            entity.Property(e => e.IKeyLegalAddress).HasColumnName("iKeyLegalAddress");
            entity.Property(e => e.IKeySpouseAddress).HasColumnName("iKeySpouseAddress");
            entity.Property(e => e.IKeySpouseEmployer).HasColumnName("iKeySpouseEmployer");
            entity.Property(e => e.IKeySpouseEmployerAddress).HasColumnName("iKeySpouseEmployerAddress");
            entity.Property(e => e.IKeySpouseLegalAddress).HasColumnName("iKeySpouseLegalAddress");
            entity.Property(e => e.IKeyTrustOther).HasColumnName("iKeyTrustOther");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AabenchMarkReport>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AABenchMarkReport");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.BFlagExpensesIncluded).HasColumnName("bFlagExpensesIncluded");
            entity.Property(e => e.BFlagFeesIncluded).HasColumnName("bFlagFeesIncluded");
            entity.Property(e => e.CCalculationsResults)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCalculationsResults");
            entity.Property(e => e.CIndex1Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cIndex1Name");
            entity.Property(e => e.CIndex2Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cIndex2Name");
            entity.Property(e => e.CLabel)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cLabel");
            entity.Property(e => e.CLevelCalculations)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cLevelCalculations");
            entity.Property(e => e.CPeriodCalculations)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cPeriodCalculations");
            entity.Property(e => e.DReportEnd)
                .HasColumnType("date")
                .HasColumnName("dReportEnd");
            entity.Property(e => e.DReportStart)
                .HasColumnType("date")
                .HasColumnName("dReportStart");
            entity.Property(e => e.ICodeCalculationResults).HasColumnName("iCodeCalculationResults");
            entity.Property(e => e.IKeyIndex1).HasColumnName("iKeyIndex1");
            entity.Property(e => e.IKeyIndex2).HasColumnName("iKeyIndex2");
            entity.Property(e => e.IKeyTopLevel).HasColumnName("iKeyTopLevel");
            entity.Property(e => e.NComparisonIndexDwr1)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("nComparisonIndexDWR1");
            entity.Property(e => e.NComparisonIndexDwr2)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("nComparisonIndexDWR2");
            entity.Property(e => e.NComparisonIndexTwr1)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("nComparisonIndexTWR1");
            entity.Property(e => e.NComparisonIndexTwr2)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("nComparisonIndexTWR2");
            entity.Property(e => e.NDollarWeighedRor)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nDollarWeighedROR");
            entity.Property(e => e.NIndex1Return)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nIndex1Return");
            entity.Property(e => e.NIndex2Return)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nIndex2Return");
            entity.Property(e => e.NTimeWeightedIndex)
                .HasColumnType("decimal(18, 12)")
                .HasColumnName("nTimeWeightedIndex");
            entity.Property(e => e.NTimeWeightedRor)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nTimeWeightedROR");
            entity.Property(e => e.YAverageDailyBalance)
                .HasColumnType("money")
                .HasColumnName("yAverageDailyBalance");
            entity.Property(e => e.YEndValue)
                .HasColumnType("money")
                .HasColumnName("yEndValue");
            entity.Property(e => e.YNetContributions)
                .HasColumnType("money")
                .HasColumnName("yNetContributions");
            entity.Property(e => e.YStartValue)
                .HasColumnType("money")
                .HasColumnName("yStartValue");
            entity.Property(e => e.YTotalGain)
                .HasColumnType("money")
                .HasColumnName("yTotalGain");
        });

        modelBuilder.Entity<AabenchMarkReportAccount>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AABenchMarkReportAccounts");

            entity.HasIndex(e => e.IKeyAccount, "IX_AABenchMarkReportAccounts_byAcct");

            entity.HasIndex(e => e.IKeyBenchMarkReport, "IX_BenchmarkAccount_ByReport");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.CAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAccountNumber");
            entity.Property(e => e.IKeyAccount).HasColumnName("iKeyAccount");
            entity.Property(e => e.IKeyBenchMarkReport).HasColumnName("iKeyBenchMarkReport");
            entity.Property(e => e.NComparisonIndexDwr1)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("nComparisonIndexDWR1");
            entity.Property(e => e.NComparisonIndexDwr2)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("nComparisonIndexDWR2");
            entity.Property(e => e.NComparisonIndexTwr1)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("nComparisonIndexTWR1");
            entity.Property(e => e.NComparisonIndexTwr2)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("nComparisonIndexTWR2");
            entity.Property(e => e.NDollarWeightedRor)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nDollarWeightedROR");
            entity.Property(e => e.NTimeWeightedIndex)
                .HasColumnType("decimal(18, 12)")
                .HasColumnName("nTimeWeightedIndex");
            entity.Property(e => e.NTimeWeightedRor)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nTimeWeightedROR");
            entity.Property(e => e.YAverageDailyBalance)
                .HasColumnType("money")
                .HasColumnName("yAverageDailyBalance");
            entity.Property(e => e.YAverageMarketValue)
                .HasColumnType("money")
                .HasColumnName("yAverageMarketValue");
            entity.Property(e => e.YEndingMarketValue)
                .HasColumnType("money")
                .HasColumnName("yEndingMarketValue");
            entity.Property(e => e.YNetContributions)
                .HasColumnType("money")
                .HasColumnName("yNetContributions");
            entity.Property(e => e.YStartingMarketValue)
                .HasColumnType("money")
                .HasColumnName("yStartingMarketValue");
            entity.Property(e => e.YTotalGain)
                .HasColumnType("money")
                .HasColumnName("yTotalGain");
        });

        modelBuilder.Entity<AabenchMarkReportInvestment>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AABenchMarkReportInvestments");

            entity.HasIndex(e => e.IKeyAccount, "IX_AABenchMarkReportInvestments_ByAcct");

            entity.HasIndex(e => e.IKeyNvst, "IX_AABenchMarkReportInvestments_ByNvst");

            entity.HasIndex(e => e.IKeyBenchMarkReport, "IX_BenchmarkNvst_ByReport");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.DClose)
                .HasColumnType("date")
                .HasColumnName("dClose");
            entity.Property(e => e.DProcess)
                .HasColumnType("date")
                .HasColumnName("dProcess");
            entity.Property(e => e.DProcessStart)
                .HasColumnType("date")
                .HasColumnName("dProcessStart");
            entity.Property(e => e.IKeyAccount).HasColumnName("iKeyAccount");
            entity.Property(e => e.IKeyAcct).HasColumnName("iKeyAcct");
            entity.Property(e => e.IKeyBenchMarkReport).HasColumnName("iKeyBenchMarkReport");
            entity.Property(e => e.IKeyNvst).HasColumnName("iKeyNvst");
            entity.Property(e => e.IkeyBenchMarkAccount).HasColumnName("ikeyBenchMarkAccount");
            entity.Property(e => e.NComparisonIndexDwr1)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("nComparisonIndexDWR1");
            entity.Property(e => e.NComparisonIndexDwr2)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("nComparisonIndexDWR2");
            entity.Property(e => e.NComparisonIndexTwr1)
                .HasColumnType("decimal(14, 4)")
                .HasColumnName("nComparisonIndexTWR1");
            entity.Property(e => e.NComparisonIndexTwr2)
                .HasColumnType("decimal(14, 4)")
                .HasColumnName("nComparisonIndexTWR2");
            entity.Property(e => e.NDollarWeightedRor)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nDollarWeightedROR");
            entity.Property(e => e.NTimeWeightedIndex)
                .HasColumnType("decimal(18, 12)")
                .HasColumnName("nTimeWeightedIndex");
            entity.Property(e => e.NTimeWeightedRor)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nTimeWeightedROR");
            entity.Property(e => e.YAverageDailyBalance)
                .HasColumnType("money")
                .HasColumnName("yAverageDailyBalance");
            entity.Property(e => e.YAverageMarketValue)
                .HasColumnType("money")
                .HasColumnName("yAverageMarketValue");
            entity.Property(e => e.YEndingMarketValue)
                .HasColumnType("money")
                .HasColumnName("yEndingMarketValue");
            entity.Property(e => e.YNetContributions)
                .HasColumnType("money")
                .HasColumnName("yNetContributions");
            entity.Property(e => e.YStartingMarketValue)
                .HasColumnType("money")
                .HasColumnName("yStartingMarketValue");
            entity.Property(e => e.YTotalGain)
                .HasColumnType("money")
                .HasColumnName("yTotalGain");
        });

        modelBuilder.Entity<AabenchMarkReportValue>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AABenchMarkReportValues");

            entity.HasIndex(e => e.IKeyBenchMarkReport, "IX_BenchmarkValues_ByReport");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.DPeriod)
                .HasColumnType("date")
                .HasColumnName("dPeriod");
            entity.Property(e => e.IKeyBenchMarkReport).HasColumnName("iKeyBenchMarkReport");
            entity.Property(e => e.NDollarWeightedRor)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nDollarWeightedROR");
            entity.Property(e => e.NIndex1Return)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nIndex1Return");
            entity.Property(e => e.NIndex2Return)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nIndex2Return");
            entity.Property(e => e.NTimeWeightedIndex)
                .HasColumnType("decimal(18, 12)")
                .HasColumnName("nTimeWeightedIndex");
            entity.Property(e => e.NTimeWeightedIndexReportLevel)
                .HasColumnType("decimal(18, 12)")
                .HasColumnName("nTimeWeightedIndexReportLevel");
            entity.Property(e => e.NTimeWeightedRor)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("nTimeWeightedROR");
            entity.Property(e => e.YAverageDailyBalance)
                .HasColumnType("money")
                .HasColumnName("yAverageDailyBalance");
            entity.Property(e => e.YNetContributions)
                .HasColumnType("money")
                .HasColumnName("yNetContributions");
            entity.Property(e => e.YTotalGain)
                .HasColumnType("money")
                .HasColumnName("yTotalGain");
            entity.Property(e => e.YValue)
                .HasColumnType("money")
                .HasColumnName("yValue");
        });

        modelBuilder.Entity<AacalEvent>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAACalEv");

            entity.ToTable("AACalEvent", tb => tb.HasTrigger("tg_AACalEventDelete"));

            entity.HasIndex(e => e.DLastChange, "AACalEvent_byLastChangeDate");

            entity.HasIndex(e => e.IKeyNote, "AACalEvent_byNote");

            entity.HasIndex(e => e.Ipriority, "AACalEvent_byPriority");

            entity.HasIndex(e => e.IRecurOption, "AACalEvent_byRecurOption");

            entity.HasIndex(e => e.ICodeEventSubType, "AACalEvent_bySubType");

            entity.HasIndex(e => e.Dbegin, "by_date");

            entity.HasIndex(e => e.GUid, "by_serial_AACalEv").IsUnique();

            entity.HasIndex(e => e.Ikeysource, "by_source");

            entity.HasIndex(e => e.Isourcetype, "by_stype");

            entity.HasIndex(e => e.ICodeEventType, "by_type");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagMultiDayEvent).HasColumnName("bFlagMultiDayEvent");
            entity.Property(e => e.BFlagPrivate).HasColumnName("bFlagPrivate");
            entity.Property(e => e.BFlagSkipRollover).HasColumnName("bFlagSkipRollover");
            entity.Property(e => e.BIgnoreDst).HasColumnName("bIgnoreDST");
            entity.Property(e => e.BRecurUntilDateSpecified).HasColumnName("bRecurUntilDateSpecified");
            entity.Property(e => e.CLocation)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cLocation");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cdescription)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cdescription");
            entity.Property(e => e.Cwarned)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cwarned");
            entity.Property(e => e.DDue)
                .HasPrecision(6)
                .HasColumnName("dDue");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DOriginal)
                .HasPrecision(6)
                .HasColumnName("dOriginal");
            entity.Property(e => e.DRecurExceptionOriginalDate)
                .HasPrecision(6)
                .HasColumnName("dRecurExceptionOriginalDate");
            entity.Property(e => e.DRecurUntil)
                .HasPrecision(6)
                .HasColumnName("dRecurUntil");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dbegin)
                .HasPrecision(6)
                .HasColumnName("dbegin");
            entity.Property(e => e.Dend)
                .HasPrecision(6)
                .HasColumnName("dend");
            entity.Property(e => e.Dnextwarning)
                .HasPrecision(6)
                .HasColumnName("dnextwarning");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeEventSubType).HasColumnName("iCodeEventSubType");
            entity.Property(e => e.ICodeEventType).HasColumnName("iCodeEventType");
            entity.Property(e => e.IKeyNote).HasColumnName("iKeyNote");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRecurDayOfMonth).HasColumnName("iRecurDayOfMonth");
            entity.Property(e => e.IRecurDayOfWeekMask).HasColumnName("iRecurDayOfWeekMask");
            entity.Property(e => e.IRecurExceptionParent).HasColumnName("iRecurExceptionParent");
            entity.Property(e => e.IRecurInstance).HasColumnName("iRecurInstance");
            entity.Property(e => e.IRecurInterval).HasColumnName("iRecurInterval");
            entity.Property(e => e.IRecurMonthOfYear).HasColumnName("iRecurMonthOfYear");
            entity.Property(e => e.IRecurOption).HasColumnName("iRecurOption");
            entity.Property(e => e.Icolor).HasColumnName("icolor");
            entity.Property(e => e.Ikeysource).HasColumnName("ikeysource");
            entity.Property(e => e.Ipriority).HasColumnName("ipriority");
            entity.Property(e => e.Isourcetype).HasColumnName("isourcetype");
            entity.Property(e => e.MRecurExceptionsXml)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mRecurExceptionsXML");
        });

        modelBuilder.Entity<AacalEventDetail>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACalEventDetail", tb => tb.HasTrigger("tg_AACalEventDetailDelete"));

            entity.HasIndex(e => e.DDue, "AACalEventDetai_ByDueDate");

            entity.HasIndex(e => new { e.BFlagCompleted, e.DDue }, "AACalEventDetail_ByCompletedAndDue");

            entity.HasIndex(e => e.IKeyException, "AACalEventDetail_ByException");

            entity.HasIndex(e => new { e.DBegin, e.DEnd }, "AACalEventDetail_byBegin");

            entity.HasIndex(e => e.DJustDate, "AACalEventDetail_byDate");

            entity.HasIndex(e => e.IKeyEvent, "AACalEventDetail_byEvent");

            entity.HasIndex(e => e.GUid, "AACalEventDetail_byGuid").IsUnique();

            entity.HasIndex(e => new { e.BFlagCompleted, e.DJustDate }, "IX_AACalEventDetail_Completed_justdate");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyId");
            entity.Property(e => e.BFlagCompleted).HasColumnName("bFlagCompleted");
            entity.Property(e => e.BFlagEndsAtMidnight).HasColumnName("bFlagEndsAtMidnight");
            entity.Property(e => e.BFlagRecurring).HasColumnName("bFlagRecurring");
            entity.Property(e => e.BFlagStartsAtZero).HasColumnName("bFlagStartsAtZero");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DBegin)
                .HasPrecision(6)
                .HasColumnName("dBegin");
            entity.Property(e => e.DDue)
                .HasPrecision(6)
                .HasColumnName("dDue");
            entity.Property(e => e.DEnd)
                .HasPrecision(6)
                .HasColumnName("dEnd");
            entity.Property(e => e.DJustDate)
                .HasPrecision(6)
                .HasColumnName("dJustDate");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IInstance).HasColumnName("iInstance");
            entity.Property(e => e.IKeyEvent).HasColumnName("iKeyEvent");
            entity.Property(e => e.IKeyException).HasColumnName("iKeyException");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyEventNavigation).WithMany(p => p.AacalEventDetails)
                .HasForeignKey(d => d.IKeyEvent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AACalEventDetail_AACalEvent");
        });

        modelBuilder.Entity<AacalEventException>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACalEventException");

            entity.HasIndex(e => e.DJustDate, "AACalEventException_byDate");

            entity.HasIndex(e => e.IKeyEvent, "AACalEventException_byEvent");

            entity.HasIndex(e => e.GUid, "AACalEventException_byGuid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagCompleted).HasColumnName("bFlagCompleted");
            entity.Property(e => e.BFlagRemove).HasColumnName("bFlagRemove");
            entity.Property(e => e.BFlagRolloverNotification).HasColumnName("bFlagRolloverNotification");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DJustDate)
                .HasColumnType("date")
                .HasColumnName("dJustDate");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DNewBegin)
                .HasPrecision(6)
                .HasColumnName("dNewBegin");
            entity.Property(e => e.DNewDue)
                .HasPrecision(6)
                .HasColumnName("dNewDue");
            entity.Property(e => e.DNewEnd)
                .HasPrecision(6)
                .HasColumnName("dNewEnd");
            entity.Property(e => e.DOriginalBegin)
                .HasPrecision(6)
                .HasColumnName("dOriginalBegin");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidProcess)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUidProcess");
            entity.Property(e => e.IInstance).HasColumnName("iInstance");
            entity.Property(e => e.IKeyEvent).HasColumnName("iKeyEvent");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AacalEventNameLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACalEventNameLink");

            entity.HasIndex(e => e.IKeyName, "AACalEventNameLink_ByName");

            entity.HasIndex(e => e.IKeyEvent, "AACalEventNameLink_byEvent");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyEvent).HasColumnName("iKeyEvent");
            entity.Property(e => e.IKeyName).HasColumnName("iKeyName");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AacalEventNotification>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACalEventNotification");

            entity.HasIndex(e => new { e.DNextNotify, e.BFlagNotified }, "AACalEventNotification_ByDate");

            entity.HasIndex(e => e.IKeyEvent, "AACalEventNotification_ByEvent");

            entity.HasIndex(e => e.GUid, "AACalEventNotification_ByGuid").IsUnique();

            entity.HasIndex(e => e.IKeyEventDetail, "AACalEventNotification_byDetail");

            entity.HasIndex(e => new { e.IKeyCalUser, e.BFlagNotified, e.DNextNotify }, "AACalEventNotification_byUser");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyId");
            entity.Property(e => e.BFlagAcknowledged).HasColumnName("bFlagAcknowledged");
            entity.Property(e => e.BFlagNotified).HasColumnName("bFlagNotified");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DNextNotify)
                .HasPrecision(6)
                .HasColumnName("dNextNotify");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCalUser).HasColumnName("iKeyCalUser");
            entity.Property(e => e.IKeyEvent).HasColumnName("iKeyEvent");
            entity.Property(e => e.IKeyEventDetail).HasColumnName("iKeyEventDetail");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyCalUserNavigation).WithMany(p => p.AacalEventNotifications)
                .HasForeignKey(d => d.IKeyCalUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AACalEventNotification_AACalUser");

            entity.HasOne(d => d.IKeyEventNavigation).WithMany(p => p.AacalEventNotifications)
                .HasForeignKey(d => d.IKeyEvent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AACalEventNotification_AACalEvent");

            entity.HasOne(d => d.IKeyEventDetailNavigation).WithMany(p => p.AacalEventNotifications)
                .HasForeignKey(d => d.IKeyEventDetail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AACalEventNotification_AACalEventDetail");
        });

        modelBuilder.Entity<AacalEventNotificationLog>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACalEventNotificationLog");

            entity.HasIndex(e => e.IKeyUser, "IX_AACalEventNotificationLog_ByNotification");

            entity.HasIndex(e => e.IKeyEvent, "IX_AACalEventNotificationLog_event");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.IKeyEvent).HasColumnName("iKeyEvent");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.INotificationType).HasColumnName("iNotificationType");
            entity.Property(e => e.TAcknowledged)
                .HasPrecision(6)
                .HasColumnName("tAcknowledged");
            entity.Property(e => e.TEvent)
                .HasPrecision(6)
                .HasColumnName("tEvent");
            entity.Property(e => e.TNotified)
                .HasPrecision(6)
                .HasColumnName("tNotified");
        });

        modelBuilder.Entity<AacalUser>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAACalUser");

            entity.ToTable("AACalUser", tb => tb.HasTrigger("tg_AACalUserDelete"));

            entity.HasIndex(e => e.GUid, "by_guid_AACalUser").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagAppointmentsRequireName).HasColumnName("bFlagAppointmentsRequireName");
            entity.Property(e => e.BFlagGroupWeekEnds).HasColumnName("bFlagGroupWeekEnds");
            entity.Property(e => e.BFlagShowAppointments).HasColumnName("bFlagShowAppointments");
            entity.Property(e => e.BFlagShowCalls).HasColumnName("bFlagShowCalls");
            entity.Property(e => e.BFlagShowDepartment)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowDepartment");
            entity.Property(e => e.BFlagShowDepartmentTaskList)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowDepartmentTaskList");
            entity.Property(e => e.BFlagShowTasks).HasColumnName("bFlagShowTasks");
            entity.Property(e => e.BFlagShowWorkflow)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowWorkflow");
            entity.Property(e => e.BFlagShowWorkflowTaskList)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowWorkflowTaskList");
            entity.Property(e => e.Bflagaudiowarning).HasColumnName("bflagaudiowarning");
            entity.Property(e => e.Bflagrolltask).HasColumnName("bflagrolltask");
            entity.Property(e => e.Bflagwarnuser).HasColumnName("bflagwarnuser");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWavfileName)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cWAVFileName");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cname");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dlastroll)
                .HasColumnType("date")
                .HasColumnName("dlastroll");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IAppointmentColor).HasColumnName("iAppointmentColor");
            entity.Property(e => e.ICallColor).HasColumnName("iCallColor");
            entity.Property(e => e.IDayOfWeekStart).HasColumnName("iDayOfWeekStart");
            entity.Property(e => e.IDefTaskTime)
                .HasDefaultValueSql("((540))")
                .HasColumnName("iDefTaskTime");
            entity.Property(e => e.IEventDayColor).HasColumnName("iEventDayColor");
            entity.Property(e => e.IKeyrollid)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("iKeyrollid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISoundId).HasColumnName("iSoundID");
            entity.Property(e => e.ITaskColor).HasColumnName("iTaskColor");
            entity.Property(e => e.ITimeDisplayIncrement).HasColumnName("iTimeDisplayIncrement");
            entity.Property(e => e.IUserScheduleColor).HasColumnName("iUserScheduleColor");
            entity.Property(e => e.Idefapptlen).HasColumnName("idefapptlen");
            entity.Property(e => e.Idefpriority).HasColumnName("idefpriority");
            entity.Property(e => e.Itimercheck).HasColumnName("itimercheck");
            entity.Property(e => e.Iwarninadv).HasColumnName("iwarninadv");
        });

        modelBuilder.Entity<AacalUserAccess>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAACalAcc");

            entity.ToTable("AACalUserAccess");

            entity.HasIndex(e => new { e.Ikeyuser, e.Ikeycal }, "AACalUserAccess_ByUserCal").IsUnique();

            entity.HasIndex(e => e.Ikeycal, "by_cal");

            entity.HasIndex(e => e.GUid, "by_guid_AACalAcc").IsUnique();

            entity.HasIndex(e => e.Ikeyuser, "by_user");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Ikeycal).HasColumnName("ikeycal");
            entity.Property(e => e.Ikeyuser).HasColumnName("ikeyuser");

            entity.HasOne(d => d.IkeycalNavigation).WithMany(p => p.AacalUserAccesses)
                .HasForeignKey(d => d.Ikeycal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Calender");

            entity.HasOne(d => d.IkeyuserNavigation).WithMany(p => p.AacalUserAccesses)
                .HasForeignKey(d => d.Ikeyuser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AACalAccess_AAUser");
        });

        modelBuilder.Entity<AacalUserEventLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACalUserEventLink", tb => tb.HasTrigger("tg_AACalUserEventLinkDelete"));

            entity.HasIndex(e => e.IKeyCalendar, "by_Calendar_AACalUserEventLink");

            entity.HasIndex(e => e.IKeyEvent, "by_Event_AACalUserEventLink");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCalendar).HasColumnName("iKeyCalendar");
            entity.Property(e => e.IKeyEvent).HasColumnName("iKeyEvent");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
            entity.Property(e => e.IStackOrder).HasColumnName("iStackOrder");
        });

        modelBuilder.Entity<Aacode>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAACode");

            entity.ToTable("AACode", tb =>
                {
                    tb.HasTrigger("tg_CodeDelete");
                    tb.HasTrigger("tg_CodeUpdate");
                });

            entity.HasIndex(e => new { e.IkeyCodeType, e.Ccodeid }, "AACode_byTypeAndCode");

            entity.HasIndex(e => new { e.IkeyCodeType, e.BFlagDeleted }, "AACode_by_type");

            entity.HasIndex(e => e.Cdescription, "AACode_cDescription");

            entity.HasIndex(e => e.Csyscode, "by_SysId");

            entity.HasIndex(e => e.GUid, "by_guid_AACode").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagDeleted).HasColumnName("bFlagDeleted");
            entity.Property(e => e.Bflagvisible).HasColumnName("bflagvisible");
            entity.Property(e => e.CSerialId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Ccodeid)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccodeid");
            entity.Property(e => e.Cdescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cdescription");
            entity.Property(e => e.Csyscode)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("csyscode");
            entity.Property(e => e.Csyscodelookup)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("csyscodelookup");
            entity.Property(e => e.Ctext)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ctext");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISortOrder).HasColumnName("iSortOrder");

            entity.HasOne(d => d.IkeyCodeTypeNavigation).WithMany(p => p.Aacodes)
                .HasForeignKey(d => d.IkeyCodeType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AACode_AACodeType");
        });

        modelBuilder.Entity<AacodeAccountTypeProductClass>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACodeAccountTypeProductClass");

            entity.HasIndex(e => e.ICodeAccountType, "IX_AACodeAccountTypeProductClass");

            entity.HasIndex(e => e.ICodeProductClass, "IX_AACodeAccountTypeProductClass_1");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('  ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.DlastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dlastChange");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAccountType).HasColumnName("iCodeAccountType");
            entity.Property(e => e.ICodeProductClass).HasColumnName("iCodeProductClass");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AacodeAnnuitySurrenderPeriod>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACodeAnnuitySurrenderPeriod");

            entity.HasIndex(e => e.ICodeAnnuitySurrenderPeriod, "IX_AACodeAnnuitySurrenderPeriod");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('  ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.DlastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dlastChange");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAnnuitySurrenderPeriod).HasColumnName("iCodeAnnuitySurrenderPeriod");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IYears).HasColumnName("iYears");
        });

        modelBuilder.Entity<AacodeCustodianContactInfo>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACodeCustodianContactInfo");

            entity.HasIndex(e => e.ICodeCustodian, "IX_AACodeCustodianContactInfo");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CContactInfo)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cContactInfo");
            entity.Property(e => e.CPhoneNumber)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('  ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.DlastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dlastChange");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeCustodian).HasColumnName("iCodeCustodian");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AacodeCustom>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AACodeCustom_ByKey");

            entity.ToTable("AACodeCustom");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CCodeId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCodeID");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCode).HasColumnName("iKeyCode");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AacodeDeceased>(entity =>
        {
            entity.HasKey(e => e.ICodeKey);

            entity.ToTable("AACodeDeceased");

            entity.Property(e => e.ICodeKey)
                .ValueGeneratedNever()
                .HasColumnName("iCodeKey");
        });

        modelBuilder.Entity<AacodeEventSubtypeColor>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACodeEventSubtypeColor");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('  ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.DlastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dlastChange");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeKey).HasColumnName("iCodeKey");
            entity.Property(e => e.IColor).HasColumnName("iColor");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AacodePaymentModeFrequency>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACodePaymentModeFrequency");

            entity.HasIndex(e => e.GUid, "AACodePaymentModeFrequency_byGuid");

            entity.HasIndex(e => e.ICodePaymentMode, "AACodePaymentModeFrequency_byMode");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('  ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.DlastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dlastChange");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodePaymentMode).HasColumnName("iCodePaymentMode");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ITimesPerYear).HasColumnName("iTimesPerYear");
        });

        modelBuilder.Entity<AacodePolicyStatus>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACodePolicyStatus");

            entity.HasIndex(e => e.ICodeKey, "IX_AACodePolicyStatus");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagActive).HasColumnName("bFlagActive");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('  ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.DlastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dlastChange");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeKey).HasColumnName("iCodeKey");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AacodeReciprocal>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AACodeReciprocal");

            entity.HasIndex(e => e.ICodeKey, "By_Code_AACodeReciprocal");

            entity.HasIndex(e => e.GUid, "By_Guid_AACodeReciprocal").IsUnique();

            entity.HasIndex(e => e.ICodeReciprocal, "by_Reciprocal_AACodeReciprocal");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('  ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.DlastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dlastChange");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeKey).HasColumnName("iCodeKey");
            entity.Property(e => e.ICodeReciprocal).HasColumnName("iCodeReciprocal");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AacodeType>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_AACodeTypeBy_Key");

            entity.ToTable("AACodeType");

            entity.HasIndex(e => e.GUid, "By_Guid_AACodeTypel").IsUnique();

            entity.HasIndex(e => e.IsortOrder, "CodeTypeBy_Order");

            entity.HasIndex(e => e.CCodeType, "IX_AACodeTypeBy_Type");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagCustom).HasColumnName("bFlagCustom");
            entity.Property(e => e.BFlagEdit).HasColumnName("bFlagEdit");
            entity.Property(e => e.CCodeType)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCodeType");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CTable)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cTable");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IsortOrder).HasColumnName("isortOrder");
        });

        modelBuilder.Entity<AacomDue>(entity =>
        {
            entity.HasKey(e => e.IKeyid).HasName("by_KeyAAComDue");

            entity.ToTable("AAComDue");

            entity.HasIndex(e => e.GUid, "by_Guid_AAComDue").IsUnique();

            entity.HasIndex(e => e.Ikeynvst, "by_nvst");

            entity.HasIndex(e => e.Ikeypol, "by_prod");

            entity.Property(e => e.IKeyid)
                .ValueGeneratedNever()
                .HasColumnName("iKeyid");
            entity.Property(e => e.BflagEffeciveDate).HasColumnName("bflagEffeciveDate");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dendpayment)
                .HasColumnType("date")
                .HasColumnName("dendpayment");
            entity.Property(e => e.Dstartpayment)
                .HasColumnType("date")
                .HasColumnName("dstartpayment");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodecommdue).HasColumnName("iCodecommdue");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Idayofmonth).HasColumnName("idayofmonth");
            entity.Property(e => e.Idayofweek).HasColumnName("idayofweek");
            entity.Property(e => e.Ifrequency).HasColumnName("ifrequency");
            entity.Property(e => e.Ikeynvst).HasColumnName("ikeynvst");
            entity.Property(e => e.Ikeypol).HasColumnName("ikeypol");

            entity.HasOne(d => d.IkeypolNavigation).WithMany(p => p.AacomDues)
                .HasForeignKey(d => d.Ikeypol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("aaPol_Commdue");
        });

        modelBuilder.Entity<AacustomLink>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AACustomLink", tb => tb.HasTrigger("tg_AACustomLinkDelete"));

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagRequireSelection).HasColumnName("bFlagRequireSelection");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cDescription");
            entity.Property(e => e.CLinkTarget)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cLinkTarget");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IPerspective).HasColumnName("iPerspective");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IViewscreen).HasColumnName("iViewscreen");
            entity.Property(e => e.MComment)
                .IsUnicode(false)
                .HasColumnName("mComment");
        });

        modelBuilder.Entity<AacustomLinkParameter>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AACustomLinkParameter");

            entity.HasIndex(e => e.IKeyCustomLink, "IX_AACustomLinkParameter");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CParameterName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cParameterName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CView)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cView");
            entity.Property(e => e.CViewKeyColumnName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cViewKeyColumnName");
            entity.Property(e => e.CViewParameterValueColumnName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cViewParameterValueColumnName");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCustomLink).HasColumnName("iKeyCustomLink");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<Aadebug>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AADebug");

            entity.Property(e => e.CDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cDesc");
            entity.Property(e => e.CLogType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cLogType");
            entity.Property(e => e.CLongDesc)
                .IsUnicode(false)
                .HasColumnName("cLongDesc");
            entity.Property(e => e.CTableName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cTableName");
            entity.Property(e => e.DLogDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLogDateTime");
            entity.Property(e => e.IKeyId)
                .ValueGeneratedOnAdd()
                .HasColumnName("iKeyID");
            entity.Property(e => e.IPrimaryKey).HasColumnName("iPrimaryKey");
            entity.Property(e => e.IRelatedNameKey).HasColumnName("iRelatedNameKey");
        });

        modelBuilder.Entity<AadownloadRegistration>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AADownloadRegistration", tb => tb.HasTrigger("tg_AADownloadRegistrationDelete"));

            entity.HasIndex(e => e.GUid, "AADownloadRegistration_BuGuid").IsUnique();

            entity.HasIndex(e => e.IKeyModule, "AADownloadRegistration_ByModule");

            entity.HasIndex(e => e.IKeyAccount, "AADownloadRegistration_byAcct");

            entity.HasIndex(e => e.CNumber, "AADownloadRegistration_byAcctNumber");

            entity.HasIndex(e => e.IKeyPolicy, "AADownloadRegistration_byPolicy");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CAddressee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAddressee");
            entity.Property(e => e.CCity)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCity");
            entity.Property(e => e.CCountry)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCountry");
            entity.Property(e => e.CEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cEmail");
            entity.Property(e => e.CInvestorTaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cInvestorTaxID");
            entity.Property(e => e.CNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cNumber");
            entity.Property(e => e.COwnerTaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOwnerTaxID");
            entity.Property(e => e.CPhoneBusiness)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneBusiness");
            entity.Property(e => e.CPhoneHome)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneHome");
            entity.Property(e => e.CPhoneOther)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneOther");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CState)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cState");
            entity.Property(e => e.CStreet1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cStreet1");
            entity.Property(e => e.CStreet2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cStreet2");
            entity.Property(e => e.CStreet3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cStreet3");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CZip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cZip");
            entity.Property(e => e.DInvestorDob)
                .HasColumnType("date")
                .HasColumnName("dInvestorDOB");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DOwnerDob)
                .HasColumnType("date")
                .HasColumnName("dOwnerDOB");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.IKeyAccount).HasColumnName("iKeyAccount");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyPolicy).HasColumnName("iKeyPolicy");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MDlRegistration)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("mDlRegistration");
        });

        modelBuilder.Entity<AadownloadRegistrationAddress>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("AADownloadRegistrationAddress_by_ID");

            entity.ToTable("AADownloadRegistrationAddress");

            entity.HasIndex(e => e.GUid, "AADownloadRegistrationAddress_byGuid");

            entity.HasIndex(e => e.IKeyRegistration, "AADownloadRegistrationAddress_by_Registration");

            entity.HasIndex(e => e.Icodeaddress, "AADownloadRegistrationAddress_bytype");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CAddressCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAddressCode");
            entity.Property(e => e.CAddressDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAddressDescription");
            entity.Property(e => e.CBusinessName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cBusinessName");
            entity.Property(e => e.CCounty)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCounty");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Caddressee)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("caddressee");
            entity.Property(e => e.Ccity)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccity");
            entity.Property(e => e.Ccountry)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccountry");
            entity.Property(e => e.Cgreet)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cgreet");
            entity.Property(e => e.Cstate)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstate");
            entity.Property(e => e.Cstreet1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstreet1");
            entity.Property(e => e.Cstreet2)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstreet2");
            entity.Property(e => e.Cstreet3)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstreet3");
            entity.Property(e => e.Ctitle)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ctitle");
            entity.Property(e => e.Czip)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("czip");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.IKeyRegistration).HasColumnName("iKeyRegistration");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodeaddress).HasColumnName("icodeaddress");
        });

        modelBuilder.Entity<AadownloadRegistrationEmail>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AADownloadRegistrationEmail_by_ID");

            entity.ToTable("AADownloadRegistrationEmail");

            entity.HasIndex(e => e.GUid, "AADownloadRegistrationEmail_byGuid");

            entity.HasIndex(e => e.IKeyRegistration, "AADownloadRegistrationEmail_by_Registration");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CEmail)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cEmail");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.IKeyRegistration).HasColumnName("iKeyRegistration");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AadownloadRegistrationParty>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AADownloadRegistrationParty_by_ID");

            entity.ToTable("AADownloadRegistrationParty");

            entity.HasIndex(e => e.CFirstName, "AADownloadRegistrationParty_Firstname");

            entity.HasIndex(e => e.CLastName, "AADownloadRegistrationParty_Lastname");

            entity.HasIndex(e => e.GUid, "AADownloadRegistrationParty_byGuid");

            entity.HasIndex(e => e.IKeyRegistration, "AADownloadRegistrationParty_by_Registration");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BFlagOrganization)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bFlagOrganization");
            entity.Property(e => e.CDownloadId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDownloadID");
            entity.Property(e => e.CFirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cFirstName");
            entity.Property(e => e.CLastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cLastName");
            entity.Property(e => e.CMiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cMiddle");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cTaxID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DDob)
                .HasColumnType("date")
                .HasColumnName("dDOB");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeNameType).HasColumnName("iCodeNameType");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.IKeyRegistration).HasColumnName("iKeyRegistration");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AadownloadRegistrationPartyAddressLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AADownloadRegistrationPartyAddressLink_by_ID");

            entity.ToTable("AADownloadRegistrationPartyAddressLink");

            entity.HasIndex(e => e.IKeyAddress, "AADownloadRegistrationPartyAddressLink_by_Address");

            entity.HasIndex(e => e.IKeyParty, "AADownloadRegistrationPartyAddressLink_by_Party");

            entity.HasIndex(e => e.IKeyRegistration, "AADownloadRegistrationPartyAddressLink_by_Registration");

            entity.HasIndex(e => e.GUid, "IX_AADownloadRegistrationPartyAddressLink");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyParty).HasColumnName("iKeyParty");
            entity.Property(e => e.IKeyRegistration).HasColumnName("iKeyRegistration");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AadownloadRegistrationPartyEmailLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AADownloadRegistrationPartyEmailLink_by_ID");

            entity.ToTable("AADownloadRegistrationPartyEmailLink");

            entity.HasIndex(e => e.GUid, "AADownloadRegistrationPartyEmailLink_byGuid");

            entity.HasIndex(e => e.IKeyEmail, "AADownloadRegistrationPartyEmailLink_by_Email");

            entity.HasIndex(e => e.IKeyParty, "AADownloadRegistrationPartyEmailLink_by_Party");

            entity.HasIndex(e => e.IKeyRegistration, "AADownloadRegistrationPartyEmailLink_by_Registration");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyParty).HasColumnName("iKeyParty");
            entity.Property(e => e.IKeyRegistration).HasColumnName("iKeyRegistration");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AadownloadRegistrationPartyLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AADownloadRegistrationPartyLink_by_ID");

            entity.ToTable("AADownloadRegistrationPartyLink");

            entity.HasIndex(e => e.IKeyParty, "AADownloadRegistrationPartyLink_by_Party");

            entity.HasIndex(e => e.IKeyRegistration, "AADownloadRegistrationPartyLink_by_Registration");

            entity.HasIndex(e => e.ICodeRelationship, "AADownloadRegistrationPartyLink_by_Relationship");

            entity.HasIndex(e => e.GUid, "AADownloadRegistrationPartyLink_byguid");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeRelationship).HasColumnName("iCodeRelationship");
            entity.Property(e => e.IKeyParty).HasColumnName("iKeyParty");
            entity.Property(e => e.IKeyRegistration).HasColumnName("iKeyRegistration");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AadownloadRegistrationPartyPhoneLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AADownloadRegistrationPartyPhoneLink_by_ID");

            entity.ToTable("AADownloadRegistrationPartyPhoneLink");

            entity.HasIndex(e => e.IKeyParty, "AADownloadRegistrationPartyPhoneLink_by_Party");

            entity.HasIndex(e => e.IKeyPhone, "AADownloadRegistrationPartyPhoneLink_by_Phone");

            entity.HasIndex(e => e.IKeyRegistration, "AADownloadRegistrationPartyPhoneLink_by_Registration");

            entity.HasIndex(e => e.GUid, "AADownloadRegistrationPartyPhoneLink_byguid");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyParty).HasColumnName("iKeyParty");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyRegistration).HasColumnName("iKeyRegistration");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AadownloadRegistrationPhone>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AADownloadRegistrationPhone_ByKeyID");

            entity.ToTable("AADownloadRegistrationPhone");

            entity.HasIndex(e => e.IKeyRegistration, "AADownloadRegistrationPhone_ByRegistration");

            entity.HasIndex(e => e.GUid, "AADownloadRegistrationPhone_byguid");

            entity.HasIndex(e => e.Icodephone, "ADownloadRegistrationPhone_byCode");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CAreaCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAreaCode");
            entity.Property(e => e.CContact)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cContact");
            entity.Property(e => e.CCountry)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCountry");
            entity.Property(e => e.CFullPhone)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cFullPhone");
            entity.Property(e => e.CPhoneCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneCode");
            entity.Property(e => e.CPhoneDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneDescription");
            entity.Property(e => e.CPhoneExt)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneExt");
            entity.Property(e => e.CPhoneNum)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneNum");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.IKeyRegistration).HasColumnName("iKeyRegistration");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodephone).HasColumnName("icodephone");
        });

        modelBuilder.Entity<Aaemail>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("by_KeyAAEmail");

            entity.ToTable("AAEmail", tb =>
                {
                    tb.HasTrigger("tg_EmailDelete");
                    tb.HasTrigger("tg_EmailUpdateInsert");
                });

            entity.HasIndex(e => e.CAddress, "AAEmail_ByAddress");

            entity.HasIndex(e => e.IKeyClient, "AAEmail_byClient");

            entity.HasIndex(e => e.GUid, "by_Guid_AAEmail").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagPrimary).HasColumnName("bFlagPrimary");
            entity.Property(e => e.BFlagSkipArchive).HasColumnName("bFlagSkipArchive");
            entity.Property(e => e.CAddress)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cAddress");
            entity.Property(e => e.CBusinessName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cBusinessName");
            entity.Property(e => e.CContact)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cContact");
            entity.Property(e => e.CDomain)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDomain");
            entity.Property(e => e.CGreeting)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cGreeting");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CTitle)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cTitle");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.IKeyClient).HasColumnName("iKeyClient");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MComment)
                .IsUnicode(false)
                .HasColumnName("mComment");

            entity.HasOne(d => d.IKeyClientNavigation).WithMany(p => p.Aaemails)
                .HasForeignKey(d => d.IKeyClient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AAName_AAEmail_FK1");
        });

        modelBuilder.Entity<AaexchangeAccount>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAExchangeAccount");

            entity.HasIndex(e => e.IKeyServiceProducer, "IX_AAExchangeAccount_ServicePdcr");

            entity.HasIndex(e => e.IKeyUser, "IX_AAExchangeAccount_User");

            entity.HasIndex(e => e.IKeyRealTimeSyncProducer, "IX_AAExchangeAccount_syncProducer");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagArchiveAllAccounts).HasColumnName("bFlagArchiveAllAccounts");
            entity.Property(e => e.BFlagArchiveIncomingEmail).HasColumnName("bFlagArchiveIncomingEmail");
            entity.Property(e => e.BFlagArchiveOutgoingEmail).HasColumnName("bFlagArchiveOutgoingEmail");
            entity.Property(e => e.BFlagDoNotArchiveAttachments)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagDoNotArchiveAttachments");
            entity.Property(e => e.BFlagEnableExchangeSynch).HasColumnName("bFlagEnableExchangeSynch");
            entity.Property(e => e.BFlagForwardIncomingEmail).HasColumnName("bFlagForwardIncomingEmail");
            entity.Property(e => e.BFlagForwardOutgoingEmail).HasColumnName("bFlagForwardOutgoingEmail");
            entity.Property(e => e.BFlagServiceBirthdaysAnniversaries).HasColumnName("bFlagServiceBirthdaysAnniversaries");
            entity.Property(e => e.BFlagServiceSyncThisUserGlobal)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagServiceSyncThisUserGlobal");
            entity.Property(e => e.BFlagServiceSynchCalendar).HasColumnName("bFlagServiceSynchCalendar");
            entity.Property(e => e.BFlagServiceSynchContacts).HasColumnName("bFlagServiceSynchContacts");
            entity.Property(e => e.BFlagServiceSynchEmail).HasColumnName("bFlagServiceSynchEmail");
            entity.Property(e => e.BFlagUseEmailCategories)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagUseEmailCategories");
            entity.Property(e => e.BFlagUsingExchange).HasColumnName("bFlagUsingExchange");
            entity.Property(e => e.BFlagUsingOl365).HasColumnName("bFlagUsingOL365");
            entity.Property(e => e.BRealTimeContactsExport).HasColumnName("bRealTimeContactsExport");
            entity.Property(e => e.BRealTimeEventsExport).HasColumnName("bRealTimeEventsExport");
            entity.Property(e => e.CArchiveAddresses)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cArchiveAddresses");
            entity.Property(e => e.CExchangeAutodiscoveryEmail)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cExchangeAutodiscoveryEmail");
            entity.Property(e => e.CExchangeDomain)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cExchangeDomain");
            entity.Property(e => e.CExchangeEmail)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cExchangeEmail");
            entity.Property(e => e.CExchangeLoginId)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cExchangeLoginID");
            entity.Property(e => e.CExchangePassword)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cExchangePassword");
            entity.Property(e => e.CExchangeWebUri)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cExchangeWebURI");
            entity.Property(e => e.CForwardEmail)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cForwardEmail");
            entity.Property(e => e.CSelectedSynchOption)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSelectedSynchOption");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CServiceCategory)
                .IsUnicode(false)
                .HasColumnName("cServiceCategory");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IArchiveCheckDays).HasColumnName("iArchiveCheckDays");
            entity.Property(e => e.IArchiveDaysOption).HasColumnName("iArchiveDaysOption");
            entity.Property(e => e.IConnectionType).HasColumnName("iConnectionType");
            entity.Property(e => e.IKeyRealTimeSyncProducer).HasColumnName("iKeyRealTimeSyncProducer");
            entity.Property(e => e.IKeyServiceProducer).HasColumnName("iKeyServiceProducer");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IMailboxSearchOption).HasColumnName("iMailboxSearchOption");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.TAalastEmailSynch)
                .HasColumnType("smalldatetime")
                .HasColumnName("tAALastEmailSynch");
            entity.Property(e => e.TServiceLastEmailSynch)
                .HasColumnType("smalldatetime")
                .HasColumnName("tServiceLastEmailSynch");
        });

        modelBuilder.Entity<Aafile>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAFile");

            entity.ToTable("AAFile");

            entity.HasIndex(e => e.Cfileflag, "IX_AAFile_byCFileFlag");

            entity.HasIndex(e => e.Icodefilecat, "IX_AAFile_byCat");

            entity.HasIndex(e => new { e.IkeyLink, e.Cfileflag, e.Ikeyid }, "IX_AAFile_byCompound");

            entity.HasIndex(e => e.Icodefilesource, "IX_AAFile_bySource");

            entity.HasIndex(e => e.ICodeFileStatus, "IX_AAFile_byStatus");

            entity.HasIndex(e => e.IkeyLink, "by_client");

            entity.HasIndex(e => e.GUid, "by_guid_AAFile").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CFileLink)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cFileLink");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cfileflag)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasColumnName("cfileflag");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dfiledate)
                .HasPrecision(6)
                .HasColumnName("dfiledate");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeFileStatus).HasColumnName("iCodeFileStatus");
            entity.Property(e => e.IFileSize)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("iFileSize");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodefilecat).HasColumnName("icodefilecat");
            entity.Property(e => e.Icodefilesource).HasColumnName("icodefilesource");
            entity.Property(e => e.IkeyLink).HasColumnName("ikeyLink");
            entity.Property(e => e.MFileName)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mFileName");

            entity.HasOne(d => d.IkeyLinkNavigation).WithMany(p => p.Aafiles)
                .HasForeignKey(d => d.IkeyLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AAName_AAFile_FK1");
        });

        modelBuilder.Entity<AafileAccount>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAFileAccount");

            entity.HasIndex(e => e.IKeyLink, "by_Account_AAFileAccount");

            entity.HasIndex(e => e.GUid, "by_Guid_AAFileAccount");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CFileFlag)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFileFlag");
            entity.Property(e => e.CFileLink)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cFileLink");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DFileDate).HasColumnName("dFileDate");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeFileCat).HasColumnName("iCodeFileCat");
            entity.Property(e => e.ICodeFileSource).HasColumnName("iCodeFileSource");
            entity.Property(e => e.ICodeFileStatus).HasColumnName("iCodeFileStatus");
            entity.Property(e => e.IFileSize)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("iFileSize");
            entity.Property(e => e.IKeyLink).HasColumnName("iKeyLink");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MFileName)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mFileName");
        });

        modelBuilder.Entity<AafileHistoryLog>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAFileHistoryLog_by_Key");

            entity.ToTable("AAFileHistoryLog", tb => tb.HasTrigger("tg_AAFileHistoryLogDelete"));

            entity.HasIndex(e => e.GUidReference, "AAFileHistoryLog_GuidRef");

            entity.HasIndex(e => e.GUid, "AAFileHistoryLog_by_Guid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CDatabaseVersion)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDatabaseVersion");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CPath)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cPath");
            entity.Property(e => e.CProgramVersion)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cProgramVersion");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DProcessed).HasColumnName("dProcessed");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidReference).HasColumnName("gUidReference");
            entity.Property(e => e.ICodeProcess).HasColumnName("iCodeProcess");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AafileHistoryLogDetail>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAFileHistoryLogDetail_by_Key");

            entity.ToTable("AAFileHistoryLogDetail");

            entity.HasIndex(e => e.GUid, "AAFileHistoryLogDetail_by_Guid").IsUnique();

            entity.HasIndex(e => e.IKeyFileHistoryLog, "IX_AAFileHistoryLogDetail_byLog");

            entity.HasIndex(e => e.ICodeDetailType, "IX_AAFileHistoryLogDetail_byType");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CContact)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cContact");
            entity.Property(e => e.CHolding)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cHolding");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CUser)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cUser");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DFileDate).HasColumnName("dFileDate");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeDetailType).HasColumnName("iCodeDetailType");
            entity.Property(e => e.IKeyFileHistoryLog).HasColumnName("iKeyFileHistoryLog");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AafilePolicy>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAFilePolicy");

            entity.HasIndex(e => e.GUid, "by_Guid_AAFilePolicy").IsUnique();

            entity.HasIndex(e => e.IKeyLink, "by_Pol_AAFilePolicy");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CFileFlag)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFileFlag");
            entity.Property(e => e.CFileLink)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cFileLink");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DFileDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("dFileDate");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeFileCat).HasColumnName("iCodeFileCat");
            entity.Property(e => e.ICodeFileSource).HasColumnName("iCodeFileSource");
            entity.Property(e => e.ICodeFileStatus).HasColumnName("iCodeFileStatus");
            entity.Property(e => e.IFileSize)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("iFileSize");
            entity.Property(e => e.IKeyLink).HasColumnName("iKeyLink");
            entity.Property(e => e.IRecversion).HasColumnName("iRecversion");
            entity.Property(e => e.MFileName)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mFileName");
        });

        modelBuilder.Entity<AaflexAccount>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAFlexAccount");

            entity.HasIndex(e => e.GUid, "By_Guid_AAFlexAccount").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CFlesFld11)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlesFld11");
            entity.Property(e => e.CFlexFld10)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld10");
            entity.Property(e => e.CFlexFld12)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld12");
            entity.Property(e => e.CFlexFld17)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld17");
            entity.Property(e => e.CFlexFld18)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld18");
            entity.Property(e => e.CFlexFld19)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld19");
            entity.Property(e => e.CFlexFld20)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld20");
            entity.Property(e => e.CFlexFld23)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld23");
            entity.Property(e => e.CFlexFld24)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld24");
            entity.Property(e => e.CFlexFld25)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld25");
            entity.Property(e => e.CFlexFld26)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld26");
            entity.Property(e => e.CFlexFld27)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld27");
            entity.Property(e => e.CFlexFld28)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld28");
            entity.Property(e => e.CFlexFld29)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld29");
            entity.Property(e => e.CFlexFld30)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld30");
            entity.Property(e => e.CFlexFld9)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFlexFld9");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DFlexFld13)
                .HasColumnType("date")
                .HasColumnName("dFlexFld13");
            entity.Property(e => e.DFlexFld14)
                .HasColumnType("date")
                .HasColumnName("dFlexFld14");
            entity.Property(e => e.DFlexFld15)
                .HasColumnType("date")
                .HasColumnName("dFlexFld15");
            entity.Property(e => e.DFlexFld16)
                .HasColumnType("date")
                .HasColumnName("dFlexFld16");
            entity.Property(e => e.DFlexFld21)
                .HasColumnType("date")
                .HasColumnName("dFlexFld21");
            entity.Property(e => e.DFlexFld22)
                .HasColumnType("date")
                .HasColumnName("dFlexFld22");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IFlexFld7).HasColumnName("iFlexFld7");
            entity.Property(e => e.IFlexFld8).HasColumnName("iFlexFld8");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.NFlexFld1)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nFlexFld1");
            entity.Property(e => e.NFlexFld2)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nFlexFld2");
            entity.Property(e => e.NFlexFld3)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nFlexFld3");
            entity.Property(e => e.NFlexFld4)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nFlexFld4");
            entity.Property(e => e.NFlexFld5)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nFlexFld5");
            entity.Property(e => e.NFlexFld6)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nFlexFld6");
        });

        modelBuilder.Entity<AaflexCoverage>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAFlexPr");

            entity.ToTable("AAFlexCoverage");

            entity.HasIndex(e => e.GUid, "by_guid").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cflexfld10)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld10");
            entity.Property(e => e.Cflexfld11)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld11");
            entity.Property(e => e.Cflexfld12)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld12");
            entity.Property(e => e.Cflexfld17)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld17");
            entity.Property(e => e.Cflexfld18)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld18");
            entity.Property(e => e.Cflexfld19)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld19");
            entity.Property(e => e.Cflexfld20)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld20");
            entity.Property(e => e.Cflexfld23)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld23");
            entity.Property(e => e.Cflexfld24)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cflexfld24");
            entity.Property(e => e.Cflexfld25)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld25");
            entity.Property(e => e.Cflexfld26)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld26");
            entity.Property(e => e.Cflexfld27)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld27");
            entity.Property(e => e.Cflexfld28)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld28");
            entity.Property(e => e.Cflexfld29)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld29");
            entity.Property(e => e.Cflexfld30)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld30");
            entity.Property(e => e.Cflexfld9)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld9");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dflexfld13)
                .HasColumnType("date")
                .HasColumnName("dflexfld13");
            entity.Property(e => e.Dflexfld14)
                .HasColumnType("date")
                .HasColumnName("dflexfld14");
            entity.Property(e => e.Dflexfld15)
                .HasColumnType("date")
                .HasColumnName("dflexfld15");
            entity.Property(e => e.Dflexfld16)
                .HasColumnType("date")
                .HasColumnName("dflexfld16");
            entity.Property(e => e.Dflexfld21)
                .HasColumnType("date")
                .HasColumnName("dflexfld21");
            entity.Property(e => e.Dflexfld22)
                .HasColumnType("date")
                .HasColumnName("dflexfld22");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Iflexfld7).HasColumnName("iflexfld7");
            entity.Property(e => e.Iflexfld8).HasColumnName("iflexfld8");
            entity.Property(e => e.Nflexfld1)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld1");
            entity.Property(e => e.Nflexfld2)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld2");
            entity.Property(e => e.Nflexfld3)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld3");
            entity.Property(e => e.Nflexfld4)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld4");
            entity.Property(e => e.Nflexfld5)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nflexfld5");
            entity.Property(e => e.Nflexfld6)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nflexfld6");
        });

        modelBuilder.Entity<AaflexLabelWorkflow>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAFlexLabelWorkflow");

            entity.HasIndex(e => e.GUid, "IX_AAFlexLabelWorkflow");

            entity.HasIndex(e => e.IKeyWorkflowMaster, "IX_AAFlexLabelWorkflow_1");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagReadOnly1).HasColumnName("bFlagReadOnly1");
            entity.Property(e => e.BFlagReadOnly10).HasColumnName("bFlagReadOnly10");
            entity.Property(e => e.BFlagReadOnly11).HasColumnName("bFlagReadOnly11");
            entity.Property(e => e.BFlagReadOnly12).HasColumnName("bFlagReadOnly12");
            entity.Property(e => e.BFlagReadOnly13).HasColumnName("bFlagReadOnly13");
            entity.Property(e => e.BFlagReadOnly14).HasColumnName("bFlagReadOnly14");
            entity.Property(e => e.BFlagReadOnly15).HasColumnName("bFlagReadOnly15");
            entity.Property(e => e.BFlagReadOnly16).HasColumnName("bFlagReadOnly16");
            entity.Property(e => e.BFlagReadOnly17).HasColumnName("bFlagReadOnly17");
            entity.Property(e => e.BFlagReadOnly18).HasColumnName("bFlagReadOnly18");
            entity.Property(e => e.BFlagReadOnly19).HasColumnName("bFlagReadOnly19");
            entity.Property(e => e.BFlagReadOnly2).HasColumnName("bFlagReadOnly2");
            entity.Property(e => e.BFlagReadOnly20).HasColumnName("bFlagReadOnly20");
            entity.Property(e => e.BFlagReadOnly21).HasColumnName("bFlagReadOnly21");
            entity.Property(e => e.BFlagReadOnly22).HasColumnName("bFlagReadOnly22");
            entity.Property(e => e.BFlagReadOnly23).HasColumnName("bFlagReadOnly23");
            entity.Property(e => e.BFlagReadOnly24).HasColumnName("bFlagReadOnly24");
            entity.Property(e => e.BFlagReadOnly25).HasColumnName("bFlagReadOnly25");
            entity.Property(e => e.BFlagReadOnly26).HasColumnName("bFlagReadOnly26");
            entity.Property(e => e.BFlagReadOnly27).HasColumnName("bFlagReadOnly27");
            entity.Property(e => e.BFlagReadOnly28).HasColumnName("bFlagReadOnly28");
            entity.Property(e => e.BFlagReadOnly29).HasColumnName("bFlagReadOnly29");
            entity.Property(e => e.BFlagReadOnly3).HasColumnName("bFlagReadOnly3");
            entity.Property(e => e.BFlagReadOnly30).HasColumnName("bFlagReadOnly30");
            entity.Property(e => e.BFlagReadOnly4).HasColumnName("bFlagReadOnly4");
            entity.Property(e => e.BFlagReadOnly5).HasColumnName("bFlagReadOnly5");
            entity.Property(e => e.BFlagReadOnly6).HasColumnName("bFlagReadOnly6");
            entity.Property(e => e.BFlagReadOnly7).HasColumnName("bFlagReadOnly7");
            entity.Property(e => e.BFlagReadOnly8).HasColumnName("bFlagReadOnly8");
            entity.Property(e => e.BFlagReadOnly9).HasColumnName("bFlagReadOnly9");
            entity.Property(e => e.CChoices10)
                .IsUnicode(false)
                .HasColumnName("cChoices10");
            entity.Property(e => e.CChoices11)
                .IsUnicode(false)
                .HasColumnName("cChoices11");
            entity.Property(e => e.CChoices12)
                .IsUnicode(false)
                .HasColumnName("cChoices12");
            entity.Property(e => e.CChoices17)
                .IsUnicode(false)
                .HasColumnName("cChoices17");
            entity.Property(e => e.CChoices18)
                .IsUnicode(false)
                .HasColumnName("cChoices18");
            entity.Property(e => e.CChoices19)
                .IsUnicode(false)
                .HasColumnName("cChoices19");
            entity.Property(e => e.CChoices20)
                .IsUnicode(false)
                .HasColumnName("cChoices20");
            entity.Property(e => e.CChoices23)
                .IsUnicode(false)
                .HasColumnName("cChoices23");
            entity.Property(e => e.CChoices24)
                .IsUnicode(false)
                .HasColumnName("cChoices24");
            entity.Property(e => e.CChoices25)
                .IsUnicode(false)
                .HasColumnName("cChoices25");
            entity.Property(e => e.CChoices26)
                .IsUnicode(false)
                .HasColumnName("cChoices26");
            entity.Property(e => e.CChoices27)
                .IsUnicode(false)
                .HasColumnName("cChoices27");
            entity.Property(e => e.CChoices28)
                .IsUnicode(false)
                .HasColumnName("cChoices28");
            entity.Property(e => e.CChoices29)
                .IsUnicode(false)
                .HasColumnName("cChoices29");
            entity.Property(e => e.CChoices30)
                .IsUnicode(false)
                .HasColumnName("cChoices30");
            entity.Property(e => e.CChoices9)
                .IsUnicode(false)
                .HasColumnName("cChoices9");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cflabel01)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel01");
            entity.Property(e => e.Cflabel02)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel02");
            entity.Property(e => e.Cflabel03)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel03");
            entity.Property(e => e.Cflabel04)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel04");
            entity.Property(e => e.Cflabel05)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel05");
            entity.Property(e => e.Cflabel06)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel06");
            entity.Property(e => e.Cflabel07)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel07");
            entity.Property(e => e.Cflabel08)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel08");
            entity.Property(e => e.Cflabel09)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel09");
            entity.Property(e => e.Cflabel10)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel10");
            entity.Property(e => e.Cflabel11)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel11");
            entity.Property(e => e.Cflabel12)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel12");
            entity.Property(e => e.Cflabel13)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel13");
            entity.Property(e => e.Cflabel14)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel14");
            entity.Property(e => e.Cflabel15)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel15");
            entity.Property(e => e.Cflabel16)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel16");
            entity.Property(e => e.Cflabel17)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel17");
            entity.Property(e => e.Cflabel18)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel18");
            entity.Property(e => e.Cflabel19)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel19");
            entity.Property(e => e.Cflabel20)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel20");
            entity.Property(e => e.Cflabel21)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel21");
            entity.Property(e => e.Cflabel22)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel22");
            entity.Property(e => e.Cflabel23)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel23");
            entity.Property(e => e.Cflabel24)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel24");
            entity.Property(e => e.Cflabel25)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel25");
            entity.Property(e => e.Cflabel26)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel26");
            entity.Property(e => e.Cflabel27)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel27");
            entity.Property(e => e.Cflabel28)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel28");
            entity.Property(e => e.Cflabel29)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel29");
            entity.Property(e => e.Cflabel30)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel30");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyWorkflowMaster).HasColumnName("iKeyWorkflowMaster");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaflexName>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAFlexNm");

            entity.ToTable("AAFlexName");

            entity.HasIndex(e => e.GUid, "by_Guid_AAFlexNm").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cflexfld10)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld10");
            entity.Property(e => e.Cflexfld11)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld11");
            entity.Property(e => e.Cflexfld12)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld12");
            entity.Property(e => e.Cflexfld17)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld17");
            entity.Property(e => e.Cflexfld18)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld18");
            entity.Property(e => e.Cflexfld19)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld19");
            entity.Property(e => e.Cflexfld20)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cflexfld20");
            entity.Property(e => e.Cflexfld23)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld23");
            entity.Property(e => e.Cflexfld24)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cflexfld24");
            entity.Property(e => e.Cflexfld25)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld25");
            entity.Property(e => e.Cflexfld26)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld26");
            entity.Property(e => e.Cflexfld27)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld27");
            entity.Property(e => e.Cflexfld28)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld28");
            entity.Property(e => e.Cflexfld29)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld29");
            entity.Property(e => e.Cflexfld30)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld30");
            entity.Property(e => e.Cflexfld9)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld9");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dflexfld13)
                .HasColumnType("date")
                .HasColumnName("dflexfld13");
            entity.Property(e => e.Dflexfld14)
                .HasColumnType("date")
                .HasColumnName("dflexfld14");
            entity.Property(e => e.Dflexfld15)
                .HasColumnType("date")
                .HasColumnName("dflexfld15");
            entity.Property(e => e.Dflexfld16)
                .HasColumnType("date")
                .HasColumnName("dflexfld16");
            entity.Property(e => e.Dflexfld21)
                .HasColumnType("date")
                .HasColumnName("dflexfld21");
            entity.Property(e => e.Dflexfld22)
                .HasColumnType("date")
                .HasColumnName("dflexfld22");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Iflexfld7).HasColumnName("iflexfld7");
            entity.Property(e => e.Iflexfld8).HasColumnName("iflexfld8");
            entity.Property(e => e.Nflexfld1)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld1");
            entity.Property(e => e.Nflexfld2)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld2");
            entity.Property(e => e.Nflexfld3)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld3");
            entity.Property(e => e.Nflexfld4)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld4");
            entity.Property(e => e.Nflexfld5)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nflexfld5");
            entity.Property(e => e.Nflexfld6)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nflexfld6");
        });

        modelBuilder.Entity<AaflexNvst>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAFlexNv");

            entity.ToTable("AAFlexNvst");

            entity.HasIndex(e => e.GUid, "by_Guid_AAFlexNv").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cflexfld10)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld10");
            entity.Property(e => e.Cflexfld11)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld11");
            entity.Property(e => e.Cflexfld12)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld12");
            entity.Property(e => e.Cflexfld17)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld17");
            entity.Property(e => e.Cflexfld18)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld18");
            entity.Property(e => e.Cflexfld19)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld19");
            entity.Property(e => e.Cflexfld20)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld20");
            entity.Property(e => e.Cflexfld23)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld23");
            entity.Property(e => e.Cflexfld24)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cflexfld24");
            entity.Property(e => e.Cflexfld25)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld25");
            entity.Property(e => e.Cflexfld26)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld26");
            entity.Property(e => e.Cflexfld27)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld27");
            entity.Property(e => e.Cflexfld28)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld28");
            entity.Property(e => e.Cflexfld29)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld29");
            entity.Property(e => e.Cflexfld30)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld30");
            entity.Property(e => e.Cflexfld9)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld9");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dflexfld13)
                .HasColumnType("date")
                .HasColumnName("dflexfld13");
            entity.Property(e => e.Dflexfld14)
                .HasColumnType("date")
                .HasColumnName("dflexfld14");
            entity.Property(e => e.Dflexfld15)
                .HasColumnType("date")
                .HasColumnName("dflexfld15");
            entity.Property(e => e.Dflexfld16)
                .HasColumnType("date")
                .HasColumnName("dflexfld16");
            entity.Property(e => e.Dflexfld21)
                .HasColumnType("date")
                .HasColumnName("dflexfld21");
            entity.Property(e => e.Dflexfld22)
                .HasColumnType("date")
                .HasColumnName("dflexfld22");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Iflexfld7).HasColumnName("iflexfld7");
            entity.Property(e => e.Iflexfld8).HasColumnName("iflexfld8");
            entity.Property(e => e.Nflexfld1)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld1");
            entity.Property(e => e.Nflexfld2)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld2");
            entity.Property(e => e.Nflexfld3)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld3");
            entity.Property(e => e.Nflexfld4)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld4");
            entity.Property(e => e.Nflexfld5)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nflexfld5");
            entity.Property(e => e.Nflexfld6)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nflexfld6");
        });

        modelBuilder.Entity<AaflexWorkflow>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAFlexWorkflow");

            entity.HasIndex(e => e.GUid, "IX_AAFlexWorkflow");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cflexfld10)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld10");
            entity.Property(e => e.Cflexfld11)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld11");
            entity.Property(e => e.Cflexfld12)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld12");
            entity.Property(e => e.Cflexfld17)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld17");
            entity.Property(e => e.Cflexfld18)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld18");
            entity.Property(e => e.Cflexfld19)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld19");
            entity.Property(e => e.Cflexfld20)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cflexfld20");
            entity.Property(e => e.Cflexfld23)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld23");
            entity.Property(e => e.Cflexfld24)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cflexfld24");
            entity.Property(e => e.Cflexfld25)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld25");
            entity.Property(e => e.Cflexfld26)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld26");
            entity.Property(e => e.Cflexfld27)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld27");
            entity.Property(e => e.Cflexfld28)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld28");
            entity.Property(e => e.Cflexfld29)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld29");
            entity.Property(e => e.Cflexfld30)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld30");
            entity.Property(e => e.Cflexfld9)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflexfld9");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dflexfld13)
                .HasColumnType("date")
                .HasColumnName("dflexfld13");
            entity.Property(e => e.Dflexfld14)
                .HasColumnType("date")
                .HasColumnName("dflexfld14");
            entity.Property(e => e.Dflexfld15)
                .HasColumnType("date")
                .HasColumnName("dflexfld15");
            entity.Property(e => e.Dflexfld16)
                .HasColumnType("date")
                .HasColumnName("dflexfld16");
            entity.Property(e => e.Dflexfld21)
                .HasColumnType("date")
                .HasColumnName("dflexfld21");
            entity.Property(e => e.Dflexfld22)
                .HasColumnType("date")
                .HasColumnName("dflexfld22");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Iflexfld7).HasColumnName("iflexfld7");
            entity.Property(e => e.Iflexfld8).HasColumnName("iflexfld8");
            entity.Property(e => e.Nflexfld1)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld1");
            entity.Property(e => e.Nflexfld2)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld2");
            entity.Property(e => e.Nflexfld3)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld3");
            entity.Property(e => e.Nflexfld4)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("nflexfld4");
            entity.Property(e => e.Nflexfld5)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nflexfld5");
            entity.Property(e => e.Nflexfld6)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nflexfld6");
        });

        modelBuilder.Entity<Aaflexlabel>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("by_KeyAAFlxLbl");

            entity.ToTable("AAFlexlabel");

            entity.HasIndex(e => e.GUid, "by_guid_AAFlxlbl").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagReadOnly1).HasColumnName("bFlagReadOnly1");
            entity.Property(e => e.BFlagReadOnly10).HasColumnName("bFlagReadOnly10");
            entity.Property(e => e.BFlagReadOnly11).HasColumnName("bFlagReadOnly11");
            entity.Property(e => e.BFlagReadOnly12).HasColumnName("bFlagReadOnly12");
            entity.Property(e => e.BFlagReadOnly13).HasColumnName("bFlagReadOnly13");
            entity.Property(e => e.BFlagReadOnly14).HasColumnName("bFlagReadOnly14");
            entity.Property(e => e.BFlagReadOnly15).HasColumnName("bFlagReadOnly15");
            entity.Property(e => e.BFlagReadOnly16).HasColumnName("bFlagReadOnly16");
            entity.Property(e => e.BFlagReadOnly17).HasColumnName("bFlagReadOnly17");
            entity.Property(e => e.BFlagReadOnly18).HasColumnName("bFlagReadOnly18");
            entity.Property(e => e.BFlagReadOnly19).HasColumnName("bFlagReadOnly19");
            entity.Property(e => e.BFlagReadOnly2).HasColumnName("bFlagReadOnly2");
            entity.Property(e => e.BFlagReadOnly20).HasColumnName("bFlagReadOnly20");
            entity.Property(e => e.BFlagReadOnly21).HasColumnName("bFlagReadOnly21");
            entity.Property(e => e.BFlagReadOnly22).HasColumnName("bFlagReadOnly22");
            entity.Property(e => e.BFlagReadOnly23).HasColumnName("bFlagReadOnly23");
            entity.Property(e => e.BFlagReadOnly24).HasColumnName("bFlagReadOnly24");
            entity.Property(e => e.BFlagReadOnly25).HasColumnName("bFlagReadOnly25");
            entity.Property(e => e.BFlagReadOnly26).HasColumnName("bFlagReadOnly26");
            entity.Property(e => e.BFlagReadOnly27).HasColumnName("bFlagReadOnly27");
            entity.Property(e => e.BFlagReadOnly28).HasColumnName("bFlagReadOnly28");
            entity.Property(e => e.BFlagReadOnly29).HasColumnName("bFlagReadOnly29");
            entity.Property(e => e.BFlagReadOnly3).HasColumnName("bFlagReadOnly3");
            entity.Property(e => e.BFlagReadOnly30).HasColumnName("bFlagReadOnly30");
            entity.Property(e => e.BFlagReadOnly4).HasColumnName("bFlagReadOnly4");
            entity.Property(e => e.BFlagReadOnly5).HasColumnName("bFlagReadOnly5");
            entity.Property(e => e.BFlagReadOnly6).HasColumnName("bFlagReadOnly6");
            entity.Property(e => e.BFlagReadOnly7).HasColumnName("bFlagReadOnly7");
            entity.Property(e => e.BFlagReadOnly8).HasColumnName("bFlagReadOnly8");
            entity.Property(e => e.BFlagReadOnly9).HasColumnName("bFlagReadOnly9");
            entity.Property(e => e.CChoices10)
                .IsUnicode(false)
                .HasColumnName("cChoices10");
            entity.Property(e => e.CChoices11)
                .IsUnicode(false)
                .HasColumnName("cChoices11");
            entity.Property(e => e.CChoices12)
                .IsUnicode(false)
                .HasColumnName("cChoices12");
            entity.Property(e => e.CChoices17)
                .IsUnicode(false)
                .HasColumnName("cChoices17");
            entity.Property(e => e.CChoices18)
                .IsUnicode(false)
                .HasColumnName("cChoices18");
            entity.Property(e => e.CChoices19)
                .IsUnicode(false)
                .HasColumnName("cChoices19");
            entity.Property(e => e.CChoices20)
                .IsUnicode(false)
                .HasColumnName("cChoices20");
            entity.Property(e => e.CChoices23)
                .IsUnicode(false)
                .HasColumnName("cChoices23");
            entity.Property(e => e.CChoices24)
                .IsUnicode(false)
                .HasColumnName("cChoices24");
            entity.Property(e => e.CChoices25)
                .IsUnicode(false)
                .HasColumnName("cChoices25");
            entity.Property(e => e.CChoices26)
                .IsUnicode(false)
                .HasColumnName("cChoices26");
            entity.Property(e => e.CChoices27)
                .IsUnicode(false)
                .HasColumnName("cChoices27");
            entity.Property(e => e.CChoices28)
                .IsUnicode(false)
                .HasColumnName("cChoices28");
            entity.Property(e => e.CChoices29)
                .IsUnicode(false)
                .HasColumnName("cChoices29");
            entity.Property(e => e.CChoices30)
                .IsUnicode(false)
                .HasColumnName("cChoices30");
            entity.Property(e => e.CChoices9)
                .IsUnicode(false)
                .HasColumnName("cChoices9");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cflabel01)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel01");
            entity.Property(e => e.Cflabel02)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel02");
            entity.Property(e => e.Cflabel03)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel03");
            entity.Property(e => e.Cflabel04)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel04");
            entity.Property(e => e.Cflabel05)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel05");
            entity.Property(e => e.Cflabel06)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel06");
            entity.Property(e => e.Cflabel07)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel07");
            entity.Property(e => e.Cflabel08)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel08");
            entity.Property(e => e.Cflabel09)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel09");
            entity.Property(e => e.Cflabel10)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel10");
            entity.Property(e => e.Cflabel11)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel11");
            entity.Property(e => e.Cflabel12)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel12");
            entity.Property(e => e.Cflabel13)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel13");
            entity.Property(e => e.Cflabel14)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel14");
            entity.Property(e => e.Cflabel15)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel15");
            entity.Property(e => e.Cflabel16)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel16");
            entity.Property(e => e.Cflabel17)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel17");
            entity.Property(e => e.Cflabel18)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel18");
            entity.Property(e => e.Cflabel19)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel19");
            entity.Property(e => e.Cflabel20)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel20");
            entity.Property(e => e.Cflabel21)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel21");
            entity.Property(e => e.Cflabel22)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel22");
            entity.Property(e => e.Cflabel23)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel23");
            entity.Property(e => e.Cflabel24)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel24");
            entity.Property(e => e.Cflabel25)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel25");
            entity.Property(e => e.Cflabel26)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel26");
            entity.Property(e => e.Cflabel27)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel27");
            entity.Property(e => e.Cflabel28)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel28");
            entity.Property(e => e.Cflabel29)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel29");
            entity.Property(e => e.Cflabel30)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cflabel30");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeType).HasColumnName("iCodeType");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaforeignKey>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("by_KeyID");

            entity.ToTable("AAForeignKey");

            entity.HasIndex(e => e.GUid, "AAForeignKey_ByRowGuid");

            entity.HasIndex(e => e.ICodeCombine, "AAForeignKey_byCombineCode");

            entity.HasIndex(e => e.IKeyForeignKeyTable, "by_ForeignTableKey");

            entity.HasIndex(e => e.IKeyPrimaryKeyTable, "by_PrimaryTableKey");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BDeleteRow).HasColumnName("bDeleteRow");
            entity.Property(e => e.CCombineCheckColumns)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCombineCheckColumns");
            entity.Property(e => e.CForeignKeyColumn)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cForeignKeyColumn");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeCombine).HasColumnName("iCodeCombine");
            entity.Property(e => e.IKeyForeignKeyTable).HasColumnName("iKeyForeignKeyTable");
            entity.Property(e => e.IKeyPrimaryKeyTable).HasColumnName("iKeyPrimaryKeyTable");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaformAccount>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAFormAccount");

            entity.HasIndex(e => e.GUid, "AAFormAccount_ByGuid");

            entity.HasIndex(e => new { e.IPageId, e.Ikeylink }, "AAFormAccount_byPageIDLink");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cdescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cdescription");
            entity.Property(e => e.Cformcode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cformcode");
            entity.Property(e => e.Cline01)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline01");
            entity.Property(e => e.Cline02)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline02");
            entity.Property(e => e.Cline03)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline03");
            entity.Property(e => e.Cline04)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline04");
            entity.Property(e => e.Cline05)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline05");
            entity.Property(e => e.Cline06)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline06");
            entity.Property(e => e.Cline07)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline07");
            entity.Property(e => e.Cline08)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline08");
            entity.Property(e => e.Cline09)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline09");
            entity.Property(e => e.Cline10)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline10");
            entity.Property(e => e.Cline11)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline11");
            entity.Property(e => e.Cline12)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline12");
            entity.Property(e => e.Cline13)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline13");
            entity.Property(e => e.Cline14)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline14");
            entity.Property(e => e.Cline15)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline15");
            entity.Property(e => e.Cline16)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline16");
            entity.Property(e => e.Cline17)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline17");
            entity.Property(e => e.Cline18)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline18");
            entity.Property(e => e.Cline19)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline19");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPageDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dPageDate");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IPageId).HasColumnName("iPageID");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Ikeylink).HasColumnName("ikeylink");
        });

        modelBuilder.Entity<AaformCoverage>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("AAFormCoverage_by_Key");

            entity.ToTable("AAFormCoverage");

            entity.HasIndex(e => e.GUid, "AAFormCoverage_by_guid").IsUnique();

            entity.HasIndex(e => e.Ikeylink, "AAFormCoverage_by_link");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CLine13)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine13");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cdescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cdescription");
            entity.Property(e => e.Cformcode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cformcode");
            entity.Property(e => e.Cline01)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline01");
            entity.Property(e => e.Cline02)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline02");
            entity.Property(e => e.Cline03)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline03");
            entity.Property(e => e.Cline04)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline04");
            entity.Property(e => e.Cline05)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline05");
            entity.Property(e => e.Cline06)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline06");
            entity.Property(e => e.Cline07)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline07");
            entity.Property(e => e.Cline08)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline08");
            entity.Property(e => e.Cline09)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline09");
            entity.Property(e => e.Cline10)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline10");
            entity.Property(e => e.Cline11)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline11");
            entity.Property(e => e.Cline12)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline12");
            entity.Property(e => e.Cline14)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline14");
            entity.Property(e => e.Cline15)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline15");
            entity.Property(e => e.Cline16)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline16");
            entity.Property(e => e.Cline17)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline17");
            entity.Property(e => e.Cline18)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline18");
            entity.Property(e => e.Cline19)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline19");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPageDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dPageDate");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IPageId).HasColumnName("iPageID");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Ikeylink).HasColumnName("ikeylink");

            entity.HasOne(d => d.IkeylinkNavigation).WithMany(p => p.AaformCoverages)
                .HasForeignKey(d => d.Ikeylink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAFormCoverage_AACov");
        });

        modelBuilder.Entity<AaformMaster>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAFormMaster");

            entity.HasIndex(e => e.GUid, "by_Guid_AAFormMaster").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CFormCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cFormCode");
            entity.Property(e => e.CLine01)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine01");
            entity.Property(e => e.CLine02)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine02");
            entity.Property(e => e.CLine03)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine03");
            entity.Property(e => e.CLine04)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine04");
            entity.Property(e => e.CLine05)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine05");
            entity.Property(e => e.CLine06)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine06");
            entity.Property(e => e.CLine07)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine07");
            entity.Property(e => e.CLine08)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine08");
            entity.Property(e => e.CLine09)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine09");
            entity.Property(e => e.CLine10)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine10");
            entity.Property(e => e.CLine11)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine11");
            entity.Property(e => e.CLine12)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine12");
            entity.Property(e => e.CLine13)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine13");
            entity.Property(e => e.CLine14)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine14");
            entity.Property(e => e.CLine15)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine15");
            entity.Property(e => e.CLine16)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine16");
            entity.Property(e => e.CLine17)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine17");
            entity.Property(e => e.CLine18)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine18");
            entity.Property(e => e.CLine19)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine19");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPageDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dPageDate");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyLink).HasColumnName("iKeyLink");
            entity.Property(e => e.IPageId).HasColumnName("iPageID");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaformName>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAFormNm");

            entity.ToTable("AAFormName");

            entity.HasIndex(e => e.Guid, "by_guid_AAFormnm").IsUnique();

            entity.HasIndex(e => e.Ikeylink, "by_link");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CLine10)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine10");
            entity.Property(e => e.CLine11)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine11");
            entity.Property(e => e.CLine12)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine12");
            entity.Property(e => e.CLine13)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine13");
            entity.Property(e => e.CLine14)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine14");
            entity.Property(e => e.CLine15)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine15");
            entity.Property(e => e.CLine16)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine16");
            entity.Property(e => e.CLine17)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine17");
            entity.Property(e => e.CLine18)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine18");
            entity.Property(e => e.CLine19)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cLine19");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cdescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cdescription");
            entity.Property(e => e.Cformcode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cformcode");
            entity.Property(e => e.Cline01)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline01");
            entity.Property(e => e.Cline02)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline02");
            entity.Property(e => e.Cline03)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline03");
            entity.Property(e => e.Cline04)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline04");
            entity.Property(e => e.Cline05)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline05");
            entity.Property(e => e.Cline06)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline06");
            entity.Property(e => e.Cline07)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline07");
            entity.Property(e => e.Cline08)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline08");
            entity.Property(e => e.Cline09)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline09");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPageDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dPageDate");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("guid");
            entity.Property(e => e.IPageId).HasColumnName("iPageID");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Ikeylink).HasColumnName("ikeylink");

            entity.HasOne(d => d.IkeylinkNavigation).WithMany(p => p.AaformNames)
                .HasForeignKey(d => d.Ikeylink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AAName_AAFormNm_FK1");
        });

        modelBuilder.Entity<AaformNvst>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAFormNvst");

            entity.HasIndex(e => new { e.Ikeylink, e.Cformcode }, "AAFormNvst_LinkAndFormCode");

            entity.HasIndex(e => e.GUid, "by_guid_AAFormNv").IsUnique();

            entity.HasIndex(e => e.Ikeylink, "by_link");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cdescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cdescription");
            entity.Property(e => e.Cformcode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cformcode");
            entity.Property(e => e.Cline01)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline01");
            entity.Property(e => e.Cline02)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline02");
            entity.Property(e => e.Cline03)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline03");
            entity.Property(e => e.Cline04)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline04");
            entity.Property(e => e.Cline05)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline05");
            entity.Property(e => e.Cline06)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline06");
            entity.Property(e => e.Cline07)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline07");
            entity.Property(e => e.Cline08)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline08");
            entity.Property(e => e.Cline09)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline09");
            entity.Property(e => e.Cline10)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline10");
            entity.Property(e => e.Cline11)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline11");
            entity.Property(e => e.Cline12)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline12");
            entity.Property(e => e.Cline13)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline13");
            entity.Property(e => e.Cline14)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline14");
            entity.Property(e => e.Cline15)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline15");
            entity.Property(e => e.Cline16)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline16");
            entity.Property(e => e.Cline17)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline17");
            entity.Property(e => e.Cline18)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline18");
            entity.Property(e => e.Cline19)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cline19");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPageDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dPageDate");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IPageId).HasColumnName("iPageID");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Ikeylink).HasColumnName("ikeylink");

            entity.HasOne(d => d.IkeylinkNavigation).WithMany(p => p.AaformNvsts)
                .HasForeignKey(d => d.Ikeylink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("InvesmentAttachments");
        });

        modelBuilder.Entity<AagoogleAccount>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAGoogleAccount");

            entity.HasIndex(e => e.IKeyUser, "IX_AAGoogleAccount");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagArchiveIncomingEmail).HasColumnName("bFlagArchiveIncomingEmail");
            entity.Property(e => e.BFlagArchiveOutgoingEmail).HasColumnName("bFlagArchiveOutgoingEmail");
            entity.Property(e => e.BFlagDoNotArchiveAttachments)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagDoNotArchiveAttachments");
            entity.Property(e => e.BFlagDoNotArchiveEmailLabeledPrivate).HasColumnName("bFlagDoNotArchiveEmailLabeledPrivate");
            entity.Property(e => e.BFlagEnableGoogleSynch).HasColumnName("bFlagEnableGoogleSynch");
            entity.Property(e => e.BFlagServiceBirthdaysAnniversaries).HasColumnName("bFlagServiceBirthdaysAnniversaries");
            entity.Property(e => e.BFlagServiceSyncThisUserGlobal)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagServiceSyncThisUserGlobal");
            entity.Property(e => e.BFlagServiceSynchCalendar).HasColumnName("bFlagServiceSynchCalendar");
            entity.Property(e => e.BFlagServiceSynchContacts).HasColumnName("bFlagServiceSynchContacts");
            entity.Property(e => e.BFlagServiceSynchEmail).HasColumnName("bFlagServiceSynchEmail");
            entity.Property(e => e.BRealTimeEventsExport).HasColumnName("bRealTimeEventsExport");
            entity.Property(e => e.CClientX509Uri)
                .IsUnicode(false)
                .HasColumnName("cClient_X509_URI");
            entity.Property(e => e.CCredentialObjectEncrypted)
                .IsUnicode(false)
                .HasColumnName("cCredentialObject_Encrypted");
            entity.Property(e => e.CGmailAddress)
                .IsUnicode(false)
                .HasColumnName("cGmailAddress");
            entity.Property(e => e.CGoogleGroupsListLastSave)
                .IsUnicode(false)
                .HasColumnName("cGoogleGroupsList_LastSave");
            entity.Property(e => e.COauth2KeyEncrypted)
                .IsUnicode(false)
                .HasColumnName("cOAuth2Key_Encrypted");
            entity.Property(e => e.COauth2KeyRefreshEncrypted)
                .IsUnicode(false)
                .HasColumnName("cOAuth2Key_Refresh_Encrypted");
            entity.Property(e => e.CPasswordEncrypted)
                .IsUnicode(false)
                .HasColumnName("cPassword_Encrypted");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CServiceCategory)
                .IsUnicode(false)
                .HasColumnName("cServiceCategory");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IArchiveCheckDays).HasColumnName("iArchiveCheckDays");
            entity.Property(e => e.IArchiveDaysOption).HasColumnName("iArchiveDaysOption");
            entity.Property(e => e.IKeyServiceProducer).HasColumnName("iKeyServiceProducer");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IMailboxSearchOption).HasColumnName("iMailboxSearchOption");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.TAalastEmailSynch)
                .HasColumnType("smalldatetime")
                .HasColumnName("tAALastEmailSynch");
            entity.Property(e => e.TServiceLastEmailSynch)
                .HasColumnType("smalldatetime")
                .HasColumnName("tServiceLastEmailSynch");
        });

        modelBuilder.Entity<AahouseHold>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_AAHouseHoldHead");

            entity.ToTable("AAHouseHold", tb =>
                {
                    tb.HasTrigger("tg_HouseHoldDelete");
                    tb.HasTrigger("tg_HouseHoldInsert");
                });

            entity.HasIndex(e => e.IKeyAddress, "AAHouseHold_byAddress");

            entity.HasIndex(e => e.IKeyPhone, "AAHouseHold_byphone");

            entity.HasIndex(e => e.ICodeHouseHoldType, "IX_AAHouseHold_ByHHtype");

            entity.HasIndex(e => e.ICodeNameType, "IX_AAHouseHold_byNameType");

            entity.HasIndex(e => e.IKeyClient, "by_Client_AAHouseHoldHead");

            entity.HasIndex(e => e.GUid, "by_Guid_AAHouseHoldHead").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagForcePrimaryAddress).HasColumnName("bFlagForcePrimaryAddress");
            entity.Property(e => e.BFlagForcePrimaryPhone).HasColumnName("bFlagForcePrimaryPhone");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasConversion(new ValueConverter<string, string>(v => v.TrimEnd(), v => v.TrimAll()))
                .HasColumnName("cDescription");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeHouseHoldType).HasColumnName("iCodeHouseHoldType");
            entity.Property(e => e.ICodeNameType).HasColumnName("iCodeNameType");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyClient).HasColumnName("iKeyClient");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.YIncome)
                .HasColumnType("money")
                .HasColumnName("yIncome");
        });

        modelBuilder.Entity<AahouseHoldMember>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAHouseHoldMember_byKey");

            entity.ToTable("AAHouseHoldMember", tb =>
                {
                    tb.HasTrigger("tg_HouseHoldMemberDelete");
                    tb.HasTrigger("tg_HouseHoldMemberInsertUpdate");
                });

            entity.HasIndex(e => e.GUid, "AAHouseHoldMember_ByGuid").IsUnique();

            entity.HasIndex(e => e.IKeyClient, "AAHouseHoldMember_byClient");

            entity.HasIndex(e => e.IKeyHead, "AAHouseHoldMember_byHead");

            entity.HasIndex(e => new { e.IKeyHead, e.IKeyClient, e.ICodeRelationship }, "AAHouseHoldMember_byUniqueCombo");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagDependent).HasColumnName("bFlagDependent");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeRelationship).HasColumnName("iCodeRelationship");
            entity.Property(e => e.IKeyClient).HasColumnName("iKeyClient");
            entity.Property(e => e.IKeyHead).HasColumnName("iKeyHead");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyClientNavigation).WithMany(p => p.AahouseHoldMembers)
                .HasForeignKey(d => d.IKeyClient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAHouseHold_AAName");

            entity.HasOne(d => d.IKeyHeadNavigation).WithMany(p => p.AahouseHoldMembers)
                .HasForeignKey(d => d.IKeyHead)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAHouseHold_AAHouseHoldHead");
        });

        modelBuilder.Entity<AahouseholdMemberCoverage>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAHouseholdMemberCoverage");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCov).HasColumnName("iKeyCov");
            entity.Property(e => e.IKeyMember).HasColumnName("iKeyMember");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<Aaimage>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAImage");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BShowOnReports).HasColumnName("bShowOnReports");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyName).HasColumnName("iKeyName");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MImage).HasColumnName("mImage");
            entity.Property(e => e.MThumbnail).HasColumnName("mThumbnail");
        });

        modelBuilder.Entity<AainsuranceRelation>(entity =>
        {
            entity.HasKey(e => e.GUid);

            entity.ToTable("AAInsuranceRelation");

            entity.HasIndex(e => e.Ikeycov, "AAInsuranceRelation_ByCov");

            entity.HasIndex(e => e.Ikeyclient, "AAInsuranceRelation_byClient");

            entity.HasIndex(e => e.Ikeyid, "AAInsuranceRelation_byKey");

            entity.HasIndex(e => e.Ikeypol, "AAInsuranceRelation_byPolicy");

            entity.HasIndex(e => e.Icodereltype, "AAInsuranceRelation_byType");

            entity.HasIndex(e => new { e.Icodereltype, e.Ikeyclient }, "IX_AAInsuranceRelation_TypeAndClient");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodereltype).HasColumnName("icodereltype");
            entity.Property(e => e.Ikeyclient).HasColumnName("ikeyclient");
            entity.Property(e => e.Ikeycov).HasColumnName("ikeycov");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeypol).HasColumnName("ikeypol");
        });

        modelBuilder.Entity<AakeyId>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAKeyId", tb => tb.HasComment("Key Generating & Maintenance table."));

            entity.HasIndex(e => e.GUid, "AAKeyId_By_Guid");

            entity.HasIndex(e => e.CTableName, "AAKeyId_byTable");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CTableName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cTableName");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IBaseKey)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iBaseKey");
            entity.Property(e => e.IKey).HasColumnName("iKey");
            entity.Property(e => e.IRecversion).HasColumnName("iRecversion");
        });

        modelBuilder.Entity<AakeyIdProperty>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAKeyIdProperties");

            entity.HasIndex(e => e.GUid, "AAKeyIdProperties_Guid");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagMaintainZeroRecord).HasColumnName("bFlagMaintainZeroRecord");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<Aalabel>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("By_Key_AALabel");

            entity.ToTable("AALabel");

            entity.HasIndex(e => e.GUid, "By_Guid_AALabel").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CDefault)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDefault");
            entity.Property(e => e.CLocalized)
                .IsRequired()
                .HasMaxLength(40)
                .HasDefaultValueSql("(N' ')")
                .IsFixedLength()
                .HasColumnName("cLocalized");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<Aalanguage>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_Language");

            entity.ToTable("AALanguage");

            entity.HasIndex(e => e.GUid, "by_Guid_Language").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("(N' ')")
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<Aalicense>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_AALicenseBy_Key");

            entity.ToTable("AALicense");

            entity.HasIndex(e => e.GUid, "By_Guid_AALicensel").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagSeperateOutlookTasks)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagSeperateOutlookTasks");
            entity.Property(e => e.BFlagTrialPeriod).HasColumnName("bFlagTrialPeriod");
            entity.Property(e => e.BFlagValidateTaxIdlookup)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagValidateTaxIDLookup");
            entity.Property(e => e.BMessengerAllowReply)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bMessengerAllowReply");
            entity.Property(e => e.CCity)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCity");
            entity.Property(e => e.CConnectionString)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cConnectionString");
            entity.Property(e => e.CContact)
                .IsRequired()
                .HasMaxLength(65)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cContact");
            entity.Property(e => e.CCountry)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCountry");
            entity.Property(e => e.CEmail)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cEmail");
            entity.Property(e => e.CHashCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cHashCode");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(65)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.CPhone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cPhone");
            entity.Property(e => e.CPhone2)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cPhone2");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CState)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cState");
            entity.Property(e => e.CStreet1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cStreet1");
            entity.Property(e => e.CStreet2)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cStreet2");
            entity.Property(e => e.CUrl)
                .IsRequired()
                .HasMaxLength(65)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cUrl");
            entity.Property(e => e.CVersionType)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cVersionType");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CZip)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cZip");
            entity.Property(e => e.DLastBackup)
                .HasColumnType("date")
                .HasColumnName("dLastBackup");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastReindex)
                .HasColumnType("date")
                .HasColumnName("dLastReindex");
            entity.Property(e => e.DNextBackupReminder)
                .HasColumnType("date")
                .HasColumnName("dNextBackupReminder");
            entity.Property(e => e.DNextUpdateReminder)
                .HasColumnType("date")
                .HasColumnName("dNextUpdateReminder");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidSystemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUidSystemID");
            entity.Property(e => e.ICodeCommissionsDirectPay).HasColumnName("iCodeCommissionsDirectPay");
            entity.Property(e => e.ICodeReconcileFrequency).HasColumnName("iCodeReconcileFrequency");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IStations).HasColumnName("iStations");
            entity.Property(e => e.NReconcileTolerance)
                .HasDefaultValueSql("((0.001))")
                .HasColumnType("numeric(8, 6)")
                .HasColumnName("nReconcileTolerance");

            entity.HasOne(d => d.IKeyUserNavigation).WithMany(p => p.Aalicenses)
                .HasForeignKey(d => d.IKeyUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AALicense_AAUser");
        });

        modelBuilder.Entity<AalicenseModule>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_AALicenseModuleBy_key");

            entity.ToTable("AALicenseModule");

            entity.HasIndex(e => e.IKeyModule, "AALicenseModule_ByModule");

            entity.HasIndex(e => e.GUid, "By_Guid_AALicenseModulel").IsUnique();

            entity.HasIndex(e => e.IKeyLicense, "IX_AALicenseModuleBy_License");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagDlfservice).HasColumnName("bFlagDLFService");
            entity.Property(e => e.BFlagDlfserviceStarted).HasColumnName("bFlagDLFServiceStarted");
            entity.Property(e => e.BFlagPositionOnly).HasColumnName("bFlagPositionOnly");
            entity.Property(e => e.BFlagTrialPeriod).HasColumnName("bFlagTrialPeriod");
            entity.Property(e => e.CDlfserviceResult)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDLFServiceResult");
            entity.Property(e => e.CHashCode)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cHashCode");
            entity.Property(e => e.CModulePassword)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cModulePassword");
            entity.Property(e => e.CModuleRegistration)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cModuleRegistration");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DDlfserviceEnded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dDLFServiceEnded");
            entity.Property(e => e.DDlfserviceStarted)
                .HasColumnType("smalldatetime")
                .HasColumnName("dDLFServiceStarted");
            entity.Property(e => e.DDlfserviceTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("dDLFServiceTime");
            entity.Property(e => e.DExpirationDate)
                .HasDefaultValueSql("(' ')")
                .HasColumnType("date")
                .HasColumnName("dExpirationDate");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyLicense).HasColumnName("iKeyLicense");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IMetaVersion).HasColumnName("iMetaVersion");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyLicenseNavigation).WithMany(p => p.AalicenseModules)
                .HasForeignKey(d => d.IKeyLicense)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AALicenseModule_AALicense");

            entity.HasOne(d => d.IKeyModuleNavigation).WithMany(p => p.AalicenseModules)
                .HasForeignKey(d => d.IKeyModule)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AALicenseModule_aaModule");
        });

        modelBuilder.Entity<Aalink>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAALink");

            entity.ToTable("AALink");

            entity.HasIndex(e => e.GUid, "by_Guid_AALink").IsUnique();

            entity.HasIndex(e => e.Ikeysource, "by_source");

            entity.HasIndex(e => e.Ikeytarget, "by_target");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Clinktype)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("clinktype");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodelink).HasColumnName("icodelink");
            entity.Property(e => e.Ikeysource).HasColumnName("ikeysource");
            entity.Property(e => e.Ikeytarget).HasColumnName("ikeytarget");

            entity.HasOne(d => d.IkeysourceNavigation).WithMany(p => p.AalinkIkeysourceNavigations)
                .HasForeignKey(d => d.Ikeysource)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("aaname_aalink_Source");

            entity.HasOne(d => d.IkeytargetNavigation).WithMany(p => p.AalinkIkeytargetNavigations)
                .HasForeignKey(d => d.Ikeytarget)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("aaname_aalink_Target");
        });

        modelBuilder.Entity<AamailingList>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAMailingList");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeNameType).HasColumnName("iCodeNameType");
            entity.Property(e => e.IKeyProducer).HasColumnName("iKeyProducer");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MMapXml)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnType("text")
                .HasColumnName("mMapXML");
        });

        modelBuilder.Entity<AamailingListMap>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAMailingListMap");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MMapXml)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnType("text")
                .HasColumnName("mMapXML");
        });

        modelBuilder.Entity<Aamarket>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAMarket");

            entity.ToTable("AAMarket");

            entity.HasIndex(e => e.Icodemarket, "IX_AAMarket_ByMarketcode");

            entity.HasIndex(e => e.IKeyFollowup, "IX_AAMarket_byFollowup");

            entity.HasIndex(e => e.Ikeyclient, "by_client");

            entity.HasIndex(e => e.GUid, "by_guid_AAMarket").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyFollowup).HasColumnName("iKeyFollowup");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodemarket).HasColumnName("icodemarket");
            entity.Property(e => e.Ikeyclient).HasColumnName("ikeyclient");

            entity.HasOne(d => d.IkeyclientNavigation).WithMany(p => p.Aamarkets)
                .HasForeignKey(d => d.Ikeyclient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AAName_AAMarket_FK1");
        });

        modelBuilder.Entity<Aamessage>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_Message");

            entity.ToTable("AAMessage");

            entity.HasIndex(e => e.GUid, "by_Guid_Message").IsUnique();

            entity.HasIndex(e => e.IKeyLanguage, "by_Language_Message");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagDialogText).HasColumnName("bFlagDialogText");
            entity.Property(e => e.CMessageKey)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cMessageKey");
            entity.Property(e => e.CMessageText)
                .IsRequired()
                .HasMaxLength(100)
                .HasDefaultValueSql("(N' ')")
                .HasColumnName("cMessageText");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyLanguage).HasColumnName("iKeyLanguage");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyLanguageNavigation).WithMany(p => p.Aamessages)
                .HasForeignKey(d => d.IKeyLanguage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Message_Language");
        });

        modelBuilder.Entity<Aamodule>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_aaModule");

            entity.ToTable("AAModule");

            entity.HasIndex(e => e.GUid, "By_Guid_AAModule").IsUnique();

            entity.HasIndex(e => e.CModule, "aaModule_ByModule").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagAllowAdditionsRemoval).HasColumnName("bFlagAllowAdditionsRemoval");
            entity.Property(e => e.BFlagAutoActivate).HasColumnName("bFlagAutoActivate");
            entity.Property(e => e.BFlagCanExpire).HasColumnName("bFlagCanExpire");
            entity.Property(e => e.BFlagClearingHouse).HasColumnName("bFlagClearingHouse");
            entity.Property(e => e.BFlagDlfservice).HasColumnName("bFlagDLFService");
            entity.Property(e => e.BFlagPositionOnly).HasColumnName("bFlagPositionOnly");
            entity.Property(e => e.BFlagReleased).HasColumnName("bFlagReleased");
            entity.Property(e => e.BFlagRequiresActivation).HasColumnName("bFlagRequiresActivation");
            entity.Property(e => e.BFlagTrialPeriod).HasColumnName("bFlagTrialPeriod");
            entity.Property(e => e.BFlagVisibleByDefault).HasColumnName("bFlagVisibleByDefault");
            entity.Property(e => e.BflagPartnerExport).HasColumnName("bflagPartnerExport");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CModule)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cModule");
            entity.Property(e => e.CModuleDisplay)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cModuleDisplay");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.DlastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dlastChange");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IDlfserviceMinimumStations)
                .HasDefaultValueSql("((10))")
                .HasColumnName("iDLFServiceMinimumStations");
            entity.Property(e => e.IKeyTask).HasColumnName("iKeyTask");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISortOrder).HasColumnName("iSortOrder");
            entity.Property(e => e.IkeyParentModule).HasColumnName("ikeyParentModule");
        });

        modelBuilder.Entity<Aaname>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAName");

            entity.ToTable("AAName", tb =>
                {
                    tb.HasTrigger("tg_AANameDelete");
                    tb.HasTrigger("tg_AANameInsert");
                    tb.HasTrigger("tg_AANameUpdate");
                });

            entity.HasIndex(e => e.CApikey1, "AAName_ByAPIKey1").HasFillFactor(90);

            entity.HasIndex(e => e.CApikey2, "AAName_ByAPIKey2").HasFillFactor(90);

            entity.HasIndex(e => e.CApikey3, "AAName_ByAPIKey3").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyPrimaryImage, "AAName_ByImage").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyProducerReference, "AAName_ByPdcrRef").HasFillFactor(90);

            entity.HasIndex(e => e.ICodePhase, "AAName_ByRank").HasFillFactor(90);

            entity.HasIndex(e => e.Csortname, "AAName_BySortname").HasFillFactor(90);

            entity.HasIndex(e => e.Ikeyspouse, "AAName_BySpouse").HasFillFactor(90);

            entity.HasIndex(e => e.Ctaxid, "AAName_ByTaxID").HasFillFactor(90);

            entity.HasIndex(e => e.CtaxidLookup, "AAName_ByTaxIDLookup").HasFillFactor(90);

            entity.HasIndex(e => e.CWhoChange, "AAName_WhoChange").HasFillFactor(90);

            entity.HasIndex(e => e.ICodeGender, "AAName_bvGender").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyAddress, "AAName_byAddress").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyFax, "AAName_byFax").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyFlex, "AAName_byFlex").HasFillFactor(90);

            entity.HasIndex(e => e.ICodeIndustry, "AAName_byIndustry").HasFillFactor(90);

            entity.HasIndex(e => e.ICodeMaritalStatus, "AAName_byMaritalStatus").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyNameType, "AAName_byNameType").HasFillFactor(90);

            entity.HasIndex(e => e.Icodeoccupation, "AAName_byOcc").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyPhone, "AAName_byPhone").HasFillFactor(90);

            entity.HasIndex(e => e.BFlagAccountPlaceholder, "AAName_byPlaceHolder").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyPrimaryHouseHold, "AAName_byPrimaryHousehold").HasFillFactor(90);

            entity.HasIndex(e => e.Ikeypdcr, "AAName_byProducer").HasFillFactor(90);

            entity.HasIndex(e => e.ICodeDriversLicenseState, "AAName_byState").HasFillFactor(90);

            entity.HasIndex(e => e.Icodestatus, "AAName_byStatus").HasFillFactor(90);

            entity.HasIndex(e => e.ICodeTobacco, "AAName_byTobacco").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyUrl, "AAName_byUrl").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyEmail, "AAName_iKeyEmail").HasFillFactor(90);

            entity.HasIndex(e => e.Ikeyoffice, "By_Office_AAName").HasFillFactor(90);

            entity.HasIndex(e => new { e.Ikeypdcr, e.BFlagAccountPlaceholder }, "IX_AANameBy_pdcr_placeholder").HasFillFactor(90);

            entity.HasIndex(e => new { e.BFlagAccountPlaceholder, e.Ikeyid, e.Clastname }, "IX_AAName_GetNameLookup")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.IKeyImportantInfoNote, "IX_AAName_byImportantNote").HasFillFactor(90);

            entity.HasIndex(e => e.GUid, "by_Guid__AAName").IsUnique();

            entity.HasIndex(e => e.Cnameid, "by_id_AAName").HasFillFactor(90);

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<AanameAdvisorVault>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AANameAdvisorVault");

            entity.HasIndex(e => e.IKeyName, "IX_AANameAdvisorVault");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CAaproducerCName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAAProducer_cName");
            entity.Property(e => e.CAvadvisorUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .HasColumnName("cAVAdvisorUserName");
            entity.Property(e => e.CAvclientUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cAVClientUserName");
            entity.Property(e => e.CEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cEmail");
            entity.Property(e => e.CFirstName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cFirstName");
            entity.Property(e => e.CLastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cLastName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyName).HasColumnName("iKeyName");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MComment)
                .IsUnicode(false)
                .HasColumnName("mComment");
        });

        modelBuilder.Entity<AanameDeleted>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AANameDeleted");

            entity.Property(e => e.CPrimaryNameType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cPrimaryNameType");
            entity.Property(e => e.CPrimaryProducerName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cPrimaryProducerName");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
        });

        modelBuilder.Entity<AanameDownloadId>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANameDownloadID");

            entity.HasIndex(e => new { e.CDownloadId, e.IKeyModule }, "by_DownloadIDandModule");

            entity.HasIndex(e => e.GUid, "by_GuID");

            entity.HasIndex(e => e.IKeyName, "by_Name");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CComment)
                .IsUnicode(false)
                .HasColumnName("cComment");
            entity.Property(e => e.CDownloadId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDownloadID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyName).HasColumnName("iKeyName");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanameFilter>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AANameFilter");

            entity.HasIndex(e => e.Ikeyname, "IX_AANameFilter_byName");

            entity.HasIndex(e => e.Ikeyuser, "IX_AANameFilter_byUser");

            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyname).HasColumnName("ikeyname");
            entity.Property(e => e.Ikeyuser).HasColumnName("ikeyuser");
        });

        modelBuilder.Entity<AanameProducer>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANameProducer");

            entity.HasIndex(e => new { e.IKeyProducer, e.IKeyName }, "AANameProducer_ByLookup");

            entity.HasIndex(e => e.IKeyName, "IX_AANameProducer");

            entity.HasIndex(e => e.IKeyProducer, "IX_AANameProducer_1");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyName).HasColumnName("iKeyName");
            entity.Property(e => e.IKeyProducer).HasColumnName("iKeyProducer");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanameType>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAANmType");

            entity.ToTable("AANameType");

            entity.HasIndex(e => new { e.Ikeyclient, e.Icodenametype }, "AANameType_byClientAndType");

            entity.HasIndex(e => e.Icodenametype, "AANameType_byType");

            entity.HasIndex(e => e.GUid, "by_Guid_AANmType").IsUnique();

            entity.HasIndex(e => e.Ikeyclient, "by_client");

            entity.Property(e => e.Ikeyid)
                .HasDefaultValueSql("((1))")
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagPrimary).HasColumnName("bFlagPrimary");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyHouseHold).HasColumnName("iKeyHouseHold");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISortOrder).HasColumnName("iSortOrder");
            entity.Property(e => e.Icodenametype).HasColumnName("icodenametype");
            entity.Property(e => e.Ikeyclient).HasColumnName("ikeyclient");

            entity.HasOne(d => d.IkeyclientNavigation).WithMany(p => p.AanameTypes)
                .HasForeignKey(d => d.Ikeyclient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AAName_AANmType_FK1");
        });

        modelBuilder.Entity<AanewBiz>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AANewBiz_ByKey");

            entity.ToTable("AANewBiz");

            entity.HasIndex(e => e.IKeyClient, "AANewBiz_ByClient");

            entity.HasIndex(e => e.GUid, "AANewBiz_byGuid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CAction)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAction");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DCompleted)
                .HasColumnType("date")
                .HasColumnName("dCompleted");
            entity.Property(e => e.DInitial)
                .HasColumnType("date")
                .HasColumnName("dInitial");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAction).HasColumnName("iCodeAction");
            entity.Property(e => e.ICodePriority).HasColumnName("iCodePriority");
            entity.Property(e => e.IKeyClient).HasColumnName("iKeyClient");
            entity.Property(e => e.IKeyFollowUp).HasColumnName("iKeyFollowUp");
            entity.Property(e => e.IKeyNote).HasColumnName("iKeyNote");
            entity.Property(e => e.IKeyVendor).HasColumnName("iKeyVendor");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.YAmount)
                .HasColumnType("money")
                .HasColumnName("yAmount");

            entity.HasOne(d => d.IKeyClientNavigation).WithMany(p => p.AanewBizs)
                .HasForeignKey(d => d.IKeyClient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AANewBiz_AAName");
        });

        modelBuilder.Entity<Aanote>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAANoteMg");

            entity.ToTable("AANote");

            entity.HasIndex(e => e.DLastChange, "AANote_byLastChange");

            entity.HasIndex(e => e.BFlagPersonalContact, "AANote_byPresonalContact");

            entity.HasIndex(e => e.CWhoChange, "AANote_byWhochange");

            entity.HasIndex(e => e.IRecVersion, "IX_AANote_RecVersion");

            entity.HasIndex(e => e.DWhenAdded, "IX_AANote_WhenAdded");

            entity.HasIndex(e => e.IKeyPrivateUser, "IX_AANote_byPrivateUser");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagPersonalContact).HasColumnName("bFlagPersonalContact");
            entity.Property(e => e.Bflagarchived).HasColumnName("bflagarchived");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRowCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("dRowCreated");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeTextFormat).HasColumnName("iCodeTextFormat");
            entity.Property(e => e.IKeyPrivateUser).HasColumnName("iKeyPrivateUser");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MNotePage)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mNotePage");
        });

        modelBuilder.Entity<AanoteAccountLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANoteAccountLink");

            entity.HasIndex(e => e.IKeyFollowup, "AANoteAccountLink_ByFollowup");

            entity.HasIndex(e => e.IKeyLink, "by_Acct_AANoteAccountLink");

            entity.HasIndex(e => e.IKeyNote, "by_Note_AANoteAccountLink");

            entity.HasIndex(e => e.GUid, "by_guid_AANoteAccountLink").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyFollowup).HasColumnName("iKeyFollowup");
            entity.Property(e => e.IKeyLink).HasColumnName("iKeyLink");
            entity.Property(e => e.IKeyNote).HasColumnName("iKeyNote");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanoteFileLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANoteFileLink");

            entity.HasIndex(e => e.IKeyFollowup, "IX_AANoteFileLink_byFollowup");

            entity.HasIndex(e => e.IKeyLink, "IX_AANoteFileLink_byLink");

            entity.HasIndex(e => e.IKeyNote, "IX_AANoteFileLink_byNote");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyFollowup).HasColumnName("iKeyFollowup");
            entity.Property(e => e.IKeyLink).HasColumnName("iKeyLink");
            entity.Property(e => e.IKeyNote).HasColumnName("iKeyNote");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanotePolicyLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANotePolicyLink");

            entity.HasIndex(e => e.IKeyFollowup, "AANotePolicyLink_ByFollowup");

            entity.HasIndex(e => e.GUid, "by_Guid_AANotePolicyLink").IsUnique();

            entity.HasIndex(e => e.IKeyNote, "by_Note_AANotePolicyLink");

            entity.HasIndex(e => e.IKeyLink, "by_Pol_AANotePolicyLink");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyFollowup).HasColumnName("iKeyFollowup");
            entity.Property(e => e.IKeyLink).HasColumnName("iKeyLink");
            entity.Property(e => e.IKeyNote).HasColumnName("iKeyNote");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanoteTopic>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAANoteCl");

            entity.ToTable("AANoteTopic");

            entity.HasIndex(e => e.Icodenotetype, "IX_AANoteTopic_byType");

            entity.HasIndex(e => e.Ikeyclient, "by_client");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CCmsvaultItemId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasColumnName("cCMSVaultItemID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cdescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cdescription");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodenotetype).HasColumnName("icodenotetype");
            entity.Property(e => e.Ikeyclient).HasColumnName("ikeyclient");

            entity.HasOne(d => d.IkeyclientNavigation).WithMany(p => p.AanoteTopics)
                .HasForeignKey(d => d.Ikeyclient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ClientNotesGroup");
        });

        modelBuilder.Entity<AanoteTopicLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANoteTopicLink");

            entity.HasIndex(e => e.IKeyFollowup, "AANoteTopicLink_ByFollowup");

            entity.HasIndex(e => e.IKeyNote, "by_Note_AANoteTopicLink");

            entity.HasIndex(e => e.IKeyLink, "by_Topic_AANoteTopicLink");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyFollowup).HasColumnName("iKeyFollowup");
            entity.Property(e => e.IKeyLink).HasColumnName("iKeyLink");
            entity.Property(e => e.IKeyNote).HasColumnName("iKeyNote");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanvSum>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAANvSum");

            entity.ToTable("AANvSum");

            entity.HasIndex(e => e.GUid, "by_Guid_AANvSum").IsUnique();

            entity.HasIndex(e => e.IkeyTranType, "by_Transtype_AAnvSum");

            entity.HasIndex(e => e.Ikeynvst, "by_nvst");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IkeyTranType).HasColumnName("ikeyTranType");
            entity.Property(e => e.Ikeynvst).HasColumnName("ikeynvst");
            entity.Property(e => e.Nshares)
                .HasColumnType("numeric(18, 6)")
                .HasColumnName("nshares");
            entity.Property(e => e.Yamount)
                .HasColumnType("money")
                .HasColumnName("yamount");

            entity.HasOne(d => d.IkeynvstNavigation).WithMany(p => p.AanvSums)
                .HasForeignKey(d => d.Ikeynvst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("InvestmentTransSums");
        });

        modelBuilder.Entity<AanvTran>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_Key_AANvTr");

            entity.ToTable("AANvTrans", tb =>
                {
                    tb.HasTrigger("tg_InvestmentTransactionDelete");
                    tb.HasTrigger("tg_InvestmentTransactionInsert");
                    tb.HasTrigger("tg_InvestmentTransactionUpdate");
                });

            entity.HasIndex(e => e.IKeyCancelBy, "AANvTransCancelBy");

            entity.HasIndex(e => e.BFlagCancelled, "AANvTrans_ByCancelFlag");

            entity.HasIndex(e => e.YClientTotal, "AANvTrans_ByClientTotal");

            entity.HasIndex(e => e.Cref2, "AANvTrans_ByCref2");

            entity.HasIndex(e => e.IKeyModule, "AANvTrans_ByModule");

            entity.HasIndex(e => e.DSettle, "AANvTrans_BySettle");

            entity.HasIndex(e => e.IKeySplit, "AANvTrans_BySplit");

            entity.HasIndex(e => e.DTrandate, "AANvTrans_ByTransdate");

            entity.HasIndex(e => e.IKeyValuationCalc, "AANvTrans_ByValuationCalc");

            entity.HasIndex(e => e.IKeyValuationFlow, "AANvTrans_ByValuationFlow");

            entity.HasIndex(e => e.BFlagFreezeBasis, "AANvTrans_FreezeBasis");

            entity.HasIndex(e => e.YBasisIn, "AANvTrans_byBasisIn");

            entity.HasIndex(e => e.IKeyCancel, "AANvTrans_byCancel");

            entity.HasIndex(e => e.Cref, "AANvTrans_byCref");

            entity.HasIndex(e => e.Bflaginit, "AANvTrans_byIinit");

            entity.HasIndex(e => e.Bflagreconcile, "AANvTrans_byReconcile");

            entity.HasIndex(e => e.Nshares, "AANvTrans_byShares");

            entity.HasIndex(e => e.IKeyDlffileCreated, "IX_AANvTrans_DlfFile");

            entity.HasIndex(e => new { e.IKeyNvst, e.DTrandate, e.BFlagCancelled }, "IX_AANvTrans_NvstCancelTrandate").HasFillFactor(90);

            entity.HasIndex(e => e.IkeyLinkedTrans, "by_Flow_AANvTrans");

            entity.HasIndex(e => new { e.IKeyNvst, e.IkeyTranType }, "by_Nvst_AANvTrans").HasFillFactor(90);

            entity.HasIndex(e => e.IkeyTranType, "by_TranType_AANvTr");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagBlotter).HasColumnName("bFlagBlotter");
            entity.Property(e => e.BFlagCancelled).HasColumnName("bFlagCancelled");
            entity.Property(e => e.BFlagFreezeBasis).HasColumnName("bFlagFreezeBasis");
            entity.Property(e => e.BFlagNoTrigger).HasColumnName("bFlagNoTrigger");
            entity.Property(e => e.Bflaginit).HasColumnName("bflaginit");
            entity.Property(e => e.Bflagreconcile).HasColumnName("bflagreconcile");
            entity.Property(e => e.CDltranCodePrimary)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDLTranCodePrimary");
            entity.Property(e => e.CDltranCodeSecondary)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDLTranCodeSecondary");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cref)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cref");
            entity.Property(e => e.Cref2)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cref2");
            entity.Property(e => e.DCancelled)
                .HasColumnType("date")
                .HasColumnName("dCancelled");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DSettle)
                .HasColumnType("date")
                .HasColumnName("dSettle");
            entity.Property(e => e.DTrandate)
                .HasColumnType("date")
                .HasColumnName("dTrandate");
            entity.Property(e => e.DTransmittal)
                .HasColumnType("date")
                .HasColumnName("dTransmittal");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICalcOrder)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iCalcOrder");
            entity.Property(e => e.IKeyBlotter).HasColumnName("iKeyBlotter");
            entity.Property(e => e.IKeyCancel).HasColumnName("iKeyCancel");
            entity.Property(e => e.IKeyCancelBy).HasColumnName("iKeyCancelBy");
            entity.Property(e => e.IKeyDlffileCreated).HasColumnName("iKeyDLFFileCreated");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyNvst).HasColumnName("iKeyNvst");
            entity.Property(e => e.IKeySplit).HasColumnName("iKeySplit");
            entity.Property(e => e.IKeyValuationCalc).HasColumnName("iKeyValuationCalc");
            entity.Property(e => e.IKeyValuationFlow).HasColumnName("iKeyValuationFlow");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IkeyLinkedTrans).HasColumnName("ikeyLinkedTrans");
            entity.Property(e => e.IkeyTranType).HasColumnName("ikeyTranType");
            entity.Property(e => e.MComment)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mComment");
            entity.Property(e => e.NShareBasis)
                .HasDefaultValueSql("((0.000000))")
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nShareBasis");
            entity.Property(e => e.NSharesEligible)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nSharesEligible");
            entity.Property(e => e.Nshareprice)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nshareprice");
            entity.Property(e => e.Nshares)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nshares");
            entity.Property(e => e.YAccruedIntExcluded)
                .HasColumnType("money")
                .HasColumnName("yAccruedIntExcluded");
            entity.Property(e => e.YBasisIn)
                .HasColumnType("money")
                .HasColumnName("yBasisIn");
            entity.Property(e => e.YBasisOut)
                .HasColumnType("money")
                .HasColumnName("yBasisOut");
            entity.Property(e => e.YBegAccruedInt)
                .HasDefaultValueSql("((0.0000))")
                .HasColumnType("money")
                .HasColumnName("yBegAccruedInt");
            entity.Property(e => e.YClientTotal)
                .HasColumnType("money")
                .HasColumnName("yClientTotal");
            entity.Property(e => e.YCommExcluded)
                .HasColumnType("money")
                .HasColumnName("yCommExcluded");
            entity.Property(e => e.YCommIncluded)
                .HasColumnType("money")
                .HasColumnName("yCommIncluded");
            entity.Property(e => e.YFeesExcluded)
                .HasColumnType("money")
                .HasColumnName("yFeesExcluded");
            entity.Property(e => e.YLoadIncluded)
                .HasColumnType("money")
                .HasColumnName("yLoadIncluded");
            entity.Property(e => e.YMiscExcluded)
                .HasColumnType("money")
                .HasColumnName("yMiscExcluded");
            entity.Property(e => e.YPrincipal)
                .HasColumnType("money")
                .HasColumnName("yPrincipal");

            entity.HasOne(d => d.IKeyNvstNavigation).WithMany(p => p.AanvTrans)
                .HasForeignKey(d => d.IKeyNvst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AANvTrans_AANvst");

            entity.HasOne(d => d.IkeyTranTypeNavigation).WithMany(p => p.AanvTrans)
                .HasForeignKey(d => d.IkeyTranType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AANvTrans_AANvTransType");
        });

        modelBuilder.Entity<AanvTransBasisAdjustmentLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("By_Key_AANvTransBasisAdjustmentLink");

            entity.ToTable("AANvTransBasisAdjustmentLink");

            entity.HasIndex(e => e.IKeyLot, "AANvTransBasisAdjustmentLink_ByLotKey");

            entity.HasIndex(e => e.IKeyBasisAdjustment, "By_BA_AANvTransBasisAdjustmentLink");

            entity.HasIndex(e => e.Guid, "By_Guid_AANvTransBasisAdjustmentLink");

            entity.HasIndex(e => e.IKeyTrans, "By_Trans_AANvTransBasisAdjustmentLink");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("guid");
            entity.Property(e => e.IKeyBasisAdjustment).HasColumnName("iKeyBasisAdjustment");
            entity.Property(e => e.IKeyLot).HasColumnName("iKeyLot");
            entity.Property(e => e.IKeyTrans).HasColumnName("iKeyTrans");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.NBasisPerShareAdjustment)
                .HasColumnType("decimal(16, 6)")
                .HasColumnName("nBasisPerShareAdjustment");
            entity.Property(e => e.NShareBasis)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("nShareBasis");
            entity.Property(e => e.YBasisIn)
                .HasColumnType("money")
                .HasColumnName("yBasisIn");
        });

        modelBuilder.Entity<AanvTransBlotter>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("aaNvTransBlotter_ByKey");

            entity.ToTable("AANvTransBlotter");

            entity.HasIndex(e => e.GUid, "aaNvTransBlotter_ByGuid");

            entity.HasIndex(e => e.IKeyApprovalName, "aaNvTransBlotter_ByName");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagSolicitated).HasColumnName("bFlagSolicitated");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DApproval)
                .HasColumnType("date")
                .HasColumnName("dApproval");
            entity.Property(e => e.DFill)
                .HasColumnType("date")
                .HasColumnName("dFill");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DOrderEntry)
                .HasColumnType("date")
                .HasColumnName("dOrderEntry");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeApprovalStatus).HasColumnName("iCodeApprovalStatus");
            entity.Property(e => e.ICodeOrderDuration).HasColumnName("iCodeOrderDuration");
            entity.Property(e => e.ICodeOrderType).HasColumnName("iCodeOrderType");
            entity.Property(e => e.IKeyApprovalName).HasColumnName("iKeyApprovalName");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MNotes)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnType("text")
                .HasColumnName("mNotes");
        });

        modelBuilder.Entity<AanvTransFlow>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvTransFlow");

            entity.HasIndex(e => e.GUid, "by_Guid_AANvTransFlow").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagBlotter).HasColumnName("bFlagBlotter");
            entity.Property(e => e.BFlagCancelled).HasColumnName("bFlagCancelled");
            entity.Property(e => e.CBasis)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cBasis");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DSettle)
                .HasColumnType("date")
                .HasColumnName("dSettle");
            entity.Property(e => e.DTrandate)
                .HasColumnType("date")
                .HasColumnName("dTrandate");
            entity.Property(e => e.DTransmittle)
                .HasColumnType("date")
                .HasColumnName("dTransmittle");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCancel).HasColumnName("iKeyCancel");
            entity.Property(e => e.IKeyCancelBy).HasColumnName("iKeyCancelBy");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
            entity.Property(e => e.MComment)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mComment");
        });

        modelBuilder.Entity<AanvTransPositionOverride>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvTransPositionOverride");

            entity.HasIndex(e => e.IKeyTransaction, "IX_AANvTransPositionOverride").HasFillFactor(90);

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyTransaction).HasColumnName("iKeyTransaction");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.NPosition)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nPosition");
        });

        modelBuilder.Entity<AanvTransType>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("By_Key_AATransType");

            entity.ToTable("AANvTransType");

            entity.HasIndex(e => e.BFlagCancelTrans, "AANvTransType_ByCancel");

            entity.HasIndex(e => e.CCode, "AANvTransType_ByCode");

            entity.HasIndex(e => e.IClientNet, "AANvTransType_ClientFlow");

            entity.HasIndex(e => e.IShareBalance, "AANvTransType_byShareBalance");

            entity.HasIndex(e => e.BFlagSplit, "AANvTransType_bySplit");

            entity.HasIndex(e => e.IBasisCalculation, "AANvTransType_byiBasis");

            entity.HasIndex(e => e.GUid, "by_Guid_AATranstype").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagAllowBasisEdit).HasColumnName("bFlagAllowBasisEdit");
            entity.Property(e => e.BFlagAllowShares).HasColumnName("bFlagAllowShares");
            entity.Property(e => e.BFlagBasisAdjustmentNoLot).HasColumnName("bFlagBasisAdjustmentNoLot");
            entity.Property(e => e.BFlagBasisAutoUpdate).HasColumnName("bFlagBasisAutoUpdate");
            entity.Property(e => e.BFlagCancelTrans).HasColumnName("bFlagCancelTrans");
            entity.Property(e => e.BFlagCashBalanceTrans).HasColumnName("bFlagCashBalanceTrans");
            entity.Property(e => e.BFlagCreateCashFlow).HasColumnName("bFlagCreateCashFlow");
            entity.Property(e => e.BFlagFilterAccount).HasColumnName("bFlagFilterAccount");
            entity.Property(e => e.BFlagFilterClient).HasColumnName("bFlagFilterClient");
            entity.Property(e => e.BFlagFilterSymbol).HasColumnName("bFlagFilterSymbol");
            entity.Property(e => e.BFlagInterestPayment).HasColumnName("bFlagInterestPayment");
            entity.Property(e => e.BFlagNoZeroShares).HasColumnName("bFlagNoZeroShares");
            entity.Property(e => e.BFlagNoZeroValue).HasColumnName("bFlagNoZeroValue");
            entity.Property(e => e.BFlagReconcileTrans).HasColumnName("bFlagReconcileTrans");
            entity.Property(e => e.BFlagRorCreatePeriod).HasColumnName("bFlagRorCreatePeriod");
            entity.Property(e => e.BFlagRorEliminatePeriod).HasColumnName("bFlagRorEliminatePeriod");
            entity.Property(e => e.BFlagSplit).HasColumnName("bFlagSplit");
            entity.Property(e => e.CCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCode");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSourceDisplay)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSourceDisplay");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IAccountDistributionsInternal).HasColumnName("iAccountDistributionsInternal");
            entity.Property(e => e.IAccountDistributionsPaidOut).HasColumnName("iAccountDistributionsPaidOut");
            entity.Property(e => e.IAccountExpense).HasColumnName("iAccountExpense");
            entity.Property(e => e.IAccountFee).HasColumnName("iAccountFee");
            entity.Property(e => e.IAccountMoneyIn).HasColumnName("iAccountMoneyIn");
            entity.Property(e => e.IAccountMoneyOut).HasColumnName("iAccountMoneyOut");
            entity.Property(e => e.IAccruedInterestFlowNet).HasColumnName("iAccruedInterestFlowNet");
            entity.Property(e => e.IBasisCalculation).HasColumnName("iBasisCalculation");
            entity.Property(e => e.ICalcOrder).HasColumnName("iCalcOrder");
            entity.Property(e => e.ICalculationDate).HasColumnName("iCalculationDate");
            entity.Property(e => e.ICapGainLongPaidOut).HasColumnName("iCapGainLongPaidOut");
            entity.Property(e => e.ICapGainLongReinvested).HasColumnName("iCapGainLongReinvested");
            entity.Property(e => e.ICapGainShortPaidOut).HasColumnName("iCapGainShortPaidOut");
            entity.Property(e => e.ICapGainShortReinvested).HasColumnName("iCapGainShortReinvested");
            entity.Property(e => e.IClientMoneyIn).HasColumnName("iClientMoneyIn");
            entity.Property(e => e.IClientMoneyOut).HasColumnName("iClientMoneyOut");
            entity.Property(e => e.IClientNet).HasColumnName("iClientNet");
            entity.Property(e => e.IContributionNet).HasColumnName("iContributionNet");
            entity.Property(e => e.IDistPaidOutCalculation).HasColumnName("iDistPaidOutCalculation");
            entity.Property(e => e.IDistReinvestedCalculation).HasColumnName("iDistReinvestedCalculation");
            entity.Property(e => e.IDividendPaidOut).HasColumnName("iDividendPaidOut");
            entity.Property(e => e.IDividendReinvested).HasColumnName("iDividendReinvested");
            entity.Property(e => e.IFlowDirection).HasColumnName("iFlowDirection");
            entity.Property(e => e.IFlowType).HasColumnName("iFlowType");
            entity.Property(e => e.IGainCalculation).HasColumnName("iGainCalculation");
            entity.Property(e => e.IInterestCalculation).HasColumnName("iInterestCalculation");
            entity.Property(e => e.IInterestPaidOut).HasColumnName("iInterestPaidOut");
            entity.Property(e => e.IInterestReinvested).HasColumnName("iInterestReinvested");
            entity.Property(e => e.IKeyCorrespondingTrans).HasColumnName("iKeyCorrespondingTrans");
            entity.Property(e => e.IManagementFee).HasColumnName("iManagementFee");
            entity.Property(e => e.IMoneyFlowNet).HasColumnName("iMoneyFlowNet");
            entity.Property(e => e.IMoneyIn).HasColumnName("iMoneyIn");
            entity.Property(e => e.IMoneyOut).HasColumnName("iMoneyOut");
            entity.Property(e => e.INetAdjustments).HasColumnName("iNetAdjustments");
            entity.Property(e => e.INetCalculations).HasColumnName("iNetCalculations");
            entity.Property(e => e.INetExpenses).HasColumnName("iNetExpenses");
            entity.Property(e => e.INetInvestedCalculation).HasColumnName("iNetInvestedCalculation");
            entity.Property(e => e.INetNewMoneyCalculation).HasColumnName("iNetNewMoneyCalculation");
            entity.Property(e => e.INetTransferOfBasis).HasColumnName("iNetTransferOfBasis");
            entity.Property(e => e.INetTransfers).HasColumnName("iNetTransfers");
            entity.Property(e => e.IOutSideMoneyIn).HasColumnName("iOutSideMoneyIn");
            entity.Property(e => e.IOutSideMoneyNet).HasColumnName("iOutSideMoneyNet");
            entity.Property(e => e.IOutSideMoneyOut).HasColumnName("iOutSideMoneyOut");
            entity.Property(e => e.IRealGain).HasColumnName("iRealGain");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IShareBalance).HasColumnName("iShareBalance");
            entity.Property(e => e.ISortOrder).HasColumnName("iSortOrder");
            entity.Property(e => e.ITotalNewMoneyCalculation).HasColumnName("iTotalNewMoneyCalculation");
            entity.Property(e => e.ITransferOfBasisIn).HasColumnName("iTransferOfBasisIn");
            entity.Property(e => e.ITransferOfBasisOut).HasColumnName("iTransferOfBasisOut");
        });

        modelBuilder.Entity<Aanvst>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAANvst");

            entity.ToTable("AANvst", tb =>
                {
                    tb.HasTrigger("tg_InvestmentDelete");
                    tb.HasTrigger("tg_InvestmentInsert");
                });

            entity.HasIndex(e => e.BFlagAcctCashBalance, "AANvst_ByCashBalFlag");

            entity.HasIndex(e => e.IKeyCurrentPosition, "AANvst_ByCurrentPosition");

            entity.HasIndex(e => e.DLastReconcile, "AANvst_ByLastReconcile");

            entity.HasIndex(e => e.Dliquidated, "AANvst_ByLiquidatedDate");

            entity.HasIndex(e => e.Ikeysymbol, "AANvst_BySymbol");

            entity.HasIndex(e => new { e.Ikeysymbol, e.DProcessStart }, "AANvst_BySymbolAndStartprocess");

            entity.HasIndex(e => new { e.Ikeyacct, e.DProcessStart }, "AANvst_byAccountAndStartProcess");

            entity.HasIndex(e => new { e.Ikeyacct, e.Ikeysymbol }, "AANvst_byAcctAndSymbol");

            entity.HasIndex(e => e.DFirstTransaction, "AANvst_byFirstTransaction");

            entity.HasIndex(e => e.IKeyFlex, "AANvst_byFlexKey");

            entity.HasIndex(e => e.DLastTransaction, "AANvst_byLastTransaction");

            entity.HasIndex(e => e.IKeyModule, "AANvst_byModule");

            entity.HasIndex(e => e.ICodeInvestmentClass, "AANvst_byNvstClass");

            entity.HasIndex(e => e.DProcessStart, "AANvst_byProcessStart");

            entity.HasIndex(e => e.ICodeStatus, "AANvst_byStatus");

            entity.HasIndex(e => e.ICodeBasisType, "AANvst_iCodeBasistype");

            entity.HasIndex(e => e.IKeyDlffileCreated, "IX_AANvst_dlfFile");

            entity.HasIndex(e => e.GUid, "by_Guid_AANvst").IsUnique();

            entity.HasIndex(e => e.Ikeyacct, "by_acct");

            entity.HasIndex(e => e.IKeyVal, "by_val_AANvst");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagAcctCashBalance).HasColumnName("bFlagAcctCashBalance");
            entity.Property(e => e.BFlagAutoWithDrawal).HasColumnName("bFlagAutoWithDrawal");
            entity.Property(e => e.BFlagGenerateAutoWithDrawal).HasColumnName("bFlagGenerateAutoWithDrawal");
            entity.Property(e => e.BFlagInitValuesOnly).HasColumnName("bFlagInitValuesOnly");
            entity.Property(e => e.BFlagInitialized).HasColumnName("bFlagInitialized");
            entity.Property(e => e.BFlagNeedBasisCalculation).HasColumnName("bFlagNeedBasisCalculation");
            entity.Property(e => e.BFlagNeedRorcalculation).HasColumnName("bFlagNeedRORCalculation");
            entity.Property(e => e.BFlagNeedSummedValuesCalculation).HasColumnName("bFlagNeedSummedValuesCalculation");
            entity.Property(e => e.BFlagNeedValuationsCalculation).HasColumnName("bFlagNeedValuationsCalculation");
            entity.Property(e => e.BFlagTrailerCommission).HasColumnName("bFlagTrailerCommission");
            entity.Property(e => e.Bflagaccrue).HasColumnName("bflagaccrue");
            entity.Property(e => e.Bflagautobuy).HasColumnName("bflagautobuy");
            entity.Property(e => e.Bflagautocalc).HasColumnName("bflagautocalc");
            entity.Property(e => e.Bflagautoplan).HasColumnName("bflagautoplan");
            entity.Property(e => e.Bflagintbear).HasColumnName("bflagintbear");
            entity.Property(e => e.Bflagreinvest).HasColumnName("bflagreinvest");
            entity.Property(e => e.Bflagror).HasColumnName("bflagror");
            entity.Property(e => e.CHoldStrategy)
                .IsUnicode(false)
                .HasColumnName("cHoldStrategy");
            entity.Property(e => e.CLastPeriodicType)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cLastPeriodicType");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cdlinvtype)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cdlinvtype");
            entity.Property(e => e.DBeginWithDrawal)
                .HasColumnType("date")
                .HasColumnName("dBeginWithDrawal");
            entity.Property(e => e.DEffective)
                .HasColumnType("date")
                .HasColumnName("dEffective");
            entity.Property(e => e.DFirstTransaction)
                .HasColumnType("date")
                .HasColumnName("dFirstTransaction");
            entity.Property(e => e.DInitialized)
                .HasColumnType("date")
                .HasColumnName("dInitialized");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastPeriodicValuation)
                .HasColumnType("date")
                .HasColumnName("dLastPeriodicValuation");
            entity.Property(e => e.DLastReconcile)
                .HasColumnType("date")
                .HasColumnName("dLastReconcile");
            entity.Property(e => e.DLastTransaction)
                .HasColumnType("date")
                .HasColumnName("dLastTransaction");
            entity.Property(e => e.DLastWithDrawal)
                .HasColumnType("date")
                .HasColumnName("dLastWithDrawal");
            entity.Property(e => e.DProcessStart)
                .HasColumnType("date")
                .HasColumnName("dProcessStart");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dbeginplan)
                .HasColumnType("date")
                .HasColumnName("dbeginplan");
            entity.Property(e => e.Dbegintrailer)
                .HasColumnType("date")
                .HasColumnName("dbegintrailer");
            entity.Property(e => e.Dcallable)
                .HasColumnType("date")
                .HasColumnName("dcallable");
            entity.Property(e => e.Dliquidated)
                .HasColumnType("date")
                .HasColumnName("dliquidated");
            entity.Property(e => e.Dmaturedate)
                .HasColumnType("date")
                .HasColumnName("dmaturedate");
            entity.Property(e => e.Dpaidthrutrailer)
                .HasColumnType("date")
                .HasColumnName("dpaidthrutrailer");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeBasisType).HasColumnName("iCodeBasisType");
            entity.Property(e => e.ICodeDividendOption).HasColumnName("iCodeDividendOption");
            entity.Property(e => e.ICodeGainsOption).HasColumnName("iCodeGainsOption");
            entity.Property(e => e.ICodeInterestCompound).HasColumnName("iCodeInterestCompound");
            entity.Property(e => e.ICodeInterestPaymentFrequency).HasColumnName("iCodeInterestPaymentFrequency");
            entity.Property(e => e.ICodeInvestmentClass)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iCodeInvestmentClass");
            entity.Property(e => e.ICodeStatus).HasColumnName("iCodeStatus");
            entity.Property(e => e.ICodeWithDrawalMode).HasColumnName("iCodeWithDrawalMode");
            entity.Property(e => e.IKeyCurrentPosition).HasColumnName("iKeyCurrentPosition");
            entity.Property(e => e.IKeyDlffileCreated).HasColumnName("iKeyDLFFileCreated");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyVal).HasColumnName("iKeyVal");
            entity.Property(e => e.IKeycomm).HasColumnName("iKeycomm");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ITrailerBeginsNmonthsAfterAcquired).HasColumnName("iTrailerBeginsNMonthsAfterAcquired");
            entity.Property(e => e.Icodepurchmode).HasColumnName("icodepurchmode");
            entity.Property(e => e.Ikeyacct).HasColumnName("ikeyacct");
            entity.Property(e => e.Ikeysymbol).HasColumnName("ikeysymbol");
            entity.Property(e => e.Itimesyear).HasColumnName("itimesyear");
            entity.Property(e => e.NAutoWithDrawal)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("nAutoWithDrawal");
            entity.Property(e => e.Nannualrate)
                .HasColumnType("numeric(9, 2)")
                .HasColumnName("nannualrate");
            entity.Property(e => e.Nbasispoints)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("nbasispoints");
            entity.Property(e => e.Ncommpct)
                .HasColumnType("numeric(9, 3)")
                .HasColumnName("ncommpct");
            entity.Property(e => e.Nloadpct)
                .HasColumnType("numeric(9, 3)")
                .HasColumnName("nloadpct");
            entity.Property(e => e.Nplaninvest)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("nplaninvest");
            entity.Property(e => e.Yfacevalue)
                .HasColumnType("money")
                .HasColumnName("yfacevalue");

            entity.HasOne(d => d.IKeyValNavigation).WithMany(p => p.Aanvsts)
                .HasForeignKey(d => d.IKeyVal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AANvst_AANvVal");
        });

        modelBuilder.Entity<AanvstAccount>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("by_KeyAAAcct");

            entity.ToTable("AANvstAccount", tb =>
                {
                    tb.HasTrigger("tg_InvestmentAccountDelete");
                    tb.HasTrigger("tg_InvestmentAccountInsert");
                    tb.HasTrigger("tg_InvestmentAccountUpdate");
                });

            entity.HasIndex(e => e.Icodeaccttype, "AANvstAccount_ByAcctType");

            entity.HasIndex(e => e.Icoderegister, "AANvstAccount_ByRegister");

            entity.HasIndex(e => new { e.Ccontrolnum, e.Cacctnum, e.Coldcontrol }, "AANvstAccount_ControlAcctOldControl");

            entity.HasIndex(e => e.ICodeBasisType, "AANvstAccount_byBasisType");

            entity.HasIndex(e => e.IKeyCashBal, "AANvstAccount_byCashBalance");

            entity.HasIndex(e => e.ICodeCustodian, "AANvstAccount_byCustodian");

            entity.HasIndex(e => e.IKeyFlex, "AANvstAccount_byFlexKey");

            entity.HasIndex(e => e.IKeyManagerLevel1, "AANvstAccount_byMgr1");

            entity.HasIndex(e => e.IKeyManagerLevel2, "AANvstAccount_byMgr2");

            entity.HasIndex(e => e.IKeyManagerLevel3, "AANvstAccount_byMgr3");

            entity.HasIndex(e => e.IKeyManagerLevel4, "AANvstAccount_byMgr4");

            entity.HasIndex(e => e.IKeyModule, "AANvstAccount_byModule");

            entity.HasIndex(e => e.IKeyModulePreference, "AANvstAccount_byModulePref");

            entity.HasIndex(e => e.Icodeobjective, "AANvstAccount_byObjective");

            entity.HasIndex(e => e.IKeyProducerLevel2, "AANvstAccount_byPdcr2");

            entity.HasIndex(e => e.IKeyProducerLevel3, "AANvstAccount_byPdcr3");

            entity.HasIndex(e => e.IKeyProducerLevel4, "AANvstAccount_byPdcr4");

            entity.HasIndex(e => e.IKeyProducerLevel1, "AANvstAccount_byPrdcr1");

            entity.HasIndex(e => e.IKeyPrimaryProducer, "AANvstAccount_byPrimaryProducer");

            entity.HasIndex(e => e.Icodestatus, "AANvstAccount_byStatus");

            entity.HasIndex(e => e.IKeyOwner, "AAnvstAccount_byOwner");

            entity.HasIndex(e => e.IKeyDlffileCreated, "IX_AANvstAccount_DLFFile");

            entity.HasIndex(e => e.GUid, "by_Guid_AAAcct").IsUnique();

            entity.HasIndex(e => e.Cacctnum, "by_acct");

            entity.HasIndex(e => e.IKeyPrimaryClient, "by_client");

            entity.HasIndex(e => e.Ccontrolnum, "by_control");

            entity.HasIndex(e => e.Coldcontrol, "by_oldcont");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagAdvisoryAccount).HasColumnName("bFlagAdvisoryAccount");
            entity.Property(e => e.BFlagClDirect).HasColumnName("bFlagClDirect");
            entity.Property(e => e.BFlagPositionOnly).HasColumnName("bFlagPositionOnly");
            entity.Property(e => e.BFlagRor)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagROR");
            entity.Property(e => e.BFlagShowCashBalance).HasColumnName("bFlagShowCashBalance");
            entity.Property(e => e.BFlagUseFchoutsidePositions).HasColumnName("bFlagUseFCHOutsidePositions");
            entity.Property(e => e.Bflagcarry).HasColumnName("bflagcarry");
            entity.Property(e => e.Bflagqualified).HasColumnName("bflagqualified");
            entity.Property(e => e.CAuthorizedPerson)
                .IsUnicode(false)
                .HasColumnName("cAuthorizedPerson");
            entity.Property(e => e.CDlOfficeNumber)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDlOfficeNumber");
            entity.Property(e => e.CHoldStrategy)
                .IsUnicode(false)
                .HasColumnName("cHoldStrategy");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CTitle)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cTitle");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cacctnum)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cacctnum");
            entity.Property(e => e.Ccontrolnum)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccontrolnum");
            entity.Property(e => e.Coldcontrol)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("coldcontrol");
            entity.Property(e => e.Cwhoprocess)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cwhoprocess");
            entity.Property(e => e.DAnnuitization)
                .HasColumnType("date")
                .HasColumnName("dAnnuitization");
            entity.Property(e => e.DAnnuityMaturity)
                .HasColumnType("date")
                .HasColumnName("dAnnuityMaturity");
            entity.Property(e => e.DDlCashValuation)
                .HasColumnType("date")
                .HasColumnName("dDlCashValuation");
            entity.Property(e => e.DDlMarginValuation)
                .HasColumnType("date")
                .HasColumnName("dDlMarginValuation");
            entity.Property(e => e.DDlPosition)
                .HasColumnType("date")
                .HasColumnName("dDlPosition");
            entity.Property(e => e.DDlRegistration)
                .HasColumnType("date")
                .HasColumnName("dDlRegistration");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRorvalue)
                .HasColumnType("date")
                .HasColumnName("dRORValue");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dclose)
                .HasColumnType("date")
                .HasColumnName("dclose");
            entity.Property(e => e.Deffective)
                .HasColumnType("date")
                .HasColumnName("deffective");
            entity.Property(e => e.Dprocess)
                .HasColumnType("date")
                .HasColumnName("dprocess");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAnnuitySurrenderPeriod).HasColumnName("iCodeAnnuitySurrenderPeriod");
            entity.Property(e => e.ICodeBasisType).HasColumnName("iCodeBasisType");
            entity.Property(e => e.ICodeCustodian).HasColumnName("iCodeCustodian");
            entity.Property(e => e.ICodeLiquidityTimePeriod).HasColumnName("iCodeLiquidityTimePeriod");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeRiskTolerance).HasColumnName("iCodeRiskTolerance");
            entity.Property(e => e.ICodeTaxStatus).HasColumnName("iCodeTaxStatus");
            entity.Property(e => e.ICodeTimeHorizon).HasColumnName("iCodeTimeHorizon");
            entity.Property(e => e.IKeyCashBal).HasColumnName("iKeyCashBal");
            entity.Property(e => e.IKeyDlffileCreated).HasColumnName("iKeyDLFFileCreated");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyManagerLevel1).HasColumnName("iKeyManagerLevel1");
            entity.Property(e => e.IKeyManagerLevel2).HasColumnName("iKeyManagerLevel2");
            entity.Property(e => e.IKeyManagerLevel3).HasColumnName("iKeyManagerLevel3");
            entity.Property(e => e.IKeyManagerLevel4).HasColumnName("iKeyManagerLevel4");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyModulePreference).HasColumnName("iKeyModulePreference");
            entity.Property(e => e.IKeyOwner).HasColumnName("iKeyOwner");
            entity.Property(e => e.IKeyPrimaryClient).HasColumnName("iKeyPrimaryClient");
            entity.Property(e => e.IKeyPrimaryProducer).HasColumnName("iKeyPrimaryProducer");
            entity.Property(e => e.IKeyProducerLevel1).HasColumnName("iKeyProducerLevel1");
            entity.Property(e => e.IKeyProducerLevel2).HasColumnName("iKeyProducerLevel2");
            entity.Property(e => e.IKeyProducerLevel3).HasColumnName("iKeyProducerLevel3");
            entity.Property(e => e.IKeyProducerLevel4).HasColumnName("iKeyProducerLevel4");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IcodeStrategy).HasColumnName("icodeStrategy");
            entity.Property(e => e.Icodeaccttype).HasColumnName("icodeaccttype");
            entity.Property(e => e.Icodeobjective).HasColumnName("icodeobjective");
            entity.Property(e => e.Icoderegister).HasColumnName("icoderegister");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.MBeneficiary)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mBeneficiary");
            entity.Property(e => e.NInterestRate)
                .HasColumnType("numeric(13, 6)")
                .HasColumnName("nInterestRate");
            entity.Property(e => e.NMortalityExpenseRate)
                .HasColumnType("numeric(13, 6)")
                .HasColumnName("nMortalityExpenseRate");
            entity.Property(e => e.NRorsimple)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("nRORSimple");
            entity.Property(e => e.Nrordollar)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("nrordollar");
            entity.Property(e => e.Nrortime)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("nrortime");
            entity.Property(e => e.YCapGainLongPaidOut)
                .HasColumnType("money")
                .HasColumnName("yCapGainLongPaidOut");
            entity.Property(e => e.YCapGainLongReinvested)
                .HasColumnType("money")
                .HasColumnName("yCapGainLongReinvested");
            entity.Property(e => e.YCapGainShortPaidOut)
                .HasColumnType("money")
                .HasColumnName("yCapGainShortPaidOut");
            entity.Property(e => e.YCapGainShortReinvested)
                .HasColumnType("money")
                .HasColumnName("yCapGainShortReinvested");
            entity.Property(e => e.YClientMoneyIn)
                .HasColumnType("money")
                .HasColumnName("yClientMoneyIn");
            entity.Property(e => e.YClientMoneyOut)
                .HasColumnType("money")
                .HasColumnName("yClientMoneyOut");
            entity.Property(e => e.YClientNet)
                .HasColumnType("money")
                .HasColumnName("yClientNet");
            entity.Property(e => e.YCostBasis)
                .HasColumnType("money")
                .HasColumnName("yCostBasis");
            entity.Property(e => e.YDistributionsPaidout)
                .HasColumnType("money")
                .HasColumnName("yDistributionsPaidout");
            entity.Property(e => e.YDistributionsReinvested)
                .HasColumnType("money")
                .HasColumnName("yDistributionsReinvested");
            entity.Property(e => e.YDividendPaidOut)
                .HasColumnType("money")
                .HasColumnName("yDividendPaidOut");
            entity.Property(e => e.YDividendReinvested)
                .HasColumnType("money")
                .HasColumnName("yDividendReinvested");
            entity.Property(e => e.YDlCashBalance)
                .HasColumnType("money")
                .HasColumnName("yDlCashBalance");
            entity.Property(e => e.YDlEquity)
                .HasColumnType("money")
                .HasColumnName("yDlEquity");
            entity.Property(e => e.YDlMarginBalance)
                .HasColumnType("money")
                .HasColumnName("yDlMarginBalance");
            entity.Property(e => e.YDlMarginMarketValue)
                .HasColumnType("money")
                .HasColumnName("yDlMarginMarketValue");
            entity.Property(e => e.YDlMarketValue)
                .HasColumnType("money")
                .HasColumnName("yDlMarketValue");
            entity.Property(e => e.YDlMarketValueShort)
                .HasColumnType("money")
                .HasColumnName("yDlMarketValueShort");
            entity.Property(e => e.YDlMoneyMarketBalance)
                .HasColumnType("money")
                .HasColumnName("yDlMoneyMarketBalance");
            entity.Property(e => e.YDlSmabalance)
                .HasColumnType("money")
                .HasColumnName("yDlSMABalance");
            entity.Property(e => e.YDlcashAvailable)
                .HasColumnType("money")
                .HasColumnName("yDLCashAvailable");
            entity.Property(e => e.YDlmarketValueLong)
                .HasColumnType("money")
                .HasColumnName("yDLMarketValueLong");
            entity.Property(e => e.YInterestPaidOut)
                .HasColumnType("money")
                .HasColumnName("yInterestPaidOut");
            entity.Property(e => e.YInterestReinvested)
                .HasColumnType("money")
                .HasColumnName("yInterestReinvested");
            entity.Property(e => e.YLiquidity)
                .HasColumnType("money")
                .HasColumnName("yLiquidity");
            entity.Property(e => e.YMoneyIn)
                .HasColumnType("money")
                .HasColumnName("yMoneyIn");
            entity.Property(e => e.YMoneyOut)
                .HasColumnType("money")
                .HasColumnName("yMoneyOut");
            entity.Property(e => e.YNetAdjustments)
                .HasColumnType("money")
                .HasColumnName("yNetAdjustments");
            entity.Property(e => e.YNetExpenses)
                .HasColumnType("money")
                .HasColumnName("yNetExpenses");
            entity.Property(e => e.YNetFees)
                .HasColumnType("money")
                .HasColumnName("yNetFees");
            entity.Property(e => e.YNetGift)
                .HasColumnType("money")
                .HasColumnName("yNetGift");
            entity.Property(e => e.YNetTransfers)
                .HasColumnType("money")
                .HasColumnName("yNetTransfers");
            entity.Property(e => e.YOutSideMoneyIn)
                .HasColumnType("money")
                .HasColumnName("yOutSideMoneyIn");
            entity.Property(e => e.YOutSideMoneyNet)
                .HasColumnType("money")
                .HasColumnName("yOutSideMoneyNet");
            entity.Property(e => e.YOutSideMoneyOut)
                .HasColumnType("money")
                .HasColumnName("yOutSideMoneyOut");
            entity.Property(e => e.YRealGain)
                .HasColumnType("money")
                .HasColumnName("yRealGain");
            entity.Property(e => e.YUnrealGain)
                .HasColumnType("money")
                .HasColumnName("yUnrealGAin");
            entity.Property(e => e.Ymktval)
                .HasColumnType("money")
                .HasColumnName("ymktval");
        });

        modelBuilder.Entity<AanvstAccountDownloadedInfo>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvstAccountDownloadedInfo");

            entity.HasIndex(e => e.IKeyAccount, "AANvstAccountDownloadedInfo_ByAccount");

            entity.HasIndex(e => e.GUid, "AANvstAccountDownloadedInfo_byGuid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CInvestorTaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cInvestorTaxID");
            entity.Property(e => e.COwnerTaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOwnerTaxID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyAccount).HasColumnName("iKeyAccount");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MDlRegistration)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("mDlRegistration");
        });

        modelBuilder.Entity<AanvstAccountPartnerExportLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvstAccountPartnerExportLink");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyId");
            entity.Property(e => e.IKeyAccount).HasColumnName("iKeyAccount");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
        });

        modelBuilder.Entity<AanvstAccountPdcr>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_AAAccountPdcr");

            entity.ToTable("AANvstAccountPdcr", tb => tb.HasTrigger("tg_AANvstAccountPdcrUpdate"));

            entity.HasIndex(e => e.IKeyAccount, "By_Acct_AAAccountPdcr");

            entity.HasIndex(e => e.GUid, "by_Guid_AAAccountPdcr").IsUnique();

            entity.HasIndex(e => e.IKeyProducerRef, "by_PdcrRef_AAAccountPdcr");

            entity.HasIndex(e => e.IKeyProducer, "by_Pdcr_AAAccountPdcr");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagProducerDirect).HasColumnName("bFlagProducerDirect");
            entity.Property(e => e.CDownloadCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDownloadCode");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeProducerLevel).HasColumnName("iCodeProducerLevel");
            entity.Property(e => e.IKeyAccount).HasColumnName("iKeyAccount");
            entity.Property(e => e.IKeyProducer).HasColumnName("iKeyProducer");
            entity.Property(e => e.IKeyProducerRef).HasColumnName("iKeyProducerRef");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.NProducerRenew)
                .HasColumnType("numeric(9, 3)")
                .HasColumnName("nProducerRenew");
            entity.Property(e => e.NProducerSplit)
                .HasColumnType("numeric(9, 3)")
                .HasColumnName("nProducerSplit");
        });

        modelBuilder.Entity<AanvstAccountRelation>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_AAAccountRel");

            entity.ToTable("AANvstAccountRelation");

            entity.HasIndex(e => new { e.IKeyClient, e.IKeyAcct, e.ICodeRelType }, "AANvstAccountRelation_ByClAcctType").IsUnique();

            entity.HasIndex(e => e.ICodeRelType, "IX_AANvstAccountRelation_RelType");

            entity.HasIndex(e => e.IKeyAcct, "by_Acct_AAAccountRel");

            entity.HasIndex(e => e.IKeyClient, "by_Client_AAAccountRel");

            entity.HasIndex(e => e.GUid, "by_Guid_AAAccountRel").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagPrimary).HasColumnName("bFlagPrimary");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasComment("\" \"")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeRelType).HasColumnName("iCodeRelType");
            entity.Property(e => e.IKeyAcct).HasColumnName("iKeyAcct");
            entity.Property(e => e.IKeyClient).HasColumnName("iKeyClient");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanvstCalculationFormula>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAANvCalc");

            entity.ToTable("AANvstCalculationFormula");

            entity.HasIndex(e => e.GUid, "by_Guid_AANvCalc").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cfieldname)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasColumnName("cfieldname");
            entity.Property(e => e.Cformuladesc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasColumnName("cformuladesc");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Mformula)
                .IsRequired()
                .HasDefaultValueSql("('0')")
                .HasColumnType("text")
                .HasColumnName("mformula");
        });

        modelBuilder.Entity<AanvstControl>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvstControl");

            entity.HasIndex(e => e.GUid, "AANvstContro_byGuidl");

            entity.HasIndex(e => e.CControlNumber, "AANvstControl_BycControlNumber");

            entity.HasIndex(e => e.IKeyInvestment, "AANvstControl_ByiKeyInvestment");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CControlNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cControlNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyInvestment).HasColumnName("iKeyInvestment");
            entity.Property(e => e.IRecversion).HasColumnName("iRecversion");
        });

        modelBuilder.Entity<AanvstIndex>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AANvstIndex_ByKey");

            entity.ToTable("AANvstIndex");

            entity.HasIndex(e => e.CCodeId, "AANvstIndex_byCode");

            entity.HasIndex(e => e.ICodeExchange, "AANvstIndex_byFamily");

            entity.HasIndex(e => e.GUid, "AANvstIndex_byGuid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CCodeId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCodeID");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CDownloadId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDownloadID");
            entity.Property(e => e.CNewDownloadId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cNewDownloadID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DAvailable)
                .HasColumnType("datetime")
                .HasColumnName("dAvailable");
            entity.Property(e => e.DExpiration)
                .HasColumnType("datetime")
                .HasColumnName("dExpiration");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeCountry).HasColumnName("iCodeCountry");
            entity.Property(e => e.ICodeExchange).HasColumnName("iCodeExchange");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanvstIndexFamily>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AANvstIndexFamily_ByKey");

            entity.ToTable("AANvstIndexFamily");

            entity.HasIndex(e => e.GUid, "AANvstIndexFamily_byGuid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeCountry).HasColumnName("iCodeCountry");
            entity.Property(e => e.ICodeExchange).HasColumnName("iCodeExchange");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanvstIndexPrice>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AANvstIndexPrice_byKey");

            entity.ToTable("AANvstIndexPrice");

            entity.HasIndex(e => e.GUid, "AANvstIndexPrice_byGuid");

            entity.HasIndex(e => e.IKeyIndex, "AANvstIndexPrice_byIndex");

            entity.HasIndex(e => new { e.IKeyIndex, e.DPrice }, "AANvstIndexPrice_byIndexAndDate");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPrice)
                .HasColumnType("date")
                .HasColumnName("dPrice");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyIndex).HasColumnName("iKeyIndex");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iRecVersion");
            entity.Property(e => e.N10YearReturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("n10YearReturn");
            entity.Property(e => e.N10YearReturnAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("n10YearReturnAnnualized");
            entity.Property(e => e.N1YearReturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("n1YearReturn");
            entity.Property(e => e.N3YearReturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("n3YearReturn");
            entity.Property(e => e.N3YearReturnAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("n3YearReturnAnnualized");
            entity.Property(e => e.N5YearReturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("n5YearReturn");
            entity.Property(e => e.N5YearReturnAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("n5YearReturnAnnualized");
            entity.Property(e => e.NClose)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nClose");
            entity.Property(e => e.NHigh)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nHigh");
            entity.Property(e => e.NLow)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nLow");
            entity.Property(e => e.NMonthReturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nMonthReturn");
            entity.Property(e => e.NQtrReturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nQtrReturn");
            entity.Property(e => e.NYtdreturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nYTDReturn");
        });

        modelBuilder.Entity<AanvstIndexSubSet>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AANvstIndexSubSet_byKey");

            entity.ToTable("AANvstIndexSubSet");

            entity.HasIndex(e => e.GUid, "AANvstIndexSubSet_ByGuid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastDownLoad)
                .HasColumnType("date")
                .HasColumnName("dLastDownLoad");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyIndex).HasColumnName("iKeyIndex");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanvstLotAndSplitLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvstLotAndSplitLink", tb => tb.HasTrigger("tg_InvestmentLotAndSplitDelete"));

            entity.HasIndex(e => e.IKeyLot, "AANvstLotAndSplitLink_ByLot");

            entity.HasIndex(e => e.IKeySplit, "AANvstLotAndSplitLink_BySplit");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyLot).HasColumnName("iKeyLot");
            entity.Property(e => e.IKeySplit).HasColumnName("iKeySplit");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKey).WithOne(p => p.AanvstLotAndSplitLink)
                .HasForeignKey<AanvstLotAndSplitLink>(d => d.IKeyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AANvstLotAndSplitLink_AANvstSymbolSplit");

            entity.HasOne(d => d.IKeyNavigation).WithOne(p => p.AanvstLotAndSplitLink)
                .HasForeignKey<AanvstLotAndSplitLink>(d => d.IKeyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AANvstLotAndSplitLink_AANvstTaxLot");
        });

        modelBuilder.Entity<AanvstMarketValuation>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvstMarketValuation");

            entity.HasIndex(e => e.DActivity, "AANvstMarketValuation_ByActivity");

            entity.HasIndex(e => e.YMoneyIn, "AANvstMarketValuation_ByMoneyIn");

            entity.HasIndex(e => e.IKeyNvst, "AANvstMarketValuation_ByNvst");

            entity.HasIndex(e => new { e.IKeyNvst, e.DActivity }, "AANvstMarketValuation_byGetValues").IsDescending();

            entity.HasIndex(e => e.YMoneyOut, "AANvstMarketValuation_byMoneyOut");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagExpiration).HasColumnName("bFlagExpiration");
            entity.Property(e => e.BFlagInit)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bFlagInit");
            entity.Property(e => e.BFlagPeriod).HasColumnName("bFlagPeriod");
            entity.Property(e => e.BFlagRorPeriod).HasColumnName("bFlagRorPeriod");
            entity.Property(e => e.BFlagSkipRor).HasColumnName("bFlagSkipRor");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DActivity)
                .HasColumnType("date")
                .HasColumnName("dActivity");
            entity.Property(e => e.DClosingNav)
                .HasColumnType("date")
                .HasColumnName("dClosingNav");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DOpeningNav)
                .HasColumnType("date")
                .HasColumnName("dOpeningNav");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyNvst).HasColumnName("iKeyNvst");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.NBeginingOfDayShares)
                .HasColumnType("numeric(18, 6)")
                .HasColumnName("nBeginingOfDayShares");
            entity.Property(e => e.NBeginingOfTradeDateShares)
                .HasColumnType("numeric(18, 6)")
                .HasColumnName("nBeginingOfTradeDateShares");
            entity.Property(e => e.NClosingNav)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nClosingNav");
            entity.Property(e => e.NEndOfDayShares)
                .HasColumnType("numeric(18, 6)")
                .HasColumnName("nEndOfDayShares");
            entity.Property(e => e.NEndOfTradeDateShares)
                .HasColumnType("numeric(18, 6)")
                .HasColumnName("nEndOfTradeDateShares");
            entity.Property(e => e.NOpeningNav)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nOpeningNav");
            entity.Property(e => e.YAccountDistRecievedIntoCashBalance)
                .HasColumnType("money")
                .HasColumnName("yAccountDistRecievedIntoCashBalance");
            entity.Property(e => e.YAccountDistributionsInternal)
                .HasColumnType("money")
                .HasColumnName("yAccountDistributionsInternal");
            entity.Property(e => e.YAccountDistributionsPaidOut)
                .HasColumnType("money")
                .HasColumnName("yAccountDistributionsPaidOut");
            entity.Property(e => e.YAccountFlowIn)
                .HasColumnType("money")
                .HasColumnName("yAccountFlowIn");
            entity.Property(e => e.YAccountFlowOut)
                .HasColumnType("money")
                .HasColumnName("yAccountFlowOut");
            entity.Property(e => e.YAccruedInterest)
                .HasColumnType("money")
                .HasColumnName("yAccruedInterest");
            entity.Property(e => e.YAccruedInterestInPeriod)
                .HasColumnType("money")
                .HasColumnName("yAccruedInterestInPeriod");
            entity.Property(e => e.YBeginingOfDayValue)
                .HasColumnType("money")
                .HasColumnName("yBeginingOfDayValue");
            entity.Property(e => e.YBeginingOfTradeDateValue)
                .HasColumnType("money")
                .HasColumnName("yBeginingOfTradeDateValue");
            entity.Property(e => e.YCapGainsLtpaidOut)
                .HasColumnType("money")
                .HasColumnName("yCapGainsLTPaidOut");
            entity.Property(e => e.YCapGainsLtreinvested)
                .HasColumnType("money")
                .HasColumnName("yCapGainsLTReinvested");
            entity.Property(e => e.YCapGainsStpaidOut)
                .HasColumnType("money")
                .HasColumnName("yCapGainsSTPaidOut");
            entity.Property(e => e.YCapGainsStreinvested)
                .HasColumnType("money")
                .HasColumnName("yCapGainsSTReinvested");
            entity.Property(e => e.YClientFlowIn)
                .HasColumnType("money")
                .HasColumnName("yClientFlowIn");
            entity.Property(e => e.YClientFlowOut)
                .HasColumnType("money")
                .HasColumnName("yClientFlowOut");
            entity.Property(e => e.YClientNetFlow)
                .HasColumnType("money")
                .HasColumnName("yClientNetFlow");
            entity.Property(e => e.YCommissionOnTransaction)
                .HasColumnType("money")
                .HasColumnName("yCommissionOnTransaction");
            entity.Property(e => e.YCostBasis)
                .HasColumnType("money")
                .HasColumnName("yCostBasis");
            entity.Property(e => e.YDistributionsPaidOut)
                .HasColumnType("money")
                .HasColumnName("yDistributionsPaidOut");
            entity.Property(e => e.YDistributionsReinvested)
                .HasColumnType("money")
                .HasColumnName("yDistributionsReinvested");
            entity.Property(e => e.YDividendPaidOut)
                .HasColumnType("money")
                .HasColumnName("yDividendPaidOut");
            entity.Property(e => e.YDividendReinvested)
                .HasColumnType("money")
                .HasColumnName("yDividendReinvested");
            entity.Property(e => e.YEarnings)
                .HasColumnType("money")
                .HasColumnName("yEarnings");
            entity.Property(e => e.YEndOfDayValue)
                .HasColumnType("money")
                .HasColumnName("yEndOfDayValue");
            entity.Property(e => e.YEndOfTradeDateValue)
                .HasColumnType("money")
                .HasColumnName("yEndOfTradeDateValue");
            entity.Property(e => e.YExpenseOnTransaction)
                .HasColumnType("money")
                .HasColumnName("yExpenseOnTransaction");
            entity.Property(e => e.YExpenses)
                .HasColumnType("money")
                .HasColumnName("yExpenses");
            entity.Property(e => e.YFees)
                .HasColumnType("money")
                .HasColumnName("yFees");
            entity.Property(e => e.YFlow)
                .HasColumnType("money")
                .HasColumnName("yFlow");
            entity.Property(e => e.YGainsRealized)
                .HasColumnType("money")
                .HasColumnName("yGainsRealized");
            entity.Property(e => e.YInterestPaidOut)
                .HasColumnType("money")
                .HasColumnName("yInterestPaidOut");
            entity.Property(e => e.YInterestReinvested)
                .HasColumnType("money")
                .HasColumnName("yInterestReinvested");
            entity.Property(e => e.YMoneyIn)
                .HasColumnType("money")
                .HasColumnName("yMoneyIn");
            entity.Property(e => e.YMoneyOut)
                .HasColumnType("money")
                .HasColumnName("yMoneyOut");
        });

        modelBuilder.Entity<AanvstNav>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAANav");

            entity.ToTable("AANvstNav", tb =>
                {
                    tb.HasTrigger("tg_NavDelete");
                    tb.HasTrigger("tg_NavInsert");
                    tb.HasTrigger("tg_NavUpdate");
                });

            entity.HasIndex(e => e.IKeyModule, "AANvstNav_Module");

            entity.HasIndex(e => e.IKeyReturn, "AANvstNav_byReturn");

            entity.HasIndex(e => new { e.Ikeysymbol, e.Ddate }, "AANvstNav_bySymbolDateDesc").IsDescending();

            entity.HasIndex(e => e.IKeyDlffileCreated, "IX_AANvstNav_dlfFile");

            entity.HasIndex(e => e.Ddate, "by Date_AANav");

            entity.HasIndex(e => e.Ikeysymbol, "by_symbol");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddate)
                .HasColumnType("date")
                .HasColumnName("ddate");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyDlffileCreated).HasColumnName("iKeyDLFFileCreated");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyReturn).HasColumnName("iKeyReturn");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IVolume).HasColumnName("iVolume");
            entity.Property(e => e.Ikeysymbol).HasColumnName("ikeysymbol");
            entity.Property(e => e.NHigh)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nHigh");
            entity.Property(e => e.NLow)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nLow");
            entity.Property(e => e.NPoolFactor)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(12, 8)")
                .HasColumnName("nPoolFactor");
            entity.Property(e => e.Nnav)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nnav");

            entity.HasOne(d => d.IKeyReturnNavigation).WithMany(p => p.AanvstNavs)
                .HasForeignKey(d => d.IKeyReturn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AANvstNav_AANvstNavReturn");
        });

        modelBuilder.Entity<AanvstNavReturn>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvstNavReturn");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.N1YearReturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("n1YearReturn");
            entity.Property(e => e.N3YearReturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("n3YearReturn");
            entity.Property(e => e.N5YearReturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("n5YearReturn");
            entity.Property(e => e.NMtdreturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nMTDReturn");
            entity.Property(e => e.NQtdreturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nQTDReturn");
            entity.Property(e => e.NYtdreturn)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nYTDReturn");
        });

        modelBuilder.Entity<AanvstNavTemp>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvstNavTemp");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DNav)
                .HasColumnType("date")
                .HasColumnName("dNav");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GGuid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gGuid");
            entity.Property(e => e.IKeyDlffileCreated).HasColumnName("iKeyDLFFileCreated");
            entity.Property(e => e.IKeyIndex).HasColumnName("iKeyIndex");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeySymbol).HasColumnName("iKeySymbol");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IVolume).HasColumnName("iVolume");
            entity.Property(e => e.NHigh)
                .HasColumnType("decimal(16, 6)")
                .HasColumnName("nHigh");
            entity.Property(e => e.NLow)
                .HasColumnType("decimal(16, 6)")
                .HasColumnName("nLow");
            entity.Property(e => e.NNav)
                .HasColumnType("decimal(16, 6)")
                .HasColumnName("nNav");
        });

        modelBuilder.Entity<AanvstNewBiz>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvstNewBiz");

            entity.HasIndex(e => e.GUid, "By_Guid_AANvstNewBiz").IsUnique();

            entity.HasIndex(e => e.IKeyAccount, "by_nvst_AANvstNewBiz");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CAction)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cAction");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DCompleted)
                .HasColumnType("date")
                .HasColumnName("dCompleted");
            entity.Property(e => e.DInitial)
                .HasColumnType("date")
                .HasColumnName("dInitial");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAction).HasColumnName("iCodeAction");
            entity.Property(e => e.ICodePriority).HasColumnName("iCodePriority");
            entity.Property(e => e.IKeyAccount).HasColumnName("iKeyAccount");
            entity.Property(e => e.IKeyFollowup).HasColumnName("iKeyFollowup");
            entity.Property(e => e.IKeyNote).HasColumnName("iKeyNote");
            entity.Property(e => e.IKeyVendor).HasColumnName("iKeyVendor");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
            entity.Property(e => e.YAmount)
                .HasColumnType("money")
                .HasColumnName("yAmount");

            entity.HasOne(d => d.IKeyAccountNavigation).WithMany(p => p.AanvstNewBizs)
                .HasForeignKey(d => d.IKeyAccount)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AANvstNewBiz_AANvst");
        });

        modelBuilder.Entity<AanvstPosition>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvstPosition", tb =>
                {
                    tb.HasTrigger("tg_InvestmentPositionDelete");
                    tb.HasTrigger("tg_InvestmentPositionInsert");
                });

            entity.HasIndex(e => e.ICodeAccountValueType, "AANvstPosition_ByAcctValType");

            entity.HasIndex(e => new { e.IKeyNvst, e.DPosition, e.ICodeAccountValueType, e.IKeyId }, "AANvstPosition_Multiple");

            entity.HasIndex(e => e.DPosition, "AANvstPosition_byDateOnly");

            entity.HasIndex(e => e.IKeyModule, "AANvstPosition_byModule");

            entity.HasIndex(e => e.IKeyNvst, "AANvstPosition_byNvst");

            entity.HasIndex(e => new { e.IKeyNvst, e.DPosition }, "AANvstPosition_byNvstDate").HasFillFactor(90);

            entity.HasIndex(e => new { e.IKeyNvst, e.IKeyReconcile, e.DPosition }, "AANvstPosition_byNvstRecDate");

            entity.HasIndex(e => e.ICodePositionType, "AANvstPosition_byPositionType");

            entity.HasIndex(e => e.IKeyReconcile, "AANvstPosition_byReconcile");

            entity.HasIndex(e => e.IKeyDlffileCreated, "IX_AANvstPosition_dlfFile");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagPositionOnly).HasColumnName("bFlagPositionOnly");
            entity.Property(e => e.BFlagReconcileToInit).HasColumnName("bFlagReconcileToInit");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Ccusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccusip");
            entity.Property(e => e.Ccusipext)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccusipext");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPosition)
                .HasColumnType("date")
                .HasColumnName("dPosition");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAccountValueType).HasColumnName("iCodeAccountValueType");
            entity.Property(e => e.ICodePositionType).HasColumnName("iCodePositionType");
            entity.Property(e => e.IKeyDlffileCreated).HasColumnName("iKeyDLFFileCreated");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyNvst).HasColumnName("iKeyNvst");
            entity.Property(e => e.IKeyReconcile).HasColumnName("iKeyReconcile");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.NPosition)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nPosition");
            entity.Property(e => e.Nshareprice)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nshareprice");

            entity.HasOne(d => d.IKeyModuleNavigation).WithMany(p => p.AanvstPositions)
                .HasForeignKey(d => d.IKeyModule)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AANvstPosition_AAModule");

            entity.HasOne(d => d.IKeyNvstNavigation).WithMany(p => p.AanvstPositions)
                .HasForeignKey(d => d.IKeyNvst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AANvstPosition_AANvst");
        });

        modelBuilder.Entity<AanvstProcessTransactionKey>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AANvstProcessTransactionKeys");

            entity.HasIndex(e => new { e.IKeyNvst, e.IKeyUser }, "IX_AANvstProcessTransactionKeys");

            entity.HasIndex(e => e.IKeyTransaction, "IX_AANvstProcessTransactionKeys_1");

            entity.Property(e => e.BFlagFreezeBasis).HasColumnName("bFlagFreezeBasis");
            entity.Property(e => e.Bflaginit).HasColumnName("bflaginit");
            entity.Property(e => e.IKeyNvst).HasColumnName("iKeyNvst");
            entity.Property(e => e.IKeyTransaction).HasColumnName("iKeyTransaction");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
        });

        modelBuilder.Entity<AanvstSale>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_AANvTransSaleGroup");

            entity.ToTable("AANvstSale", tb => tb.HasTrigger("tg_NvstSaleDelete"));

            entity.HasIndex(e => new { e.BFlagSharesValidated, e.BFlagBasisValidated }, "AANvstSale_BasisValidation");

            entity.HasIndex(e => e.IKeyTrans, "by_Trans_AANvTransSaleGroup");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagBasisValidated).HasColumnName("bFlagBasisValidated");
            entity.Property(e => e.BFlagSharesValidated).HasColumnName("bFlagSharesValidated");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyTrans).HasColumnName("iKeyTrans");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanvstSymbol>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAASymbol");

            entity.ToTable("AANvstSymbol", tb =>
                {
                    tb.HasTrigger("tg_AANvstSymbolDelete");
                    tb.HasTrigger("tg_AANvstSymbolInsert");
                    tb.HasTrigger("tg_AANvstSymbolUpdate");
                });

            entity.HasIndex(e => e.Calternateid, "AANvstSymbol_AlternateID").HasFillFactor(90);

            entity.HasIndex(e => e.COldAlternate, "AANvstSymbol_AlternateIDOld").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyUnderlyingSecurity, "AANvstSymbol_ByUnderlying").HasFillFactor(90);

            entity.HasIndex(e => new { e.Ccusip, e.Ccusipext }, "AANvstSymbol_CusipCusipExt").HasFillFactor(90);

            entity.HasIndex(e => new { e.Ccusip, e.Coldcusip }, "AANvstSymbol_CusipOldCusip").HasFillFactor(90);

            entity.HasIndex(e => new { e.Ccusip, e.Coldext }, "AANvstSymbol_CusipOldExt").HasFillFactor(90);

            entity.HasIndex(e => new { e.Coldcusip, e.Coldext }, "AANvstSymbol_OldCusipOldExt").HasFillFactor(90);

            entity.HasIndex(e => new { e.BFlagOption, e.DOptionExpiration }, "AANvstSymbol_byOption").HasFillFactor(90);

            entity.HasIndex(e => e.Icodecategory, "AANvstSymbol_iCodeCategory").HasFillFactor(90);

            entity.HasIndex(e => e.Icodenvsttype, "AANvstSymbol_iCodeNvstType").HasFillFactor(90);

            entity.HasIndex(e => e.Icodeobjective, "AANvstSymbol_iCodeObjective").HasFillFactor(90);

            entity.HasIndex(e => e.Icodesector, "AANvstSymbol_iCodeSector").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyDlfaddProcess, "AANvstSymbol_iKeyDLFAddProcess").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyDlfbatchCreated, "AANvstSymbol_iKeyDLFBatchCreated").HasFillFactor(90);

            entity.HasIndex(e => e.Ikeymgr, "AANvstSymbol_iKeyManager").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyModule, "AANvstSymbol_iKeyModule").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyModuleCreated, "AANvstSymbol_iKeyModuleCreated").HasFillFactor(90);

            entity.HasIndex(e => new { e.Coldcusip, e.Ccusipext }, "AANvstSymbol_oldCusipNewExt").HasFillFactor(90);

            entity.HasIndex(e => e.Icodecompany, "IAANvstSymbol_iCodeCompany").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyDlffileCreated, "IX_AANvstSymbol_dlfFile").HasFillFactor(90);

            entity.HasIndex(e => e.GUid, "by_Guid_AASymbol").IsUnique();

            entity.HasIndex(e => e.Ccusip, "by_cusip").HasFillFactor(90);

            entity.HasIndex(e => e.Ccusipext, "by_ext").HasFillFactor(90);

            entity.HasIndex(e => e.Coldcusip, "by_oldcus").HasFillFactor(90);

            entity.HasIndex(e => e.Coldext, "by_oldext").HasFillFactor(90);

            entity.HasIndex(e => e.CCodeId, "by_symbol").HasFillFactor(90);

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagAccrueInt).HasColumnName("bFlagAccrueInt");
            entity.Property(e => e.BFlagAddedByDownloadModule).HasColumnName("bFlagAddedByDownloadModule");
            entity.Property(e => e.BFlagFixedIncomeObligation).HasColumnName("bFlagFixedIncomeObligation");
            entity.Property(e => e.BFlagFixedValueTaxLot).HasColumnName("bFlagFixedValueTaxLot");
            entity.Property(e => e.BFlagIntBear).HasColumnName("bFlagIntBear");
            entity.Property(e => e.BFlagInterestInDlpositions).HasColumnName("bFlagInterestInDLPositions");
            entity.Property(e => e.BFlagOption).HasColumnName("bFlagOption");
            entity.Property(e => e.BFlagOverridePositionEod).HasColumnName("bFlagOverridePositionEOD");
            entity.Property(e => e.BFlagPool).HasColumnName("bFlagPool");
            entity.Property(e => e.BFlagTrailerCommission).HasColumnName("bFlagTrailerCommission");
            entity.Property(e => e.BFlagUserOverrideFactors).HasColumnName("bFlagUserOverrideFactors");
            entity.Property(e => e.Bflagfixedval).HasColumnName("bflagfixedval");
            entity.Property(e => e.Bflagincreasecb).HasColumnName("bflagincreasecb");
            entity.Property(e => e.CAutoPriceCountry)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAutoPriceCountry");
            entity.Property(e => e.CAutoPriceExchange)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAutoPriceExchange");
            entity.Property(e => e.CCarrierPriceId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCarrierPriceID");
            entity.Property(e => e.CCodeId)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCodeId");
            entity.Property(e => e.COldAlternate)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cOldAlternate");
            entity.Property(e => e.CPriceDownloadId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPriceDownloadID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CShareClass)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cShareClass");
            entity.Property(e => e.CUnderlyingFund)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cUnderlyingFund");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Calternateid)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("calternateid");
            entity.Property(e => e.Ccusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccusip");
            entity.Property(e => e.Ccusipext)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccusipext");
            entity.Property(e => e.Cdescription)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cdescription");
            entity.Property(e => e.Coldcusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("coldcusip");
            entity.Property(e => e.Coldext)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("coldext");
            entity.Property(e => e.DCallable)
                .HasColumnType("date")
                .HasColumnName("dCallable");
            entity.Property(e => e.DDlPosition)
                .HasColumnType("date")
                .HasColumnName("dDlPosition");
            entity.Property(e => e.DDlPrice)
                .HasColumnType("date")
                .HasColumnName("dDlPrice");
            entity.Property(e => e.DDlRegistration)
                .HasColumnType("date")
                .HasColumnName("dDlRegistration");
            entity.Property(e => e.DDlSecurity)
                .HasColumnType("date")
                .HasColumnName("dDlSecurity");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastPriceDownload)
                .HasColumnType("date")
                .HasColumnName("dLastPriceDownload");
            entity.Property(e => e.DMature)
                .HasColumnType("date")
                .HasColumnName("dMature");
            entity.Property(e => e.DOptionExpiration)
                .HasColumnType("date")
                .HasColumnName("dOptionExpiration");
            entity.Property(e => e.DTrailerBegin)
                .HasColumnType("date")
                .HasColumnName("dTrailerBegin");
            entity.Property(e => e.DTrailerPaidThru)
                .HasColumnType("date")
                .HasColumnName("dTrailerPaidThru");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAssetClass).HasColumnName("iCodeAssetClass");
            entity.Property(e => e.ICodeBasisOnReinvestment).HasColumnName("iCodeBasisOnReinvestment");
            entity.Property(e => e.ICodeCountry).HasColumnName("iCodeCountry");
            entity.Property(e => e.ICodeExchange).HasColumnName("iCodeExchange");
            entity.Property(e => e.ICodeLiquidity).HasColumnName("iCodeLiquidity");
            entity.Property(e => e.ICodeReconcileFrequency).HasColumnName("iCodeReconcileFrequency");
            entity.Property(e => e.ICodeRisk).HasColumnName("iCodeRisk");
            entity.Property(e => e.ICodeSecurityCurrency).HasColumnName("iCodeSecurityCurrency");
            entity.Property(e => e.ICodeUpdate).HasColumnName("iCodeUpdate");
            entity.Property(e => e.IKeyDlfaddProcess).HasColumnName("iKeyDLFAddProcess");
            entity.Property(e => e.IKeyDlfbatchCreated).HasColumnName("iKeyDLFBatchCreated");
            entity.Property(e => e.IKeyDlffileCreated).HasColumnName("iKeyDLFFileCreated");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyModuleCreated).HasColumnName("iKeyModuleCreated");
            entity.Property(e => e.IKeyUnderlyingSecurity).HasColumnName("iKeyUnderlyingSecurity");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ITrailerBeginsNmonthsAfterAcquired).HasColumnName("iTrailerBeginsNMonthsAfterAcquired");
            entity.Property(e => e.ITrailerCommTimesYear).HasColumnName("iTrailerCommTimesYear");
            entity.Property(e => e.Icodecategory).HasColumnName("icodecategory");
            entity.Property(e => e.Icodecompany).HasColumnName("icodecompany");
            entity.Property(e => e.Icodenvsttype).HasColumnName("icodenvsttype");
            entity.Property(e => e.Icodeobjective).HasColumnName("icodeobjective");
            entity.Property(e => e.Icodesector).HasColumnName("icodesector");
            entity.Property(e => e.Ikeymgr).HasColumnName("ikeymgr");
            entity.Property(e => e.N10yearreturn)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("n10yearreturn");
            entity.Property(e => e.N1yearreturn)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("n1yearreturn");
            entity.Property(e => e.N3yearreturn)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("n3yearreturn");
            entity.Property(e => e.N5yearreturn)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("n5yearreturn");
            entity.Property(e => e.NAlpha)
                .HasColumnType("numeric(9, 2)")
                .HasColumnName("nAlpha");
            entity.Property(e => e.NAnnualInterestRate)
                .HasColumnType("decimal(9, 4)")
                .HasColumnName("nAnnualInterestRate");
            entity.Property(e => e.NReconcileTolerance)
                .HasColumnType("numeric(8, 6)")
                .HasColumnName("nReconcileTolerance");
            entity.Property(e => e.NStandardDeviation)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("nStandardDeviation");
            entity.Property(e => e.NTrailerBasisPoints)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("nTrailerBasisPoints");
            entity.Property(e => e.NTrailerCommissionPct)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nTrailerCommissionPct");
            entity.Property(e => e.Nbeta)
                .HasColumnType("numeric(9, 2)")
                .HasColumnName("nbeta");
            entity.Property(e => e.Nfactor)
                .HasColumnType("numeric(12, 6)")
                .HasColumnName("nfactor");
            entity.Property(e => e.Nnormalload)
                .HasColumnType("numeric(12, 6)")
                .HasColumnName("nnormalload");
            entity.Property(e => e.Nshrfactor)
                .HasColumnType("numeric(12, 6)")
                .HasColumnName("nshrfactor");
            entity.Property(e => e.Nyield)
                .HasColumnType("numeric(9, 3)")
                .HasColumnName("nyield");
            entity.Property(e => e.Nyieldval)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("nyieldval");
            entity.Property(e => e.YCallPrice)
                .HasColumnType("money")
                .HasColumnName("yCallPrice");
            entity.Property(e => e.YStrikePrice)
                .HasColumnType("money")
                .HasColumnName("yStrikePrice");
        });

        modelBuilder.Entity<AanvstSymbolSplit>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AANvstSymbolSplit_ByKey");

            entity.ToTable("AANvstSymbolSplit", tb =>
                {
                    tb.HasTrigger("tg_SymbolSplitDelete");
                    tb.HasTrigger("tg_SymbolSplitUpdate");
                });

            entity.HasIndex(e => e.IKeySymbol, "AANvstSymbolSplit_BySymbol");

            entity.HasIndex(e => new { e.IKeySymbol, e.DTranDate }, "AANvstSymbolSplit_BySymbolDate");

            entity.HasIndex(e => e.DTranDate, "AANvstSymbolSplit_byDate");

            entity.HasIndex(e => e.GUid, "AANvstSymbolSplit_byGuid");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagGenerated).HasColumnName("bFlagGenerated");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DGenerated)
                .HasColumnType("date")
                .HasColumnName("dGenerated");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DTranDate)
                .HasColumnType("date")
                .HasColumnName("dTranDate");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeySymbol).HasColumnName("iKeySymbol");
            entity.Property(e => e.IKeyTransType).HasColumnName("iKeyTransType");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.NFormula)
                .HasColumnType("decimal(9, 4)")
                .HasColumnName("nFormula");
            entity.Property(e => e.NSharesAfter)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("nSharesAfter");
            entity.Property(e => e.NSharesBefore)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("nSharesBefore");
        });

        modelBuilder.Entity<AanvstTaxLot>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAnvstTaxLot_byKey");

            entity.ToTable("AANvstTaxLot", tb =>
                {
                    tb.HasTrigger("tg_InvestmentTaxLotDelete");
                    tb.HasTrigger("tg_InvestmentTaxLotUpdate");
                });

            entity.HasIndex(e => new { e.IKeySales, e.DTrandate }, "AANvstTaxLot_BySaleKeyAndDate");

            entity.HasIndex(e => e.NBasisPerShareRaw, "AANvstTaxLot_byBasisRaw");

            entity.HasIndex(e => e.DTrandate, "AANvstTaxLot_byDate");

            entity.HasIndex(e => e.DHoldingDate, "AANvstTaxLot_byHoldingDate");

            entity.HasIndex(e => e.NShares, "AANvstTaxLot_byShares");

            entity.HasIndex(e => e.IKeyTrans, "AAnvstTaxLot_ByTrans");

            entity.HasIndex(e => e.IKeySales, "By_sales");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagFreeze).HasColumnName("bFlagFreeze");
            entity.Property(e => e.BFlagPrimary).HasColumnName("bFlagPrimary");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DHoldingDate)
                .HasColumnType("date")
                .HasColumnName("dHoldingDate");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DTrandate)
                .HasColumnType("date")
                .HasColumnName("dTrandate");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeySales).HasColumnName("iKeySales");
            entity.Property(e => e.IKeyTrans).HasColumnName("iKeyTrans");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
            entity.Property(e => e.NBasisPerShare)
                .HasComputedColumnSql("([nBasisRatio]*[nBasisPerShareRaw]+[nBasisPerShareAdjustment])", false)
                .HasColumnType("numeric(28, 12)")
                .HasColumnName("nBasisPerShare");
            entity.Property(e => e.NBasisPerShareAdjustment)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nBasisPerShareAdjustment");
            entity.Property(e => e.NBasisPerShareRaw)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nBasisPerShareRaw");
            entity.Property(e => e.NBasisRatio)
                .HasDefaultValueSql("((1))")
                .HasColumnType("numeric(10, 6)")
                .HasColumnName("nBasisRatio");
            entity.Property(e => e.NShares)
                .HasColumnType("numeric(14, 6)")
                .HasColumnName("nShares");

            entity.HasOne(d => d.IKeySalesNavigation).WithMany(p => p.AanvstTaxLots)
                .HasForeignKey(d => d.IKeySales)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AANvTransSale_AANvTransSaleGroup");
        });

        modelBuilder.Entity<AanvstTaxLotHoldingDateLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AANvstTaxLotHoldingDateLink");

            entity.HasIndex(e => e.IKeyHoldingPeriod, "AANvstTaxLotHoldingDateLink_ByIKeyHolding");

            entity.HasIndex(e => e.IKeyLot, "AANvstTaxLotHoldingDateLink_ByiKeyLot");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("guid");
            entity.Property(e => e.IKeyHoldingPeriod).HasColumnName("iKeyHoldingPeriod");
            entity.Property(e => e.IKeyLot).HasColumnName("iKeyLot");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AanvstValue>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAANvVal");

            entity.ToTable("AANvstValue");

            entity.HasIndex(e => e.Nnumunits, "AANvstValue_Shares");

            entity.HasIndex(e => e.DValdate, "AANvstValue_ValueDate");

            entity.HasIndex(e => e.GUid, "by_Guid_AANvVal").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastInterestCalc)
                .HasColumnType("date")
                .HasColumnName("dLastInterestCalc");
            entity.Property(e => e.DLastTransaction)
                .HasColumnType("date")
                .HasColumnName("dLastTransaction");
            entity.Property(e => e.DNextInterestCalc)
                .HasColumnType("date")
                .HasColumnName("dNextInterestCalc");
            entity.Property(e => e.DProcessStart)
                .HasColumnType("date")
                .HasColumnName("dProcessStart");
            entity.Property(e => e.DValdate)
                .HasColumnType("date")
                .HasColumnName("dValdate");
            entity.Property(e => e.DValuedRor)
                .HasColumnType("date")
                .HasColumnName("dValuedROR");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Drorbegin)
                .HasColumnType("date")
                .HasColumnName("drorbegin");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.NLastProcessUnits)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nLastProcessUnits");
            entity.Property(e => e.NRorSimple)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("nRorSimple");
            entity.Property(e => e.Nnumunits)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nnumunits");
            entity.Property(e => e.Nrordollar)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("nrordollar");
            entity.Property(e => e.Nrortime)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("nrortime");
            entity.Property(e => e.Nunitval)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nunitval");
            entity.Property(e => e.YAccountMoneyIn)
                .HasColumnType("money")
                .HasColumnName("yAccountMoneyIn");
            entity.Property(e => e.YAccountMoneyNet)
                .HasColumnType("money")
                .HasColumnName("yAccountMoneyNet");
            entity.Property(e => e.YAccountMoneyOut)
                .HasColumnType("money")
                .HasColumnName("yAccountMoneyOut");
            entity.Property(e => e.YCapGainLongPaidOut)
                .HasColumnType("money")
                .HasColumnName("yCapGainLongPaidOut");
            entity.Property(e => e.YCapGainLongReinvested)
                .HasColumnType("money")
                .HasColumnName("yCapGainLongReinvested");
            entity.Property(e => e.YCapGainShortPaidOut)
                .HasColumnType("money")
                .HasColumnName("yCapGainShortPaidOut");
            entity.Property(e => e.YCapGainShortReinvested)
                .HasColumnType("money")
                .HasColumnName("yCapGainShortReinvested");
            entity.Property(e => e.YClientMoneyIn)
                .HasColumnType("money")
                .HasColumnName("yClientMoneyIn");
            entity.Property(e => e.YClientMoneyOut)
                .HasColumnType("money")
                .HasColumnName("yClientMoneyOut");
            entity.Property(e => e.YClientNet)
                .HasColumnType("money")
                .HasColumnName("yClientNet");
            entity.Property(e => e.YCommissions)
                .HasColumnType("money")
                .HasColumnName("yCommissions");
            entity.Property(e => e.YCostBasis)
                .HasColumnType("money")
                .HasColumnName("yCostBasis");
            entity.Property(e => e.YDistributionsPaidOut)
                .HasColumnType("money")
                .HasColumnName("yDistributionsPaidOut");
            entity.Property(e => e.YDistributionsReinvested)
                .HasColumnType("money")
                .HasColumnName("yDistributionsReinvested");
            entity.Property(e => e.YDividendPaidOut)
                .HasColumnType("money")
                .HasColumnName("yDividendPaidOut");
            entity.Property(e => e.YDividendReinvested)
                .HasColumnType("money")
                .HasColumnName("yDividendReinvested");
            entity.Property(e => e.YInterestAccrued)
                .HasColumnType("money")
                .HasColumnName("yInterestAccrued");
            entity.Property(e => e.YInterestPaidOut)
                .HasColumnType("money")
                .HasColumnName("yInterestPaidOut");
            entity.Property(e => e.YInterestReinvested)
                .HasColumnType("money")
                .HasColumnName("yInterestReinvested");
            entity.Property(e => e.YInterestToDate)
                .HasColumnType("money")
                .HasColumnName("yInterestToDate");
            entity.Property(e => e.YMoneyIn)
                .HasColumnType("money")
                .HasColumnName("yMoneyIn");
            entity.Property(e => e.YMoneyOut)
                .HasColumnType("money")
                .HasColumnName("yMoneyOut");
            entity.Property(e => e.YNetAdjustments)
                .HasColumnType("money")
                .HasColumnName("yNetAdjustments");
            entity.Property(e => e.YNetExpenses)
                .HasColumnType("money")
                .HasColumnName("yNetExpenses");
            entity.Property(e => e.YNetFees)
                .HasColumnType("money")
                .HasColumnName("yNetFees");
            entity.Property(e => e.YNetGift)
                .HasColumnType("money")
                .HasColumnName("yNetGift");
            entity.Property(e => e.YNetTransfers)
                .HasColumnType("money")
                .HasColumnName("yNetTransfers");
            entity.Property(e => e.YOnDeposit)
                .HasColumnType("money")
                .HasColumnName("yOnDeposit");
            entity.Property(e => e.YOutSideMoneyIn)
                .HasColumnType("money")
                .HasColumnName("yOutSideMoneyIn");
            entity.Property(e => e.YOutSideMoneyNet)
                .HasColumnType("money")
                .HasColumnName("yOutSideMoneyNet");
            entity.Property(e => e.YOutSideMoneyOut)
                .HasColumnType("money")
                .HasColumnName("yOutSideMoneyOut");
            entity.Property(e => e.YRealGain)
                .HasColumnType("money")
                .HasColumnName("yRealGain");
            entity.Property(e => e.YRealGain1Year)
                .HasDefaultValueSql("((0))")
                .HasColumnType("money")
                .HasColumnName("yRealGain1Year");
            entity.Property(e => e.YRealGainOver1Year)
                .HasColumnType("money")
                .HasColumnName("yRealGainOver1Year");
            entity.Property(e => e.YTransactionCost)
                .HasColumnType("money")
                .HasColumnName("yTransactionCost");
            entity.Property(e => e.YUnrealGain)
                .HasColumnType("money")
                .HasColumnName("yUnrealGain");
            entity.Property(e => e.YUnrealGain1Year)
                .HasColumnType("money")
                .HasColumnName("yUnrealGain1Year");
            entity.Property(e => e.YUnrealgainOver1year)
                .HasColumnType("money")
                .HasColumnName("yUnrealgainOver1year");
            entity.Property(e => e.Ymktval)
                .HasColumnType("money")
                .HasColumnName("ymktval");
        });

        modelBuilder.Entity<Aaoffice>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_aaOffice");

            entity.ToTable("AAOffice");

            entity.HasIndex(e => e.GUid, "by_Guid_AAOffice");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.DlastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dlastChange");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaoutlookEntryCalendar>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAOutlookEntryCalendar_byKey");

            entity.ToTable("AAOutlookEntryCalendar");

            entity.HasIndex(e => e.GUid, "AAOutlookEntryCalendar_byGuid").IsUnique();

            entity.HasIndex(e => e.COutlookItemEntryId, "AAOutlookEntryCalendar_byItem");

            entity.HasIndex(e => e.IKeyStore, "AAOutlookEntryCalendar_byStore");

            entity.HasIndex(e => e.IKeyAalink, "AAOutlookEntryCalendar_iKeyLink");

            entity.HasIndex(e => new { e.IKeyStore, e.IKeyAalink }, "IX_AAOutlookEntryCalendar_StoreLink");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.COutlookItemEntryId)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOutlookItemEntryID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSynch)
                .HasPrecision(6)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("dLastSynch");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyAalink).HasColumnName("iKeyAALink");
            entity.Property(e => e.IKeyStore).HasColumnName("iKeyStore");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyAalinkNavigation).WithMany(p => p.AaoutlookEntryCalendars)
                .HasForeignKey(d => d.IKeyAalink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAOutlookEntryCalendar_AACalEvent");

            entity.HasOne(d => d.IKey).WithOne(p => p.AaoutlookEntryCalendar)
                .HasForeignKey<AaoutlookEntryCalendar>(d => d.IKeyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAOutlookEntryCalendar_AAOutlookStore");
        });

        modelBuilder.Entity<AaoutlookEntryEmail>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_dbo.AAOutlookEntryEmail");

            entity.ToTable("AAOutlookEntryEmail");

            entity.HasIndex(e => new { e.IKeyStore, e.COutlookItemEntryId }, "AAOutlookEntryEmail_IkeyStore");

            entity.HasIndex(e => e.IKeyAddress, "AAOutlookEntryEmail_iKeyAddress");

            entity.HasIndex(e => e.IKeyAalink, "AOutlookEntryEmail_Link");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CContact)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cContact");
            entity.Property(e => e.COutlookItemEntryId)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOutlookItemEntryID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSerialID");
            entity.Property(e => e.CSubject)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSubject");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSynch)
                .HasPrecision(6)
                .HasColumnName("dLastSynch");
            entity.Property(e => e.DSent)
                .HasPrecision(6)
                .HasColumnName("dSent");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IAction).HasColumnName("iAction");
            entity.Property(e => e.IKeyAalink).HasColumnName("iKeyAALink");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyStore).HasColumnName("iKeyStore");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaoutlookEntryName>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAOutlookEntryCalendarName_ByKey");

            entity.ToTable("AAOutlookEntryName");

            entity.HasIndex(e => e.GUid, "AAOutlookEntryCalendarName_byGuid").IsUnique();

            entity.HasIndex(e => e.IKeyStore, "AAOutlookEntryCalendarName_byStore");

            entity.HasIndex(e => e.IKeyAalink, "AAOutlookEntryName_ByLink");

            entity.HasIndex(e => e.COutlookItemEntryId, "AAOutlookEntryName_byItem");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.COutlookItemEntryId)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOutlookItemEntryID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSynch)
                .HasPrecision(6)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("dLastSynch");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyAalink).HasColumnName("iKeyAALink");
            entity.Property(e => e.IKeyStore).HasColumnName("iKeyStore");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyAalinkNavigation).WithMany(p => p.AaoutlookEntryNames)
                .HasForeignKey(d => d.IKeyAalink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAOutlookEntryName_AAName");

            entity.HasOne(d => d.IKeyStoreNavigation).WithMany(p => p.AaoutlookEntryNames)
                .HasForeignKey(d => d.IKeyStore)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAOutlookEntryName_AAOutlookStore");
        });

        modelBuilder.Entity<AaoutlookStore>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAOutlookStore_byKey");

            entity.ToTable("AAOutlookStore");

            entity.HasIndex(e => e.GUid, "AAOutlookStore_byGuid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagExchangeServer).HasColumnName("bFlagExchangeServer");
            entity.Property(e => e.CMachineName)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMachineName");
            entity.Property(e => e.COutlookFolderEntryId)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOutlookFolderEntryID");
            entity.Property(e => e.COutlookFolderName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOutlookFolderName");
            entity.Property(e => e.COutlookStoreId)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOutlookStoreID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CUserDomainName)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cUserDomainName");
            entity.Property(e => e.CUserName)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cUserName");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyUserId).HasColumnName("iKeyUserID");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISyncSourceType).HasColumnName("iSyncSourceType");
        });

        modelBuilder.Entity<Aaperspective>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPerspective");

            entity.HasIndex(e => e.GUid, "By_Guid_AAPerspective").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaperspectiveCode>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPerspectiveCode");

            entity.HasIndex(e => e.IKeyCode, "By_Code_AAPerspectiveCode");

            entity.HasIndex(e => e.GUid, "By_Guid_AAPerspectiveCode").IsUnique();

            entity.HasIndex(e => e.IKeyPerspective, "By_Perspective_AAPerspectiveCode");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCode).HasColumnName("iKeyCode");
            entity.Property(e => e.IKeyPerspective).HasColumnName("iKeyPerspective");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyCodeNavigation).WithMany(p => p.AaperspectiveCodes)
                .HasForeignKey(d => d.IKeyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPerspectiveCode_AACode");

            entity.HasOne(d => d.IKeyPerspectiveNavigation).WithMany(p => p.AaperspectiveCodes)
                .HasForeignKey(d => d.IKeyPerspective)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPerspectiveCode_AAPerspective");
        });

        modelBuilder.Entity<AaperspectiveTransCode>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPerspectiveTransCode");

            entity.HasIndex(e => e.GUid, "by_Guid_AAPerspectiveTransCode").IsUnique();

            entity.HasIndex(e => e.IKeyPerspective, "by_Pers_AAPerspectiveTransCode");

            entity.HasIndex(e => e.IKeyTrans, "by_Trans_AAPerspectiveTransCode");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.DlastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dlastChange");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyPerspective).HasColumnName("iKeyPerspective");
            entity.Property(e => e.IKeyTrans).HasColumnName("iKeyTrans");
            entity.Property(e => e.IRecVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyPerspectiveNavigation).WithMany(p => p.AaperspectiveTransCodes)
                .HasForeignKey(d => d.IKeyPerspective)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPerspectiveTransCode_AAPerspective");

            entity.HasOne(d => d.IKeyTransNavigation).WithMany(p => p.AaperspectiveTransCodes)
                .HasForeignKey(d => d.IKeyTrans)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPerspectiveTransCode_AANvTransType");
        });

        modelBuilder.Entity<Aaphone>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAPhone");

            entity.ToTable("AAPhone", tb =>
                {
                    tb.HasTrigger("tg_PhoneDelete");
                    tb.HasTrigger("tg_PhoneInsert");
                    tb.HasTrigger("tg_PhoneUpdate");
                });

            entity.HasIndex(e => e.IKeyHouseHold, "AAPhone_ByHouseHold");

            entity.HasIndex(e => e.CPhoneSearch, "AAPhone_byPhoneSearch");

            entity.HasIndex(e => e.Icodephone, "AAPhone_byPhoneType");

            entity.HasIndex(e => e.ICodeRecordCreationSource, "IX_AAPhone");

            entity.HasIndex(e => e.Ikeyid, "IX_AAPhone_GetFullPhone").IsUnique();

            entity.HasIndex(e => e.GUid, "by_Guid_AAPhone").IsUnique();

            entity.HasIndex(e => e.Ikeyclient, "by_client");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CContact)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cContact");
            entity.Property(e => e.CPhoneSearch)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneSearch");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Careacode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("careacode");
            entity.Property(e => e.Ccountry)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccountry");
            entity.Property(e => e.Cphoneext)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cphoneext");
            entity.Property(e => e.Cphonenum)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasConversion(new ValueConverter<string, string>(v => v.TrimEnd(), v => v.TrimAll()))
                .IsFixedLength()
                .HasColumnName("cphonenum");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAvailability).HasColumnName("iCodeAvailability");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.IKeyHouseHold).HasColumnName("iKeyHouseHold");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IUpdateVersion).HasColumnName("iUpdateVersion");
            entity.Property(e => e.Icodephone).HasColumnName("icodephone");
            entity.Property(e => e.Ikeyclient).HasColumnName("ikeyclient");
            entity.Property(e => e.MComment)
                .IsUnicode(false)
                .HasColumnName("mComment");

            entity.HasOne(d => d.IkeyclientNavigation).WithMany(p => p.Aaphones)
                .HasForeignKey(d => d.Ikeyclient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AAName_AAPhone_FK1");
        });

        modelBuilder.Entity<Aapolicy>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAPol");

            entity.ToTable("AAPolicy", tb =>
                {
                    tb.HasTrigger("tg_InsertPolicy");
                    tb.HasTrigger("tg_PolicyDelete");
                });

            entity.HasIndex(e => e.IKeyCommissionRateTable, "AAPolicy_ByCommRateTable");

            entity.HasIndex(e => e.ICodeQualifiedPlanType, "AAPolicy_QPlantype");

            entity.HasIndex(e => e.IKeyAgency, "AAPolicy_byAgency");

            entity.HasIndex(e => e.IKeyGroupMaster, "AAPolicy_byGroupMaster");

            entity.HasIndex(e => e.IKeyManagerLevel1, "AAPolicy_byManager1");

            entity.HasIndex(e => e.IKeyManagerLevel2, "AAPolicy_byManager2");

            entity.HasIndex(e => e.IKeyManagerLevel3, "AAPolicy_byManager3");

            entity.HasIndex(e => e.IKeyManagerLevel4, "AAPolicy_byManager4");

            entity.HasIndex(e => e.IKeyModule, "AAPolicy_byModule");

            entity.HasIndex(e => e.ICodePremiumPayMethod, "AAPolicy_byPayMethod");

            entity.HasIndex(e => e.IKeyPayor, "AAPolicy_byPayer");

            entity.HasIndex(e => e.IKeyProducerLevel1, "AAPolicy_byPdcr1");

            entity.HasIndex(e => e.IKeyProducerLevel2, "AAPolicy_byPdcr2");

            entity.HasIndex(e => e.IKeyProducerLevel3, "AAPolicy_byPdcr3");

            entity.HasIndex(e => e.IKeyProducerLevel4, "AAPolicy_byPdcr4");

            entity.HasIndex(e => e.IKeyPosition, "AAPolicy_byPosition");

            entity.HasIndex(e => e.ICodePremiumMode, "AAPolicy_byPremiumMode");

            entity.HasIndex(e => e.ICodePremiumType, "AAPolicy_byPremiumType");

            entity.HasIndex(e => e.IKeyPrimaryInsured, "AAPolicy_byPrimaryInsured");

            entity.HasIndex(e => e.IKeyPrimaryProducer, "AAPolicy_byPrimaryProducer");

            entity.HasIndex(e => e.ICodeSubType, "AAPolicy_bySubType");

            entity.HasIndex(e => e.IKeyFirstCoverage, "AAPolicy_byfirstCoverage");

            entity.HasIndex(e => e.IKeyBaseCoverage, "AAPolicy_iBaseCoverage");

            entity.HasIndex(e => e.IKeyRecentCoverage, "AAPolicy_iKeyRecentcoverage");

            entity.HasIndex(e => e.ICodeTobacco, "IX_AAPolicy_ByICodeTobacco");

            entity.HasIndex(e => e.ICodeIssueState, "IX_AAPolicy_byIcodeIssueState");

            entity.HasIndex(e => e.GUid, "by_Guid_AAPol").IsUnique();

            entity.HasIndex(e => e.IkeyPrimaryClient, "by_client");

            entity.HasIndex(e => e.CPolicyNumber, "by_prodnum");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagGroupMaster).HasColumnName("bFlagGroupMaster");
            entity.Property(e => e.BFlagUsePosition).HasColumnName("bFlagUsePosition");
            entity.Property(e => e.CCertNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCertNumber");
            entity.Property(e => e.CControlNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cControlNumber");
            entity.Property(e => e.CControlNumberOld)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cControlNumberOld");
            entity.Property(e => e.CPolicyNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cPolicyNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Ccaseref)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccaseref");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.DDlRegistration)
                .HasColumnType("date")
                .HasColumnName("dDlRegistration");
            entity.Property(e => e.DIssue)
                .HasColumnType("date")
                .HasColumnName("dIssue");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastPremiumPaid)
                .HasColumnType("date")
                .HasColumnName("dLastPremiumPaid");
            entity.Property(e => e.DNextPremiumDue)
                .HasColumnType("date")
                .HasColumnName("dNextPremiumDue");
            entity.Property(e => e.DPremPaidThru)
                .HasColumnType("date")
                .HasColumnName("dPremPaidThru");
            entity.Property(e => e.DPremiumDueDatesCalculatedFrom)
                .HasColumnType("date")
                .HasColumnName("dPremiumDueDatesCalculatedFrom");
            entity.Property(e => e.DPremiumDueDatesCalculatedThrough)
                .HasColumnType("date")
                .HasColumnName("dPremiumDueDatesCalculatedThrough");
            entity.Property(e => e.DTotalNetValueAsOf)
                .HasColumnType("date")
                .HasColumnName("dTotalNetValueAsOf");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dcomplete)
                .HasColumnType("date")
                .HasColumnName("dcomplete");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeIssueState).HasColumnName("iCodeIssueState");
            entity.Property(e => e.ICodePremiumMode).HasColumnName("iCodePremiumMode");
            entity.Property(e => e.ICodePremiumPayMethod).HasColumnName("iCodePremiumPayMethod");
            entity.Property(e => e.ICodePremiumType).HasColumnName("iCodePremiumType");
            entity.Property(e => e.ICodeQualifiedPlanType).HasColumnName("iCodeQualifiedPlanType");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeSubType).HasColumnName("iCodeSubType");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAgency).HasColumnName("iKeyAgency");
            entity.Property(e => e.IKeyBaseCoverage).HasColumnName("iKeyBaseCoverage");
            entity.Property(e => e.IKeyCommissionRateTable).HasColumnName("iKeyCommissionRateTable");
            entity.Property(e => e.IKeyFirstCoverage).HasColumnName("iKeyFirstCoverage");
            entity.Property(e => e.IKeyGroupMaster).HasColumnName("iKeyGroupMaster");
            entity.Property(e => e.IKeyManagerLevel1).HasColumnName("iKeyManagerLevel1");
            entity.Property(e => e.IKeyManagerLevel2).HasColumnName("iKeyManagerLevel2");
            entity.Property(e => e.IKeyManagerLevel3)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iKeyManagerLevel3");
            entity.Property(e => e.IKeyManagerLevel4).HasColumnName("iKeyManagerLevel4");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyPayor).HasColumnName("iKeyPayor");
            entity.Property(e => e.IKeyPosition).HasColumnName("iKeyPosition");
            entity.Property(e => e.IKeyPrimaryInsured).HasColumnName("iKeyPrimaryInsured");
            entity.Property(e => e.IKeyPrimaryProducer).HasColumnName("iKeyPrimaryProducer");
            entity.Property(e => e.IKeyProducerLevel1).HasColumnName("iKeyProducerLevel1");
            entity.Property(e => e.IKeyProducerLevel2).HasColumnName("iKeyProducerLevel2");
            entity.Property(e => e.IKeyProducerLevel3).HasColumnName("iKeyProducerLevel3");
            entity.Property(e => e.IKeyProducerLevel4).HasColumnName("iKeyProducerLevel4");
            entity.Property(e => e.IKeyRecentCoverage).HasColumnName("iKeyRecentCoverage");
            entity.Property(e => e.IPremiumDueDay).HasColumnName("iPremiumDueDay");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IkeyPrimaryClient).HasColumnName("ikeyPrimaryClient");
            entity.Property(e => e.YNetBenefit)
                .HasColumnType("money")
                .HasColumnName("yNetBenefit");
            entity.Property(e => e.YNetCashValue)
                .HasColumnType("money")
                .HasColumnName("yNetCashValue");
            entity.Property(e => e.YSurrenderValue)
                .HasColumnType("money")
                .HasColumnName("ySurrenderValue");
            entity.Property(e => e.YTotalAnnualCommission)
                .HasColumnType("money")
                .HasColumnName("yTotalAnnualCommission");
            entity.Property(e => e.YTotalAnnualPrem)
                .HasColumnType("money")
                .HasColumnName("yTotalAnnualPrem");
            entity.Property(e => e.YTotalAnnualPremBase)
                .HasColumnType("money")
                .HasColumnName("yTotalAnnualPremBase");
            entity.Property(e => e.YTotalAnnualPremExcess1)
                .HasColumnType("money")
                .HasColumnName("yTotalAnnualPremExcess1");
            entity.Property(e => e.YTotalAnnualPremExcess2)
                .HasColumnType("money")
                .HasColumnName("yTotalAnnualPremExcess2");
            entity.Property(e => e.YTotalAnnualPremRider)
                .HasColumnType("money")
                .HasColumnName("yTotalAnnualPremRider");
            entity.Property(e => e.YTotalBenefitAmt)
                .HasColumnType("money")
                .HasColumnName("yTotalBenefitAmt");
            entity.Property(e => e.YTotalCashVal)
                .HasColumnType("money")
                .HasColumnName("yTotalCashVal");
            entity.Property(e => e.YTotalLoans)
                .HasColumnType("money")
                .HasColumnName("yTotalLoans");
            entity.Property(e => e.YTotalModalPrem)
                .HasColumnType("money")
                .HasColumnName("yTotalModalPrem");
            entity.Property(e => e.YTotalOtherValue)
                .HasColumnType("money")
                .HasColumnName("yTotalOtherValue");
            entity.Property(e => e.YTotalPremiumToDate)
                .HasColumnType("money")
                .HasColumnName("yTotalPremiumToDate");
            entity.Property(e => e.YTotalSurrenderCharge)
                .HasColumnType("money")
                .HasColumnName("yTotalSurrenderCharge");

            entity.HasOne(d => d.IkeyPrimaryClientNavigation).WithMany(p => p.Aapolicies)
                .HasForeignKey(d => d.IkeyPrimaryClient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AAName_AAPol_FK1");
        });

        modelBuilder.Entity<AapolicyBenefitCoverage>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_AAPolicyBenefit");

            entity.ToTable("AAPolicyBenefitCoverage");

            entity.HasIndex(e => e.IKeyLink, "AAPolicyBenefitCoverage_ByLink");

            entity.HasIndex(e => e.GUid, "AAPolicyBenefit_byGuid").IsUnique();

            entity.HasIndex(e => e.IKeyGroupMaster, "IX_AAPolicyBenefitCoverage");

            entity.HasIndex(e => e.ICodeBenefitType, "IX_AAPolicyBenefitCoverage_iCodeBenType");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeBenefitType).HasColumnName("iCodeBenefitType");
            entity.Property(e => e.IKeyGroupMaster).HasColumnName("iKeyGroupMaster");
            entity.Property(e => e.IKeyLink).HasColumnName("iKeyLink");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MText1)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mText1");
            entity.Property(e => e.MText2)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mText2");

            entity.HasOne(d => d.IKeyLinkNavigation).WithMany(p => p.AapolicyBenefitCoverages)
                .HasForeignKey(d => d.IKeyLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPolicyBenefitCoverage_AAPolicyCoverage");
        });

        modelBuilder.Entity<AapolicyBenefitSeries>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyBenefitSeries");

            entity.HasIndex(e => e.GUid, "AAPolicyBenefitSeries_ByGuid").IsUnique();

            entity.HasIndex(e => e.IKeyLink, "AAPolicyBenefitSeries_ByLink");

            entity.HasIndex(e => e.ICodeBenefitType, "IX_AAPolicyBenefitSeries_iCodeBenType");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialid)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialid");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeBenefitType).HasColumnName("iCodeBenefitType");
            entity.Property(e => e.IKeyLink).HasColumnName("iKeyLink");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MText1)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mText1");
            entity.Property(e => e.MText2)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mText2");

            entity.HasOne(d => d.IKeyLinkNavigation).WithMany(p => p.AapolicyBenefitSeries)
                .HasForeignKey(d => d.IKeyLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPolicyBenefitSeries_AAPolicySeries");
        });

        modelBuilder.Entity<AapolicyCommAdjustment>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommAdjustment");

            entity.HasIndex(e => e.IKeyAgency, "AAPolicyCommAdjustment_ByAGency");

            entity.HasIndex(e => e.IKeyPayor, "AAPolicyCommAdjustment_ByPayor");

            entity.HasIndex(e => e.GUid, "AAPolicyCommAdjustment_byGuid");

            entity.HasIndex(e => e.ICodePayeeType, "AAPolicyCommAdjustment_byPayeeType");

            entity.HasIndex(e => e.ICodePayorType, "AAPolicyCommAdjustment_byPayorType");

            entity.HasIndex(e => e.IKeyTransaction, "AAPolicyCommAdjustment_byTransactionKey");

            entity.HasIndex(e => e.ICodeAdjustmentType, "IX_AAPolicyCommAdjustment");

            entity.HasIndex(e => e.IKeyPayee, "IX_AAPolicyCommAdjustment_byPayee");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BFlagCreditPayee).HasColumnName("bFlagCreditPayee");
            entity.Property(e => e.BFlagDebitPayor).HasColumnName("bFlagDebitPayor");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAdjustmentType).HasColumnName("iCodeAdjustmentType");
            entity.Property(e => e.ICodePayeeType).HasColumnName("iCodePayeeType");
            entity.Property(e => e.ICodePayorType).HasColumnName("iCodePayorType");
            entity.Property(e => e.IKeyAgency).HasColumnName("iKeyAgency");
            entity.Property(e => e.IKeyPayee).HasColumnName("iKeyPayee");
            entity.Property(e => e.IKeyPayor).HasColumnName("iKeyPayor");
            entity.Property(e => e.IKeyTransaction).HasColumnName("iKeyTransaction");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AapolicyCommTableSet>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTableSet");

            entity.HasIndex(e => e.ICodePostingOptionExcess1, "AAPolicyCommTableSet_byExcess1Opt");

            entity.HasIndex(e => e.ICodePostingOptionExcess2, "AAPolicyCommTableSet_byExcess2Opt");

            entity.HasIndex(e => e.ICodePostingOptionFixedAmount, "AAPolicyCommTableSet_byFixedOption");

            entity.HasIndex(e => e.GUid, "AAPolicyCommTableSet_byGuid");

            entity.HasIndex(e => e.ICodePostingOptionOverride1, "AAPolicyCommTableSet_byOvr1Option");

            entity.HasIndex(e => e.ICodePostingOptionOverride2, "AAPolicyCommTableSet_byOvr2Option");

            entity.HasIndex(e => e.ICodePostingOptionPerParticipant, "AAPolicyCommTableSet_byParticipantOpt");

            entity.HasIndex(e => e.ICodePostingOptionRider, "AAPolicyCommTableSet_byRiderOpt");

            entity.HasIndex(e => e.ICodeTrailerPaymentMode, "AAPolicyCommTableSet_byTrailerMode");

            entity.HasIndex(e => e.ICodePostingOptionTrailer, "AAPolicyCommTableSet_byTrailerOption");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagNonCommFirstYearOnly).HasColumnName("bFlagNonCommFirstYearOnly");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(65)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodePostingOptionExcess1).HasColumnName("iCodePostingOptionExcess1");
            entity.Property(e => e.ICodePostingOptionExcess2).HasColumnName("iCodePostingOptionExcess2");
            entity.Property(e => e.ICodePostingOptionFixedAmount).HasColumnName("iCodePostingOptionFixedAmount");
            entity.Property(e => e.ICodePostingOptionOverride1).HasColumnName("iCodePostingOptionOverride1");
            entity.Property(e => e.ICodePostingOptionOverride2).HasColumnName("iCodePostingOptionOverride2");
            entity.Property(e => e.ICodePostingOptionPerParticipant).HasColumnName("iCodePostingOptionPerParticipant");
            entity.Property(e => e.ICodePostingOptionRider).HasColumnName("iCodePostingOptionRider");
            entity.Property(e => e.ICodePostingOptionTrailer).HasColumnName("iCodePostingOptionTrailer");
            entity.Property(e => e.ICodeTrailerPaymentMode).HasColumnName("iCodeTrailerPaymentMode");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ITrailersStartMonth).HasColumnName("iTrailersStartMonth");
            entity.Property(e => e.ITrailersStartPolicyYear).HasColumnName("iTrailersStartPolicyYear");
            entity.Property(e => e.MComment)
                .IsUnicode(false)
                .HasColumnName("mComment");
        });

        modelBuilder.Entity<AapolicyCommTableSetBlackout>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTableSetBlackout");

            entity.HasIndex(e => e.IKeyTable, "AAPolicyCommTableSetBlackout_ByTable");

            entity.HasIndex(e => e.DBegin, "AAPolicyCommTableSetBlackout_byBeginDate");

            entity.HasIndex(e => e.DEnd, "AAPolicyCommTableSetBlackout_byEndDate");

            entity.HasIndex(e => e.GUid, "AAPolicyCommTableSetBlackout_byGuid");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DBegin)
                .HasColumnType("date")
                .HasColumnName("dBegin");
            entity.Property(e => e.DEnd)
                .HasColumnType("date")
                .HasColumnName("dEnd");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyTable).HasColumnName("iKeyTable");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AapolicyCommTableSetFixedAmount>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTableSetFixedAmount");

            entity.HasIndex(e => e.ICodeMode, "AAPolicyCommTableSetFixedAmount_byMode");

            entity.HasIndex(e => e.GUid, "IX_AAPolicyCommTableSetFixedAmount_byGuid").IsUnique();

            entity.HasIndex(e => e.IKeyLevel, "IX_AAPolicyCommTableSetFixedAmount_byLevel");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeMode).HasColumnName("iCodeMode");
            entity.Property(e => e.ICodeModeNonPremium).HasColumnName("iCodeModeNonPremium");
            entity.Property(e => e.IKeyLevel).HasColumnName("iKeyLevel");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Yfixed)
                .HasColumnType("money")
                .HasColumnName("yfixed");
        });

        modelBuilder.Entity<AapolicyCommTableSetFixedAmountYear>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTableSetFixedAmountYear");

            entity.HasIndex(e => e.GUid, "IX_AAPolicyCommTableSetFixedAmountYear_ByGuid");

            entity.HasIndex(e => e.IKeyFixedAmount, "IX_AAPolicyCommTableSetFixedAmountYear_byFixedKey");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyFixedAmount).HasColumnName("iKeyFixedAmount");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IYear).HasColumnName("iYear");
            entity.Property(e => e.YFixed)
                .HasColumnType("money")
                .HasColumnName("yFixed");
        });

        modelBuilder.Entity<AapolicyCommTableSetLevel>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTableSetLevel");

            entity.HasIndex(e => e.ICodeApplyParticipantRatesTo, "AAPolicyCommTableSetLevel_ByParticipantRates");

            entity.HasIndex(e => e.ICodeApplyPremiumRatesTo, "AAPolicyCommTableSetLevel_byPremiumRate");

            entity.HasIndex(e => e.ICodeLevel, "IX_AAPolicyCommTableSetLevel_ByLevel");

            entity.HasIndex(e => e.IKeyManager, "IX_AAPolicyCommTableSetLevel_ByMgrKey");

            entity.HasIndex(e => e.IKeyProducer, "IX_AAPolicyCommTableSetLevel_ByProducerKey");

            entity.HasIndex(e => e.IKeyTable, "IX_AAPolicyCommTableSetLevel_ByTable");

            entity.HasIndex(e => e.GUid, "IX_AAPolicyCommTableSetLevel_Byguid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagDirectParticipant).HasColumnName("bFlagDirectParticipant");
            entity.Property(e => e.BFlagDirectParticipantDeductFromAgencyNet).HasColumnName("bFlagDirectParticipantDeductFromAgencyNet");
            entity.Property(e => e.BFlagDirectPremium).HasColumnName("bFlagDirectPremium");
            entity.Property(e => e.BFlagDirectPremiumDeductFromAgencyNet).HasColumnName("bFlagDirectPremiumDeductFromAgencyNet");
            entity.Property(e => e.BFlagDirectTrailerDeductFromAgencyNet).HasColumnName("bFlagDirectTrailerDeductFromAgencyNet");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IAdvanceMonthsFixedAmount).HasColumnName("iAdvanceMonthsFixedAmount");
            entity.Property(e => e.IAdvanceMonthsPremium).HasColumnName("iAdvanceMonthsPremium");
            entity.Property(e => e.ICodeApplyParticipantRatesTo).HasColumnName("iCodeApplyParticipantRatesTo");
            entity.Property(e => e.ICodeApplyPremiumRatesTo).HasColumnName("iCodeApplyPremiumRatesTo");
            entity.Property(e => e.ICodeLevel).HasColumnName("iCodeLevel");
            entity.Property(e => e.IKeyManager).HasColumnName("iKeyManager");
            entity.Property(e => e.IKeyProducer).HasColumnName("iKeyProducer");
            entity.Property(e => e.IKeyTable).HasColumnName("iKeyTable");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MComment)
                .IsUnicode(false)
                .HasColumnName("mComment");
            entity.Property(e => e.NTrailerRate)
                .HasColumnType("decimal(14, 8)")
                .HasColumnName("nTrailerRate");
        });

        modelBuilder.Entity<AapolicyCommTableSetNonCommAmount>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTableSetNonCommAmount");

            entity.HasIndex(e => e.ICodeMode, "AAPolicyCommTableSetNonCommAmount_byMode");

            entity.HasIndex(e => e.GUid, "IX_AAPolicyCommTableSetNonCommAmount_byGuid").IsUnique();

            entity.HasIndex(e => e.IKeyTable, "IX_AAPolicyCommTableSetNonCommAmount_byTable");

            entity.HasIndex(e => e.YNonComm, "IX_AAPolicyCommTableSet_byNonComm");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeMode).HasColumnName("iCodeMode");
            entity.Property(e => e.IKeyTable).HasColumnName("iKeyTable");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.YNonComm)
                .HasColumnType("money")
                .HasColumnName("yNonComm");
        });

        modelBuilder.Entity<AapolicyCommTableSetRate>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTableSetRate");

            entity.HasIndex(e => e.GUid, "AAPolicyCommTableSetRate_byGuid").IsUnique();

            entity.HasIndex(e => e.IYear, "IX_AAPolicyCommTableSetRate_ByYear");

            entity.HasIndex(e => e.IKeyLevel, "IX_AAPolicyCommTableSetRate_byLevel");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyLevel).HasColumnName("iKeyLevel");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IYear).HasColumnName("iYear");
            entity.Property(e => e.NParticipant)
                .HasColumnType("numeric(10, 6)")
                .HasColumnName("nParticipant");
            entity.Property(e => e.Nbase)
                .HasColumnType("numeric(10, 6)")
                .HasColumnName("nbase");
            entity.Property(e => e.Nbaseoverride1)
                .HasColumnType("numeric(10, 6)")
                .HasColumnName("nbaseoverride1");
            entity.Property(e => e.Nbaseoverride2)
                .HasColumnType("numeric(10, 6)")
                .HasColumnName("nbaseoverride2");
            entity.Property(e => e.Nexcess1)
                .HasColumnType("numeric(10, 6)")
                .HasColumnName("nexcess1");
            entity.Property(e => e.Nexcess1override1)
                .HasColumnType("numeric(10, 6)")
                .HasColumnName("nexcess1override1");
            entity.Property(e => e.Nexcess1override2)
                .HasColumnType("numeric(10, 6)")
                .HasColumnName("nexcess1override2");
            entity.Property(e => e.Nexcess2)
                .HasColumnType("numeric(10, 6)")
                .HasColumnName("nexcess2");
            entity.Property(e => e.Nexcess2override1)
                .HasColumnType("numeric(10, 6)")
                .HasColumnName("nexcess2override1");
            entity.Property(e => e.Nexcess2override2)
                .HasColumnType("numeric(10, 6)")
                .HasColumnName("nexcess2override2");
            entity.Property(e => e.YParticipant)
                .HasColumnType("money")
                .HasColumnName("yParticipant");
        });

        modelBuilder.Entity<AapolicyCommTransaction>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTransaction");

            entity.HasIndex(e => e.DDue, "AAPolicyCommTransaction_byDueDate");

            entity.HasIndex(e => e.DPaidDateMax, "AAPolicyCommTransaction_byMaxDate");

            entity.HasIndex(e => e.ICodeStatus, "AAPolicyCommTransaction_byStatus");

            entity.HasIndex(e => e.ICoverageYear, "AAPolicyCommTransaction_byYear");

            entity.HasIndex(e => e.DPaidDateMin, "IAAPolicyCommTransaction_byMinDate");

            entity.HasIndex(e => e.BFlagContainsFixedAmount, "IX_AAPolicyCommTransaction_ContainsFixedAmt");

            entity.HasIndex(e => new { e.BFlagContainsNormal, e.BFlagContainsOverride1, e.BFlagContainsOverride2 }, "IX_AAPolicyCommTransaction_ContainsNormalAndOvr");

            entity.HasIndex(e => new { e.BFlagContainsBasePremium, e.BFlagContainsExcess1Premium, e.BFlagContainsExcess2Premium }, "IX_AAPolicyCommTransaction_ContainsPremiums");

            entity.HasIndex(e => e.GuidTemp, "IX_AAPolicyCommTransaction_byTempGuid");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BFlagContainsAdjustment).HasColumnName("bFlagContainsAdjustment");
            entity.Property(e => e.BFlagContainsBasePremium).HasColumnName("bFlagContainsBasePremium");
            entity.Property(e => e.BFlagContainsChargeback).HasColumnName("bFlagContainsChargeback");
            entity.Property(e => e.BFlagContainsExcess1Premium).HasColumnName("bFlagContainsExcess1Premium");
            entity.Property(e => e.BFlagContainsExcess2Premium).HasColumnName("bFlagContainsExcess2Premium");
            entity.Property(e => e.BFlagContainsFixedAmount).HasColumnName("bFlagContainsFixedAmount");
            entity.Property(e => e.BFlagContainsNormal).HasColumnName("bFlagContainsNormal");
            entity.Property(e => e.BFlagContainsOverride1).HasColumnName("bFlagContainsOverride1");
            entity.Property(e => e.BFlagContainsOverride2).HasColumnName("bFlagContainsOverride2");
            entity.Property(e => e.BFlagContainsParticipant).HasColumnName("bFlagContainsParticipant");
            entity.Property(e => e.BFlagContainsTrailer).HasColumnName("bFlagContainsTrailer");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DDue)
                .HasColumnType("date")
                .HasColumnName("dDue");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPaidDateMax)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date")
                .HasColumnName("dPaidDateMax");
            entity.Property(e => e.DPaidDateMin)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date")
                .HasColumnName("dPaidDateMin");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GuidTemp)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("guidTemp");
            entity.Property(e => e.ICodeOverriddenStatus).HasColumnName("iCodeOverriddenStatus");
            entity.Property(e => e.ICodeStatus).HasColumnName("iCodeStatus");
            entity.Property(e => e.ICoverageYear).HasColumnName("iCoverageYear");
            entity.Property(e => e.IParticipants).HasColumnName("iParticipants");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MComment)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("mComment");
            entity.Property(e => e.MStatusOverrideMessage)
                .IsUnicode(false)
                .HasColumnName("mStatusOverrideMessage");
            entity.Property(e => e.YAdjustmentDue)
                .HasColumnType("money")
                .HasColumnName("yAdjustmentDue");
            entity.Property(e => e.YAdjustmentPaid)
                .HasColumnType("money")
                .HasColumnName("yAdjustmentPaid");
            entity.Property(e => e.YAgencyDistributionsDue)
                .HasColumnType("money")
                .HasColumnName("yAgencyDistributionsDue");
            entity.Property(e => e.YAgencyDistributionsPaid)
                .HasColumnType("money")
                .HasColumnName("yAgencyDistributionsPaid");
            entity.Property(e => e.YAgencyGrossDue)
                .HasColumnType("money")
                .HasColumnName("yAgencyGrossDue");
            entity.Property(e => e.YAgencyGrossPaid)
                .HasColumnType("money")
                .HasColumnName("yAgencyGrossPaid");
            entity.Property(e => e.YAgencyNetDue)
                .HasColumnType("money")
                .HasColumnName("yAgencyNetDue");
            entity.Property(e => e.YAgencyNetPaid)
                .HasColumnType("money")
                .HasColumnName("yAgencyNetPaid");
            entity.Property(e => e.YCompanyDue)
                .HasColumnType("money")
                .HasColumnName("yCompanyDue");
            entity.Property(e => e.YCompanyPaid)
                .HasColumnType("money")
                .HasColumnName("yCompanyPaid");
            entity.Property(e => e.YManagerDirectDue)
                .HasColumnType("money")
                .HasColumnName("yManagerDirectDue");
            entity.Property(e => e.YManagerDirectPaid)
                .HasColumnType("money")
                .HasColumnName("yManagerDirectPaid");
            entity.Property(e => e.YManagerGrossDue)
                .HasColumnType("money")
                .HasColumnName("yManagerGrossDue");
            entity.Property(e => e.YManagerGrossPaid)
                .HasColumnType("money")
                .HasColumnName("yManagerGrossPaid");
            entity.Property(e => e.YProducerDirectDue)
                .HasColumnType("money")
                .HasColumnName("yProducerDirectDue");
            entity.Property(e => e.YProducerDirectPaid)
                .HasColumnType("money")
                .HasColumnName("yProducerDirectPaid");
            entity.Property(e => e.YProducerGrossDue)
                .HasColumnType("money")
                .HasColumnName("yProducerGrossDue");
            entity.Property(e => e.YProducerGrossPaid)
                .HasColumnType("money")
                .HasColumnName("yProducerGrossPaid");
        });

        modelBuilder.Entity<AapolicyCommTransactionCoverageLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTransactionCoverageLink");

            entity.HasIndex(e => e.IKeyCoverage, "AAPolicyCommTransactionCoverageLink_byCovKey");

            entity.HasIndex(e => e.IPremiumYear, "AAPolicyCommTransactionCoverageLink_byPremYr");

            entity.HasIndex(e => e.IKeyRateTableSet, "AAPolicyCommTransactionCoverageLink_byRateTableSet");

            entity.HasIndex(e => e.IRecVersion, "AAPolicyCommTransactionCoverageLink_byRecVersion");

            entity.HasIndex(e => e.IKeyTransaction, "AAPolicyCommTransactionCoverageLink_byTransaction");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCoverage).HasColumnName("iKeyCoverage");
            entity.Property(e => e.IKeyRateTableSet).HasColumnName("iKeyRateTableSet");
            entity.Property(e => e.IKeyTransaction).HasColumnName("iKeyTransaction");
            entity.Property(e => e.IPremiumYear).HasColumnName("iPremiumYear");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AapolicyCommTransactionDue>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTransactionDue");

            entity.HasIndex(e => e.IKeyCalculatedFrom, "AAPolicyCommTransactionDue_ByFrom");

            entity.HasIndex(e => e.IKeyPayee, "AAPolicyCommTransactionDue_ByPayee");

            entity.HasIndex(e => e.ICodeApplyPremiumRatesTo, "AAPolicyCommTransactionDue_ByPreimiumRates");

            entity.HasIndex(e => e.IKeyTransaction, "AAPolicyCommTransactionDue_ByTransactionKey");

            entity.HasIndex(e => e.ICodeCommissionType, "AAPolicyCommTransactionDue_byCommType");

            entity.HasIndex(e => e.BFlagDirectPay, "AAPolicyCommTransactionDue_byDirectPay");

            entity.HasIndex(e => e.ICodeLevel, "AAPolicyCommTransactionDue_byLevelCode");

            entity.HasIndex(e => e.ICodeMode, "AAPolicyCommTransactionDue_byMode");

            entity.HasIndex(e => e.ICodeOverride, "AAPolicyCommTransactionDue_byOverride");

            entity.HasIndex(e => e.ICodeApplyParticipantRatesTo, "AAPolicyCommTransactionDue_byParticipant");

            entity.HasIndex(e => e.IKeyRider, "AAPolicyCommTransactionDue_byRider");

            entity.HasIndex(e => e.IProducerSlot, "IX_AAPolicyCommTransactionDue_PdcrSlot");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BFlagDirectPay).HasColumnName("bFlagDirectPay");
            entity.Property(e => e.BFlagDirectPayDeductFromAgencyNet).HasColumnName("bFlagDirectPayDeductFromAgencyNet");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DAdvancedThru)
                .HasColumnType("date")
                .HasColumnName("dAdvancedThru");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeApplyParticipantRatesTo).HasColumnName("iCodeApplyParticipantRatesTo");
            entity.Property(e => e.ICodeApplyPremiumRatesTo).HasColumnName("iCodeApplyPremiumRatesTo");
            entity.Property(e => e.ICodeCommissionType).HasColumnName("iCodeCommissionType");
            entity.Property(e => e.ICodeLevel).HasColumnName("iCodeLevel");
            entity.Property(e => e.ICodeMode).HasColumnName("iCodeMode");
            entity.Property(e => e.ICodeOverride).HasColumnName("iCodeOverride");
            entity.Property(e => e.IKeyCalculatedFrom).HasColumnName("iKeyCalculatedFrom");
            entity.Property(e => e.IKeyPayee).HasColumnName("iKeyPayee");
            entity.Property(e => e.IKeyRider).HasColumnName("iKeyRider");
            entity.Property(e => e.IKeyTransaction).HasColumnName("iKeyTransaction");
            entity.Property(e => e.IProducerSlot).HasColumnName("iProducerSlot");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.NBaseAmount)
                .HasColumnType("numeric(16, 4)")
                .HasColumnName("nBaseAmount");
            entity.Property(e => e.NRate)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("nRate");
            entity.Property(e => e.NSplitFactor)
                .HasColumnType("numeric(10, 4)")
                .HasColumnName("nSplitFactor");
            entity.Property(e => e.YAdjustment)
                .HasColumnType("money")
                .HasColumnName("yAdjustment");
            entity.Property(e => e.YDueAmount)
                .HasColumnType("money")
                .HasColumnName("yDueAmount");
        });

        modelBuilder.Entity<AapolicyCommTransactionDueRiderLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTransactionDueRiderLink");

            entity.HasIndex(e => e.IKeyDue, "AAPolicyCommTransactionDueRiderLink_ByDue");

            entity.HasIndex(e => e.IKeyRateTableSet, "AAPolicyCommTransactionDueRiderLink_ByRateTableSet");

            entity.HasIndex(e => e.IKeyRider, "AAPolicyCommTransactionDueRiderLink_byRiderKey");

            entity.HasIndex(e => e.IRiderYear, "AAPolicyCommTransactionDueRiderLink_byYear");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyDue).HasColumnName("iKeyDue");
            entity.Property(e => e.IKeyRateTableSet).HasColumnName("iKeyRateTableSet");
            entity.Property(e => e.IKeyRider).HasColumnName("iKeyRider");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiderYear).HasColumnName("iRiderYear");
        });

        modelBuilder.Entity<AapolicyCommTransactionPaid>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTransactionPaid");

            entity.HasIndex(e => e.IKeyDue, "AAPolicyCommTransactionPaid_ByDueKey");

            entity.HasIndex(e => e.YPostAmount, "AAPolicyCommTransactionPaid_byPostamount");

            entity.HasIndex(e => e.DPost, "AAPolicyCommTransactionPaid_dPost");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPost)
                .HasColumnType("date")
                .HasColumnName("dPost");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyDue).HasColumnName("iKeyDue");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.YPostAmount)
                .HasColumnType("money")
                .HasColumnName("yPostAmount");
        });

        modelBuilder.Entity<AapolicyCommTransactionRemainder>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCommTransactionRemainder");

            entity.HasIndex(e => e.IKeyCreatedFromPaid, "AAPolicyCommTransactionRemainder_ByCreatedFromKey");

            entity.HasIndex(e => e.IKeyPaidBy, "AAPolicyCommTransactionRemainder_ByPaidByKey");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCreatedFromPaid).HasColumnName("iKeyCreatedFromPaid");
            entity.Property(e => e.IKeyPaidBy).HasColumnName("iKeyPaidBy");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.YDueAmount)
                .HasColumnType("money")
                .HasColumnName("yDueAmount");
        });

        modelBuilder.Entity<AapolicyCoverage>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAPolicyCoverage_ByKey");

            entity.ToTable("AAPolicyCoverage", tb =>
                {
                    tb.HasTrigger("tg_PolicyCoverageDelete");
                    tb.HasTrigger("tg_PolicyCoverageInsert");
                    tb.HasTrigger("tg_PolicyCoverageUpdate");
                });

            entity.HasIndex(e => e.DRenewal, "AAPolicyCoverage_DRenewal");

            entity.HasIndex(e => e.IEffective, "AAPolicyCoverage_IEffective");

            entity.HasIndex(e => e.ICodeAccBenefitPer, "AAPolicyCoverage_byAcctBenPer");

            entity.HasIndex(e => e.ICodeAccElimPer, "AAPolicyCoverage_byAcctElimPer");

            entity.HasIndex(e => e.ICodeApprovalBasis, "AAPolicyCoverage_byApproval");

            entity.HasIndex(e => e.ICodeBenefitPer, "AAPolicyCoverage_byBenPer");

            entity.HasIndex(e => e.ICodeBeneficiaryType, "AAPolicyCoverage_byBenType");

            entity.HasIndex(e => e.ICodeBenefitMode, "AAPolicyCoverage_byBenefitMode");

            entity.HasIndex(e => e.ICodeRecordCreationSource, "AAPolicyCoverage_byCreationSrc");

            entity.HasIndex(e => e.IKeySeriesDownloaded, "AAPolicyCoverage_byDLSeries");

            entity.HasIndex(e => e.ICodeDeductibleMax, "AAPolicyCoverage_byDedMax");

            entity.HasIndex(e => e.ICodeDeductiblePer, "AAPolicyCoverage_byDedPer");

            entity.HasIndex(e => e.ICodeDivOpt, "AAPolicyCoverage_byDivOption");

            entity.HasIndex(e => e.IKeyFundingAccount, "AAPolicyCoverage_byFundingAcct");

            entity.HasIndex(e => e.ICodefundingOption, "AAPolicyCoverage_byFundingOption");

            entity.HasIndex(e => e.IKeyGroupMaster, "AAPolicyCoverage_byGroupMaster");

            entity.HasIndex(e => e.ICodeInflationProtection, "AAPolicyCoverage_byInflation");

            entity.HasIndex(e => e.IKeyPosition, "AAPolicyCoverage_byPosition");

            entity.HasIndex(e => e.IKeyPrimaryInsured, "AAPolicyCoverage_byPrimaryInsured");

            entity.HasIndex(e => e.IKeyPrimaryBeneficiary, "AAPolicyCoverage_byPrimeBeneficiary");

            entity.HasIndex(e => e.IKeyCommissionRateTable, "AAPolicyCoverage_byRateTable");

            entity.HasIndex(e => e.ICodeRenewalProvision, "AAPolicyCoverage_byRenewalProv");

            entity.HasIndex(e => e.IKeySeries, "AAPolicyCoverage_bySeries");

            entity.HasIndex(e => e.ICodeSickBenefitPer, "AAPolicyCoverage_bySickBenPer");

            entity.HasIndex(e => e.ICodeSickElimPer, "AAPolicyCoverage_bySickElimPer");

            entity.HasIndex(e => e.ICodeStatus, "AAPolicyCoverage_byStatus");

            entity.HasIndex(e => e.IKeyUnderWriter, "AAPolicyCoverage_byUnderwriter");

            entity.HasIndex(e => e.IkeyPol, "AAPolicyCoverage_by_Pol");

            entity.HasIndex(e => e.ICodeDeathBenefitOption, "AAPolicyCoverage_bydbOption");

            entity.HasIndex(e => e.IKeyFlex, "AAPolicyCoverage_byflex");

            entity.HasIndex(e => e.DEffective, "IX_AAPolicyCoverage_EffectiveDt");

            entity.HasIndex(e => e.CFundingAccountNumber, "IX_AAPolicyCoverage_byAcctNum");

            entity.HasIndex(e => e.GUid, "by_Guid_AAPolicyCoverage").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagAddToBen).HasColumnName("bFlagAddToBen");
            entity.Property(e => e.BFlagCalculateCommissions).HasColumnName("bFlagCalculateCommissions");
            entity.Property(e => e.BFlagCalculateSurrenderValue).HasColumnName("bFlagCalculateSurrenderValue");
            entity.Property(e => e.BFlagGroupMaster).HasColumnName("bFlagGroupMaster");
            entity.Property(e => e.BFlagUsePosition).HasColumnName("bFlagUsePosition");
            entity.Property(e => e.CFundingAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cFundingAccountNumber");
            entity.Property(e => e.COccupationClass)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOccupationClass");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CxmKey)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("CXmKey");
            entity.Property(e => e.DCommEnd)
                .HasColumnType("date")
                .HasColumnName("dCommEnd");
            entity.Property(e => e.DCommPaidThru)
                .HasColumnType("date")
                .HasColumnName("dCommPaidThru");
            entity.Property(e => e.DCommPaidThruManager1)
                .HasColumnType("date")
                .HasColumnName("dCommPaidThruManager1");
            entity.Property(e => e.DCommPaidThruManager2)
                .HasColumnType("date")
                .HasColumnName("dCommPaidThruManager2");
            entity.Property(e => e.DCommPaidThruManager3)
                .HasColumnType("date")
                .HasColumnName("dCommPaidThruManager3");
            entity.Property(e => e.DCommPaidThruManager4)
                .HasColumnType("date")
                .HasColumnName("dCommPaidThruManager4");
            entity.Property(e => e.DCommPaidThruProducer1)
                .HasColumnType("date")
                .HasColumnName("dCommPaidThruProducer1");
            entity.Property(e => e.DCommPaidThruProducer2)
                .HasColumnType("date")
                .HasColumnName("dCommPaidThruProducer2");
            entity.Property(e => e.DCommPaidThruProducer3)
                .HasColumnType("date")
                .HasColumnName("dCommPaidThruProducer3");
            entity.Property(e => e.DCommPaidThruProducer4)
                .HasColumnType("date")
                .HasColumnName("dCommPaidThruProducer4");
            entity.Property(e => e.DCommRenewalStart)
                .HasColumnType("datetime")
                .HasColumnName("dCommRenewalStart");
            entity.Property(e => e.DConversion)
                .HasColumnType("date")
                .HasColumnName("dConversion");
            entity.Property(e => e.DDlRegistration)
                .HasColumnType("date")
                .HasColumnName("dDlRegistration");
            entity.Property(e => e.DEffective)
                .HasColumnType("date")
                .HasColumnName("dEffective");
            entity.Property(e => e.DExpiration)
                .HasColumnType("date")
                .HasColumnName("dExpiration");
            entity.Property(e => e.DFinalPayment)
                .HasColumnType("date")
                .HasColumnName("dFinalPayment");
            entity.Property(e => e.DInitial)
                .HasColumnType("date")
                .HasColumnName("dInitial");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRenewal)
                .HasColumnType("date")
                .HasColumnName("dRenewal");
            entity.Property(e => e.DSubmit)
                .HasColumnType("date")
                .HasColumnName("dSubmit");
            entity.Property(e => e.DTermination)
                .HasColumnType("date")
                .HasColumnName("dTermination");
            entity.Property(e => e.DTrackedAccountMarketValueAsOf)
                .HasColumnType("date")
                .HasColumnName("dTrackedAccountMarketValueAsOf");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.DcommBegin)
                .HasColumnType("date")
                .HasColumnName("dcommBegin");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAccBenefitPer).HasColumnName("iCodeAccBenefitPer");
            entity.Property(e => e.ICodeAccElimPer).HasColumnName("iCodeAccElimPer");
            entity.Property(e => e.ICodeAnnuitySurrenderPeriod).HasColumnName("iCodeAnnuitySurrenderPeriod");
            entity.Property(e => e.ICodeApprovalBasis).HasColumnName("iCodeApprovalBasis");
            entity.Property(e => e.ICodeBeneficiaryType).HasColumnName("iCodeBeneficiaryType");
            entity.Property(e => e.ICodeBenefitMode).HasColumnName("iCodeBenefitMode");
            entity.Property(e => e.ICodeBenefitPer).HasColumnName("iCodeBenefitPer");
            entity.Property(e => e.ICodeDeathBenefitOption).HasColumnName("iCodeDeathBenefitOption");
            entity.Property(e => e.ICodeDeductibleMax).HasColumnName("iCodeDeductibleMax");
            entity.Property(e => e.ICodeDeductiblePer).HasColumnName("iCodeDeductiblePer");
            entity.Property(e => e.ICodeDivOpt).HasColumnName("iCodeDivOpt");
            entity.Property(e => e.ICodeInflationProtection).HasColumnName("iCodeInflationProtection");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeRenewalProvision).HasColumnName("iCodeRenewalProvision");
            entity.Property(e => e.ICodeSickBenefitPer).HasColumnName("iCodeSickBenefitPer");
            entity.Property(e => e.ICodeSickElimPer).HasColumnName("iCodeSickElimPer");
            entity.Property(e => e.ICodeStatus).HasColumnName("iCodeStatus");
            entity.Property(e => e.ICodefundingOption).HasColumnName("iCodefundingOption");
            entity.Property(e => e.IEffective).HasColumnName("iEffective");
            entity.Property(e => e.IIndicatorCode).HasColumnName("iIndicatorCode");
            entity.Property(e => e.IKeyCommissionRateTable).HasColumnName("iKeyCommissionRateTable");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyFundingAccount).HasColumnName("iKeyFundingAccount");
            entity.Property(e => e.IKeyGroupMaster).HasColumnName("iKeyGroupMaster");
            entity.Property(e => e.IKeyPosition).HasColumnName("iKeyPosition");
            entity.Property(e => e.IKeyPrimaryBeneficiary).HasColumnName("iKeyPrimaryBeneficiary");
            entity.Property(e => e.IKeyPrimaryInsured).HasColumnName("iKeyPrimaryInsured");
            entity.Property(e => e.IKeySeries).HasColumnName("iKeySeries");
            entity.Property(e => e.IKeySeriesDownloaded).HasColumnName("iKeySeriesDownloaded");
            entity.Property(e => e.IKeyUnderWriter).HasColumnName("iKeyUnderWriter");
            entity.Property(e => e.IParticipants).HasColumnName("iParticipants");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MBeneficiary)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mBeneficiary");
            entity.Property(e => e.NAnnualBaseCommission)
                .HasColumnType("numeric(9, 4)")
                .HasColumnName("nAnnualBaseCommission");
            entity.Property(e => e.NAnnualExcess1Commission)
                .HasColumnType("numeric(9, 4)")
                .HasColumnName("nAnnualExcess1Commission");
            entity.Property(e => e.NAnnualExcess2Commission)
                .HasColumnType("numeric(9, 4)")
                .HasColumnName("nAnnualExcess2Commission");
            entity.Property(e => e.NInterestRate)
                .HasColumnType("numeric(13, 6)")
                .HasColumnName("nInterestRate");
            entity.Property(e => e.NMortalityExpenseRate)
                .HasColumnType("numeric(13, 6)")
                .HasColumnName("nMortalityExpenseRate");
            entity.Property(e => e.YAnnBasePrem)
                .HasColumnType("money")
                .HasColumnName("yAnnBasePrem");
            entity.Property(e => e.YAnnExcess1Prem)
                .HasColumnType("money")
                .HasColumnName("yAnnExcess1Prem");
            entity.Property(e => e.YAnnExcess2Prem)
                .HasColumnType("money")
                .HasColumnName("yAnnExcess2Prem");
            entity.Property(e => e.YBenefitAmtAccident)
                .HasColumnType("money")
                .HasColumnName("yBenefitAmtAccident");
            entity.Property(e => e.YBenefitAmtCov)
                .HasColumnType("money")
                .HasColumnName("yBenefitAmtCov");
            entity.Property(e => e.YBenefitAmtSickness)
                .HasColumnType("money")
                .HasColumnName("yBenefitAmtSickness");
            entity.Property(e => e.YCashWithApp)
                .HasColumnType("money")
                .HasColumnName("yCashWithApp");
            entity.Property(e => e.YCashval)
                .HasColumnType("money")
                .HasColumnName("yCashval");
            entity.Property(e => e.YDeductible)
                .HasColumnType("money")
                .HasColumnName("yDeductible");
            entity.Property(e => e.YDeductibleFamily)
                .HasColumnType("money")
                .HasColumnName("yDeductibleFamily");
            entity.Property(e => e.YLastPremPaymentAmt)
                .HasColumnType("money")
                .HasColumnName("yLastPremPaymentAmt");
            entity.Property(e => e.YNetBenefit)
                .HasColumnType("money")
                .HasColumnName("yNetBenefit");
            entity.Property(e => e.YNetCashValue)
                .HasColumnType("money")
                .HasColumnName("yNetCashValue");
            entity.Property(e => e.YOtherValue)
                .HasColumnType("money")
                .HasColumnName("yOtherValue");
            entity.Property(e => e.YPremiumToDate)
                .HasColumnType("money")
                .HasColumnName("yPremiumToDate");
            entity.Property(e => e.YSurrenderCharge)
                .HasColumnType("money")
                .HasColumnName("ySurrenderCharge");
            entity.Property(e => e.YTotalAnnualCommission)
                .HasColumnType("money")
                .HasColumnName("yTotalAnnualCommission");
            entity.Property(e => e.YTotalAnnualPrem)
                .HasColumnType("money")
                .HasColumnName("yTotalAnnualPrem");
            entity.Property(e => e.YTotalBenefitAmt)
                .HasColumnType("money")
                .HasColumnName("yTotalBenefitAmt");
            entity.Property(e => e.YTotalModalPrem)
                .HasColumnType("money")
                .HasColumnName("yTotalModalPrem");
            entity.Property(e => e.YTotalRiderAnnualPrem)
                .HasColumnType("money")
                .HasColumnName("yTotalRiderAnnualPrem");
            entity.Property(e => e.YTotalRiderCashValue)
                .HasColumnType("money")
                .HasColumnName("yTotalRiderCashValue");
            entity.Property(e => e.YTotalRiderLoans)
                .HasColumnType("money")
                .HasColumnName("yTotalRiderLoans");
            entity.Property(e => e.YTotalRiderModalPrem)
                .HasColumnType("money")
                .HasColumnName("yTotalRiderModalPrem");
            entity.Property(e => e.YTrackedAccountMarketValue)
                .HasColumnType("money")
                .HasColumnName("yTrackedAccountMarketValue");
            entity.Property(e => e.YloanAmt)
                .HasColumnType("money")
                .HasColumnName("yloanAmt");
        });

        modelBuilder.Entity<AapolicyCoveragePosition>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyCoveragePosition");

            entity.HasIndex(e => e.IKeyCoverage, "IX_AAPolicyCoveragePosition_byCov");

            entity.HasIndex(e => e.DPosition, "IX_AAPolicyCoveragePosition_byDate");

            entity.HasIndex(e => e.IKeyModule, "IX_AAPolicyCoveragePosition_byModule");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPosition)
                .HasColumnType("date")
                .HasColumnName("dPosition");
            entity.Property(e => e.DPremiumPaidThru)
                .HasColumnType("date")
                .HasColumnName("dPremiumPaidThru");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCoverage).HasColumnName("iKeyCoverage");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.YCashValue)
                .HasColumnType("money")
                .HasColumnName("yCashValue");
            entity.Property(e => e.YLoanAmount)
                .HasColumnType("money")
                .HasColumnName("yLoanAmount");
            entity.Property(e => e.YMaxAvailableLoan)
                .HasColumnType("money")
                .HasColumnName("yMaxAvailableLoan");
            entity.Property(e => e.YPremiumToDate)
                .HasColumnType("money")
                .HasColumnName("yPremiumToDate");
            entity.Property(e => e.YSurrenderCharge)
                .HasColumnType("money")
                .HasColumnName("ySurrenderCharge");
            entity.Property(e => e.YSurrenderValue)
                .HasColumnType("money")
                .HasColumnName("ySurrenderValue");
        });

        modelBuilder.Entity<AapolicyCoverageRelation>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAPolicyCoverageRelation_ByKey");

            entity.ToTable("AAPolicyCoverageRelation", tb =>
                {
                    tb.HasTrigger("tg_PolicyCoverageRelationDelete");
                    tb.HasTrigger("tg_PolicyCoverageRelationInsert");
                    tb.HasTrigger("tg_PolicyCoverageRelationUpdate");
                });

            entity.HasIndex(e => e.ICodeRelType, "AAPolicyCoverageRelation_byType");

            entity.HasIndex(e => e.IKeyClient, "AAPolicyCoverageRelation_by_Client");

            entity.HasIndex(e => e.IKeyCov, "AAPolicyCoverageRelation_by_Cov");

            entity.HasIndex(e => e.GUid, "AAPolicyCoverageRelation_by_Guid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DEffective)
                .HasColumnType("date")
                .HasColumnName("dEffective");
            entity.Property(e => e.DExpiration)
                .HasColumnType("date")
                .HasColumnName("dExpiration");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeRelType).HasColumnName("iCodeRelType");
            entity.Property(e => e.IIssueAge).HasColumnName("iIssueAge");
            entity.Property(e => e.IKeyClient).HasColumnName("iKeyClient");
            entity.Property(e => e.IKeyCov).HasColumnName("iKeyCov");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyClientNavigation).WithMany(p => p.AapolicyCoverageRelations)
                .HasForeignKey(d => d.IKeyClient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPolicyCoverageRelation_AAName");

            entity.HasOne(d => d.IKeyCovNavigation).WithMany(p => p.AapolicyCoverageRelations)
                .HasForeignKey(d => d.IKeyCov)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPolicyCoverageRelation_AAPolicyCoverage");
        });

        modelBuilder.Entity<AapolicyModalPremiumCoverage>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("AAPolicyModalPremCov_by_Key");

            entity.ToTable("AAPolicyModalPremiumCoverage");

            entity.HasIndex(e => e.GUid, "AAPolicyModalPremCov_by_Guid").IsUnique();

            entity.HasIndex(e => e.IkeyLink, "AAPolicyModalPremiumCoverage_ByLInk");

            entity.HasIndex(e => e.IYear, "AAPolicyModalPremiumCoverage_byYear");

            entity.HasIndex(e => new { e.IkeyLink, e.IYear }, "AAPolicyModalPremiumCoverage_linkAndYear");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IYear).HasColumnName("iYear");
            entity.Property(e => e.IkeyLink).HasColumnName("ikeyLink");
            entity.Property(e => e.YBase)
                .HasColumnType("money")
                .HasColumnName("yBase");
            entity.Property(e => e.YExcess)
                .HasColumnType("money")
                .HasColumnName("yExcess");
            entity.Property(e => e.YExcess2)
                .HasColumnType("money")
                .HasColumnName("yExcess2");

            entity.HasOne(d => d.IkeyLinkNavigation).WithMany(p => p.AapolicyModalPremiumCoverages)
                .HasForeignKey(d => d.IkeyLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPolicyModalPremiumCoverage_AAPolicyCoverage");
        });

        modelBuilder.Entity<AapolicyModalPremiumRider>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyModalPremiumRider");

            entity.HasIndex(e => e.IYear, "AAPolicyModalPremiumRider_ByYear");

            entity.HasIndex(e => new { e.IKeyLink, e.IYear }, "AAPolicyModalPremiumRider_LinkAndYear");

            entity.HasIndex(e => e.GUid, "AAPolicyModalPremiumRider_byGuid").IsUnique();

            entity.HasIndex(e => e.IKeyLink, "AAPolicyModalPremiumRider_byLink");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('  ')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyLink).HasColumnName("iKeyLink");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IYear).HasColumnName("iYear");
            entity.Property(e => e.YBase)
                .HasColumnType("money")
                .HasColumnName("yBase");
            entity.Property(e => e.YExcess)
                .HasColumnType("money")
                .HasColumnName("yExcess");
            entity.Property(e => e.YExcess2)
                .HasColumnType("money")
                .HasColumnName("yExcess2");

            entity.HasOne(d => d.IKeyLinkNavigation).WithMany(p => p.AapolicyModalPremiumRiders)
                .HasForeignKey(d => d.IKeyLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPolicyModalPremiumRider_AAPolicyRider");
        });

        modelBuilder.Entity<AapolicyNewBiz>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("AAPolicyNewBiz_by_Key");

            entity.ToTable("AAPolicyNewBiz");

            entity.HasIndex(e => e.GUid, "AAPolicyNewBiz_by_Guid").IsUnique();

            entity.HasIndex(e => e.IkeyCov, "AAPolicyNewBiz_by_cov");

            entity.HasIndex(e => e.Ikeyvendor, "IX_AAPolicyNewBiz_ByVendor");

            entity.HasIndex(e => e.Ikeyinsured, "IX_AAPolicyNewBiz_Insured");

            entity.HasIndex(e => e.Icodeaction, "IX_AAPolicyNewBiz_iCodeAction");

            entity.HasIndex(e => e.ICodePriority, "IX_AAPolicyNewBiz_iCodePriority");

            entity.HasIndex(e => e.IKeyFollowup, "IX_AAPolicyNewBiz_iKeyFollowup");

            entity.HasIndex(e => e.IKeyNote, "IX_AAPolicyNewBiz_iKeyNote");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CXmlkey)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cXMLKey");
            entity.Property(e => e.Caction)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("caction");
            entity.Property(e => e.DCompleted)
                .HasColumnType("date")
                .HasColumnName("dCompleted");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dinitial)
                .HasColumnType("date")
                .HasColumnName("dinitial");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodePriority).HasColumnName("iCodePriority");
            entity.Property(e => e.IKeyFollowup).HasColumnName("iKeyFollowup");
            entity.Property(e => e.IKeyNote).HasColumnName("iKeyNote");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodeaction).HasColumnName("icodeaction");
            entity.Property(e => e.IkeyCov).HasColumnName("ikeyCov");
            entity.Property(e => e.Ikeyinsured).HasColumnName("ikeyinsured");
            entity.Property(e => e.Ikeyvendor).HasColumnName("ikeyvendor");
            entity.Property(e => e.YAnnualPremium)
                .HasColumnType("money")
                .HasColumnName("yAnnualPremium");

            entity.HasOne(d => d.IkeyCovNavigation).WithMany(p => p.AapolicyNewBizs)
                .HasForeignKey(d => d.IkeyCov)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AACoverageNewBiz_AACov");
        });

        modelBuilder.Entity<AapolicyPdcr>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("PK_AAPrPdcr");

            entity.ToTable("AAPolicyPdcr");

            entity.HasIndex(e => e.Ikeypol, "By_Pol");

            entity.HasIndex(e => e.IKeyCommTable, "IX_AAPolicyPdcr_byCommTable");

            entity.HasIndex(e => e.GUid, "by_Guid_AAPrPdcr").IsUnique();

            entity.HasIndex(e => e.Ikeyproducer, "by_Pdcr_AAPrPdcr");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagProducerDirect).HasColumnName("bFlagProducerDirect");
            entity.Property(e => e.CDownloadCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDownloadCode");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCommTable).HasColumnName("iKeyCommTable");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Ikeypol).HasColumnName("ikeypol");
            entity.Property(e => e.Ikeyproducer).HasColumnName("ikeyproducer");
            entity.Property(e => e.Nproducerrenew)
                .HasColumnType("numeric(9, 3)")
                .HasColumnName("nproducerrenew");
            entity.Property(e => e.Nproducersplit)
                .HasColumnType("numeric(9, 3)")
                .HasColumnName("nproducersplit");

            entity.HasOne(d => d.IkeypolNavigation).WithMany(p => p.AapolicyPdcrs)
                .HasForeignKey(d => d.Ikeypol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPrPdcr_AAPol");

            entity.HasOne(d => d.IkeyproducerNavigation).WithMany(p => p.AapolicyPdcrs)
                .HasForeignKey(d => d.Ikeyproducer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPrPdcr_AAProducer");
        });

        modelBuilder.Entity<AapolicyPremiumDue>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAPolicyPremiumDue");

            entity.HasIndex(e => e.IKeyPol, "AAPolicyPremiumDue_byPol");

            entity.HasIndex(e => e.DDue, "IX_AAPolicyPremiumDue_byDate");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagOverride).HasColumnName("bFlagOverride");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DDue)
                .HasColumnType("date")
                .HasColumnName("dDue");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyPol).HasColumnName("iKeyPol");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyPolNavigation).WithMany(p => p.AapolicyPremiumDues)
                .HasForeignKey(d => d.IKeyPol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAPolicyPremiumDue_AAPolicy");
        });

        modelBuilder.Entity<AapolicyRelation>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("AAPolicyRelation_by_Key");

            entity.ToTable("AAPolicyRelation", tb =>
                {
                    tb.HasTrigger("tg_PolicyRelationDelete");
                    tb.HasTrigger("tg_PolicyRelationInsert");
                    tb.HasTrigger("tg_PolicyRelationUpdate");
                });

            entity.HasIndex(e => new { e.Ikeyclient, e.Ikeypol, e.Icodereltype }, "AAPolicyRelation_byClPoType");

            entity.HasIndex(e => e.Ikeyclient, "AAPolicyRelation_by_Client");

            entity.HasIndex(e => e.GUid, "AAPolicyRelation_by_Guid").IsUnique();

            entity.HasIndex(e => e.Ikeypol, "AAPolicyRelation_by_prod");

            entity.HasIndex(e => e.Icodereltype, "AAPolicyRelation_by_type");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Deffective)
                .HasColumnType("date")
                .HasColumnName("deffective");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodereltype).HasColumnName("icodereltype");
            entity.Property(e => e.Iissueage).HasColumnName("iissueage");
            entity.Property(e => e.Ikeyclient).HasColumnName("ikeyclient");
            entity.Property(e => e.Ikeypol).HasColumnName("ikeypol");

            entity.HasOne(d => d.IkeyclientNavigation).WithMany(p => p.AapolicyRelations)
                .HasForeignKey(d => d.Ikeyclient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("aaname_PolicyRelations");

            entity.HasOne(d => d.IkeypolNavigation).WithMany(p => p.AapolicyRelations)
                .HasForeignKey(d => d.Ikeypol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("aaPol_Relations");
        });

        modelBuilder.Entity<AapolicyRider>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAPolicyRider_By_Key");

            entity.ToTable("AAPolicyRider", tb => tb.HasTrigger("tg_PolicyRiderDelete"));

            entity.HasIndex(e => e.IKeyCov, "AAPolicyRider_By_Cov");

            entity.HasIndex(e => e.CxmlKey, "AAPolicyRider_by_XmlKey");

            entity.HasIndex(e => e.GUid, "AAPolicyRider_by_guid").IsUnique();

            entity.HasIndex(e => e.ICodeRiderPlan, "IX_AAPolicyRider_ByRiderPlan");

            entity.HasIndex(e => e.BFlagAddToBen, "IX_AAPolicyRider_byAddToBenn");

            entity.HasIndex(e => e.DExpiration, "IX_AAPolicyRider_byExpiration");

            entity.HasIndex(e => e.IKeyInsured, "IX_AAPolicyRider_byInsured");

            entity.HasIndex(e => e.IKeyCommissionRateTable, "IX_AAPolicyRider_byRateTable");

            entity.HasIndex(e => e.ICodeRider, "IX_AAPolicyRider_byRiderCode");

            entity.HasIndex(e => e.DTermination, "IX_AAPolicyRider_byTermination");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagAddToBen).HasColumnName("bFlagAddToBen");
            entity.Property(e => e.BFlagAddToPrem).HasColumnName("bFlagAddToPrem");
            entity.Property(e => e.BFlagCalculateCommissions).HasColumnName("bFlagCalculateCommissions");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CxmlKey)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("CXmlKey");
            entity.Property(e => e.DCommRenewalStart)
                .HasColumnType("datetime")
                .HasColumnName("dCommRenewalStart");
            entity.Property(e => e.DConversion)
                .HasColumnType("date")
                .HasColumnName("dConversion");
            entity.Property(e => e.DEffective)
                .HasColumnType("date")
                .HasColumnName("dEffective");
            entity.Property(e => e.DExercise)
                .HasColumnType("date")
                .HasColumnName("dExercise");
            entity.Property(e => e.DExpiration)
                .HasColumnType("date")
                .HasColumnName("dExpiration");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRecord)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DTermination)
                .HasColumnType("date")
                .HasColumnName("dTermination");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeRider).HasColumnName("iCodeRider");
            entity.Property(e => e.ICodeRiderPlan).HasColumnName("iCodeRiderPlan");
            entity.Property(e => e.IKeyCommissionRateTable).HasColumnName("iKeyCommissionRateTable");
            entity.Property(e => e.IKeyCov).HasColumnName("iKeyCov");
            entity.Property(e => e.IKeyInsured).HasColumnName("iKeyInsured");
            entity.Property(e => e.IParticipants).HasColumnName("iParticipants");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MDescription)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mDescription");
            entity.Property(e => e.YAnnualPremium)
                .HasColumnType("money")
                .HasColumnName("yAnnualPremium");
            entity.Property(e => e.YBenefitAmount)
                .HasColumnType("money")
                .HasColumnName("yBenefitAmount");
            entity.Property(e => e.YCashVal)
                .HasColumnType("money")
                .HasColumnName("yCashVal");
            entity.Property(e => e.YLoanAmt)
                .HasColumnType("money")
                .HasColumnName("yLoanAmt");

            entity.HasOne(d => d.IKeyCovNavigation).WithMany(p => p.AapolicyRiders)
                .HasForeignKey(d => d.IKeyCov)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AACov_CovOptions");
        });

        modelBuilder.Entity<AapolicySeries>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("AAPolcySeries_by_key");

            entity.ToTable("AAPolicySeries", tb =>
                {
                    tb.HasTrigger("tg_AAPolicySeriesDelete");
                    tb.HasTrigger("tg_AAPolicySeriesUpdate");
                });

            entity.HasIndex(e => e.GUid, "AAPolcySeries_by_Guid").IsUnique();

            entity.HasIndex(e => e.CXmlKey, "AAPolcySeries_by_xmlkey");

            entity.HasIndex(e => e.ICodeProductClass, "AAPolicySeries_byClass");

            entity.HasIndex(e => e.CCodeId, "AAPolicySeries_byCodeId");

            entity.HasIndex(e => e.ICodeCovType, "AAPolicySeries_byCovType");

            entity.HasIndex(e => e.IKeyDefaultCommissionRateTableSet, "AAPolicySeries_byDefaultRateTable");

            entity.HasIndex(e => e.ICodeFundingOption, "AAPolicySeries_byFundingOpt");

            entity.HasIndex(e => e.IKeyModule, "AAPolicySeries_byModule");

            entity.HasIndex(e => e.IKeySurrenderChargeTable, "AAPolicySeries_bySurrenderCharge");

            entity.HasIndex(e => e.Icodecompany, "APolicySeries_byCompany");

            entity.HasIndex(e => e.Cproductidold, "IX_AAPolicySeries_byOldProdID");

            entity.HasIndex(e => e.Cproductid, "IX_AAPolicySeries_byProductID");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagCommRenewalOnCalendarYear).HasColumnName("bFlagCommRenewalOnCalendarYear");
            entity.Property(e => e.BFlagWarnWhenCalculatingCommissions)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagWarnWhenCalculatingCommissions");
            entity.Property(e => e.Bflagconvertable).HasColumnName("bflagconvertable");
            entity.Property(e => e.Bflagdiv).HasColumnName("bflagdiv");
            entity.Property(e => e.Bflagportable).HasColumnName("bflagportable");
            entity.Property(e => e.CBenefitDescription1)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasColumnName("cBenefitDescription1");
            entity.Property(e => e.CBenefitDescription2)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasColumnName("cBenefitDescription2");
            entity.Property(e => e.CCodeId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCodeId");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CV2series)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cV2Series");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CXmlKey)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cXmlKey");
            entity.Property(e => e.Cagecalculation)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasColumnName("cagecalculation");
            entity.Property(e => e.Ccarrierid)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccarrierid");
            entity.Property(e => e.Cproductid)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cproductid");
            entity.Property(e => e.Cproductidold)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cproductidold");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeAnnuitySurrenderPeriod).HasColumnName("iCodeAnnuitySurrenderPeriod");
            entity.Property(e => e.ICodeCovType).HasColumnName("iCodeCovType");
            entity.Property(e => e.ICodeFundingOption).HasColumnName("iCodeFundingOption");
            entity.Property(e => e.ICodeProductClass).HasColumnName("iCodeProductClass");
            entity.Property(e => e.IKeyDefaultCommissionRateTableSet).HasColumnName("iKeyDefaultCommissionRateTableSet");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeySurrenderChargeTable).HasColumnName("iKeySurrenderChargeTable");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodecompany).HasColumnName("icodecompany");
            entity.Property(e => e.Ipaytoage).HasColumnName("ipaytoage");
            entity.Property(e => e.Ipaytoyear).HasColumnName("ipaytoyear");
            entity.Property(e => e.NMortalityExpenseRate)
                .HasColumnType("numeric(13, 6)")
                .HasColumnName("nMortalityExpenseRate");
            entity.Property(e => e.Ncurrloanintrate)
                .HasColumnType("numeric(9, 4)")
                .HasColumnName("ncurrloanintrate");
            entity.Property(e => e.Nguarintrate)
                .HasColumnType("numeric(9, 4)")
                .HasColumnName("nguarintrate");
        });

        modelBuilder.Entity<AapolicySur>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAPrSur");

            entity.ToTable("AAPolicySur");

            entity.HasIndex(e => e.GUid, "by_Guid_AAPrSur").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSurrCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSurrCode");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Iperiod10start).HasColumnName("iperiod10start");
            entity.Property(e => e.Iperiod11start).HasColumnName("iperiod11start");
            entity.Property(e => e.Iperiod12start).HasColumnName("iperiod12start");
            entity.Property(e => e.Iperiod13start).HasColumnName("iperiod13start");
            entity.Property(e => e.Iperiod14start).HasColumnName("iperiod14start");
            entity.Property(e => e.Iperiod15start).HasColumnName("iperiod15start");
            entity.Property(e => e.Iperiod2start).HasColumnName("iperiod2start");
            entity.Property(e => e.Iperiod3start).HasColumnName("iperiod3start");
            entity.Property(e => e.Iperiod4start).HasColumnName("iperiod4start");
            entity.Property(e => e.Iperiod5start).HasColumnName("iperiod5start");
            entity.Property(e => e.Iperiod6start).HasColumnName("iperiod6start");
            entity.Property(e => e.Iperiod7start).HasColumnName("iperiod7start");
            entity.Property(e => e.Iperiod8start).HasColumnName("iperiod8start");
            entity.Property(e => e.Iperiod9start).HasColumnName("iperiod9start");
            entity.Property(e => e.Iperiodfixed01).HasColumnName("iperiodfixed01");
            entity.Property(e => e.Iperiodfixed02).HasColumnName("iperiodfixed02");
            entity.Property(e => e.Iperiodfixed03).HasColumnName("iperiodfixed03");
            entity.Property(e => e.Iperiodfixed04).HasColumnName("iperiodfixed04");
            entity.Property(e => e.Iperiodfixed05).HasColumnName("iperiodfixed05");
            entity.Property(e => e.Iperiodfixed06).HasColumnName("iperiodfixed06");
            entity.Property(e => e.Iperiodfixed07).HasColumnName("iperiodfixed07");
            entity.Property(e => e.Iperiodfixed08).HasColumnName("iperiodfixed08");
            entity.Property(e => e.Iperiodfixed09).HasColumnName("iperiodfixed09");
            entity.Property(e => e.Iperiodfixed10).HasColumnName("iperiodfixed10");
            entity.Property(e => e.Iperiodfixed11).HasColumnName("iperiodfixed11");
            entity.Property(e => e.Iperiodfixed12).HasColumnName("iperiodfixed12");
            entity.Property(e => e.Iperiodfixed13).HasColumnName("iperiodfixed13");
            entity.Property(e => e.Iperiodfixed14).HasColumnName("iperiodfixed14");
            entity.Property(e => e.Iperiodfixed15).HasColumnName("iperiodfixed15");
            entity.Property(e => e.Izeroedout).HasColumnName("izeroedout");
            entity.Property(e => e.Nperiodpct01)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct01");
            entity.Property(e => e.Nperiodpct02)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct02");
            entity.Property(e => e.Nperiodpct03)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct03");
            entity.Property(e => e.Nperiodpct04)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct04");
            entity.Property(e => e.Nperiodpct05)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct05");
            entity.Property(e => e.Nperiodpct06)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct06");
            entity.Property(e => e.Nperiodpct07)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct07");
            entity.Property(e => e.Nperiodpct08)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct08");
            entity.Property(e => e.Nperiodpct09)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct09");
            entity.Property(e => e.Nperiodpct10)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct10");
            entity.Property(e => e.Nperiodpct11)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct11");
            entity.Property(e => e.Nperiodpct12)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct12");
            entity.Property(e => e.Nperiodpct13)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct13");
            entity.Property(e => e.Nperiodpct14)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct14");
            entity.Property(e => e.Nperiodpct15)
                .HasColumnType("numeric(9, 6)")
                .HasColumnName("nperiodpct15");
        });

        modelBuilder.Entity<AaprocessLog>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAProcessLog_by_Key");

            entity.ToTable("AAProcessLog", tb => tb.HasTrigger("tg_AAProcessLogDelete"));

            entity.HasIndex(e => e.GUid, "AAProcessLog_by_Guid").IsUnique();

            entity.HasIndex(e => e.ICodeProcess, "IX_AAProcessLog_byType");

            entity.HasIndex(e => e.DProcessed, "IX_AAProcessLog_bydate");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CDatabaseVersion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDatabaseVersion");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescription");
            entity.Property(e => e.CProgramVersion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cProgramVersion");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CUserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cUserName");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DProcessed)
                .HasColumnType("smalldatetime")
                .HasColumnName("dProcessed");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidReference).HasColumnName("gUidReference");
            entity.Property(e => e.ICodeProcess).HasColumnName("iCodeProcess");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MNotes)
                .HasColumnType("text")
                .HasColumnName("mNotes");
        });

        modelBuilder.Entity<AaprocessLogDetail>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("AAProcessLogDetail_by_Key");

            entity.ToTable("AAProcessLogDetail");

            entity.HasIndex(e => e.GUid, "AAProcessLogDetail_by_Guid").IsUnique();

            entity.HasIndex(e => e.IKeyProcessLog, "IX_AAProcessLogDetail");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.CDescription1)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescription1");
            entity.Property(e => e.CDescription2)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescription2");
            entity.Property(e => e.CDescription3)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescription3");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DFileDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("dFileDate");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeDetailType).HasColumnName("iCodeDetailType");
            entity.Property(e => e.IKeyProcessLog).HasColumnName("iKeyProcessLog");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaprocessValue>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAProcessValues");

            entity.HasIndex(e => e.GUid, "IX_AAProcessValues_byGuid");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.BFlagCalculateBasis).HasColumnName("bFlagCalculateBasis");
            entity.Property(e => e.BFlagCalculateRor).HasColumnName("bFlagCalculateROR");
            entity.Property(e => e.BFlagForceCalculation).HasColumnName("bFlagForceCalculation");
            entity.Property(e => e.BFlagProcessAll).HasColumnName("bFlagProcessAll");
            entity.Property(e => e.BFlagRebuildTaxLot).HasColumnName("bFlagRebuildTaxLot");
            entity.Property(e => e.BFlagRebuildValuationTables).HasColumnName("bFlagRebuildValuationTables");
            entity.Property(e => e.BFlagSumm)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagSumm");
            entity.Property(e => e.BFlagUpdateAccount).HasColumnName("bFlagUpdateAccount");
            entity.Property(e => e.BFlagValidatePeriodicValuations).HasColumnName("bFlagValidatePeriodicValuations");
            entity.Property(e => e.CPeriod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cPeriod");
            entity.Property(e => e.CProcessHeaderMessage)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cProcessHeaderMessage");
            entity.Property(e => e.CProcessResult)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cProcessResult");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.DEndRange)
                .HasColumnType("date")
                .HasColumnName("dEndRange");
            entity.Property(e => e.DStartRange)
                .HasColumnType("date")
                .HasColumnName("dStartRange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
        });

        modelBuilder.Entity<AaprocessValuesAccount>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAProcessValuesAccounts");

            entity.HasIndex(e => e.IKeyProcess, "IX_AAProcessValuesAccounts_byProcess");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.CAccount)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAccount");
            entity.Property(e => e.IKeyAccount).HasColumnName("iKeyAccount");
            entity.Property(e => e.IKeyClient).HasColumnName("iKeyClient");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
        });

        modelBuilder.Entity<Aaproducer>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAProducer", tb =>
                {
                    tb.HasTrigger("tg_AAProducerDelete");
                    tb.HasTrigger("tg_AAProducerInsert");
                });

            entity.HasIndex(e => e.IKeyOffice, "By_Office_AAProducer");

            entity.HasIndex(e => e.CApikey1, "IX_AAProducer_APIKey1");

            entity.HasIndex(e => e.BFlagAgency, "IX_AAProducer_bFlagAgency");

            entity.HasIndex(e => e.CName, "IX_AAProducer_byCName");

            entity.HasIndex(e => e.IKeyAccountPlaceHolder, "IX_AAProducer_byPlaceholder");

            entity.HasIndex(e => e.GUid, "by_Guid_AAProducer");

            entity.HasIndex(e => e.IKeyName, "by_name_AAProducer").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagAgency).HasColumnName("bFlagAgency");
            entity.Property(e => e.BFlagAlbridgeUnattended).HasColumnName("bFlagAlbridgeUnattended");
            entity.Property(e => e.BFlagShareFileEnabled).HasColumnName("bFlagShareFileEnabled");
            entity.Property(e => e.BFlagShowFullAddressOnReports).HasColumnName("bFlagShowFullAddressOnReports");
            entity.Property(e => e.CAdvisorVaultBurstUploadLocation)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAdvisorVault_BurstUploadLocation");
            entity.Property(e => e.CAdvisorVaultUserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAdvisorVaultUserName");
            entity.Property(e => e.CAlbridgeFinancialInstitutionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAlbridgeFinancialInstitutionID");
            entity.Property(e => e.CAlbridgePartnerUserId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAlbridgePartnerUserID");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CAwloginId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAWLoginID");
            entity.Property(e => e.CAwloginPw)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAWLoginPW");
            entity.Property(e => e.CAwname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAWName");
            entity.Property(e => e.CBldadvisorId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cBLDAdvisorID");
            entity.Property(e => e.CBldadvisorPassword)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cBLDAdvisorPassword");
            entity.Property(e => e.CCamid)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCAMid");
            entity.Property(e => e.CCampassword)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCAMPassword");
            entity.Property(e => e.CDocupaceRepCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDocupaceRepCode");
            entity.Property(e => e.CDvloginId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDVLoginID");
            entity.Property(e => e.CDvloginPw)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDVLoginPW");
            entity.Property(e => e.CFinanceLogixAdvisorId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cFinanceLogixAdvisorID");
            entity.Property(e => e.CFinanceLogixAdvisorPassword)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cFinanceLogixAdvisorPassword");
            entity.Property(e => e.CMacgpasswordEncrypted)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMACGPasswordEncrypted");
            entity.Property(e => e.CMacguserId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMACGUserID");
            entity.Property(e => e.CMacroRiskAdvisorId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMacroRiskAdvisorID");
            entity.Property(e => e.CMacroRiskAdvisorPassWord)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMacroRiskAdvisorPassWord");
            entity.Property(e => e.CMoneyGuideProInstitutionId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMoneyGuideProInstitutionID");
            entity.Property(e => e.CMoneyGuideProVirtualDirectory)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMoneyGuideProVirtualDirectory");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.COrionListedRepName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOrionListedRepName");
            entity.Property(e => e.COrionRepAuthentication)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOrionRepAuthentication");
            entity.Property(e => e.COrionRepNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOrionRepNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CShareFileAuthTokenEncrypted)
                .IsUnicode(false)
                .HasColumnName("cShareFile_AuthTokenEncrypted");
            entity.Property(e => e.CShareFileSubDomain)
                .IsUnicode(false)
                .HasColumnName("cShareFileSubDomain");
            entity.Property(e => e.CTdaApiAdvisorId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cTDA_API_AdvisorID");
            entity.Property(e => e.CTdaApiAdvisorPassword)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cTDA_API_AdvisorPassword");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DMacgretrieveFrom)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dMACGRetrieveFrom");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyAccountPlaceHolder).HasColumnName("iKeyAccountPlaceHolder");
            entity.Property(e => e.IKeyDefaultManager).HasColumnName("iKeyDefaultManager");
            entity.Property(e => e.IKeyName).HasColumnName("iKeyName");
            entity.Property(e => e.IKeyOffice).HasColumnName("iKeyOffice");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyNameNavigation).WithOne(p => p.Aaproducer)
                .HasForeignKey<Aaproducer>(d => d.IKeyName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAProducer_AAName");

            entity.HasOne(d => d.IKeyOfficeNavigation).WithMany(p => p.Aaproducers)
                .HasForeignKey(d => d.IKeyOffice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAProducer_AAOffice");
        });

        modelBuilder.Entity<AaproducerGroup>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAProducerGroup", tb => tb.HasTrigger("tg_AAProducerGroupDelete"));

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagActive)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagActive");
            entity.Property(e => e.CProducerGroupName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cProducerGroupName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaproducerGroupLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAProducerGroupLink");

            entity.HasIndex(e => e.IKeyProducerGroup, "IX_AAProducerGroupLink_byGroup");

            entity.HasIndex(e => e.IKeyProducer, "IX_AAProducerGroupLink_byPdcr");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyProducer).HasColumnName("iKeyProducer");
            entity.Property(e => e.IKeyProducerGroup).HasColumnName("iKeyProducerGroup");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.NSplit)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nSplit");
        });

        modelBuilder.Entity<AaproducerReference>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAPdcrRf");

            entity.ToTable("AAProducerReference", tb =>
                {
                    tb.HasTrigger("tg_AAProducerReferenceDelete");
                    tb.HasTrigger("tg_AAProducerReferenceUpdate");
                });

            entity.HasIndex(e => new { e.Cref, e.Icodecompany }, "AAProducerReference_byRefCompany");

            entity.HasIndex(e => e.GUid, "by_Guid_AAPdcrRf").IsUnique();

            entity.HasIndex(e => e.Ikeypdcr, "by_pdcr");

            entity.HasIndex(e => e.Cref, "by_ref");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cprodclass)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cprodclass");
            entity.Property(e => e.Cref)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cref");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodecompany).HasColumnName("icodecompany");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Nagtpct)
                .HasColumnType("numeric(9, 3)")
                .HasColumnName("nagtpct");

            entity.HasOne(d => d.IkeypdcrNavigation).WithMany(p => p.AaproducerReferences)
                .HasForeignKey(d => d.Ikeypdcr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ProducerReferences");
        });

        modelBuilder.Entity<AaqueryCondition>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAQueryCondition");

            entity.HasIndex(e => e.IBatch, "IX_AAQueryCondition");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CBaseClass)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cBaseClass");
            entity.Property(e => e.CExistsColumn)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cExistsColumn");
            entity.Property(e => e.CExistsTableAlias)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cExistsTableAlias");
            entity.Property(e => e.CLabel)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cLabel");
            entity.Property(e => e.CQueryColumn)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cQueryColumn");
            entity.Property(e => e.CQueryTableAlias)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cQueryTableAlias");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CTextFormat)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cTextFormat");
            entity.Property(e => e.CUniqueConditionName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cUniqueConditionName");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IBatch).HasColumnName("iBatch");
            entity.Property(e => e.IColumnSqlType).HasColumnName("iColumnSqlType");
            entity.Property(e => e.IKeyQueryTable).HasColumnName("iKeyQueryTable");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IReportKeyTable).HasColumnName("iReportKeyTable");
            entity.Property(e => e.ISortOrder).HasColumnName("iSortOrder");
        });

        modelBuilder.Entity<AaqueryConditionItemSource>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAQueryConditionItemSource");

            entity.HasIndex(e => e.IKeyQueryCondition, "IX_AAQueryConditionItemSource");

            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.BFlagFilterNot).HasColumnName("bFlagFilterNot");
            entity.Property(e => e.CDescriptionColumn)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cDescriptionColumn");
            entity.Property(e => e.CFilterIntColumn)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cFilterIntColumn");
            entity.Property(e => e.CKeyColumn)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cKeyColumn");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CViewNamKeyColumn)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cViewNamKeyColumn");
            entity.Property(e => e.CViewProducerKeyColumn)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cViewProducerKeyColumn");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IFilterIntValue).HasColumnName("iFilterIntValue");
            entity.Property(e => e.IKeyQueryCondition).HasColumnName("iKeyQueryCondition");
            entity.Property(e => e.IKeyTable).HasColumnName("iKeyTable");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaqueryConditionJoin>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAQueryConditionJoin");

            entity.HasIndex(e => e.IKeyQueryCondition, "IX_AAQueryConditionJoin_ByiKeyQueryCondition");

            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.BFlagFilterNot).HasColumnName("bFlagFilterNot");
            entity.Property(e => e.BFlagJoinNot).HasColumnName("bFlagJoinNot");
            entity.Property(e => e.CFilterIntColumn)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cFilterIntColumn");
            entity.Property(e => e.CJoinFromColumn)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cJoinFromColumn");
            entity.Property(e => e.CJoinFromTableAlias)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cJoinFromTableAlias");
            entity.Property(e => e.CJoinToColumn)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cJoinToColumn");
            entity.Property(e => e.CJoinToTableAlias)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cJoinToTableAlias");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IFilterIntValue).HasColumnName("iFilterIntValue");
            entity.Property(e => e.IKeyJoinFromTable).HasColumnName("iKeyJoinFromTable");
            entity.Property(e => e.IKeyJoinToTable).HasColumnName("iKeyJoinToTable");
            entity.Property(e => e.IKeyQueryCondition).HasColumnName("iKeyQueryCondition");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISortOrder).HasColumnName("iSortOrder");
        });

        modelBuilder.Entity<AaquerySavedCondition>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAQuerySavedCondition");

            entity.HasIndex(e => e.IKeySavedSet, "IX_AAQuerySavedCondition");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.COperator)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cOperator");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CUniqueConditionName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cUniqueConditionName");
            entity.Property(e => e.CValue)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cValue");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeySavedSet).HasColumnName("iKeySavedSet");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AaquerySavedConditionSet>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAQuerySavedConditionSet", tb => tb.HasTrigger("tg_AAQuerySavedConditionSetDelete"));

            entity.HasIndex(e => e.IKeyOwningUser, "IX_AAQuerySavedConditionSet");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagInsuranceExcludeUnrelatedNames).HasColumnName("bFlagInsuranceExcludeUnrelatedNames");
            entity.Property(e => e.BFlagInsuranceSelectAll).HasColumnName("bFlagInsuranceSelectAll");
            entity.Property(e => e.BFlagInvestmentsExcludeUnrelatedNames).HasColumnName("bFlagInvestmentsExcludeUnrelatedNames");
            entity.Property(e => e.BFlagInvestmentsSelectAll).HasColumnName("bFlagInvestmentsSelectAll");
            entity.Property(e => e.BFlagPrevious).HasColumnName("bFlagPrevious");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IInsuranceNamesRelationship).HasColumnName("iInsuranceNamesRelationship");
            entity.Property(e => e.IInvestmentsNamesRelationship).HasColumnName("iInvestmentsNamesRelationship");
            entity.Property(e => e.IKeyOwningUser).HasColumnName("iKeyOwningUser");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MDescripton)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("mDescripton");
        });

        modelBuilder.Entity<AaquerySavedConditionSetUserLink>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAQuerySavedConditionSetUserLink");

            entity.HasIndex(e => e.IKeyUser, "IX_AAQuerySavedConditionSetUserLink");

            entity.HasIndex(e => e.IKeySavedSet, "IX_AAQuerySavedConditionSetUserLink_1");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeySavedSet).HasColumnName("iKeySavedSet");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<Aareport>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("by_Key_AAReport");

            entity.ToTable("AAReport", tb =>
                {
                    tb.HasTrigger("tg_AAReportDelete");
                    tb.HasTrigger("tg_UpdateAAReport");
                });

            entity.HasIndex(e => e.IKeyProgram, "AAReport_ByProgram");

            entity.HasIndex(e => e.IKeyGroup, "by_Group_AAReport");

            entity.HasIndex(e => e.GUid, "by_Guid_AAReport").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagAllowBursting).HasColumnName("bFlagAllowBursting");
            entity.Property(e => e.BFlagChartExists).HasColumnName("bFlagChartExists");
            entity.Property(e => e.BFlagEdit).HasColumnName("bFlagEdit");
            entity.Property(e => e.BFlagFootnoteLastPageOnly).HasColumnName("bFlagFootnoteLastPageOnly");
            entity.Property(e => e.BFlagForceAdminTitles).HasColumnName("bFlagForceAdminTitles");
            entity.Property(e => e.BFlagHide).HasColumnName("bFlagHide");
            entity.Property(e => e.BFlagIsInternal).HasColumnName("bFlagIsInternal");
            entity.Property(e => e.BFlagNoCopy).HasColumnName("bFlagNoCopy");
            entity.Property(e => e.BFlagRequiresCriteriaHousehold).HasColumnName("bFlagRequiresCriteriaHousehold");
            entity.Property(e => e.BFlagRequiresCriteriaHouseholdOrRelatedName).HasColumnName("bFlagRequiresCriteriaHouseholdOrRelatedName");
            entity.Property(e => e.BFlagRequiresCriteriaRelatedName).HasColumnName("bFlagRequiresCriteriaRelatedName");
            entity.Property(e => e.BFlagRequiresCriteriaRelatedType).HasColumnName("bFlagRequiresCriteriaRelatedType");
            entity.Property(e => e.BFlagSwapReport).HasColumnName("bFlagSwapReport");
            entity.Property(e => e.BFlagWebAvailable).HasColumnName("bFlagWebAvailable");
            entity.Property(e => e.CBurstTopLevelGroupingFieldName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cBurstTopLevelGroupingFieldName");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CReportFormatFile)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cReportFormatFile");
            entity.Property(e => e.CReportname)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cReportname");
            entity.Property(e => e.CRequiresCriteriaCustomMessage)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cRequiresCriteriaCustomMessage");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyFootnote).HasColumnName("iKeyFootnote");
            entity.Property(e => e.IKeyGroup).HasColumnName("iKeyGroup");
            entity.Property(e => e.IKeyProgram).HasColumnName("iKeyProgram");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MChartXml)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mChartXML");
            entity.Property(e => e.MComment)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnType("text")
                .HasColumnName("mComment");
            entity.Property(e => e.MReportXml)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mReportXML");
            entity.Property(e => e.MSwapXml)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnType("text")
                .HasColumnName("mSwapXml");

            entity.HasOne(d => d.IKeyFootnoteNavigation).WithMany(p => p.Aareports)
                .HasForeignKey(d => d.IKeyFootnote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAReport_AAReportFootNote");

            entity.HasOne(d => d.IKeyProgramNavigation).WithMany(p => p.Aareports)
                .HasForeignKey(d => d.IKeyProgram)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAReport_AAReportProgram");
        });

        modelBuilder.Entity<AareportCustomTitle>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAReportCustomTitles");

            entity.HasIndex(e => e.IKeyReport, "IX_AAReportCustomTitles_iKeyReport");

            entity.HasIndex(e => e.IKeyUser, "IX_AAReportCustomTitles_iKeyUser");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CCustomTitle1)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCustomTitle1");
            entity.Property(e => e.CCustomTitle2)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCustomTitle2");
            entity.Property(e => e.CCustomTitle3)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCustomTitle3");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyReport).HasColumnName("iKeyReport");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AareportFavorite>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_aaReportFavorite");

            entity.ToTable("AAReportFavorite");

            entity.HasIndex(e => e.GUid, "By_Guid_AAReportFavorite");

            entity.HasIndex(e => e.IKeyReport, "by_Report_AAReportFavorite");

            entity.HasIndex(e => e.IKeyUser, "by_User_AAReportFavorite");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyReport).HasColumnName("iKeyReport");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyReportNavigation).WithMany(p => p.AareportFavorites)
                .HasForeignKey(d => d.IKeyReport)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_aaReportFavorite_AAReport");

            entity.HasOne(d => d.IKeyUserNavigation).WithMany(p => p.AareportFavorites)
                .HasForeignKey(d => d.IKeyUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_aaReportFavorite_AAUser");
        });

        modelBuilder.Entity<AareportField>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAReportFields");

            entity.HasIndex(e => e.GUid, "AAReportFields_ByGuid").IsUnique();

            entity.HasIndex(e => e.IKeyProgram, "AAReportFields_byProgram");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagGroupable).HasColumnName("bFlagGroupable");
            entity.Property(e => e.CDataField)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDataField");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeFieldType).HasColumnName("iCodeFieldType");
            entity.Property(e => e.IKeyProgram).HasColumnName("iKeyProgram");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISortOrder).HasColumnName("iSortOrder");
            entity.Property(e => e.IWidth).HasColumnName("iWidth");

            entity.HasOne(d => d.IKeyProgramNavigation).WithMany(p => p.AareportFields)
                .HasForeignKey(d => d.IKeyProgram)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAReportFields_AAReportProgram");
        });

        modelBuilder.Entity<AareportFootNote>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAReportFootNote", tb => tb.HasTrigger("tg_AAReportFootnoteDelete"));

            entity.HasIndex(e => e.GUid, "AAReportFootNote_ByGuid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IFootnoteFontSize1).HasColumnName("iFootnoteFontSize1");
            entity.Property(e => e.IFootnoteFontSize2).HasColumnName("iFootnoteFontSize2");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MFootNote0)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("mFootNote0");
            entity.Property(e => e.MFootNote1)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnType("text")
                .HasColumnName("mFootNote1");
            entity.Property(e => e.MFootNote2)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnType("text")
                .HasColumnName("mFootNote2");
            entity.Property(e => e.MFootNote3)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("mFootNote3");
        });

        modelBuilder.Entity<AareportGroup>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("by_Key_AAReportGroup");

            entity.ToTable("AAReportGroup");

            entity.HasIndex(e => e.GUid, "by_Guid_AAReportGroup").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISortOrder).HasColumnName("iSortOrder");
        });

        modelBuilder.Entity<AareportPreference>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAReportPreference");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagDesktopDisabled).HasColumnName("bFlagDesktopDisabled");
            entity.Property(e => e.BFlagWebDisabled).HasColumnName("bFlagWebDisabled");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastRunDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastRunDate");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyReport).HasColumnName("iKeyReport");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ITimesRun).HasColumnName("iTimesRun");
        });

        modelBuilder.Entity<AareportProgram>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAReportProgram");

            entity.HasIndex(e => e.GUid, "AAReportProgram_ByGuid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISortOrder).HasColumnName("iSortOrder");
        });

        modelBuilder.Entity<Aasystem>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAGen");

            entity.ToTable("AASystem");

            entity.HasIndex(e => e.GUid, "by_Guid_AAGen").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagCheckPages)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagCheckPages");
            entity.Property(e => e.BFlagCustomNavigationMenuVisible).HasColumnName("bFlagCustomNavigationMenuVisible");
            entity.Property(e => e.BFlagEnableCustomLinks).HasColumnName("bFlagEnableCustomLinks");
            entity.Property(e => e.BFlagEnableLinksInArchivedEmailNotes).HasColumnName("bFlagEnableLinksInArchivedEmailNotes");
            entity.Property(e => e.BFlagEnableLinksInNotes)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagEnableLinksInNotes");
            entity.Property(e => e.BFlagEnableMessenger)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagEnableMessenger");
            entity.Property(e => e.BFlagLogCalendarEventNotifications).HasColumnName("bFlagLogCalendarEventNotifications");
            entity.Property(e => e.BFlagLogMessageNotification).HasColumnName("bFlagLogMessageNotification");
            entity.Property(e => e.BFlagPreventUsersFromChoosingSynchWithExchange).HasColumnName("bFlagPreventUsersFromChoosingSynchWithExchange");
            entity.Property(e => e.BFlagPreventUsersFromChoosingSynchWithOutlook).HasColumnName("bFlagPreventUsersFromChoosingSynchWithOutlook");
            entity.Property(e => e.BFlagPromptToCreateAutoLoginFile).HasColumnName("bFlagPromptToCreateAutoLoginFile");
            entity.Property(e => e.BFlagRecreateViews)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagRecreateViews");
            entity.Property(e => e.BFlagRestrictNewNametypesImportedFromOutlookOrExchange).HasColumnName("bFlagRestrictNewNametypesImportedFromOutlookOrExchange");
            entity.Property(e => e.BFlagShowAdvisoryWorldMenuOption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowAdvisoryWorldMenuOption");
            entity.Property(e => e.BFlagShowAlbridgeApplinkMenuOption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowAlbridgeApplinkMenuOption");
            entity.Property(e => e.BFlagShowDstvisionMenuOption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowDSTVisionMenuOption");
            entity.Property(e => e.BFlagShowExchangeServiceUserPreferences).HasColumnName("bFlagShowExchangeServiceUserPreferences");
            entity.Property(e => e.BFlagShowNotification)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowNotification");
            entity.Property(e => e.BFlagTradeDateCalculations).HasColumnName("bFlagTradeDateCalculations");
            entity.Property(e => e.BFlagUsePages).HasColumnName("bFlagUsePages");
            entity.Property(e => e.BFlagValidateCodes)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagValidateCodes");
            entity.Property(e => e.BFlagValidateEncryption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagValidateEncryption");
            entity.Property(e => e.CBuildBranch)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("('1')")
                .HasColumnName("cBuildBranch");
            entity.Property(e => e.CCustomNavigationMenuUrl)
                .IsUnicode(false)
                .HasColumnName("cCustomNavigationMenuURL");
            entity.Property(e => e.CDataBaseVersion)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cDataBaseVersion");
            entity.Property(e => e.CExchangeServiceAccountDomain)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cExchangeServiceAccountDomain");
            entity.Property(e => e.CExchangeServiceAccountLoginId)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cExchangeServiceAccountLoginID");
            entity.Property(e => e.CExchangeServiceAccountPassword)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cExchangeServiceAccountPassword");
            entity.Property(e => e.CLocalStationUpdatePath)
                .IsUnicode(false)
                .HasColumnName("cLocalStationUpdatePath");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastNoteIndexBuild)
                .HasDefaultValueSql("((0))")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastNoteIndexBuild");
            entity.Property(e => e.DLastReindex)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastReindex");
            entity.Property(e => e.DLastWorkflowUpdate)
                .HasColumnType("date")
                .HasColumnName("dLastWorkflowUpdate");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AasystemPreference>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AASystemPreference");

            entity.HasIndex(e => e.GUid, "AASystemPreference_ByGuid");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagAdvisorVaultBurstUploadDefaultForceAllProducers).HasColumnName("bFlagAdvisorVault_BurstUploadDefaultForceAllProducers");
            entity.Property(e => e.BFlagAdvisorVaultEnabled).HasColumnName("bFlagAdvisorVault_Enabled");
            entity.Property(e => e.BFlagAutoCalcInvestments)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagAutoCalcInvestments");
            entity.Property(e => e.BFlagAutoCalcRor).HasColumnName("bFlagAutoCalcROR");
            entity.Property(e => e.BFlagBlackDiamondAgreement).HasColumnName("bFlagBlackDiamondAgreement");
            entity.Property(e => e.BFlagCheckPages)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagCheckPages");
            entity.Property(e => e.BFlagCustomNavigationMenuVisible).HasColumnName("bFlagCustomNavigationMenuVisible");
            entity.Property(e => e.BFlagDlfpostDownloadProcessMarketValues)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagDLFPostDownloadProcessMarketValues");
            entity.Property(e => e.BFlagDocupace).HasColumnName("bFlagDocupace");
            entity.Property(e => e.BFlagDownloadLock).HasColumnName("bFlagDownloadLock");
            entity.Property(e => e.BFlagEnableCustomLinks).HasColumnName("bFlagEnableCustomLinks");
            entity.Property(e => e.BFlagEnableLinksInArchivedEmailNotes).HasColumnName("bFlagEnableLinksInArchivedEmailNotes");
            entity.Property(e => e.BFlagEnableLinksInNotes)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagEnableLinksInNotes");
            entity.Property(e => e.BFlagEnableMessenger)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagEnableMessenger");
            entity.Property(e => e.BFlagEntireZipCodeInCityLookup)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagEntireZipCodeInCityLookup");
            entity.Property(e => e.BFlagHostedCalcInvestments).HasColumnName("bFlagHostedCalcInvestments");
            entity.Property(e => e.BFlagHostedCalcRor).HasColumnName("bFlagHostedCalcROR");
            entity.Property(e => e.BFlagIsReviewDatabase).HasColumnName("bFlagIsReviewDatabase");
            entity.Property(e => e.BFlagLogCalendarEventNotifications).HasColumnName("bFlagLogCalendarEventNotifications");
            entity.Property(e => e.BFlagLogMessageNotification).HasColumnName("bFlagLogMessageNotification");
            entity.Property(e => e.BFlagMfaenabled).HasColumnName("bFlagMFAEnabled");
            entity.Property(e => e.BFlagMobileShowAccountNumbers).HasColumnName("bFlagMobileShowAccountNumbers");
            entity.Property(e => e.BFlagNlgvalidate)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagNLGValidate");
            entity.Property(e => e.BFlagOutlookAllowUserToChangeAttachmentLocation).HasColumnName("bFlagOutlookAllowUserToChangeAttachmentLocation");
            entity.Property(e => e.BFlagPreventUsersFromChoosingSyncWithGoogle).HasColumnName("bFlagPreventUsersFromChoosingSyncWithGoogle");
            entity.Property(e => e.BFlagPreventUsersFromChoosingSynchWithExchange).HasColumnName("bFlagPreventUsersFromChoosingSynchWithExchange");
            entity.Property(e => e.BFlagPreventUsersFromChoosingSynchWithOl365).HasColumnName("bFlagPreventUsersFromChoosingSynchWithOL365");
            entity.Property(e => e.BFlagPreventUsersFromChoosingSynchWithOutlook).HasColumnName("bFlagPreventUsersFromChoosingSynchWithOutlook");
            entity.Property(e => e.BFlagPromptToCreateAutoLoginFile).HasColumnName("bFlagPromptToCreateAutoLoginFile");
            entity.Property(e => e.BFlagRecordUserLogins)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagRecordUserLogins");
            entity.Property(e => e.BFlagRecreateViews)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagRecreateViews");
            entity.Property(e => e.BFlagRestrictAddressesOnePerLocation).HasColumnName("bFlagRestrictAddressesOnePerLocation");
            entity.Property(e => e.BFlagRestrictNewNametypesImportedFromOutlookOrExchange).HasColumnName("bFlagRestrictNewNametypesImportedFromOutlookOrExchange");
            entity.Property(e => e.BFlagRestrictPhonesToOnePerLocation).HasColumnName("bFlagRestrictPhonesToOnePerLocation");
            entity.Property(e => e.BFlagShareFileEnabled).HasColumnName("bFlagShareFileEnabled");
            entity.Property(e => e.BFlagSharefileShowMenuOption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagSharefile_ShowMenuOption");
            entity.Property(e => e.BFlagShowAdvisorVaultMenuOption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowAdvisorVaultMenuOption");
            entity.Property(e => e.BFlagShowAdvisoryWorldMenuOption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowAdvisoryWorldMenuOption");
            entity.Property(e => e.BFlagShowAlbridgeApplinkMenuOption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowAlbridgeApplinkMenuOption");
            entity.Property(e => e.BFlagShowAnnuityAccountViewClientAnnuities).HasColumnName("bFlagShowAnnuityAccountViewClientAnnuities");
            entity.Property(e => e.BFlagShowAnnuityAccountViewClientInvestments).HasColumnName("bFlagShowAnnuityAccountViewClientInvestments");
            entity.Property(e => e.BFlagShowAnnuityPolicyViewClientAnnuities).HasColumnName("bFlagShowAnnuityPolicyViewClientAnnuities");
            entity.Property(e => e.BFlagShowAnnuityPolicyViewClientInsurance).HasColumnName("bFlagShowAnnuityPolicyViewClientInsurance");
            entity.Property(e => e.BFlagShowBlackDiamondMenuOption).HasColumnName("bFlagShowBlackDiamondMenuOption");
            entity.Property(e => e.BFlagShowCustodianContactInfoOnReports)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowCustodianContactInfoOnReports");
            entity.Property(e => e.BFlagShowDstvisionMenuOption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowDSTVisionMenuOption");
            entity.Property(e => e.BFlagShowExchangeServiceUserPreferences).HasColumnName("bFlagShowExchangeServiceUserPreferences");
            entity.Property(e => e.BFlagShowMacroRiskAnalyticsMenuOption).HasColumnName("bFlagShowMacroRiskAnalyticsMenuOption");
            entity.Property(e => e.BFlagShowNetx360MenuOption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowNetx360MenuOption");
            entity.Property(e => e.BFlagShowNotification)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowNotification");
            entity.Property(e => e.BFlagShowRiskAlyzeMenuOption).HasColumnName("bFlagShowRiskAlyzeMenuOption");
            entity.Property(e => e.BFlagShowSyncServiceSettingsOnUserPrefScreen).HasColumnName("bFlagShowSyncServiceSettingsOnUserPrefScreen");
            entity.Property(e => e.BFlagShowTdaveoMenuOption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagShowTDAVeoMenuOption");
            entity.Property(e => e.BFlagSocialMedia)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagSocialMedia");
            entity.Property(e => e.BFlagStrongPasswordEnable)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagStrongPasswordEnable");
            entity.Property(e => e.BFlagTradeDateCalculations).HasColumnName("bFlagTradeDateCalculations");
            entity.Property(e => e.BFlagUsePages)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bFlagUsePages");
            entity.Property(e => e.BFlagValidateCodes).HasColumnName("bFlagValidateCodes");
            entity.Property(e => e.BFlagValidateEncryption)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagValidateEncryption");
            entity.Property(e => e.CAdvisorVaultAdminPasswordEncrypted)
                .IsUnicode(false)
                .HasColumnName("cAdvisorVault_AdminPasswordEncrypted");
            entity.Property(e => e.CAdvisorVaultAdminUserName)
                .IsUnicode(false)
                .HasColumnName("cAdvisorVault_AdminUserName");
            entity.Property(e => e.CAdvisorVaultBurstUploadDefaultLocation)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAdvisorVault_BurstUploadDefaultLocation");
            entity.Property(e => e.CAdvisorVaultPartnerIdencrypted)
                .IsUnicode(false)
                .HasColumnName("cAdvisorVault_PartnerIDEncrypted");
            entity.Property(e => e.CAdvisorVaultPublicKeyEncrypted)
                .IsUnicode(false)
                .HasColumnName("cAdvisorVault_PublicKeyEncrypted");
            entity.Property(e => e.CAdvisorVaultVaultIdentifier)
                .IsUnicode(false)
                .HasColumnName("cAdvisorVault_VaultIdentifier");
            entity.Property(e => e.CApikey1Label)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAPIKey1Label");
            entity.Property(e => e.CApikey2Label)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAPIKey2Label");
            entity.Property(e => e.CApikey3Label)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAPIKey3Label");
            entity.Property(e => e.CApiserviceAccountKeyEncrypted)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("cAPIServiceAccountKeyEncrypted");
            entity.Property(e => e.CBlackDiamondUserId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cBlackDiamondUserID");
            entity.Property(e => e.CBlackDiamondUserPw)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cBlackDiamondUserPW");
            entity.Property(e => e.CCustomNavigationMenuUrl)
                .IsUnicode(false)
                .HasColumnName("cCustomNavigationMenuURL");
            entity.Property(e => e.CDataBaseVersion)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDataBaseVersion");
            entity.Property(e => e.CDefaultOutlookAttachmentArchiveLocation)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDefaultOutlookAttachmentArchiveLocation");
            entity.Property(e => e.CDefaultPhoneCountryCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDefaultPhoneCountryCode");
            entity.Property(e => e.CDocupaceAesiv)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDocupaceAESIV");
            entity.Property(e => e.CDocupaceAeskey)
                .IsRequired()
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDocupaceAESKey");
            entity.Property(e => e.CDocupacePrivateId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDocupacePrivateID");
            entity.Property(e => e.CDocupacePublicId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDocupacePublicID");
            entity.Property(e => e.CDocupaceUrl)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDocupaceURL");
            entity.Property(e => e.CExchangeServiceAccountDomain)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cExchangeServiceAccountDomain");
            entity.Property(e => e.CExchangeServiceAccountLoginId)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cExchangeServiceAccountLoginID");
            entity.Property(e => e.CExchangeServiceAccountPassword)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cExchangeServiceAccountPassword");
            entity.Property(e => e.CGoogleAppType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cGoogleAppType");
            entity.Property(e => e.CGoogleAuthProviderX509)
                .IsUnicode(false)
                .HasColumnName("cGoogleAuthProvider_x509");
            entity.Property(e => e.CGoogleClientIdEncrypted)
                .IsUnicode(false)
                .HasColumnName("cGoogleClientID_Encrypted");
            entity.Property(e => e.CGoogleClientSecretEncrypted)
                .IsUnicode(false)
                .HasColumnName("cGoogleClientSecret_Encrypted");
            entity.Property(e => e.CGoogleCorporateDomain)
                .IsUnicode(false)
                .HasColumnName("cGoogleCorporateDomain");
            entity.Property(e => e.CGoogleOauthTokenUri)
                .IsUnicode(false)
                .HasColumnName("cGoogleOAuth_TokenURI");
            entity.Property(e => e.CGoogleRedirectUrl)
                .IsUnicode(false)
                .HasColumnName("cGoogleRedirectURL");
            entity.Property(e => e.CLocalStationUpdatePath)
                .IsUnicode(false)
                .HasColumnName("cLocalStationUpdatePath");
            entity.Property(e => e.CMacgSysAdminName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMACG_SysAdminName");
            entity.Property(e => e.CMacgSysAdminPasswordEncrypted)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cMACG_SysAdminPasswordEncrypted");
            entity.Property(e => e.CMobileCulture)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMobileCulture");
            entity.Property(e => e.CNlgFtpPasswordEncrypted)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cNLG_FTP_PasswordEncrypted");
            entity.Property(e => e.CNlgFtpUserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cNLG_FTP_UserName");
            entity.Property(e => e.CPrimaryNameTypes)
                .IsUnicode(false)
                .HasColumnName("cPrimaryNameTypes");
            entity.Property(e => e.CReviewDatabaseMessage)
                .IsUnicode(false)
                .HasColumnName("cReviewDatabaseMessage");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CShareFileClientIdEncrypted)
                .IsUnicode(false)
                .HasColumnName("cShareFileClientID_Encrypted");
            entity.Property(e => e.CShareFileClientSecretEncrypted)
                .IsUnicode(false)
                .HasColumnName("cShareFileClientSecret_Encrypted");
            entity.Property(e => e.CSharefilePrimaryDomain)
                .IsUnicode(false)
                .HasColumnName("cSharefile_PrimaryDomain");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DDlflastReindex)
                .HasColumnType("smalldatetime")
                .HasColumnName("dDLFLastReindex");
            entity.Property(e => e.DDlfserviceLastCheck)
                .HasColumnType("smalldatetime")
                .HasColumnName("dDLFServiceLastCheck");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastLoginTimeCheck)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastLoginTimeCheck");
            entity.Property(e => e.DLastNoteIndexBuild)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastNoteIndexBuild");
            entity.Property(e => e.DLastReindex)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastReindex");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IAdvisorVaultStorageMaximum).HasColumnName("iAdvisorVault_StorageMaximum");
            entity.Property(e => e.IAdvisorVaultStorageThreshold).HasColumnName("iAdvisorVault_StorageThreshold");
            entity.Property(e => e.IAdvisorVaultTemplateId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("iAdvisorVault_TemplateID");
            entity.Property(e => e.ICannotChangePasswordDays).HasColumnName("iCannotChangePasswordDays");
            entity.Property(e => e.ICannotRepeatPasswords).HasColumnName("iCannotRepeatPasswords");
            entity.Property(e => e.IDaysToRollover)
                .HasDefaultValueSql("((60))")
                .HasColumnName("iDaysToRollover");
            entity.Property(e => e.IDlfserviceMinimumStations)
                .HasDefaultValueSql("((10))")
                .HasColumnName("iDLFServiceMinimumStations");
            entity.Property(e => e.ILockoutAttempts).HasColumnName("iLockoutAttempts");
            entity.Property(e => e.IMfafreq)
                .HasDefaultValueSql("((7))")
                .HasColumnName("iMFAFreq");
            entity.Property(e => e.IMustChangePasswordDays).HasColumnName("iMustChangePasswordDays");
            entity.Property(e => e.INameLookpupAccessAll).HasColumnName("iNameLookpupAccessAll");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AatempDatum>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AATempData");

            entity.HasIndex(e => e.GUid, "AATempData_ByGuid");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlag1).HasColumnName("bFlag1");
            entity.Property(e => e.BFlag2).HasColumnName("bFlag2");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CString1)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cString1");
            entity.Property(e => e.CString2)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cString2");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DDateTime1)
                .HasColumnType("smalldatetime")
                .HasColumnName("dDateTime1");
            entity.Property(e => e.DDateTime2)
                .HasColumnType("smalldatetime")
                .HasColumnName("dDateTime2");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IInt1).HasColumnName("iInt1");
            entity.Property(e => e.IInt2).HasColumnName("iInt2");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MText1)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnType("text")
                .HasColumnName("mText1");
            entity.Property(e => e.MText2)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnType("text")
                .HasColumnName("mText2");
            entity.Property(e => e.NRordollar)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("nRORDollar");
            entity.Property(e => e.NRorsimple)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("nRORSimple");
            entity.Property(e => e.NRortime)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("nRORTime");
            entity.Property(e => e.YMoney1)
                .HasColumnType("money")
                .HasColumnName("yMoney1");
            entity.Property(e => e.YMoney2)
                .HasColumnType("money")
                .HasColumnName("yMoney2");
        });

        modelBuilder.Entity<AatempKeys1>(entity =>
        {
            entity.HasKey(e => e.IKeyPrimary);

            entity.ToTable("AATempKeys1");

            entity.HasIndex(e => new { e.IKeyUser, e.IKeyId }, "IX_AATempKeys1");

            entity.HasIndex(e => e.IKeyId, "IX_AATempKeys1_iKeyID");

            entity.Property(e => e.IKeyPrimary).HasColumnName("iKeyPrimary");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
        });

        modelBuilder.Entity<AatempKeys2>(entity =>
        {
            entity.HasKey(e => e.IKeyPrimary);

            entity.ToTable("AATempKeys2");

            entity.HasIndex(e => new { e.IKeyUser, e.IKeyId }, "IX_AATempKeys2");

            entity.HasIndex(e => e.IKeyId, "IX_AATempKeys2_iKeyId");

            entity.Property(e => e.IKeyPrimary).HasColumnName("iKeyPrimary");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
        });

        modelBuilder.Entity<AatempKeys3>(entity =>
        {
            entity.HasKey(e => e.IKeyPrimary);

            entity.ToTable("AATempKeys3");

            entity.HasIndex(e => new { e.IKeyUser, e.IKeyId }, "IX_AATempKeys3");

            entity.HasIndex(e => e.IKeyId, "IX_AATempKeys3_iKeyID");

            entity.Property(e => e.IKeyPrimary).HasColumnName("iKeyPrimary");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
        });

        modelBuilder.Entity<AatempKeys4>(entity =>
        {
            entity.HasKey(e => e.IKeyPrimary);

            entity.ToTable("AATempKeys4");

            entity.HasIndex(e => new { e.IKeyUser, e.IKeyId }, "IX_AATempKeys4");

            entity.HasIndex(e => e.IKeyId, "IX_AATempKeys4_iKeyID");

            entity.Property(e => e.IKeyPrimary).HasColumnName("iKeyPrimary");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
        });

        modelBuilder.Entity<AatempKeys5>(entity =>
        {
            entity.HasKey(e => e.IKeyPrimary);

            entity.ToTable("AATempKeys5");

            entity.HasIndex(e => new { e.IKeyUser, e.IKeyId }, "IX_AATempKeys5");

            entity.HasIndex(e => e.IKeyId, "IX_AATempKeys5_1");

            entity.Property(e => e.IKeyPrimary).HasColumnName("iKeyPrimary");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
        });

        modelBuilder.Entity<Aauser>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUser", tb =>
                {
                    tb.HasTrigger("tg_AAUserDelete");
                    tb.HasTrigger("tg_AAUserUpdate");
                });

            entity.HasIndex(e => e.CUserInitials, "AAUserBy_init");

            entity.HasIndex(e => new { e.IKeyId, e.BFlagLoggedIn, e.DLastLoginServerTime }, "AAUser_LoginServerTime");

            entity.HasIndex(e => e.CUserId, "AAUserby_UserID");

            entity.HasIndex(e => e.IFailedLogin, "IX_AAUserByFailedAttempts");

            entity.HasIndex(e => e.CPassword, "IX_AAUserByPassword");

            entity.HasIndex(e => e.IKeyCurrentView, "IX_AAUser_IKeyCurrentView");

            entity.HasIndex(e => e.IKeyCalendar, "IX_AAUser_iKeyCalendar");

            entity.HasIndex(e => e.IKeyDefaultView, "IX_AAUser_iKeyDefaultView");

            entity.HasIndex(e => e.IKeyName, "IX_AAUser_iKeyName");

            entity.HasIndex(e => e.IKeyRole, "IX_AAUser_iKeyRole");

            entity.HasIndex(e => e.GUid, "by_Guid_AAUser").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagDeactivate).HasColumnName("bFlagDeactivate");
            entity.Property(e => e.BFlagDisable).HasColumnName("bFlagDisable");
            entity.Property(e => e.BFlagForcePasswordChange).HasColumnName("bFlagForcePasswordChange");
            entity.Property(e => e.BFlagLimitedMobileAccess).HasColumnName("bFlagLimitedMobileAccess");
            entity.Property(e => e.BFlagLoggedIn).HasColumnName("bFlagLoggedIn");
            entity.Property(e => e.BFlagMobileAccess)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagMobileAccess");
            entity.Property(e => e.BFlagNameFiltered).HasColumnName("bFlagNameFiltered");
            entity.Property(e => e.BFlagNeedsEncryption).HasColumnName("bFlagNeedsEncryption");
            entity.Property(e => e.BFlagOverrideAttachmentArchivePath).HasColumnName("bFlagOverrideAttachmentArchivePath");
            entity.Property(e => e.BFlagPartialAlphabetLookup).HasColumnName("bFlagPartialAlphabetLookup");
            entity.Property(e => e.BFlagPreventPasswordChange).HasColumnName("bFlagPreventPasswordChange");
            entity.Property(e => e.BFlagShowIndividualInvestments).HasColumnName("bFlagShowIndividualInvestments");
            entity.Property(e => e.BFlagShowLiquidatedInvestments).HasColumnName("bFlagShowLiquidatedInvestments");
            entity.Property(e => e.BFlagShowTerminatedPolicies).HasColumnName("bFlagShowTerminatedPolicies");
            entity.Property(e => e.CBurstReportingDefaultPath)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cBurstReportingDefaultPath");
            entity.Property(e => e.CDiagramLayoutLinksFromSource)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDiagramLayoutLinksFromSource");
            entity.Property(e => e.CEmailAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cEmailAddress");
            entity.Property(e => e.CLaserAppAnywherePasswordEncrypted)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cLaserAppAnywherePasswordEncrypted");
            entity.Property(e => e.CLaserAppAnywhereUserId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cLaserAppAnywhereUserID");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.COutlookAttachmentArchiveUserLocation)
                .IsUnicode(false)
                .HasColumnName("cOutlookAttachmentArchiveUserLocation");
            entity.Property(e => e.CPassword)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cPassword");
            entity.Property(e => e.CReadyDocApiurl)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cReadyDocAPIURL");
            entity.Property(e => e.CReadyDocClientId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cReadyDocClientID");
            entity.Property(e => e.CReadyDocPasswordEncrypted)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cReadyDocPasswordEncrypted");
            entity.Property(e => e.CReadyDocServiceUrl)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cReadyDocServiceURL");
            entity.Property(e => e.CReadyDocUserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cReadyDocUserName");
            entity.Property(e => e.CRecordStamp)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .IsFixedLength()
                .HasColumnName("cRecordStamp");
            entity.Property(e => e.CRecordType)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cRecordType");
            entity.Property(e => e.CRiskAlyzeAccountId)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cRiskAlyzeAccountID");
            entity.Property(e => e.CRiskAlyzeAccountPw)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cRiskAlyzeAccountPW");
            entity.Property(e => e.CRiskAlyzeRefreshToken)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cRiskAlyzeRefreshToken");
            entity.Property(e => e.CRiskAlyzeToken)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cRiskAlyzeToken");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CStationName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cStationName");
            entity.Property(e => e.CUserId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cUserID");
            entity.Property(e => e.CUserInitials)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cUserInitials");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastLogin)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastLogin");
            entity.Property(e => e.DLastLoginServerTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastLoginServerTime");
            entity.Property(e => e.DLastPasswordChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastPasswordChange");
            entity.Property(e => e.DRiskAlyzeTokenExpires)
                .HasColumnType("datetime")
                .HasColumnName("dRiskAlyzeTokenExpires");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidSsotoken).HasColumnName("gUidSSOToken");
            entity.Property(e => e.ICodeDefaultAddressLocation).HasColumnName("iCodeDefaultAddressLocation");
            entity.Property(e => e.ICodeDefaultPhoneLocation).HasColumnName("iCodeDefaultPhoneLocation");
            entity.Property(e => e.ICodeViewClientPhoneDisplay1).HasColumnName("iCodeViewClientPhoneDisplay1");
            entity.Property(e => e.ICodeViewClientPhoneDisplay2)
                .HasDefaultValueSql("((524))")
                .HasColumnName("iCodeViewClientPhoneDisplay2");
            entity.Property(e => e.IDropDownCodeListDisplayOption).HasColumnName("iDropDownCodeListDisplayOption");
            entity.Property(e => e.IFailedLogin).HasColumnName("iFailedLogin");
            entity.Property(e => e.IFormAutomationOption).HasColumnName("iFormAutomationOption");
            entity.Property(e => e.IKeyCalendar).HasColumnName("iKeyCalendar");
            entity.Property(e => e.IKeyCurrentView).HasColumnName("iKeyCurrentView");
            entity.Property(e => e.IKeyDefaultAgency).HasColumnName("iKeyDefaultAgency");
            entity.Property(e => e.IKeyDefaultProducer).HasColumnName("iKeyDefaultProducer");
            entity.Property(e => e.IKeyDefaultView).HasColumnName("iKeyDefaultView");
            entity.Property(e => e.IKeyLastBroadcastMessageReceived).HasColumnName("iKeyLastBroadcastMessageReceived");
            entity.Property(e => e.IKeyName).HasColumnName("iKeyName");
            entity.Property(e => e.IKeyRole).HasColumnName("iKeyRole");
            entity.Property(e => e.IMaxRecentNames)
                .HasDefaultValueSql("((10))")
                .HasColumnName("iMaxRecentNames");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IShowAdvisoryAccountsOption).HasColumnName("iShowAdvisoryAccountsOption");
            entity.Property(e => e.ISyncOption).HasColumnName("iSyncOption");
            entity.Property(e => e.TSsotokenExpiration)
                .HasColumnType("smalldatetime")
                .HasColumnName("tSSOTokenExpiration");
            entity.Property(e => e.XPrevPasswords)
                .HasColumnType("text")
                .HasColumnName("xPrevPasswords");

            entity.HasOne(d => d.IKeyRoleNavigation).WithMany(p => p.Aausers)
                .HasForeignKey(d => d.IKeyRole)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUser_AAUserRoleType");
        });

        modelBuilder.Entity<AauserDashboardWidget>(entity =>
        {
            entity.HasKey(e => e.IKeyId).IsClustered(false);

            entity.ToTable("AAUserDashboardWidget");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BFlagStretchable).HasColumnName("bFlagStretchable");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IColumn).HasColumnName("iColumn");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IKeyWidget).HasColumnName("iKeyWidget");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRow).HasColumnName("iRow");
            entity.Property(e => e.MConfig)
                .IsUnicode(false)
                .HasColumnName("mConfig");
            entity.Property(e => e.MConfigJson)
                .IsUnicode(false)
                .HasColumnName("mConfigJson");
        });

        modelBuilder.Entity<AauserGroup>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUserGroup", tb => tb.HasTrigger("tg_AAUserGroupDelete"));

            entity.HasIndex(e => e.IKeyParentUserGroup, "IX_AAUserGroup");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagDeactivate).HasColumnName("bFlagDeactivate");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CUserGroupName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cUserGroupName");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCalendar).HasColumnName("iKeyCalendar");
            entity.Property(e => e.IKeyParentUserGroup).HasColumnName("iKeyParentUserGroup");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AauserGroupLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUserGroupLink");

            entity.HasIndex(e => e.IKeyUser, "IX_AAUserGroupLink");

            entity.HasIndex(e => e.IKeyUserGroup, "IX_AAUserGroupLink_1");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IKeyUserGroup).HasColumnName("iKeyUserGroup");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AauserMemo>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("by_Key_AAUserState");

            entity.ToTable("AAUserMemo");

            entity.HasIndex(e => e.IMemoType, "IX_AAUserMemoiMemoType");

            entity.HasIndex(e => e.GUid, "by_Guid_AAUserState").IsUnique();

            entity.HasIndex(e => e.IKeyUser, "by_User_AAUserState");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IMemoType).HasColumnName("iMemoType");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MMemo)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mMemo");
            entity.Property(e => e.XMemo)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasComment("Storage of preferences in XML Format")
                .HasColumnType("xml")
                .HasColumnName("xMemo");

            entity.HasOne(d => d.IKeyUserNavigation).WithMany(p => p.AauserMemos)
                .HasForeignKey(d => d.IKeyUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserState_AAUser");
        });

        modelBuilder.Entity<AauserMessage>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAUserMessage");

            entity.ToTable("AAUserMessage");

            entity.HasIndex(e => e.GUid, "AAUserMessage_by_Guid").IsUnique();

            entity.HasIndex(e => e.Ikeyclient, "AAUserMessage_by_client");

            entity.HasIndex(e => e.Ikeysource, "AAUserMessage_by_source");

            entity.HasIndex(e => new { e.Ikeytarget, e.BflagNotified }, "AAUserMessage_by_target");

            entity.HasIndex(e => e.BFlagArchived, "IX_AAUserMessage_Archived");

            entity.HasIndex(e => e.BFlagReceiverDeleted, "IX_AAUserMessage_ReceiverDel");

            entity.HasIndex(e => e.BFlagSenderDeleted, "IX_AAUserMessage_SenderDeleted");

            entity.HasIndex(e => new { e.Ikeytarget, e.BFlagReceiverDeleted, e.BFlagArchived }, "IX_AAUserMessage_TargetRecieveDelArchive");

            entity.HasIndex(e => e.Ikeytopic, "IX_AAUserMessage_byTopic");

            entity.HasIndex(e => e.DReceived, "IX_AAUserMessage_dRecieved");

            entity.HasIndex(e => e.Dsent, "IX_AAUserMessage_dSent");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagArchived).HasColumnName("bFlagArchived");
            entity.Property(e => e.BFlagReceiverDeleted).HasColumnName("bFlagReceiverDeleted");
            entity.Property(e => e.BFlagSenderDeleted).HasColumnName("bFlagSenderDeleted");
            entity.Property(e => e.BflagNotified).HasColumnName("bflagNotified");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DReceived)
                .HasColumnType("smalldatetime")
                .HasColumnName("dReceived");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Dsent)
                .HasColumnType("smalldatetime")
                .HasColumnName("dsent");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Ikeyclient)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ikeyclient");
            entity.Property(e => e.Ikeysource).HasColumnName("ikeysource");
            entity.Property(e => e.Ikeytarget).HasColumnName("ikeytarget");
            entity.Property(e => e.Ikeytopic).HasColumnName("ikeytopic");
            entity.Property(e => e.Mtext)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mtext");

            entity.HasOne(d => d.IkeyclientNavigation).WithMany(p => p.AauserMessages)
                .HasForeignKey(d => d.Ikeyclient)
                .HasConstraintName("MessageClient");

            entity.HasOne(d => d.IkeysourceNavigation).WithMany(p => p.AauserMessageIkeysourceNavigations)
                .HasForeignKey(d => d.Ikeysource)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MessageSource");

            entity.HasOne(d => d.IkeytargetNavigation).WithMany(p => p.AauserMessageIkeytargetNavigations)
                .HasForeignKey(d => d.Ikeytarget)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("MessageTarget");
        });

        modelBuilder.Entity<AauserMessageNotificationLog>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUserMessageNotificationLog");

            entity.HasIndex(e => e.IKeyMessage, "IX_AAUserMessageNotificationLog");

            entity.HasIndex(e => e.IKeyUser, "IX_AAUserMessageNotificationLog_byUser");

            entity.HasIndex(e => e.INotificationType, "IX_AAUserMessageNotificationLog_iNotify");

            entity.HasIndex(e => e.TAcknowledged, "IX_AAUserMessageNotificationLog_tAcknow");

            entity.HasIndex(e => e.TMessage, "IX_AAUserMessageNotificationLog_tMessage");

            entity.HasIndex(e => e.TNotified, "IX_AAUserMessageNotificationLog_tNotify");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.IKeyMessage).HasColumnName("iKeyMessage");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.INotificationType).HasColumnName("iNotificationType");
            entity.Property(e => e.TAcknowledged)
                .HasColumnType("smalldatetime")
                .HasColumnName("tAcknowledged");
            entity.Property(e => e.TMessage)
                .HasColumnType("smalldatetime")
                .HasColumnName("tMessage");
            entity.Property(e => e.TNotified)
                .HasColumnType("smalldatetime")
                .HasColumnName("tNotified");
        });

        modelBuilder.Entity<AauserMessageView>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUserMessageView");

            entity.HasIndex(e => e.IKeyUser, "IX_AAUserMessageView");

            entity.HasIndex(e => e.IKeyMessage, "IX_AAUserMessageView_1");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyId");
            entity.Property(e => e.IKeyMessage).HasColumnName("iKeyMessage");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
        });

        modelBuilder.Entity<AauserModule>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_AAUserBy_Key");

            entity.ToTable("AAUserModule");

            entity.HasIndex(e => e.IKeyModule, "AAUserModule_ByModule");

            entity.HasIndex(e => e.GUid, "By_Serial_AAUserModule").IsUnique();

            entity.HasIndex(e => e.IKeyUser, "IX_AAUserModuleby_User");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CAccess)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cAccess");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CwhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cwhoAdded");
            entity.Property(e => e.Cwhochange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cwhochange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyModuleNavigation).WithMany(p => p.AauserModules)
                .HasForeignKey(d => d.IKeyModule)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserModule_AAModule");

            entity.HasOne(d => d.IKeyUserNavigation).WithMany(p => p.AauserModules)
                .HasForeignKey(d => d.IKeyUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserModule_AAUser");
        });

        modelBuilder.Entity<AauserProducer>(entity =>
        {
            entity.HasKey(e => new { e.IKeyUser, e.IKeyProducer });

            entity.ToTable("AAUserProducer");

            entity.HasIndex(e => e.IKeyId, "IX_AAUserProducer");

            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IKeyProducer).HasColumnName("iKeyProducer");
            entity.Property(e => e.IKeyId)
                .ValueGeneratedOnAdd()
                .HasColumnName("iKeyID");
        });

        modelBuilder.Entity<AauserRecentName>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUserRecentName");

            entity.HasIndex(e => e.IKeyName, "IX_AAUserRecentName_iKeyName");

            entity.HasIndex(e => new { e.IKeyUser, e.IOrder }, "IX_AAUserRecentName_iKeyUser");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyName).HasColumnName("iKeyName");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IOrder).HasColumnName("iOrder");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AauserRoleTask>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUserRoleTask", tb => tb.HasComment("Linking table between roles & tasks."));

            entity.HasIndex(e => e.IKeyRole, "By_Role_AAUserRoleTask");

            entity.HasIndex(e => e.GUid, "by_Guid_AAUserRoleTask").IsUnique();

            entity.HasIndex(e => e.IKeyTask, "by_Task_AAUserRoleTask");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyRole).HasColumnName("iKeyRole");
            entity.Property(e => e.IKeyTask).HasColumnName("iKeyTask");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyRoleNavigation).WithMany(p => p.AauserRoleTasks)
                .HasForeignKey(d => d.IKeyRole)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserRoleTask_AAUserRoleType");

            entity.HasOne(d => d.IKeyTaskNavigation).WithMany(p => p.AauserRoleTasks)
                .HasForeignKey(d => d.IKeyTask)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserRoleTask_AAUserTaskType");
        });

        modelBuilder.Entity<AauserRoleType>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUserRoleType");

            entity.HasIndex(e => e.GUid, "by_Guid_AAUserRoleType").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AauserTaskOverRide>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUserTaskOverRide", tb => tb.HasComment("Add or Remove tasks from role of user."));

            entity.HasIndex(e => e.GUid, "by_Guid_AAUserTaskOverRide");

            entity.HasIndex(e => e.IKeyTask, "by_Task_AAUserTaskOverRide");

            entity.HasIndex(e => e.IKeyUser, "by_User_AAUserTaskOverRide");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagActivate).HasColumnName("bFlagActivate");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyTask).HasColumnName("iKeyTask");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyTaskNavigation).WithMany(p => p.AauserTaskOverRides)
                .HasForeignKey(d => d.IKeyTask)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserTaskOverRide_AAUserTaskType");

            entity.HasOne(d => d.IKeyUserNavigation).WithMany(p => p.AauserTaskOverRides)
                .HasForeignKey(d => d.IKeyUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserTaskOverRide_AAUser");
        });

        modelBuilder.Entity<AauserTaskType>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUserTaskType");

            entity.HasIndex(e => e.ICodeFunction, "AAUserTaskType_byFunction");

            entity.HasIndex(e => e.IKeyGroup, "AUserTaskType_ByGroup");

            entity.HasIndex(e => e.GUid, "by_Guid_AAUserTaskType").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagInsurance).HasColumnName("bFlagInsurance");
            entity.Property(e => e.BFlagInvestments).HasColumnName("bFlagInvestments");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeFunction).HasColumnName("iCodeFunction");
            entity.Property(e => e.IKeyGroup).HasColumnName("iKeyGroup");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISortOrder).HasColumnName("iSortOrder");
            entity.Property(e => e.MDescription)
                .IsRequired()
                .HasDefaultValueSql("(' ')")
                .HasColumnType("text")
                .HasColumnName("mDescription");

            entity.HasOne(d => d.IKeyGroupNavigation).WithMany(p => p.AauserTaskTypes)
                .HasForeignKey(d => d.IKeyGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserTaskType_AAUserTaskTypeGroup");
        });

        modelBuilder.Entity<AauserTaskTypeGroup>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUserTaskTypeGroup");

            entity.HasIndex(e => e.GUid, "AAUserTaskTypeGroup_ByGuid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISortOrder).HasColumnName("iSortOrder");
        });

        modelBuilder.Entity<AauserTaskTypeSplit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AAUserTaskTypeSplit");

            entity.Property(e => e.IKeyNewTask).HasColumnName("iKeyNewTask");
            entity.Property(e => e.IKeyOldTask).HasColumnName("iKeyOldTask");
        });

        modelBuilder.Entity<AauserView>(entity =>
        {
            entity.HasKey(e => e.Ikeyid).HasName("by_KeyAAView");

            entity.ToTable("AAUserView", tb => tb.HasTrigger("tg_DeleteAccessView"));

            entity.HasIndex(e => e.CViewName, "AAUserView_ByView");

            entity.HasIndex(e => e.GUid, "by_Guid_AAUserView").IsUnique();

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagAllOffice).HasColumnName("bFlagAllOffice");
            entity.Property(e => e.BFlagAllProducer).HasColumnName("bFlagAllProducer");
            entity.Property(e => e.BflagSuper).HasColumnName("bflagSuper");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CViewLabel)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cViewLabel");
            entity.Property(e => e.CViewName)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cViewName");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyTop).HasColumnName("iKeyTop");
            entity.Property(e => e.IKeyVendor).HasColumnName("iKeyVendor");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<AauserViewAccess>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("by_Key_AAUserViewAccess");

            entity.ToTable("AAUserViewAccess");

            entity.HasIndex(e => e.GUid, "By_Guid_AAUserViewAccess").IsUnique();

            entity.HasIndex(e => e.IKeyUser, "by_User_AAUserViewAccess");

            entity.HasIndex(e => e.IKeyView, "by_View_AAUserViewAccess");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagPrimary).HasColumnName("bFlagPrimary");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IKeyView).HasColumnName("iKeyView");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyUserNavigation).WithMany(p => p.AauserViewAccesses)
                .HasForeignKey(d => d.IKeyUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserViewAccess_AAUser");

            entity.HasOne(d => d.IKeyViewNavigation).WithMany(p => p.AauserViewAccesses)
                .HasForeignKey(d => d.IKeyView)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserViewAccess_AAUserView");
        });

        modelBuilder.Entity<AauserViewOffice>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("By_Key_AAUserViewOffice");

            entity.ToTable("AAUserViewOffice");

            entity.HasIndex(e => e.GUid, "by_Guid_AAUserViewOffice");

            entity.HasIndex(e => e.IKeyOffice, "by_Office_AAUserViewOffice");

            entity.HasIndex(e => e.IKeyView, "by_View_AAUserViewOffice");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyOffice).HasColumnName("iKeyOffice");
            entity.Property(e => e.IKeyView).HasColumnName("iKeyView");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyOfficeNavigation).WithMany(p => p.AauserViewOffices)
                .HasForeignKey(d => d.IKeyOffice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserViewOffice_AAOffice");

            entity.HasOne(d => d.IKeyViewNavigation).WithMany(p => p.AauserViewOffices)
                .HasForeignKey(d => d.IKeyView)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserViewOffice_AAUserView");
        });

        modelBuilder.Entity<AauserViewPdcr>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAUserViewPdcr");

            entity.HasIndex(e => e.IKeyView, "By_View_ViewPdcr");

            entity.HasIndex(e => e.GUid, "by_Guid_ViewPdcr");

            entity.HasIndex(e => e.IKeyPdcr, "by_Pdcr_ViewPdcr");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyPdcr).HasColumnName("iKeyPdcr");
            entity.Property(e => e.IKeyView).HasColumnName("iKeyView");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");

            entity.HasOne(d => d.IKeyViewNavigation).WithMany(p => p.AauserViewPdcrs)
                .HasForeignKey(d => d.IKeyView)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAUserViewPdcr_AAUserView");
        });

        modelBuilder.Entity<Aaweb>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("by_Key");

            entity.ToTable("AAWeb", tb =>
                {
                    tb.HasTrigger("tg_NameTypeUpdateInsertDelete");
                    tb.HasTrigger("tg_WebUpdateInsertDelete");
                });

            entity.HasIndex(e => e.IKeyClient, "by_Client");

            entity.HasIndex(e => e.GUid, "by_guid_AAWeb").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.BFlagPrimary).HasColumnName("bFlagPrimary");
            entity.Property(e => e.CAddress)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cAddress");
            entity.Property(e => e.CBusinessName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cBusinessName");
            entity.Property(e => e.CContact)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cContact");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyClient).HasColumnName("iKeyClient");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MComment)
                .IsUnicode(false)
                .HasColumnName("mComment");

            entity.HasOne(d => d.IKeyClientNavigation).WithMany(p => p.Aawebs)
                .HasForeignKey(d => d.IKeyClient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AAWeb_AAName");
        });

        modelBuilder.Entity<AaworkFlow>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAWorkFlow");

            entity.HasIndex(e => e.IKeyName, "AAWorkFlow_ByName");

            entity.HasIndex(e => e.IKeyTopic, "AAWorkFlow_ByTopic");

            entity.HasIndex(e => e.IKeyWorkFlowMaster, "AAWorkFlow_byMaster");

            entity.HasIndex(e => e.IKeyProducerGroup, "IX_AAWorkFlow_ByPdcrGroup");

            entity.HasIndex(e => e.IKeyPolicy, "IX_AAWorkFlow_ByPolicy");

            entity.HasIndex(e => e.IKeyUserCreated, "IX_AAWorkFlow_UserCreated");

            entity.HasIndex(e => e.IKeyAccount, "IX_AAWorkFlow_byAccount");

            entity.HasIndex(e => e.ICodeWorkFlowStatus, "IX_AAWorkFlow_status");

            entity.HasIndex(e => e.ICodeWorkFlowType, "IX_AAWorkFlow_type");

            entity.HasIndex(e => e.IKeyUserNotify, "IX_AAWorkFlow_userNotify");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescription");
            entity.Property(e => e.CReference)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cReference");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DBegin)
                .HasColumnType("date")
                .HasColumnName("dBegin");
            entity.Property(e => e.DCompleted)
                .HasColumnType("date")
                .HasColumnName("dCompleted");
            entity.Property(e => e.DEnd)
                .HasColumnType("date")
                .HasColumnName("dEnd");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeWorkFlowStatus).HasColumnName("iCodeWorkFlowStatus");
            entity.Property(e => e.ICodeWorkFlowType).HasColumnName("iCodeWorkFlowType");
            entity.Property(e => e.IDuration).HasColumnName("iDuration");
            entity.Property(e => e.IEventCount).HasColumnName("iEventCount");
            entity.Property(e => e.IKeyAccount).HasColumnName("iKeyAccount");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyName).HasColumnName("iKeyName");
            entity.Property(e => e.IKeyPolicy).HasColumnName("iKeyPolicy");
            entity.Property(e => e.IKeyProducerGroup).HasColumnName("iKeyProducerGroup");
            entity.Property(e => e.IKeyTopic).HasColumnName("iKeyTopic");
            entity.Property(e => e.IKeyUserCreated).HasColumnName("iKeyUserCreated");
            entity.Property(e => e.IKeyUserNotify).HasColumnName("iKeyUserNotify");
            entity.Property(e => e.IKeyWorkFlowMaster).HasColumnName("iKeyWorkFlowMaster");
            entity.Property(e => e.IPercentageCompleted).HasColumnName("iPercentageCompleted");
            entity.Property(e => e.IPriority).HasColumnName("iPriority");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.YTotalRevenue)
                .HasColumnType("money")
                .HasColumnName("yTotalRevenue");
        });

        modelBuilder.Entity<AaworkFlowEvent>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAWorkFlowEvent");

            entity.HasIndex(e => e.IKeyWorkFlowEventMaster, "AAWorkFlowEvent_byMaster");

            entity.HasIndex(e => e.IKeyCalEvent, "IX_AAWorkFlowEvent_ByEvent");

            entity.HasIndex(e => e.ICodeWorkFlowEventStatus, "IX_AAWorkFlowEvent_Status");

            entity.HasIndex(e => e.IKeyNote, "IX_AAWorkFlowEvent_byNote");

            entity.HasIndex(e => e.ICodeWorkFlowEventType, "IX_AAWorkFlowEvent_byType");

            entity.HasIndex(e => e.IKeyCompletedUser, "IX_AAWorkFlowEvent_byUser");

            entity.HasIndex(e => e.IKeyWorkFlow, "IX_AAWorkFlowEvent_byflow");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BFlagCurrentSequence).HasColumnName("bFlagCurrentSequence");
            entity.Property(e => e.BFlagDependency)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagDependency");
            entity.Property(e => e.BFlagOverdue).HasColumnName("bFlagOverdue");
            entity.Property(e => e.BFlagRevenueStep).HasColumnName("bFlagRevenueStep");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DBegin)
                .HasColumnType("date")
                .HasColumnName("dBegin");
            entity.Property(e => e.DCompleted)
                .HasColumnType("date")
                .HasColumnName("dCompleted");
            entity.Property(e => e.DDue)
                .HasColumnType("date")
                .HasColumnName("dDue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DOriginalBegin)
                .HasColumnType("date")
                .HasColumnName("dOriginalBegin");
            entity.Property(e => e.DOriginalDue)
                .HasColumnType("date")
                .HasColumnName("dOriginalDue");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeWorkFlowEventStatus).HasColumnName("iCodeWorkFlowEventStatus");
            entity.Property(e => e.ICodeWorkFlowEventType).HasColumnName("iCodeWorkFlowEventType");
            entity.Property(e => e.IDuration).HasColumnName("iDuration");
            entity.Property(e => e.IKeyAssignedUser).HasColumnName("iKeyAssignedUser");
            entity.Property(e => e.IKeyAssignedUserGroup).HasColumnName("iKeyAssignedUserGroup");
            entity.Property(e => e.IKeyCalEvent).HasColumnName("iKeyCalEvent");
            entity.Property(e => e.IKeyCompletedUser).HasColumnName("iKeyCompletedUser");
            entity.Property(e => e.IKeyNote).HasColumnName("iKeyNote");
            entity.Property(e => e.IKeyWorkFlow).HasColumnName("iKeyWorkFlow");
            entity.Property(e => e.IKeyWorkFlowEventMaster).HasColumnName("iKeyWorkFlowEventMaster");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISequence).HasColumnName("iSequence");
            entity.Property(e => e.IWaitDaysAfterCompleted).HasColumnName("iWaitDaysAfterCompleted");
            entity.Property(e => e.YRevenue)
                .HasColumnType("money")
                .HasColumnName("yRevenue");
        });

        modelBuilder.Entity<AaworkFlowEventMaster>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAWorkFlowEventMaster");

            entity.HasIndex(e => e.IKeyDefaultUserGroup, "IX_AAWorkFlowEventMaster_ByDefaultGroup");

            entity.HasIndex(e => e.IKeyDefaultUser, "IX_AAWorkFlowEventMaster_ByDefaultUsedr");

            entity.HasIndex(e => e.IKeyWorkFlowMaster, "IX_AAWorkFlowEventMaster_ByMaster");

            entity.HasIndex(e => e.ICodePhase, "IX_AAWorkFlowEventMaster_ByType");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagAllowSkip).HasColumnName("bFlagAllowSkip");
            entity.Property(e => e.BFlagAssignToCurrentUser).HasColumnName("bFlagAssignToCurrentUser");
            entity.Property(e => e.BFlagAssignToProducer).HasColumnName("bFlagAssignToProducer");
            entity.Property(e => e.BFlagDependency)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bFlagDependency");
            entity.Property(e => e.BFlagRevenueStep).HasColumnName("bFlagRevenueStep");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeWorkFlowEventType).HasColumnName("iCodeWorkFlowEventType");
            entity.Property(e => e.IDuration).HasColumnName("iDuration");
            entity.Property(e => e.IKeyDefaultUser).HasColumnName("iKeyDefaultUser");
            entity.Property(e => e.IKeyDefaultUserGroup).HasColumnName("iKeyDefaultUserGroup");
            entity.Property(e => e.IKeyWorkFlowMaster).HasColumnName("iKeyWorkFlowMaster");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISequence).HasColumnName("iSequence");
            entity.Property(e => e.IWaitDaysAfterCompleted).HasColumnName("iWaitDaysAfterCompleted");
            entity.Property(e => e.MNote)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("mNote");
        });

        modelBuilder.Entity<AaworkFlowEventTemplate>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("AAWorkFlowEventTemplate");

            entity.HasIndex(e => e.ICodeWorkFlowEventType, "IX_AAWorkFlowEventTemplate_Type");

            entity.HasIndex(e => e.ICodeWorkFlowTemplateCategory, "IX_AAWorkFlowEventTemplate_category");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeWorkFlowEventType).HasColumnName("iCodeWorkFlowEventType");
            entity.Property(e => e.ICodeWorkFlowTemplateCategory).HasColumnName("iCodeWorkFlowTemplateCategory");
            entity.Property(e => e.IDefaultDuration).HasColumnName("iDefaultDuration");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MNote)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("mNote");
        });

        modelBuilder.Entity<AaworkFlowMaster>(entity =>
        {
            entity.HasKey(e => e.Ikeyid);

            entity.ToTable("AAWorkFlowMaster");

            entity.HasIndex(e => e.ICodeWorkFlowType, "IX_AAWorkFlowMaster_ByType");

            entity.HasIndex(e => e.IKeyUser, "IX_AAWorkFlowMaster_ByUSer");

            entity.Property(e => e.Ikeyid)
                .ValueGeneratedNever()
                .HasColumnName("ikeyid");
            entity.Property(e => e.BFlagDeactivated).HasColumnName("bFlagDeactivated");
            entity.Property(e => e.BFlagDoNotExport).HasColumnName("bFlagDoNotExport");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeWorkFlowType).HasColumnName("iCodeWorkFlowType");
            entity.Property(e => e.IDefaultPriority).HasColumnName("iDefaultPriority");
            entity.Property(e => e.IDuration).HasColumnName("iDuration");
            entity.Property(e => e.IEventCount).HasColumnName("iEventCount");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<DlfAddress>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfAddress_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfAddress");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.CAddressCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAddressCode");
            entity.Property(e => e.CAddressDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAddressDescription");
            entity.Property(e => e.CBusinessName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cBusinessName");
            entity.Property(e => e.CCounty)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCounty");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Caddressee)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("caddressee");
            entity.Property(e => e.Ccity)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccity");
            entity.Property(e => e.Ccountry)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ccountry");
            entity.Property(e => e.Cgreet)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cgreet");
            entity.Property(e => e.Cstate)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstate");
            entity.Property(e => e.Cstreet1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstreet1");
            entity.Property(e => e.Cstreet2)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstreet2");
            entity.Property(e => e.Cstreet3)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cstreet3");
            entity.Property(e => e.Ctitle)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("ctitle");
            entity.Property(e => e.Czip)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("czip");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodeaddress).HasColumnName("icodeaddress");
        });

        modelBuilder.Entity<DlfAddressPartyLink>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfAddressPartyLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfAddressPartyLink");

            entity.HasIndex(e => e.GUidAddress, "dlfAddressPartyLink_by_Address");

            entity.HasIndex(e => e.GUidParty, "dlfAddressPartyLink_by_Party");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidAddress).HasColumnName("gUidAddress");
            entity.Property(e => e.GUidParty).HasColumnName("gUidParty");
        });

        modelBuilder.Entity<DlfAddressPolicyLink>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfAddressPolicyLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfAddressPolicyLink");

            entity.HasIndex(e => e.GUidAddress, "dlfAddressPolicyLink_by_Address");

            entity.HasIndex(e => e.GUidPolicy, "dlfAddressPolicyLink_by_Policy");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidAddress).HasColumnName("gUidAddress");
            entity.Property(e => e.GUidPolicy).HasColumnName("gUidPolicy");
        });

        modelBuilder.Entity<DlfAddressRegistrationLink>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfAddressRegistrationLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfAddressRegistrationLink");

            entity.HasIndex(e => e.GUidAddress, "dlfAddressRegistrationLink_by_Address");

            entity.HasIndex(e => e.GUidRegistration, "dlfAddressRegistrationLink_by_Registration");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidAddress).HasColumnName("gUidAddress");
            entity.Property(e => e.GUidRegistration).HasColumnName("gUidRegistration");
        });

        modelBuilder.Entity<DlfBalance>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("PK_dlfBalance_1")
                .IsClustered(false);

            entity.ToTable("dlfBalance");

            entity.HasIndex(e => e.BFlagAccountNeedsValidation, "dlfBalance_BybFlagAccountNeedsValidation");

            entity.HasIndex(e => e.BFlagRepCode1NeedsValidation, "dlfBalance_BybFlagRepCode1NeedsValidation");

            entity.HasIndex(e => e.BFlagRepCode2NeedsValidation, "dlfBalance_BybFlagRepCode2NeedsValidation");

            entity.HasIndex(e => e.CAccountNumber, "dlfBalance_BycAccountNumber");

            entity.HasIndex(e => e.CRep1Code, "dlfBalance_BycRep1Code");

            entity.HasIndex(e => e.CRep1Fullname, "dlfBalance_BycRep1Fullname");

            entity.HasIndex(e => e.CRep2Code, "dlfBalance_BycRep2Code");

            entity.HasIndex(e => e.CRep2Fullname, "dlfBalance_BycRep2Fullname");

            entity.HasIndex(e => e.ICodeProcessResult, "dlfBalance_ByiCodeProcessResult");

            entity.HasIndex(e => e.IKeyAccountInAa, "dlfBalance_ByiKeyAccountInAA");

            entity.HasIndex(e => e.IKeyBatch, "dlfBalance_ByiKeyBatch");

            entity.HasIndex(e => e.IKeyFile, "dlfBalance_ByiKeyFile");

            entity.HasIndex(e => e.IKeyProcess, "dlfBalance_ByiKeyProcess");

            entity.HasIndex(e => e.IKeyProducer1ReferenceInAa, "dlfBalance_ByiKeyProducer1ReferenceInAA");

            entity.HasIndex(e => e.IKeyProducer2ReferenceInAa, "dlfBalance_ByiKeyProducer2ReferenceInAA");

            entity.HasIndex(e => e.IKeyId, "dlfBalance_byIKeyId");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.BFlagAccountNeedsValidation).HasColumnName("bFlagAccountNeedsValidation");
            entity.Property(e => e.BFlagMgr1Organization).HasColumnName("bFlagMgr1Organization");
            entity.Property(e => e.BFlagMgrCode1NeedsValidation).HasColumnName("bFlagMgrCode1NeedsValidation");
            entity.Property(e => e.BFlagRep1Organization).HasColumnName("bFlagRep1Organization");
            entity.Property(e => e.BFlagRep2Organization).HasColumnName("bFlagRep2Organization");
            entity.Property(e => e.BFlagRepCode1NeedsValidation).HasColumnName("bFlagRepCode1NeedsValidation");
            entity.Property(e => e.BFlagRepCode2NeedsValidation).HasColumnName("bFlagRepCode2NeedsValidation");
            entity.Property(e => e.CAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountNumber");
            entity.Property(e => e.CAccountStatusCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountStatusCode");
            entity.Property(e => e.CAccountStatusDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountStatusDescription");
            entity.Property(e => e.CAccountTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasColumnName("cAccountTypeCode");
            entity.Property(e => e.CAccountTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountTypeDescription");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CCustodianCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCustodianCode");
            entity.Property(e => e.CCustodianDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCustodianDescription");
            entity.Property(e => e.CMgr1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1Code");
            entity.Property(e => e.CMgr1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1Fullname");
            entity.Property(e => e.COfficeNumber)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOfficeNumber");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CRep2Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Code");
            entity.Property(e => e.CRep2Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Fullname");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DBalanceDate)
                .HasColumnType("date")
                .HasColumnName("dBalanceDate");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeAccountStatus).HasColumnName("iCodeAccountStatus");
            entity.Property(e => e.ICodeAccountTaxStatus).HasColumnName("iCodeAccountTaxStatus");
            entity.Property(e => e.ICodeAccountType)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iCodeAccountType");
            entity.Property(e => e.ICodeAccountValueType).HasColumnName("iCodeAccountValueType");
            entity.Property(e => e.ICodeCompany).HasColumnName("iCodeCompany");
            entity.Property(e => e.ICodeCustodian).HasColumnName("iCodeCustodian");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.IKeyAccountInAa).HasColumnName("iKeyAccountInAA");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IKeyId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iKeyId");
            entity.Property(e => e.IKeyManager1InAa).HasColumnName("iKeyManager1InAA");
            entity.Property(e => e.IKeyManager1ReferenceInAa).HasColumnName("iKeyManager1ReferenceInAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeyProducer1InAa).HasColumnName("iKeyProducer1InAA");
            entity.Property(e => e.IKeyProducer1ReferenceInAa).HasColumnName("iKeyProducer1ReferenceInAA");
            entity.Property(e => e.IKeyProducer2InAa).HasColumnName("iKeyProducer2InAA");
            entity.Property(e => e.IKeyProducer2ReferenceInAa).HasColumnName("iKeyProducer2ReferenceInAA");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.YBuyingPower)
                .HasColumnType("money")
                .HasColumnName("yBuyingPower");
            entity.Property(e => e.YCashAvailable)
                .HasColumnType("money")
                .HasColumnName("yCashAvailable");
            entity.Property(e => e.YCashBalance)
                .HasColumnType("money")
                .HasColumnName("yCashBalance");
            entity.Property(e => e.YEquity)
                .HasColumnType("money")
                .HasColumnName("yEquity");
            entity.Property(e => e.YMarginBalance)
                .HasColumnType("money")
                .HasColumnName("yMarginBalance");
            entity.Property(e => e.YMarginMarketValue)
                .HasColumnType("money")
                .HasColumnName("yMarginMarketValue");
            entity.Property(e => e.YMarketValue)
                .HasColumnType("money")
                .HasColumnName("yMarketValue");
            entity.Property(e => e.YMarketValueLong)
                .HasColumnType("money")
                .HasColumnName("yMarketValueLong");
            entity.Property(e => e.YMarketValueShort)
                .HasColumnType("money")
                .HasColumnName("yMarketValueShort");
            entity.Property(e => e.YMoneyMarketBalance)
                .HasColumnType("money")
                .HasColumnName("yMoneyMarketBalance");
            entity.Property(e => e.YSmabalance)
                .HasColumnType("money")
                .HasColumnName("ySMABalance");
        });

        modelBuilder.Entity<DlfBatch>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("dlfBatch");

            entity.HasIndex(e => e.DWhenAdded, "IX_dlfBatch_WhenAdded");

            entity.HasIndex(e => e.IKeyModule, "IX_dlfBatch_byModule");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<DlfCodeMap>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("dlfCodeMap");

            entity.HasIndex(e => new { e.IKeyModule, e.IKeyCodeType, e.CCodeId }, "dlfCodeMap_bycodetypelookup");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CCodeId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCodeID");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSourceCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSourceCode");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IKeyCodeType).HasColumnName("iKeyCodeType");
            entity.Property(e => e.IKeyMetaCode).HasColumnName("iKeyMetaCode");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<DlfCoverage>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfCoverage_ByRowGuid")
                .IsClustered(false);

            entity.ToTable("dlfCoverage");

            entity.HasIndex(e => e.GUidPolicy, "dlfCoverage_BygUidPolicy");

            entity.HasIndex(e => e.ICodeProcessResult, "dlfCoverage_ByiCodeProcessResult");

            entity.HasIndex(e => e.IKeyBatch, "dlfCoverage_ByiKeyBatch");

            entity.HasIndex(e => e.IKeyFile, "dlfCoverage_ByiKeyFile");

            entity.HasIndex(e => e.IKeyProcess, "dlfCoverage_ByiKeyProcess");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.BFlagBaseCoverage).HasColumnName("bFlagBaseCoverage");
            entity.Property(e => e.BFlagPlanNeedsValidation).HasColumnName("bFlagPlanNeedsValidation");
            entity.Property(e => e.BFlagValidatePlan).HasColumnName("bFlagValidatePlan");
            entity.Property(e => e.CApprovalBasisCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cApprovalBasisCode");
            entity.Property(e => e.CApprovalBasisDescription)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cApprovalBasisDescription");
            entity.Property(e => e.CBenefitModeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cBenefitModeCode");
            entity.Property(e => e.CBenefitModeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cBenefitModeDescription");
            entity.Property(e => e.CDividendOptionCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDividendOptionCode");
            entity.Property(e => e.CDividendOptionDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDividendOptionDescription");
            entity.Property(e => e.COccupationClass)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOccupationClass");
            entity.Property(e => e.CPlanAbbreviation)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPlanAbbreviation");
            entity.Property(e => e.CPlanDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPlanDescription");
            entity.Property(e => e.CPlanTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPlanTypeCode");
            entity.Property(e => e.CPlanTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPlanTypeDescription");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSicknessBenefitPeriodCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSicknessBenefitPeriodCode");
            entity.Property(e => e.CSicknessBenefitPeriodDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSicknessBenefitPeriodDescription");
            entity.Property(e => e.CSicknessEliminationPeriodCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSicknessEliminationPeriodCode");
            entity.Property(e => e.CSicknessEliminationPeriodDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSicknessEliminationPeriodDescription");
            entity.Property(e => e.CStatusCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cStatusCode");
            entity.Property(e => e.CStatusDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cStatusDescription");
            entity.Property(e => e.CWhoAdded)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DEffective)
                .HasColumnType("date")
                .HasColumnName("dEffective");
            entity.Property(e => e.DExpiration)
                .HasColumnType("date")
                .HasColumnName("dExpiration");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DTermination)
                .HasColumnType("date")
                .HasColumnName("dTermination");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUidPolicy).HasColumnName("gUidPolicy");
            entity.Property(e => e.ICodeApprovalBasis).HasColumnName("iCodeApprovalBasis");
            entity.Property(e => e.ICodeBenefitMode).HasColumnName("iCodeBenefitMode");
            entity.Property(e => e.ICodeDeathBenefitOption).HasColumnName("iCodeDeathBenefitOption");
            entity.Property(e => e.ICodeDividendOption).HasColumnName("iCodeDividendOption");
            entity.Property(e => e.ICodeFundingOption).HasColumnName("iCodeFundingOption");
            entity.Property(e => e.ICodePlanType).HasColumnName("iCodePlanType");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.ICodeProductClass).HasColumnName("iCodeProductClass");
            entity.Property(e => e.ICodeSicknessBenefitPeriod).HasColumnName("iCodeSicknessBenefitPeriod");
            entity.Property(e => e.ICodeSicknessEliminationPeriod).HasColumnName("iCodeSicknessEliminationPeriod");
            entity.Property(e => e.ICodeStatus).HasColumnName("iCodeStatus");
            entity.Property(e => e.IIndicatorCode).HasColumnName("iIndicatorCode");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IKeyPlanInAa).HasColumnName("iKeyPlanInAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.MBeneficiary)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("mBeneficiary");
            entity.Property(e => e.YAnnualPremium)
                .HasColumnType("money")
                .HasColumnName("yAnnualPremium");
            entity.Property(e => e.YBenefitAmount)
                .HasColumnType("money")
                .HasColumnName("yBenefitAmount");
            entity.Property(e => e.YBenefitAmountAccident)
                .HasColumnType("money")
                .HasColumnName("yBenefitAmountAccident");
            entity.Property(e => e.YBenefitAmountSickness)
                .HasColumnType("money")
                .HasColumnName("yBenefitAmountSickness");
            entity.Property(e => e.YCashValue)
                .HasColumnType("money")
                .HasColumnName("yCashValue");
            entity.Property(e => e.YCashWithApp)
                .HasColumnType("money")
                .HasColumnName("yCashWithApp");
            entity.Property(e => e.YLastPremPaymentAmt)
                .HasColumnType("money")
                .HasColumnName("yLastPremPaymentAmt");
            entity.Property(e => e.YLoanAmount)
                .HasColumnType("money")
                .HasColumnName("yLoanAmount");
            entity.Property(e => e.YMaxAvailableLoan)
                .HasColumnType("money")
                .HasColumnName("yMaxAvailableLoan");
            entity.Property(e => e.YModalPremium)
                .HasColumnType("money")
                .HasColumnName("yModalPremium");
            entity.Property(e => e.YPremiumToDate)
                .HasColumnType("money")
                .HasColumnName("yPremiumToDate");
            entity.Property(e => e.YSurrenderCharge)
                .HasColumnType("money")
                .HasColumnName("ySurrenderCharge");
            entity.Property(e => e.YSurrenderValue)
                .HasColumnType("money")
                .HasColumnName("ySurrenderValue");
        });

        modelBuilder.Entity<DlfCoveragePage>(entity =>
        {
            entity.HasKey(e => e.GUid).IsClustered(false);

            entity.ToTable("dlfCoveragePage");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.CLine13)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cLine13");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.Cdescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cdescription");
            entity.Property(e => e.Cformcode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cformcode");
            entity.Property(e => e.Cline01)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline01");
            entity.Property(e => e.Cline02)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline02");
            entity.Property(e => e.Cline03)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline03");
            entity.Property(e => e.Cline04)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline04");
            entity.Property(e => e.Cline05)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline05");
            entity.Property(e => e.Cline06)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline06");
            entity.Property(e => e.Cline07)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline07");
            entity.Property(e => e.Cline08)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline08");
            entity.Property(e => e.Cline09)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline09");
            entity.Property(e => e.Cline10)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline10");
            entity.Property(e => e.Cline11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline11");
            entity.Property(e => e.Cline12)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline12");
            entity.Property(e => e.Cline14)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline14");
            entity.Property(e => e.Cline15)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline15");
            entity.Property(e => e.Cline16)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline16");
            entity.Property(e => e.Cline17)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline17");
            entity.Property(e => e.Cline18)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline18");
            entity.Property(e => e.Cline19)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cline19");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPageDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dPageDate");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GuidCoverage).HasColumnName("guidCoverage");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IPageId).HasColumnName("iPageID");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<DlfEmail>(entity =>
        {
            entity.HasKey(e => e.GUid).IsClustered(false);

            entity.ToTable("dlfEmail");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.CEmail)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cEmail");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<DlfEmailPartyLink>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfEmailPartyLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfEmailPartyLink");

            entity.HasIndex(e => e.GUidEmail, "dlfEmailPartyLink_by_Email");

            entity.HasIndex(e => e.GUidParty, "dlfEmailPartyLink_by_Party");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidEmail).HasColumnName("gUidEmail");
            entity.Property(e => e.GUidParty).HasColumnName("gUidParty");
        });

        modelBuilder.Entity<DlfEmailPolicyLink>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfEmailPolicyLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfEmailPolicyLink");

            entity.HasIndex(e => e.GUidEmail, "dlfEmailPolicyLink_by_Email");

            entity.HasIndex(e => e.GUidPolicy, "dlfEmailPolicyLink_by_Policy");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidEmail).HasColumnName("gUidEmail");
            entity.Property(e => e.GUidPolicy).HasColumnName("gUidPolicy");
        });

        modelBuilder.Entity<DlfEmailRegistrationLink>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfEmailRegistrationLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfEmailRegistrationLink");

            entity.HasIndex(e => e.GUidEmail, "dlfEmailRegistrationLink_by_Email");

            entity.HasIndex(e => e.GUidRegistration, "dlfEmailRegistrationLink_by_Registration");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidEmail).HasColumnName("gUidEmail");
            entity.Property(e => e.GUidRegistration).HasColumnName("gUidRegistration");
        });

        modelBuilder.Entity<DlfFile>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("dlfFile");

            entity.HasIndex(e => e.IKeyBatch, "dlfFile_byBatch");

            entity.HasIndex(e => e.BFlagFileDeleted, "dlfFile_byDeletedFlag");

            entity.HasIndex(e => e.DProcessed, "dlfFile_bydProcessed");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BFlagFileDeleted).HasColumnName("bFlagFileDeleted");
            entity.Property(e => e.CFilename)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cFilename");
            entity.Property(e => e.COriginalFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOriginalFilename");
            entity.Property(e => e.CPriceTable)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPriceTable");
            entity.Property(e => e.CRenamedAfterProcess)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cRenamedAfterProcess");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DDateOfRecord)
                .HasColumnType("date")
                .HasColumnName("dDateOfRecord");
            entity.Property(e => e.DFile)
                .HasColumnType("smalldatetime")
                .HasColumnName("dFile");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DProcessed)
                .HasColumnType("smalldatetime")
                .HasColumnName("dProcessed");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IBalances).HasColumnName("iBalances");
            entity.Property(e => e.IBalancesProcessed).HasColumnName("iBalancesProcessed");
            entity.Property(e => e.ICodeStatus).HasColumnName("iCodeStatus");
            entity.Property(e => e.ICoverages).HasColumnName("iCoverages");
            entity.Property(e => e.ICoveragesProcessed).HasColumnName("iCoveragesProcessed");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IPolicies).HasColumnName("iPolicies");
            entity.Property(e => e.IPoliciesProcessed).HasColumnName("iPoliciesProcessed");
            entity.Property(e => e.IPolicyPositions).HasColumnName("iPolicyPositions");
            entity.Property(e => e.IPolicyPositionsProcessed).HasColumnName("iPolicyPositionsProcessed");
            entity.Property(e => e.IPositions).HasColumnName("iPositions");
            entity.Property(e => e.IPositionsProcessed).HasColumnName("iPositionsProcessed");
            entity.Property(e => e.IPrices).HasColumnName("iPrices");
            entity.Property(e => e.IPricesProcessed).HasColumnName("iPricesProcessed");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRegistrations).HasColumnName("iRegistrations");
            entity.Property(e => e.IRegistrationsProcessed).HasColumnName("iRegistrationsProcessed");
            entity.Property(e => e.ISecurities).HasColumnName("iSecurities");
            entity.Property(e => e.ISecuritiesProcessed).HasColumnName("iSecuritiesProcessed");
            entity.Property(e => e.ITransactions).HasColumnName("iTransactions");
            entity.Property(e => e.ITransactionsProcessed).HasColumnName("iTransactionsProcessed");
            entity.Property(e => e.MFileContents)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("mFileContents");
            entity.Property(e => e.MFileContents2).HasColumnName("mFileContents2");
            entity.Property(e => e.MOriginalFilePath)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("mOriginalFilePath");
        });

        modelBuilder.Entity<DlfParty>(entity =>
        {
            entity.HasKey(e => e.GUid).HasName("dlfParty_by_ID");

            entity.ToTable("dlfParty", tb => tb.HasTrigger("tg_dlfPartyDelete"));

            entity.HasIndex(e => e.CTaxId, "IX_dlfParty_taxid");

            entity.HasIndex(e => e.IKeyBatch, "dlfParty_ByiKeyBatch");

            entity.HasIndex(e => e.IKeyFile, "dlfParty_ByiKeyFile");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.BFlagOrganization)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bFlagOrganization");
            entity.Property(e => e.CDownloadId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDownloadID");
            entity.Property(e => e.CFirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cFirstName");
            entity.Property(e => e.CFullName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cFullName");
            entity.Property(e => e.CLastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cLastName");
            entity.Property(e => e.CMiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cMiddle");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cTaxID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DDob)
                .HasColumnType("date")
                .HasColumnName("dDOB");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeNameType).HasColumnName("iCodeNameType");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<DlfPartyCoverageLink>(entity =>
        {
            entity.HasKey(e => e.Guid)
                .HasName("dlfPartyCoverageLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfPartyCoverageLink");

            entity.HasIndex(e => e.GuidCoverage, "dlfPartyCoverageLink_by_Coverage");

            entity.HasIndex(e => e.GuidParty, "dlfPartyCoverageLink_by_Party");

            entity.HasIndex(e => e.ICodeRelationship, "dlfPartyCoverageLink_by_Relationship");

            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("guid");
            entity.Property(e => e.GuidCoverage).HasColumnName("guidCoverage");
            entity.Property(e => e.GuidParty).HasColumnName("guidParty");
            entity.Property(e => e.ICodeRelationship).HasColumnName("iCodeRelationship");
        });

        modelBuilder.Entity<DlfPartyPolicyLink>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("dlfPartyPolicyLink_by_ID");

            entity.ToTable("dlfPartyPolicyLink");

            entity.HasIndex(e => e.GuidParty, "dlfPartyPolicyLink_by_Party");

            entity.HasIndex(e => e.GuidPolicy, "dlfPartyPolicyLink_by_Policy");

            entity.HasIndex(e => e.ICodeRelationship, "dlfPartyPolicyLink_by_Relationship");

            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("guid");
            entity.Property(e => e.GuidParty).HasColumnName("guidParty");
            entity.Property(e => e.GuidPolicy).HasColumnName("guidPolicy");
            entity.Property(e => e.ICodeRelationship).HasColumnName("iCodeRelationship");
        });

        modelBuilder.Entity<DlfPartyRegistrationLink>(entity =>
        {
            entity.HasKey(e => e.Guid)
                .HasName("dlfPartyRegistrationLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfPartyRegistrationLink");

            entity.HasIndex(e => e.GuidParty, "dlfPartyRegistrationLink_by_Party");

            entity.HasIndex(e => e.GuidRegistration, "dlfPartyRegistrationLink_by_Registration");

            entity.HasIndex(e => e.ICodeRelationship, "dlfPartyRegistrationLink_by_Relationship");

            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("guid");
            entity.Property(e => e.GuidParty).HasColumnName("guidParty");
            entity.Property(e => e.GuidRegistration).HasColumnName("guidRegistration");
            entity.Property(e => e.ICodeRelationship).HasColumnName("iCodeRelationship");
        });

        modelBuilder.Entity<DlfPartyRiderLink>(entity =>
        {
            entity.HasKey(e => e.Guid)
                .HasName("dlfPartyRiderLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfPartyRiderLink");

            entity.HasIndex(e => e.GuidParty, "dlfPartyRiderLink_by_Party");

            entity.HasIndex(e => e.ICodeRelationship, "dlfPartyRiderLink_by_Relationship");

            entity.HasIndex(e => e.GuidRider, "dlfPartyRiderLink_by_Rider");

            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("guid");
            entity.Property(e => e.GuidParty).HasColumnName("guidParty");
            entity.Property(e => e.GuidRider).HasColumnName("guidRider");
            entity.Property(e => e.ICodeRelationship).HasColumnName("iCodeRelationship");
        });

        modelBuilder.Entity<DlfPhone>(entity =>
        {
            entity.HasKey(e => e.GUid).IsClustered(false);

            entity.ToTable("dlfPhone");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.CAreaCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAreaCode");
            entity.Property(e => e.CCountry)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCountry");
            entity.Property(e => e.CFullPhone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cFullPhone");
            entity.Property(e => e.CPhoneCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneCode");
            entity.Property(e => e.CPhoneDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneDescription");
            entity.Property(e => e.CPhoneExt)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneExt");
            entity.Property(e => e.CPhoneNum)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPhoneNum");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.Icodephone).HasColumnName("icodephone");
        });

        modelBuilder.Entity<DlfPhonePartyLink>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfPhonePartyLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfPhonePartyLink");

            entity.HasIndex(e => e.GUidParty, "dlfPhonePartyLink_by_Party");

            entity.HasIndex(e => e.GUidPhone, "dlfPhonePartyLink_by_Phone");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidParty).HasColumnName("gUidParty");
            entity.Property(e => e.GUidPhone).HasColumnName("gUidPhone");
        });

        modelBuilder.Entity<DlfPhonePolicyLink>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfPolicyPhoneLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfPhonePolicyLink");

            entity.HasIndex(e => e.GUidPhone, "dlfPolicyPhoneLink_by_Phone");

            entity.HasIndex(e => e.GUidPolicy, "dlfPolicyPhoneLink_by_Policy");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidPhone).HasColumnName("gUidPhone");
            entity.Property(e => e.GUidPolicy).HasColumnName("gUidPolicy");
        });

        modelBuilder.Entity<DlfPhoneRegistrationLink>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfPhoneRegistrationLink_by_ID")
                .IsClustered(false);

            entity.ToTable("dlfPhoneRegistrationLink");

            entity.HasIndex(e => e.GUidPhone, "dlfPhoneRegistrationLink_by_Phone");

            entity.HasIndex(e => e.GUidRegistration, "dlfPhoneRegistrationLink_by_Registration");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.GUidPhone).HasColumnName("gUidPhone");
            entity.Property(e => e.GUidRegistration).HasColumnName("gUidRegistration");
        });

        modelBuilder.Entity<DlfPolicy>(entity =>
        {
            entity.HasKey(e => e.GUid).IsClustered(false);

            entity.ToTable("dlfPolicy");

            entity.HasIndex(e => e.CRep1Code, "dlfPolicy_BycRep1Code");

            entity.HasIndex(e => e.CRep2Code, "dlfPolicy_BycRep2Code");

            entity.HasIndex(e => e.ICodeProcessResult, "dlfPolicy_ByiCodeProcessResult");

            entity.HasIndex(e => e.IKeyBatch, "dlfPolicy_ByiKeyBatch");

            entity.HasIndex(e => e.IKeyFile, "dlfPolicy_ByiKeyFile");

            entity.HasIndex(e => e.IKeyProcess, "dlfPolicy_ByiKeyProcess");

            entity.HasIndex(e => e.IKeyProducer1ReferenceInAa, "dlfPolicy_ByiKeyProducer1ReferenceInAA");

            entity.HasIndex(e => e.IKeyProducer2ReferenceInAa, "dlfPolicy_ByiKeyProducer2ReferenceInAA");

            entity.HasIndex(e => e.IKeyId, "dlfPolicy_byiKeyID");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.BFlagMgr1Organization).HasColumnName("bFlagMgr1Organization");
            entity.Property(e => e.BFlagMgrCode1NeedsValidation).HasColumnName("bFlagMgrCode1NeedsValidation");
            entity.Property(e => e.BFlagPolicyNeedsValidation).HasColumnName("bFlagPolicyNeedsValidation");
            entity.Property(e => e.BFlagRep1Organization).HasColumnName("bFlagRep1Organization");
            entity.Property(e => e.BFlagRep2Organization).HasColumnName("bFlagRep2Organization");
            entity.Property(e => e.BFlagRepCode1NeedsValidation).HasColumnName("bFlagRepCode1NeedsValidation");
            entity.Property(e => e.BFlagRepCode2NeedsValidation).HasColumnName("bFlagRepCode2NeedsValidation");
            entity.Property(e => e.CCaseRef)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCaseRef");
            entity.Property(e => e.CCertNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCertNumber");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CFundingAccount)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cFundingAccount");
            entity.Property(e => e.CIssueState)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cIssueState");
            entity.Property(e => e.CMgr1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1Code");
            entity.Property(e => e.CMgr1FullName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1FullName");
            entity.Property(e => e.CPaymentModeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPaymentModeCode");
            entity.Property(e => e.CPaymentModeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPaymentModeDescription");
            entity.Property(e => e.CPlanSubTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPlanSubTypeCode");
            entity.Property(e => e.CPlanSubTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPlanSubTypeDescription");
            entity.Property(e => e.CPolicyNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPolicyNumber");
            entity.Property(e => e.CPremiumPayMethodCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPremiumPayMethodCode");
            entity.Property(e => e.CPremiumPayMethodDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPremiumPayMethodDescription");
            entity.Property(e => e.CQualifiedPlanCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cQualifiedPlanCode");
            entity.Property(e => e.CQualifiedPlanDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cQualifiedPlanDescription");
            entity.Property(e => e.CRegLine1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine1");
            entity.Property(e => e.CRegLine2)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine2");
            entity.Property(e => e.CRegLine3)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine3");
            entity.Property(e => e.CRegLine4)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine4");
            entity.Property(e => e.CRegLine5)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine5");
            entity.Property(e => e.CRegLine6)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine6");
            entity.Property(e => e.CRegLine7)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine7");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CRep2Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Code");
            entity.Property(e => e.CRep2Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Fullname");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CTaxidOwner)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cTaxidOwner");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DComplete)
                .HasColumnType("date")
                .HasColumnName("dComplete");
            entity.Property(e => e.DIssue)
                .HasColumnType("date")
                .HasColumnName("dIssue");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastPremiumPaid)
                .HasColumnType("date")
                .HasColumnName("dLastPremiumPaid");
            entity.Property(e => e.DOwnerDob)
                .HasColumnType("date")
                .HasColumnName("dOwnerDOB");
            entity.Property(e => e.DPremiumPaidThru)
                .HasColumnType("date")
                .HasColumnName("dPremiumPaidThru");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeCompany).HasColumnName("iCodeCompany");
            entity.Property(e => e.ICodePaymentMode).HasColumnName("iCodePaymentMode");
            entity.Property(e => e.ICodePlanSubType).HasColumnName("iCodePlanSubType");
            entity.Property(e => e.ICodePremiumPayMethod).HasColumnName("iCodePremiumPayMethod");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.ICodeQualifiedPlan).HasColumnName("iCodeQualifiedPlan");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyBaseCoverageInAa).HasColumnName("iKeyBaseCoverageInAA");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IKeyFundingAccount).HasColumnName("iKeyFundingAccount");
            entity.Property(e => e.IKeyId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iKeyId");
            entity.Property(e => e.IKeyManager1InAa).HasColumnName("iKeyManager1InAA");
            entity.Property(e => e.IKeyManager1ReferenceInAa).HasColumnName("iKeyManager1ReferenceInAA");
            entity.Property(e => e.IKeyPolicyInAa).HasColumnName("iKeyPolicyInAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeyProducer1InAa).HasColumnName("iKeyProducer1InAA");
            entity.Property(e => e.IKeyProducer1ReferenceInAa).HasColumnName("iKeyProducer1ReferenceInAA");
            entity.Property(e => e.IKeyProducer2InAa).HasColumnName("iKeyProducer2InAA");
            entity.Property(e => e.IKeyProducer2ReferenceInAa).HasColumnName("iKeyProducer2ReferenceInAA");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<DlfPolicyNewBiz>(entity =>
        {
            entity.HasKey(e => e.GUid).IsClustered(false);

            entity.ToTable("dlfPolicyNewBiz");

            entity.HasIndex(e => e.IKeyBatch, "IX_dlfPolicyNewBiz_Batch");

            entity.HasIndex(e => e.GuidPolicy, "IX_dlfPolicyNewBiz_GuidPolicy");

            entity.HasIndex(e => e.IKeyId, "IX_dlfPolicyNewBiz_IkeyID");

            entity.HasIndex(e => e.ICodeProcessResult, "IX_dlfPolicyNewBiz_iCodeResult");

            entity.HasIndex(e => e.IKeyProcess, "IX_dlfPolicyNewBiz_ikeyProcess");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.CAction)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAction");
            entity.Property(e => e.CActionCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cActionCode");
            entity.Property(e => e.CActionDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cActionDescription");
            entity.Property(e => e.CReportMessage)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CXmlkey)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cXMLKey");
            entity.Property(e => e.DCompleted)
                .HasColumnType("date")
                .HasColumnName("dCompleted");
            entity.Property(e => e.DInitial)
                .HasColumnType("date")
                .HasColumnName("dInitial");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DRequested)
                .HasColumnType("date")
                .HasColumnName("dRequested");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GuidPolicy)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("guidPolicy");
            entity.Property(e => e.ICodeAction).HasColumnName("iCodeAction");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IKeyId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iKeyId");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<DlfPolicyPosition>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("PK_dlfPolicyPosition_1")
                .IsClustered(false);

            entity.ToTable("dlfPolicyPosition");

            entity.HasIndex(e => e.CRep1Code, "dlfPolicyPosition_BycRep1Code");

            entity.HasIndex(e => e.CRep2Code, "dlfPolicyPosition_BycRep2Code");

            entity.HasIndex(e => e.ICodeProcessResult, "dlfPolicyPosition_ByiCodeProcessResult");

            entity.HasIndex(e => e.IKeyBatch, "dlfPolicyPosition_ByiKeyBatch");

            entity.HasIndex(e => e.IKeyCoverageInAa, "dlfPolicyPosition_ByiKeyCoverageInAA");

            entity.HasIndex(e => e.IKeyFile, "dlfPolicyPosition_ByiKeyFile");

            entity.HasIndex(e => e.IKeyPolicyInAa, "dlfPolicyPosition_ByiKeyPolicyInAA");

            entity.HasIndex(e => e.IKeyProcess, "dlfPolicyPosition_ByiKeyProcess");

            entity.HasIndex(e => e.IKeyProducer1ReferenceInAa, "dlfPolicyPosition_ByiKeyProducer1ReferenceInAA");

            entity.HasIndex(e => e.IKeyProducer2ReferenceInAa, "dlfPolicyPosition_ByiKeyProducer2ReferenceInAA");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.BFlagBaseCoverage).HasColumnName("bFlagBaseCoverage");
            entity.Property(e => e.BFlagMgr1Organization).HasColumnName("bFlagMgr1Organization");
            entity.Property(e => e.BFlagMgrCode1NeedsValidation).HasColumnName("bFlagMgrCode1NeedsValidation");
            entity.Property(e => e.BFlagPlanNeedsValidation).HasColumnName("bFlagPlanNeedsValidation");
            entity.Property(e => e.BFlagPolicyNeedsValidation).HasColumnName("bFlagPolicyNeedsValidation");
            entity.Property(e => e.BFlagRep1Organization).HasColumnName("bFlagRep1Organization");
            entity.Property(e => e.BFlagRep2Organization).HasColumnName("bFlagRep2Organization");
            entity.Property(e => e.BFlagRepCode1NeedsValidation).HasColumnName("bFlagRepCode1NeedsValidation");
            entity.Property(e => e.BFlagRepCode2NeedsValidation).HasColumnName("bFlagRepCode2NeedsValidation");
            entity.Property(e => e.BFlagValidatePlan).HasColumnName("bFlagValidatePlan");
            entity.Property(e => e.CCertNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .IsFixedLength()
                .HasColumnName("cCertNumber");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CFundingAccount)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cFundingAccount");
            entity.Property(e => e.CMgr1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1Code");
            entity.Property(e => e.CMgr1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1Fullname");
            entity.Property(e => e.CPlanAbbreviation)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPlanAbbreviation");
            entity.Property(e => e.CPlanDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPlanDescription");
            entity.Property(e => e.CPlanTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPlanTypeCode");
            entity.Property(e => e.CPlanTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPlanTypeDescription");
            entity.Property(e => e.CPolicyNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cPolicyNumber");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CRep2Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Code");
            entity.Property(e => e.CRep2Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Fullname");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DPosition)
                .HasColumnType("date")
                .HasColumnName("dPosition");
            entity.Property(e => e.DPremiumPaidThru)
                .HasColumnType("date")
                .HasColumnName("dPremiumPaidThru");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeCompany).HasColumnName("iCodeCompany");
            entity.Property(e => e.ICodePlanType).HasColumnName("iCodePlanType");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.ICodeProductClass).HasColumnName("iCodeProductClass");
            entity.Property(e => e.ICodeStatus).HasColumnName("iCodeStatus");
            entity.Property(e => e.IKeyBaseCoverageInAa).HasColumnName("iKeyBaseCoverageInAA");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyCoverageInAa).HasColumnName("iKeyCoverageInAA");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IKeyFundingAccount).HasColumnName("iKeyFundingAccount");
            entity.Property(e => e.IKeyId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iKeyId");
            entity.Property(e => e.IKeyManager1InAa).HasColumnName("iKeyManager1InAA");
            entity.Property(e => e.IKeyManager1ReferenceInAa).HasColumnName("iKeyManager1ReferenceInAA");
            entity.Property(e => e.IKeyPlanInAa).HasColumnName("iKeyPlanInAA");
            entity.Property(e => e.IKeyPolicyInAa).HasColumnName("iKeyPolicyInAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeyProducer1InAa).HasColumnName("iKeyProducer1InAA");
            entity.Property(e => e.IKeyProducer1ReferenceInAa).HasColumnName("iKeyProducer1ReferenceInAA");
            entity.Property(e => e.IKeyProducer2InAa).HasColumnName("iKeyProducer2InAA");
            entity.Property(e => e.IKeyProducer2ReferenceInAa).HasColumnName("iKeyProducer2ReferenceInAA");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.YCashValue)
                .HasColumnType("money")
                .HasColumnName("yCashValue");
            entity.Property(e => e.YLoanAmount)
                .HasColumnType("money")
                .HasColumnName("yLoanAmount");
            entity.Property(e => e.YMaxAvailableLoan)
                .HasColumnType("money")
                .HasColumnName("yMaxAvailableLoan");
            entity.Property(e => e.YPremiumToDate)
                .HasColumnType("money")
                .HasColumnName("yPremiumToDate");
            entity.Property(e => e.YSurrenderCharge)
                .HasColumnType("money")
                .HasColumnName("ySurrenderCharge");
            entity.Property(e => e.YSurrenderValue)
                .HasColumnType("money")
                .HasColumnName("ySurrenderValue");
        });

        modelBuilder.Entity<DlfPosition>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("PK_dlfPosition_1")
                .IsClustered(false);

            entity.ToTable("dlfPosition");

            entity.HasIndex(e => e.BFlagAccountNeedsValidation, "dlfPosition_BybFlagAccountNeedsValidation");

            entity.HasIndex(e => e.BFlagMoneyMarket, "dlfPosition_BybFlagMoneyMarket");

            entity.HasIndex(e => e.BFlagRepCode1NeedsValidation, "dlfPosition_BybFlagRepCode1NeedsValidation");

            entity.HasIndex(e => e.BFlagRepCode2NeedsValidation, "dlfPosition_BybFlagRepCode2NeedsValidation");

            entity.HasIndex(e => e.BFlagSecurityNeedsValidation, "dlfPosition_BybFlagSecurityNeedsValidation");

            entity.HasIndex(e => e.CAccountNumber, "dlfPosition_BycAccountNumber");

            entity.HasIndex(e => e.CAlternateId, "dlfPosition_BycAlternateID");

            entity.HasIndex(e => e.CCusip, "dlfPosition_BycCusip");

            entity.HasIndex(e => e.CCusipExt, "dlfPosition_BycCusipExt");

            entity.HasIndex(e => e.CInvTypeCode, "dlfPosition_BycInvTypeCode");

            entity.HasIndex(e => e.CRep1Code, "dlfPosition_BycRep1Code");

            entity.HasIndex(e => e.CRep1Fullname, "dlfPosition_BycRep1Fullname");

            entity.HasIndex(e => e.CRep2Code, "dlfPosition_BycRep2Code");

            entity.HasIndex(e => e.CRep2Fullname, "dlfPosition_BycRep2Fullname");

            entity.HasIndex(e => e.CSymbol, "dlfPosition_BycSymbol");

            entity.HasIndex(e => e.DValue, "dlfPosition_BydValue");

            entity.HasIndex(e => e.ICodeProcessResult, "dlfPosition_ByiCodeProcessResult");

            entity.HasIndex(e => e.IKeyAccountInAa, "dlfPosition_ByiKeyAccountInAA");

            entity.HasIndex(e => e.IKeyBatch, "dlfPosition_ByiKeyBatch");

            entity.HasIndex(e => e.IKeyFile, "dlfPosition_ByiKeyFile");

            entity.HasIndex(e => e.IKeyPositionInAa, "dlfPosition_ByiKeyPositionInAA");

            entity.HasIndex(e => e.IKeyProcess, "dlfPosition_ByiKeyProcess");

            entity.HasIndex(e => e.IKeyProducer1ReferenceInAa, "dlfPosition_ByiKeyProducer1ReferenceInAA");

            entity.HasIndex(e => e.IKeyProducer2ReferenceInAa, "dlfPosition_ByiKeyProducer2ReferenceInAA");

            entity.HasIndex(e => e.IkeySecurityInAa, "dlfPosition_ByikeySecurityInAA");

            entity.HasIndex(e => new { e.IKeyProcess, e.CAccountNumber }, "dlfPosition_ProcessAccount");

            entity.HasIndex(e => e.CDescription, "dlfPosition_SecurityDesc");

            entity.HasIndex(e => e.IKeyId, "dlfPosition_byIKeyID");

            entity.HasIndex(e => e.CWhoChange, "dlfPosition_byWhoChange");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.BFlagAccountNeedsValidation).HasColumnName("bFlagAccountNeedsValidation");
            entity.Property(e => e.BFlagBypassProducerValidation).HasColumnName("bFlagBypassProducerValidation");
            entity.Property(e => e.BFlagFixedIncome).HasColumnName("bFlagFixedIncome");
            entity.Property(e => e.BFlagFixedValue).HasColumnName("bFlagFixedValue");
            entity.Property(e => e.BFlagInterestBearing).HasColumnName("bFlagInterestBearing");
            entity.Property(e => e.BFlagIrnotSent)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bFlagIRNotSent");
            entity.Property(e => e.BFlagMgr1Organization).HasColumnName("bFlagMgr1Organization");
            entity.Property(e => e.BFlagMgrCode1NeedsValidation).HasColumnName("bFlagMgrCode1NeedsValidation");
            entity.Property(e => e.BFlagMoneyMarket).HasColumnName("bFlagMoneyMarket");
            entity.Property(e => e.BFlagOption).HasColumnName("bFlagOption");
            entity.Property(e => e.BFlagPoolFactor).HasColumnName("bFlagPoolFactor");
            entity.Property(e => e.BFlagPositionOnly).HasColumnName("bFlagPositionOnly");
            entity.Property(e => e.BFlagPriceCheck).HasColumnName("bFlagPriceCheck");
            entity.Property(e => e.BFlagReconcileToInit).HasColumnName("bFlagReconcileToInit");
            entity.Property(e => e.BFlagRep1Organization).HasColumnName("bFlagRep1Organization");
            entity.Property(e => e.BFlagRep2Organization).HasColumnName("bFlagRep2Organization");
            entity.Property(e => e.BFlagRepCode1NeedsValidation).HasColumnName("bFlagRepCode1NeedsValidation");
            entity.Property(e => e.BFlagRepCode2NeedsValidation).HasColumnName("bFlagRepCode2NeedsValidation");
            entity.Property(e => e.BFlagSecurityFoundViaOld).HasColumnName("bFlagSecurityFoundViaOld");
            entity.Property(e => e.BFlagSecurityNeedsValidation).HasColumnName("bFlagSecurityNeedsValidation");
            entity.Property(e => e.CAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountNumber");
            entity.Property(e => e.CAccountObjectiveCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountObjectiveCode");
            entity.Property(e => e.CAccountObjectiveDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountObjectiveDescription");
            entity.Property(e => e.CAccountStatusCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountStatusCode");
            entity.Property(e => e.CAccountStatusDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountStatusDescription");
            entity.Property(e => e.CAccountTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountTypeCode");
            entity.Property(e => e.CAccountTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountTypeDescription");
            entity.Property(e => e.CAccountValueTypeCode)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAccountValueTypeCode");
            entity.Property(e => e.CAccountValueTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAccountValueTypeDescription");
            entity.Property(e => e.CAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAlternateID");
            entity.Property(e => e.CCategoryCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCategoryCode");
            entity.Property(e => e.CCategoryDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCategoryDescription");
            entity.Property(e => e.CClassCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cClassCode");
            entity.Property(e => e.CClassDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cClassDescription");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CCusip)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusip");
            entity.Property(e => e.CCusipExt)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusipExt");
            entity.Property(e => e.CCustodianCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCustodianCode");
            entity.Property(e => e.CCustodianDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCustodianDescription");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CInvTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cInvTypeCode");
            entity.Property(e => e.CInvTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cInvTypeDescription");
            entity.Property(e => e.CInvestorTaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cInvestorTaxID");
            entity.Property(e => e.CMgr1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1Code");
            entity.Property(e => e.CMgr1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1Fullname");
            entity.Property(e => e.COfficeNumber)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOfficeNumber");
            entity.Property(e => e.COwnerTaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOwnerTaxID");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CRep2Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Code");
            entity.Property(e => e.CRep2Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Fullname");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSectorCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSectorCode");
            entity.Property(e => e.CSectorDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSectorDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DAcquiredAccount)
                .HasColumnType("date")
                .HasColumnName("dAcquiredAccount");
            entity.Property(e => e.DAcquiredInvestment)
                .HasColumnType("date")
                .HasColumnName("dAcquiredInvestment");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DMaturity)
                .HasColumnType("date")
                .HasColumnName("dMaturity");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DValue)
                .HasColumnType("date")
                .HasColumnName("dValue");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeAccountObjective).HasColumnName("iCodeAccountObjective");
            entity.Property(e => e.ICodeAccountStatus).HasColumnName("iCodeAccountStatus");
            entity.Property(e => e.ICodeAccountTaxStatus).HasColumnName("iCodeAccountTaxStatus");
            entity.Property(e => e.ICodeAccountType).HasColumnName("iCodeAccountType");
            entity.Property(e => e.ICodeAccountValueType).HasColumnName("iCodeAccountValueType");
            entity.Property(e => e.ICodeBasisType).HasColumnName("iCodeBasisType");
            entity.Property(e => e.ICodeCategory).HasColumnName("iCodeCategory");
            entity.Property(e => e.ICodeClass).HasColumnName("iCodeClass");
            entity.Property(e => e.ICodeCompany).HasColumnName("iCodeCompany");
            entity.Property(e => e.ICodeCustodian).HasColumnName("iCodeCustodian");
            entity.Property(e => e.ICodeInvType).HasColumnName("iCodeInvType");
            entity.Property(e => e.ICodePositionDateType).HasColumnName("iCodePositionDateType");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.ICodeSector).HasColumnName("iCodeSector");
            entity.Property(e => e.IKeyAccountInAa).HasColumnName("iKeyAccountInAA");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IKeyId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iKeyID");
            entity.Property(e => e.IKeyManager1InAa).HasColumnName("iKeyManager1InAA");
            entity.Property(e => e.IKeyManager1ReferenceInAa).HasColumnName("iKeyManager1ReferenceInAA");
            entity.Property(e => e.IKeyPositionInAa).HasColumnName("iKeyPositionInAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeyProducer1InAa).HasColumnName("iKeyProducer1InAA");
            entity.Property(e => e.IKeyProducer1ReferenceInAa).HasColumnName("iKeyProducer1ReferenceInAA");
            entity.Property(e => e.IKeyProducer2InAa).HasColumnName("iKeyProducer2InAA");
            entity.Property(e => e.IKeyProducer2ReferenceInAa).HasColumnName("iKeyProducer2ReferenceInAA");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IkeySecurityInAa).HasColumnName("ikeySecurityInAA");
            entity.Property(e => e.NInterestRate)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("nInterestRate");
            entity.Property(e => e.NNumUnits)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nNumUnits");
            entity.Property(e => e.NPoolFactor)
                .HasColumnType("numeric(12, 9)")
                .HasColumnName("nPoolFactor");
            entity.Property(e => e.NPriceFactor)
                .HasColumnType("numeric(12, 6)")
                .HasColumnName("nPriceFactor");
            entity.Property(e => e.NUnitFactor)
                .HasColumnType("numeric(12, 6)")
                .HasColumnName("nUnitFactor");
            entity.Property(e => e.NUnitValue)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nUnitValue");
            entity.Property(e => e.YCostBasis)
                .HasColumnType("money")
                .HasColumnName("yCostBasis");
            entity.Property(e => e.YLoanValue)
                .HasColumnType("money")
                .HasColumnName("yLoanValue");
            entity.Property(e => e.YSurrenderCharge)
                .HasColumnType("money")
                .HasColumnName("ySurrenderCharge");
            entity.Property(e => e.YSurrenderValue)
                .HasColumnType("money")
                .HasColumnName("ySurrenderValue");
            entity.Property(e => e.YValue)
                .HasColumnType("money")
                .HasColumnName("yValue");
        });

        modelBuilder.Entity<DlfPositionAccountSet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dlfPositionAccountSet");

            entity.HasIndex(e => e.IKeyClient, "IX_dlfPositionAccountSet_ByClient");

            entity.HasIndex(e => e.IKeyModuleAa, "IX_dlfPositionAccountSet_ByMdule");

            entity.HasIndex(e => e.IKeyProducer1Dlf, "IX_dlfPositionAccountSet_ByPdcr1");

            entity.HasIndex(e => e.IKeyPrimaryProducerAa, "IX_dlfPositionAccountSet_ByPrimarypdcr");

            entity.HasIndex(e => e.CAccount, "IX_dlfPositionAccountSet_byAcct");

            entity.HasIndex(e => e.IKeyAccount, "IX_dlfPositionAccountSet_byAcctKey");

            entity.HasIndex(e => e.IKeyProcess, "IX_dlfPositionAccountSet_byProcess");

            entity.Property(e => e.BFlagAdd).HasColumnName("bFlagAdd");
            entity.Property(e => e.BFlagDifferentModule).HasColumnName("bFlagDifferentModule");
            entity.Property(e => e.BFlagPositionOnlyAa).HasColumnName("bFlagPositionOnlyAA");
            entity.Property(e => e.BFlagPositionOnlyDlf).HasColumnName("bFlagPositionOnlyDLF");
            entity.Property(e => e.BFlagRoraa).HasColumnName("bFlagRORAA");
            entity.Property(e => e.BFlagUpdate).HasColumnName("bFlagUpdate");
            entity.Property(e => e.BflagProcessed).HasColumnName("bflagProcessed");
            entity.Property(e => e.CAccount)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccount");
            entity.Property(e => e.DPositionDateAa)
                .HasColumnType("datetime")
                .HasColumnName("dPositionDateAA");
            entity.Property(e => e.DRecordDlf)
                .HasColumnType("datetime")
                .HasColumnName("dRecordDLF");
            entity.Property(e => e.ICodeAccountTypeAa).HasColumnName("iCodeAccountTypeAA");
            entity.Property(e => e.ICodeAccountTypeDlf).HasColumnName("iCodeAccountTypeDLF");
            entity.Property(e => e.ICodeBasisTypeAa).HasColumnName("iCodeBasisTypeAA");
            entity.Property(e => e.ICodeBasisTypeDlf).HasColumnName("iCodeBasisTypeDLF");
            entity.Property(e => e.ICodeCustodianAa).HasColumnName("iCodeCustodianAA");
            entity.Property(e => e.ICodeCustodianDlf).HasColumnName("iCodeCustodianDLF");
            entity.Property(e => e.ICodeObjectiveAa).HasColumnName("iCodeObjectiveAA");
            entity.Property(e => e.ICodeObjectiveDlf).HasColumnName("iCodeObjectiveDLF");
            entity.Property(e => e.ICodeStatusAa).HasColumnName("iCodeStatusAA");
            entity.Property(e => e.ICodeStatusDlf).HasColumnName("iCodeStatusDLF");
            entity.Property(e => e.ICodeTaxStatusAa).HasColumnName("iCodeTaxStatusAA");
            entity.Property(e => e.ICodeTaxStatusDlf).HasColumnName("iCodeTaxStatusDLF");
            entity.Property(e => e.IKeyAccount).HasColumnName("iKeyAccount");
            entity.Property(e => e.IKeyClient).HasColumnName("iKeyClient");
            entity.Property(e => e.IKeyManager1Aa).HasColumnName("iKeyManager1AA");
            entity.Property(e => e.IKeyModuleAa).HasColumnName("iKeyModuleAA");
            entity.Property(e => e.IKeyPrimaryProducerAa).HasColumnName("iKeyPrimaryProducerAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeyProducer1Aa).HasColumnName("iKeyProducer1AA");
            entity.Property(e => e.IKeyProducer1Dlf).HasColumnName("iKeyProducer1DLF");
            entity.Property(e => e.IKeyProducer1InAa).HasColumnName("iKeyProducer1InAA");
        });

        modelBuilder.Entity<DlfPositionInvestmentSet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dlfPositionInvestmentSet");

            entity.HasIndex(e => e.IKeyAccountInAa, "IX_dlfPositionInvestmentSet_ByAcctKey");

            entity.HasIndex(e => e.IKeyModuleAa, "IX_dlfPositionInvestmentSet_ByModule");

            entity.HasIndex(e => e.IKeyNvstInAa, "IX_dlfPositionInvestmentSet_ByNvstKey");

            entity.HasIndex(e => e.IKeySecurityInAa, "IX_dlfPositionInvestmentSet_BySecurityKey");

            entity.HasIndex(e => e.IKeyId, "IX_dlfPositionInvestmentSet_byKey");

            entity.HasIndex(e => e.IKeyProcess, "IX_dlfPositionInvestmentSet_byProcess");

            entity.Property(e => e.BFlagAdd).HasColumnName("bFlagAdd");
            entity.Property(e => e.BFlagProcessed).HasColumnName("bFlagProcessed");
            entity.Property(e => e.BFlagUpdate).HasColumnName("bFlagUpdate");
            entity.Property(e => e.DAcquiredDlf)
                .HasColumnType("date")
                .HasColumnName("dAcquiredDLF");
            entity.Property(e => e.DEffecitiveAa)
                .HasColumnType("date")
                .HasColumnName("dEffecitiveAA");
            entity.Property(e => e.ICodeBasisTypeAa).HasColumnName("iCodeBasisTypeAA");
            entity.Property(e => e.ICodeBasisTypeDlf).HasColumnName("iCodeBasisTypeDLF");
            entity.Property(e => e.IKeyAccountInAa).HasColumnName("iKeyAccountInAA");
            entity.Property(e => e.IKeyDlffileCreated).HasColumnName("iKeyDLFFileCreated");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.IKeyModuleAa).HasColumnName("iKeyModuleAA");
            entity.Property(e => e.IKeyNvstInAa).HasColumnName("iKeyNvstInAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeySecurityInAa).HasColumnName("iKeySecurityInAA");
        });

        modelBuilder.Entity<DlfPositionPositionSet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dlfPositionPositionSet");

            entity.HasIndex(e => e.IKeyId, "IX_dlfPositionPositionSet_ByKey");

            entity.HasIndex(e => e.IKeyModuleInAa, "IX_dlfPositionPositionSet_ByModule");

            entity.HasIndex(e => e.IKeyPositionInAa, "IX_dlfPositionPositionSet_ByPositionKey");

            entity.HasIndex(e => e.IKeyReconcileInAa, "IX_dlfPositionPositionSet_ByReconcile");

            entity.HasIndex(e => e.IKeySecurity, "IX_dlfPositionPositionSet_BySecurity");

            entity.HasIndex(e => e.IKeyNvst, "IX_dlfPositionPositionSet_byNvstKey");

            entity.HasIndex(e => e.IKeyProcess, "IX_dlfPositionPositionSet_byProcess");

            entity.Property(e => e.BFlagAdded).HasColumnName("bFlagAdded");
            entity.Property(e => e.BFlagUpdated).HasColumnName("bFlagUpdated");
            entity.Property(e => e.DValue)
                .HasColumnType("date")
                .HasColumnName("dValue");
            entity.Property(e => e.ICodeAcctValueType).HasColumnName("iCodeAcctValueType");
            entity.Property(e => e.ICodePositionType).HasColumnName("iCodePositionType");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyId");
            entity.Property(e => e.IKeyModuleInAa).HasColumnName("iKeyModuleInAA");
            entity.Property(e => e.IKeyNvst).HasColumnName("iKeyNvst");
            entity.Property(e => e.IKeyPositionInAa).HasColumnName("iKeyPositionInAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeyReconcileInAa).HasColumnName("iKeyReconcileInAA");
            entity.Property(e => e.IKeySecurity).HasColumnName("iKeySecurity");
            entity.Property(e => e.NPoolFactor)
                .HasColumnType("decimal(12, 8)")
                .HasColumnName("nPoolFactor");
            entity.Property(e => e.NSharePrice)
                .HasColumnType("decimal(16, 6)")
                .HasColumnName("nSharePrice");
            entity.Property(e => e.NUnits)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("nUnits");
            entity.Property(e => e.NUnitsInAa)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("nUnitsInAA");
        });

        modelBuilder.Entity<DlfPositionPriceSet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dlfPositionPriceSet");

            entity.HasIndex(e => e.IKeyProcess, "IX_dlfPositionPriceSet_ByProcess");

            entity.HasIndex(e => new { e.IKeySecurity, e.DPrice }, "IX_dlfPositionPriceSet_BySecurityDate");

            entity.HasIndex(e => e.IKeyPriceInAa, "IX_dlfPositionPriceSet_byPriceKey");

            entity.Property(e => e.DPrice)
                .HasColumnType("date")
                .HasColumnName("dPrice");
            entity.Property(e => e.IKeyDlffileCreated).HasColumnName("iKeyDLFFileCreated");
            entity.Property(e => e.IKeyPriceInAa).HasColumnName("iKeyPriceInAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeySecurity).HasColumnName("iKeySecurity");
            entity.Property(e => e.NPoolFactor)
                .HasColumnType("decimal(12, 8)")
                .HasColumnName("nPoolFactor");
            entity.Property(e => e.NPrice)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("nPrice");
            entity.Property(e => e.NPriceFactor)
                .HasColumnType("decimal(12, 6)")
                .HasColumnName("nPriceFactor");
        });

        modelBuilder.Entity<DlfPositionReconcileSet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dlfPositionReconcileSet");

            entity.HasIndex(e => e.IKeyId, "IX_dlfPositionReconcileSet");

            entity.HasIndex(e => e.IKeyProcess, "IX_dlfPositionReconcileSet_1");

            entity.HasIndex(e => e.IKeyNvst, "IX_dlfPositionReconcileSet_2");

            entity.HasIndex(e => e.IKeySecurity, "IX_dlfPositionReconcileSet_3");

            entity.HasIndex(e => e.IKeyPosition, "IX_dlfPositionReconcileSet_4");

            entity.HasIndex(e => e.IKeyReconcile, "IX_dlfPositionReconcileSet_5");

            entity.HasIndex(e => e.DValue, "IX_dlfPositionReconcileSet_6");

            entity.HasIndex(e => e.ICodePositionType, "IX_dlfPositionReconcileSet_7");

            entity.HasIndex(e => e.ICodeReconcileFrequency, "IX_dlfPositionReconcileSet_8");

            entity.Property(e => e.BFlagInitValuesOnly).HasColumnName("bFlagInitValuesOnly");
            entity.Property(e => e.BFlagInitialized).HasColumnName("bFlagInitialized");
            entity.Property(e => e.BFlagInterestInDlpositions).HasColumnName("bFlagInterestInDLPositions");
            entity.Property(e => e.BFlagOption).HasColumnName("bFlagOption");
            entity.Property(e => e.BFlagSkip).HasColumnName("bFlagSkip");
            entity.Property(e => e.BFlagSummedPositions).HasColumnName("bFlagSummedPositions");
            entity.Property(e => e.BFlagSummedTransactions).HasColumnName("bFlagSummedTransactions");
            entity.Property(e => e.BFlagUpdate).HasColumnName("bFlagUpdate");
            entity.Property(e => e.DAquired)
                .HasColumnType("date")
                .HasColumnName("dAquired");
            entity.Property(e => e.DInitialized)
                .HasColumnType("date")
                .HasColumnName("dInitialized");
            entity.Property(e => e.DLastReconcile)
                .HasColumnType("date")
                .HasColumnName("dLastReconcile");
            entity.Property(e => e.DLastTransaction)
                .HasColumnType("date")
                .HasColumnName("dLastTransaction");
            entity.Property(e => e.DLiquidated)
                .HasColumnType("date")
                .HasColumnName("dLiquidated");
            entity.Property(e => e.DValue)
                .HasColumnType("date")
                .HasColumnName("dValue");
            entity.Property(e => e.ICodePositionType).HasColumnName("iCodePositionType");
            entity.Property(e => e.ICodeReconcileFrequency).HasColumnName("iCodeReconcileFrequency");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.IKeyNvst).HasColumnName("iKeyNvst");
            entity.Property(e => e.IKeyPosition).HasColumnName("iKeyPosition");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeyReconcile).HasColumnName("iKeyReconcile");
            entity.Property(e => e.IKeySecurity).HasColumnName("iKeySecurity");
            entity.Property(e => e.NPoolFactor)
                .HasColumnType("decimal(12, 8)")
                .HasColumnName("nPoolFactor");
            entity.Property(e => e.NShareFactor)
                .HasColumnType("decimal(12, 6)")
                .HasColumnName("nShareFactor");
            entity.Property(e => e.NSharePrice)
                .HasColumnType("decimal(16, 6)")
                .HasColumnName("nSharePrice");
            entity.Property(e => e.NSummedUnitsInAa)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("nSummedUnitsInAA");
            entity.Property(e => e.NTolerance)
                .HasColumnType("decimal(8, 6)")
                .HasColumnName("nTolerance");
            entity.Property(e => e.NUnits)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("nUnits");
        });

        modelBuilder.Entity<DlfPositionSecuritySet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dlfPositionSecuritySet");

            entity.HasIndex(e => e.IKeyProcess, "IX_dlfPositionSecuritySet_ByProcess");

            entity.HasIndex(e => e.CDescriptionAa, "IX_dlfPositionSecuritySet_byAADesc");

            entity.HasIndex(e => e.CDescriptionDlf, "IX_dlfPositionSecuritySet_byDLFDesc");

            entity.HasIndex(e => e.IKeyModuleAa, "IX_dlfPositionSecuritySet_byModule");

            entity.HasIndex(e => e.IKeySecurity, "IX_dlfPositionSecuritySet_bySecurity");

            entity.Property(e => e.BFlagFixedAa).HasColumnName("bFlagFixedAA");
            entity.Property(e => e.BFlagFixedDlf).HasColumnName("bFlagFixedDLF");
            entity.Property(e => e.BFlagFixedIncomeAa).HasColumnName("bFlagFixedIncomeAA");
            entity.Property(e => e.BFlagFixedIncomeDlf).HasColumnName("bFlagFixedIncomeDLF");
            entity.Property(e => e.BFlagInterestBearingAa).HasColumnName("bFlagInterestBearingAA");
            entity.Property(e => e.BFlagInterestBearingDlf).HasColumnName("bFlagInterestBearingDLF");
            entity.Property(e => e.BFlagPoolAa).HasColumnName("bFlagPoolAA");
            entity.Property(e => e.BFlagPoolDlf).HasColumnName("bFlagPoolDLF");
            entity.Property(e => e.BFlagProcessed).HasColumnName("bFlagProcessed");
            entity.Property(e => e.BFlagUpdate).HasColumnName("bFlagUpdate");
            entity.Property(e => e.CAlternateIdaa)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAlternateIDAA");
            entity.Property(e => e.CAlternateIddlf)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cAlternateIDDLF");
            entity.Property(e => e.CCusipAa)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCusipAA");
            entity.Property(e => e.CCusipDlf)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCusipDLF");
            entity.Property(e => e.CCusipExtAa)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCusipExtAA");
            entity.Property(e => e.CCusipExtDlf)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cCusipExtDLF");
            entity.Property(e => e.CDescriptionAa)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescriptionAA");
            entity.Property(e => e.CDescriptionDlf)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescriptionDLF");
            entity.Property(e => e.COldAlternateIdaa)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOldAlternateIDAA");
            entity.Property(e => e.COldCusipAa)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOldCusipAA");
            entity.Property(e => e.COldCusipExtAa)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOldCusipExtAA");
            entity.Property(e => e.CSymbolAa)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSymbolAA");
            entity.Property(e => e.CSymbolDlf)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSymbolDLF");
            entity.Property(e => e.DMatureAa)
                .HasColumnType("date")
                .HasColumnName("dMatureAA");
            entity.Property(e => e.DMatureDlf)
                .HasColumnType("date")
                .HasColumnName("dMatureDLF");
            entity.Property(e => e.DRecAa)
                .HasColumnType("date")
                .HasColumnName("dRecAA");
            entity.Property(e => e.DRecDlf)
                .HasColumnType("date")
                .HasColumnName("dRecDLF");
            entity.Property(e => e.ICodeCompanyAa).HasColumnName("iCodeCompanyAA");
            entity.Property(e => e.ICodeCompanyDfl).HasColumnName("iCodeCompanyDFL");
            entity.Property(e => e.ICodeNvstTypeAa).HasColumnName("iCodeNvstTypeAA");
            entity.Property(e => e.ICodeNvstTypeDlf).HasColumnName("iCodeNvstTypeDLF");
            entity.Property(e => e.ICodeSectorAa).HasColumnName("iCodeSectorAA");
            entity.Property(e => e.ICodeSectorDlf).HasColumnName("iCodeSectorDLF");
            entity.Property(e => e.IKeyModuleAa).HasColumnName("iKeyModuleAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeySecurity).HasColumnName("iKeySecurity");
            entity.Property(e => e.NPriceFactorAa)
                .HasColumnType("decimal(12, 6)")
                .HasColumnName("nPriceFactorAA");
            entity.Property(e => e.NPriceFactorDlf)
                .HasColumnType("decimal(12, 6)")
                .HasColumnName("nPriceFactorDLF");
            entity.Property(e => e.NShareFactorAa)
                .HasColumnType("decimal(12, 6)")
                .HasColumnName("nShareFactorAA");
            entity.Property(e => e.NShareFactorDlf)
                .HasColumnType("decimal(12, 6)")
                .HasColumnName("nShareFactorDLF");
        });

        modelBuilder.Entity<DlfPrice>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("PK_dlfPrice_1")
                .IsClustered(false);

            entity.ToTable("dlfPrice");

            entity.HasIndex(e => e.BFlagSecurityNeedsValidation, "IX_dlfPrice");

            entity.HasIndex(e => e.CAlternateId, "IX_dlfPrice_AltID");

            entity.HasIndex(e => e.CCusip, "IX_dlfPrice_byCusip");

            entity.HasIndex(e => e.CCusipExt, "IX_dlfPrice_byExt");

            entity.HasIndex(e => e.IKeySecurityInAa, "IX_dlfPrice_bySecurity");

            entity.HasIndex(e => e.CSymbol, "IX_dlfPrice_bySymbol");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.BFlagSecurityFoundViaOld).HasColumnName("bFlagSecurityFoundViaOld");
            entity.Property(e => e.BFlagSecurityNeedsValidation).HasColumnName("bFlagSecurityNeedsValidation");
            entity.Property(e => e.BFlagSkipSecurity).HasColumnName("bFlagSkipSecurity");
            entity.Property(e => e.CAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAlternateID");
            entity.Property(e => e.CCusip)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusip");
            entity.Property(e => e.CCusipExt)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusipExt");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.DPriceDate)
                .HasColumnType("date")
                .HasColumnName("dPriceDate");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.IKeyDlffileCreated).HasColumnName("iKeyDLFFileCreated");
            entity.Property(e => e.IKeySecurityInAa).HasColumnName("iKeySecurityInAA");
            entity.Property(e => e.NPoolFactor)
                .HasColumnType("numeric(12, 9)")
                .HasColumnName("nPoolFactor");
            entity.Property(e => e.NPriceFactor)
                .HasColumnType("numeric(12, 6)")
                .HasColumnName("nPriceFactor");
            entity.Property(e => e.NUnitFactor)
                .HasColumnType("numeric(12, 6)")
                .HasColumnName("nUnitFactor");
            entity.Property(e => e.NUnitValue)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nUnitValue");
        });

        modelBuilder.Entity<DlfProcess>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("dlfProcess");

            entity.HasIndex(e => e.DStart, "dlfProcess_ByStartDate");

            entity.HasIndex(e => e.IKeyModule, "dlfProcess_byModule");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BFlagDeleteRecords).HasColumnName("bFlagDeleteRecords");
            entity.Property(e => e.BFlagRecordsDeleted).HasColumnName("bFlagRecordsDeleted");
            entity.Property(e => e.CDescription)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("cDescription");
            entity.Property(e => e.CStats)
                .IsUnicode(false)
                .HasColumnName("cStats");
            entity.Property(e => e.DEnd)
                .HasColumnType("smalldatetime")
                .HasColumnName("dEnd");
            entity.Property(e => e.DStart)
                .HasColumnType("smalldatetime")
                .HasColumnName("dStart");
            entity.Property(e => e.IKeyEnd).HasColumnName("iKeyEnd");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyStart).HasColumnName("iKeyStart");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
        });

        modelBuilder.Entity<DlfProcessFile>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("dlfProcessFile");

            entity.HasIndex(e => e.IKeyFile, "IX_dlfProcessFile_iKeyFile");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
        });

        modelBuilder.Entity<DlfRegistration>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("PK_dlfRegistration_1")
                .IsClustered(false);

            entity.ToTable("dlfRegistration");

            entity.HasIndex(e => e.CTaxidInvestor, "IX_dlfRegistration_byTaxid");

            entity.HasIndex(e => e.IKeyId, "dlfRegistration_ByIkeyId");

            entity.HasIndex(e => e.BFlagAccountNeedsValidation, "dlfRegistration_BybFlagAccountNeedsValidation");

            entity.HasIndex(e => e.BFlagRepCode1NeedsValidation, "dlfRegistration_BybFlagRepCode1NeedsValidation");

            entity.HasIndex(e => e.BFlagRepCode2NeedsValidation, "dlfRegistration_BybFlagRepCode2NeedsValidation");

            entity.HasIndex(e => e.BFlagSecurityNeedsValidation, "dlfRegistration_BybFlagSecurityNeedsValidation");

            entity.HasIndex(e => e.BFlagValidateSecurity, "dlfRegistration_BybFlagValidateSecurity");

            entity.HasIndex(e => e.CAccountNumber, "dlfRegistration_BycAccountNumber");

            entity.HasIndex(e => e.CAlternateId, "dlfRegistration_BycAlternateID");

            entity.HasIndex(e => e.CCusip, "dlfRegistration_BycCusip");

            entity.HasIndex(e => e.CCusipExt, "dlfRegistration_BycCusipExt");

            entity.HasIndex(e => e.CRep1Code, "dlfRegistration_BycRep1Code");

            entity.HasIndex(e => e.CRep1Fullname, "dlfRegistration_BycRep1Fullname");

            entity.HasIndex(e => e.CRep2Code, "dlfRegistration_BycRep2Code");

            entity.HasIndex(e => e.CRep2Fullname, "dlfRegistration_BycRep2Fullname");

            entity.HasIndex(e => e.CSymbol, "dlfRegistration_BycSymbol");

            entity.HasIndex(e => e.ICodeProcessResult, "dlfRegistration_ByiCodeProcessResult");

            entity.HasIndex(e => e.IKeyAccountInAa, "dlfRegistration_ByiKeyAccountInAA");

            entity.HasIndex(e => e.IKeyBatch, "dlfRegistration_ByiKeyBatch");

            entity.HasIndex(e => e.IKeyFile, "dlfRegistration_ByiKeyFile");

            entity.HasIndex(e => e.IKeyProcess, "dlfRegistration_ByiKeyProcess");

            entity.HasIndex(e => e.IKeyProducer1ReferenceInAa, "dlfRegistration_ByiKeyProducer1ReferenceInAA");

            entity.HasIndex(e => e.IKeyProducer2ReferenceInAa, "dlfRegistration_ByiKeyProducer2ReferenceInAA");

            entity.HasIndex(e => e.IKeySecurityInAa, "dlfRegistration_ByiKeySecurityInAA");

            entity.HasIndex(e => new { e.IKeyProcess, e.CAccountNumber }, "dlfRegistration_ProcessAccount");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.BFlagAccountNeedsValidation).HasColumnName("bFlagAccountNeedsValidation");
            entity.Property(e => e.BFlagFixedValue)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bFlagFixedValue");
            entity.Property(e => e.BFlagMgr1Organization).HasColumnName("bFlagMgr1Organization");
            entity.Property(e => e.BFlagMgrCode1NeedsValidation).HasColumnName("bFlagMgrCode1NeedsValidation");
            entity.Property(e => e.BFlagMoneyMarket)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bFlagMoneyMarket");
            entity.Property(e => e.BFlagRep1Organization).HasColumnName("bFlagRep1Organization");
            entity.Property(e => e.BFlagRep2Organization).HasColumnName("bFlagRep2Organization");
            entity.Property(e => e.BFlagRepCode1NeedsValidation).HasColumnName("bFlagRepCode1NeedsValidation");
            entity.Property(e => e.BFlagRepCode2NeedsValidation).HasColumnName("bFlagRepCode2NeedsValidation");
            entity.Property(e => e.BFlagSecurityFoundViaOld).HasColumnName("bFlagSecurityFoundViaOld");
            entity.Property(e => e.BFlagSecurityNeedsValidation).HasColumnName("bFlagSecurityNeedsValidation");
            entity.Property(e => e.BFlagValidateSecurity).HasColumnName("bFlagValidateSecurity");
            entity.Property(e => e.CAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountNumber");
            entity.Property(e => e.CAccountObjectiveCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountObjectiveCode");
            entity.Property(e => e.CAccountObjectiveDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountObjectiveDescription");
            entity.Property(e => e.CAccountStatusCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountStatusCode");
            entity.Property(e => e.CAccountStatusDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountStatusDescription");
            entity.Property(e => e.CAccountTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountTypeCode");
            entity.Property(e => e.CAccountTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountTypeDescription");
            entity.Property(e => e.CAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAlternateID");
            entity.Property(e => e.CCategoryCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCategoryCode");
            entity.Property(e => e.CCategoryDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCategoryDescription");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CCusip)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusip");
            entity.Property(e => e.CCusipExt)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusipExt");
            entity.Property(e => e.CCustodianCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCustodianCode");
            entity.Property(e => e.CCustodianDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCustodianDescription");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CInvTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cInvTypeCode");
            entity.Property(e => e.CInvTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cInvTypeDescription");
            entity.Property(e => e.CMgr1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1Code");
            entity.Property(e => e.CMgr1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1Fullname");
            entity.Property(e => e.CRegLine1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine1");
            entity.Property(e => e.CRegLine2)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine2");
            entity.Property(e => e.CRegLine3)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine3");
            entity.Property(e => e.CRegLine4)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine4");
            entity.Property(e => e.CRegLine5)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine5");
            entity.Property(e => e.CRegLine6)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine6");
            entity.Property(e => e.CRegLine7)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRegLine7");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CRep2Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Code");
            entity.Property(e => e.CRep2Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Fullname");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSectorCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSectorCode");
            entity.Property(e => e.CSectorDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSectorDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.CTaxidInvestor)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cTaxidInvestor");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DAcquiredAccount)
                .HasColumnType("date")
                .HasColumnName("dAcquiredAccount");
            entity.Property(e => e.DAcquiredInvestment)
                .HasColumnType("date")
                .HasColumnName("dAcquiredInvestment");
            entity.Property(e => e.DInvestorDob)
                .HasColumnType("date")
                .HasColumnName("dInvestorDOB");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeAccountObjective).HasColumnName("iCodeAccountObjective");
            entity.Property(e => e.ICodeAccountStatus).HasColumnName("iCodeAccountStatus");
            entity.Property(e => e.ICodeAccountTaxStatus).HasColumnName("iCodeAccountTaxStatus");
            entity.Property(e => e.ICodeAccountType).HasColumnName("iCodeAccountType");
            entity.Property(e => e.ICodeBasisType).HasColumnName("iCodeBasisType");
            entity.Property(e => e.ICodeCategory).HasColumnName("iCodeCategory");
            entity.Property(e => e.ICodeCompany).HasColumnName("iCodeCompany");
            entity.Property(e => e.ICodeCustodian).HasColumnName("iCodeCustodian");
            entity.Property(e => e.ICodeInvType).HasColumnName("iCodeInvType");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.ICodeSector).HasColumnName("iCodeSector");
            entity.Property(e => e.IKeyAccountInAa).HasColumnName("iKeyAccountInAA");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IKeyId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iKeyId");
            entity.Property(e => e.IKeyManager1InAa).HasColumnName("iKeyManager1InAA");
            entity.Property(e => e.IKeyManager1ReferenceInAa).HasColumnName("iKeyManager1ReferenceInAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeyProducer1InAa).HasColumnName("iKeyProducer1InAA");
            entity.Property(e => e.IKeyProducer1ReferenceInAa).HasColumnName("iKeyProducer1ReferenceInAA");
            entity.Property(e => e.IKeyProducer2InAa).HasColumnName("iKeyProducer2InAA");
            entity.Property(e => e.IKeyProducer2ReferenceInAa).HasColumnName("iKeyProducer2ReferenceInAA");
            entity.Property(e => e.IKeySecurityInAa).HasColumnName("iKeySecurityInAA");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.YContributions)
                .HasColumnType("money")
                .HasColumnName("yContributions");
            entity.Property(e => e.YCostBasis)
                .HasColumnType("money")
                .HasColumnName("yCostBasis");
        });

        modelBuilder.Entity<DlfRider>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("dlfRider_PK")
                .IsClustered(false);

            entity.ToTable("dlfRider");

            entity.HasIndex(e => e.GUidCoverage, "dlfRider_BygUidCoverage");

            entity.HasIndex(e => e.ICodeProcessResult, "dlfRider_ByiCodeProcessResult");

            entity.HasIndex(e => e.IKeyFile, "dlfRider_ByiKeyFile");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.BFlagAddToBen).HasColumnName("bFlagAddToBen");
            entity.Property(e => e.BFlagAddToPrem).HasColumnName("bFlagAddToPrem");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CRiderCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRiderCode");
            entity.Property(e => e.CRiderDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRiderDescription");
            entity.Property(e => e.CRiderPlanCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRiderPlanCode");
            entity.Property(e => e.CRiderPlanDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRiderPlanDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DEffective)
                .HasColumnType("date")
                .HasColumnName("dEffective");
            entity.Property(e => e.DExercise)
                .HasColumnType("date")
                .HasColumnName("dExercise");
            entity.Property(e => e.DExpiration)
                .HasColumnType("date")
                .HasColumnName("dExpiration");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DTermination)
                .HasColumnType("date")
                .HasColumnName("dTermination");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUidCoverage).HasColumnName("gUidCoverage");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.ICodeRider).HasColumnName("iCodeRider");
            entity.Property(e => e.ICodeRiderPlan).HasColumnName("iCodeRiderPlan");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.YAnnualPremium)
                .HasColumnType("money")
                .HasColumnName("yAnnualPremium");
            entity.Property(e => e.YBenefitAmount)
                .HasColumnType("money")
                .HasColumnName("yBenefitAmount");
            entity.Property(e => e.YCashValue)
                .HasColumnType("money")
                .HasColumnName("yCashValue");
            entity.Property(e => e.YLoanAmount)
                .HasColumnType("money")
                .HasColumnName("yLoanAmount");
            entity.Property(e => e.YModalPremium)
                .HasColumnType("money")
                .HasColumnName("yModalPremium");
        });

        modelBuilder.Entity<DlfSecurity>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("PK_dlfSecurity_1")
                .IsClustered(false);

            entity.ToTable("dlfSecurity");

            entity.HasIndex(e => e.BFlagSecurityNeedsValidation, "dlfSecurity_BybFlagSecurityNeedsValidation");

            entity.HasIndex(e => e.BFlagSkipSecurity, "dlfSecurity_BybFlagSkipSecurity");

            entity.HasIndex(e => e.CAlternateId, "dlfSecurity_BycAlternateID");

            entity.HasIndex(e => e.CCusip, "dlfSecurity_BycCusip");

            entity.HasIndex(e => e.CCusipExt, "dlfSecurity_BycCusipExt");

            entity.HasIndex(e => e.CSymbol, "dlfSecurity_BycSymbol");

            entity.HasIndex(e => e.ICodeProcessResult, "dlfSecurity_ByiCodeProcessResult");

            entity.HasIndex(e => e.IKeyBatch, "dlfSecurity_ByiKeyBatch");

            entity.HasIndex(e => e.IKeyFile, "dlfSecurity_ByiKeyFile");

            entity.HasIndex(e => e.IKeyId, "dlfSecurity_ByiKeyId");

            entity.HasIndex(e => e.IKeyProcess, "dlfSecurity_ByiKeyProcess");

            entity.HasIndex(e => e.IKeySecurityInAa, "dlfSecurity_ByiKeySecurityInAA");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.BFlagFixedIncome).HasColumnName("bFlagFixedIncome");
            entity.Property(e => e.BFlagFixedValue).HasColumnName("bFlagFixedValue");
            entity.Property(e => e.BFlagInterestBearing).HasColumnName("bFlagInterestBearing");
            entity.Property(e => e.BFlagMoneyMarket).HasColumnName("bFlagMoneyMarket");
            entity.Property(e => e.BFlagOption).HasColumnName("bFlagOption");
            entity.Property(e => e.BFlagPoolFactor).HasColumnName("bFlagPoolFactor");
            entity.Property(e => e.BFlagSecurityFoundViaOld).HasColumnName("bFlagSecurityFoundViaOld");
            entity.Property(e => e.BFlagSecurityNeedsValidation).HasColumnName("bFlagSecurityNeedsValidation");
            entity.Property(e => e.BFlagSkipSecurity).HasColumnName("bFlagSkipSecurity");
            entity.Property(e => e.CAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAlternateID");
            entity.Property(e => e.CCategoryCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCategoryCode");
            entity.Property(e => e.CCategoryDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCategoryDescription");
            entity.Property(e => e.CClassCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cClassCode");
            entity.Property(e => e.CClassDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cClassDescription");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CCusip)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusip");
            entity.Property(e => e.CCusipExt)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusipExt");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CInvTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cInvTypeCode");
            entity.Property(e => e.CInvTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cInvTypeDescription");
            entity.Property(e => e.COptionSymbol)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cOptionSymbol");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSectorCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSectorCode");
            entity.Property(e => e.CSectorDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSectorDescription");
            entity.Property(e => e.CSecurityObjectiveCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSecurityObjectiveCode");
            entity.Property(e => e.CSecurityObjectiveDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSecurityObjectiveDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.CUnderlyingSecurity)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cUnderlyingSecurity");
            entity.Property(e => e.CUnderlyingSecuritySearch)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cUnderlyingSecuritySearch");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DCallable)
                .HasColumnType("date")
                .HasColumnName("dCallable");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DMaturity)
                .HasColumnType("date")
                .HasColumnName("dMaturity");
            entity.Property(e => e.DOptionExpiration)
                .HasColumnType("date")
                .HasColumnName("dOptionExpiration");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DValue)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dValue");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeCategory).HasColumnName("iCodeCategory");
            entity.Property(e => e.ICodeClass).HasColumnName("iCodeClass");
            entity.Property(e => e.ICodeCompany).HasColumnName("iCodeCompany");
            entity.Property(e => e.ICodeInvType).HasColumnName("iCodeInvType");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.ICodeSector).HasColumnName("iCodeSector");
            entity.Property(e => e.ICodeSecurityObjective).HasColumnName("iCodeSecurityObjective");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IKeyId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iKeyId");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeySecurityInAa).HasColumnName("iKeySecurityInAA");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.NInterestRate)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("nInterestRate");
            entity.Property(e => e.NPoolFactor)
                .HasColumnType("numeric(12, 9)")
                .HasColumnName("nPoolFactor");
            entity.Property(e => e.NPriceFactor)
                .HasColumnType("numeric(12, 6)")
                .HasColumnName("nPriceFactor");
            entity.Property(e => e.NUnitFactor)
                .HasColumnType("numeric(12, 6)")
                .HasColumnName("nUnitFactor");
            entity.Property(e => e.NUnitValue)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nUnitValue");
            entity.Property(e => e.YStrikePrice)
                .HasColumnType("money")
                .HasColumnName("yStrikePrice");
        });

        modelBuilder.Entity<DlfTransaction>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("PK_dlfTransaction_1")
                .IsClustered(false);

            entity.ToTable("dlfTransaction");

            entity.HasIndex(e => e.YAccruedInterest, "dlfTransaction_ByAccruedInt").HasFillFactor(90);

            entity.HasIndex(e => e.BFlagAccountNeedsValidation, "dlfTransaction_BybFlagAccountNeedsValidation").HasFillFactor(90);

            entity.HasIndex(e => e.BFlagMoneyMarket, "dlfTransaction_BybFlagMoneyMarket").HasFillFactor(90);

            entity.HasIndex(e => e.BFlagRepCode1NeedsValidation, "dlfTransaction_BybFlagRepCode1NeedsValidation").HasFillFactor(90);

            entity.HasIndex(e => e.BFlagRepCode2NeedsValidation, "dlfTransaction_BybFlagRepCode2NeedsValidation").HasFillFactor(90);

            entity.HasIndex(e => e.BFlagSecurityNeedsValidation, "dlfTransaction_BybFlagSecurityNeedsValidation").HasFillFactor(90);

            entity.HasIndex(e => e.CAccountNumber, "dlfTransaction_BycAccountNumber").HasFillFactor(90);

            entity.HasIndex(e => e.CAlternateId, "dlfTransaction_BycAlternateID").HasFillFactor(90);

            entity.HasIndex(e => e.CCusip, "dlfTransaction_BycCusip").HasFillFactor(90);

            entity.HasIndex(e => e.CCusipExt, "dlfTransaction_BycCusipExt").HasFillFactor(90);

            entity.HasIndex(e => e.CRep1Code, "dlfTransaction_BycRep1Code").HasFillFactor(90);

            entity.HasIndex(e => e.CRep1Fullname, "dlfTransaction_BycRep1Fullname").HasFillFactor(90);

            entity.HasIndex(e => e.CRep2Code, "dlfTransaction_BycRep2Code").HasFillFactor(90);

            entity.HasIndex(e => e.CRep2Fullname, "dlfTransaction_BycRep2Fullname").HasFillFactor(90);

            entity.HasIndex(e => e.CSymbol, "dlfTransaction_BycSymbol").HasFillFactor(90);

            entity.HasIndex(e => e.ICodeProcessResult, "dlfTransaction_ByiCodeProcessResult").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyAccountInAa, "dlfTransaction_ByiKeyAccountInAA").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyBatch, "dlfTransaction_ByiKeyBatch").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyFile, "dlfTransaction_ByiKeyFile").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyProcess, "dlfTransaction_ByiKeyProcess").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyProducer1ReferenceInAa, "dlfTransaction_ByiKeyProducer1ReferenceInAA").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyProducer2ReferenceInAa, "dlfTransaction_ByiKeyProducer2ReferenceInAA").HasFillFactor(90);

            entity.HasIndex(e => e.IKeySecurityInAa, "dlfTransaction_ByiKeySecurityInAA").HasFillFactor(90);

            entity.HasIndex(e => e.IKeyId, "dlfTransaction_byiKeyId").HasFillFactor(90);

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.BFlagAccountNeedsValidation).HasColumnName("bFlagAccountNeedsValidation");
            entity.Property(e => e.BFlagCreateCashBalanceTrans).HasColumnName("bFlagCreateCashBalanceTrans");
            entity.Property(e => e.BFlagFixedValue)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bFlagFixedValue");
            entity.Property(e => e.BFlagMgr1Organization).HasColumnName("bFlagMgr1Organization");
            entity.Property(e => e.BFlagMgrCode1NeedsValidation).HasColumnName("bFlagMgrCode1NeedsValidation");
            entity.Property(e => e.BFlagMoneyMarket).HasColumnName("bFlagMoneyMarket");
            entity.Property(e => e.BFlagRep1Organization).HasColumnName("bFlagRep1Organization");
            entity.Property(e => e.BFlagRep2Organization).HasColumnName("bFlagRep2Organization");
            entity.Property(e => e.BFlagRepCode1NeedsValidation).HasColumnName("bFlagRepCode1NeedsValidation");
            entity.Property(e => e.BFlagRepCode2NeedsValidation).HasColumnName("bFlagRepCode2NeedsValidation");
            entity.Property(e => e.BFlagSecurityFoundViaOld).HasColumnName("bFlagSecurityFoundViaOld");
            entity.Property(e => e.BFlagSecurityNeedsValidation).HasColumnName("bFlagSecurityNeedsValidation");
            entity.Property(e => e.BFlagUnknownTransactionType).HasColumnName("bFlagUnknownTransactionType");
            entity.Property(e => e.CAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAccountNumber");
            entity.Property(e => e.CAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cAlternateID");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CCusip)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusip");
            entity.Property(e => e.CCusipExt)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusipExt");
            entity.Property(e => e.CCustodianCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCustodianCode");
            entity.Property(e => e.CCustodianDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCustodianDescription");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CInvTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cInvTypeCode");
            entity.Property(e => e.CInvTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cInvTypeDescription");
            entity.Property(e => e.CInvestorTaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cInvestorTaxID");
            entity.Property(e => e.CKey1)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cKey1");
            entity.Property(e => e.CKey2)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cKey2");
            entity.Property(e => e.CMgr1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1Code");
            entity.Property(e => e.CMgr1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMgr1Fullname");
            entity.Property(e => e.COfficeNumber)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOfficeNumber");
            entity.Property(e => e.CRelatedKey)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRelatedKey");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CRep2Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Code");
            entity.Property(e => e.CRep2Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cRep2Fullname");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSourceTranTypePrimary)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSourceTranTypePrimary");
            entity.Property(e => e.CSourceTranTypeSecondary)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSourceTranTypeSecondary");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.CTranDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cTranDescription");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DRecord)
                .HasColumnType("date")
                .HasColumnName("dRecord");
            entity.Property(e => e.DSettle)
                .HasColumnType("date")
                .HasColumnName("dSettle");
            entity.Property(e => e.DTranDate)
                .HasColumnType("date")
                .HasColumnName("dTranDate");
            entity.Property(e => e.DTransmittal)
                .HasColumnType("date")
                .HasColumnName("dTransmittal");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GuidLink).HasColumnName("guidLink");
            entity.Property(e => e.ICodeCompany).HasColumnName("iCodeCompany");
            entity.Property(e => e.ICodeCustodian).HasColumnName("iCodeCustodian");
            entity.Property(e => e.ICodeInvType).HasColumnName("iCodeInvType");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.IKeyAccountInAa).HasColumnName("iKeyAccountInAA");
            entity.Property(e => e.IKeyBatch).HasColumnName("iKeyBatch");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IKeyId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iKeyId");
            entity.Property(e => e.IKeyLinkInAa).HasColumnName("iKeyLinkInAA");
            entity.Property(e => e.IKeyManager1InAa).HasColumnName("iKeyManager1InAA");
            entity.Property(e => e.IKeyManager1ReferenceInAa).HasColumnName("iKeyManager1ReferenceInAA");
            entity.Property(e => e.IKeyProcess).HasColumnName("iKeyProcess");
            entity.Property(e => e.IKeyProducer1InAa).HasColumnName("iKeyProducer1InAA");
            entity.Property(e => e.IKeyProducer1ReferenceInAa).HasColumnName("iKeyProducer1ReferenceInAA");
            entity.Property(e => e.IKeyProducer2InAa).HasColumnName("iKeyProducer2InAA");
            entity.Property(e => e.IKeyProducer2ReferenceInAa).HasColumnName("iKeyProducer2ReferenceInAA");
            entity.Property(e => e.IKeySecurityInAa).HasColumnName("iKeySecurityInAA");
            entity.Property(e => e.IKeyTransInAa).HasColumnName("iKeyTransInAA");
            entity.Property(e => e.IKeyTransType).HasColumnName("iKeyTransType");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IShareBalanceFlow).HasColumnName("iShareBalanceFlow");
            entity.Property(e => e.MTranComment)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnType("text")
                .HasColumnName("mTranComment");
            entity.Property(e => e.NRep1ConcessionPct)
                .HasColumnType("numeric(9, 3)")
                .HasColumnName("nRep1ConcessionPct");
            entity.Property(e => e.NRep2ConcessionPct)
                .HasColumnType("numeric(9, 3)")
                .HasColumnName("nRep2ConcessionPct");
            entity.Property(e => e.NTransactionUnitCost)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nTransactionUnitCost");
            entity.Property(e => e.NUnitValue)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nUnitValue");
            entity.Property(e => e.NUnits)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nUnits");
            entity.Property(e => e.NUnitsAfterDistribution)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nUnitsAfterDistribution");
            entity.Property(e => e.YAccruedInterest)
                .HasColumnType("money")
                .HasColumnName("yAccruedInterest");
            entity.Property(e => e.YCommissions)
                .HasColumnType("money")
                .HasColumnName("yCommissions");
            entity.Property(e => e.YCommissionsExcluded)
                .HasColumnType("money")
                .HasColumnName("yCommissionsExcluded");
            entity.Property(e => e.YFees)
                .HasColumnType("money")
                .HasColumnName("yFees");
            entity.Property(e => e.YTotalNet)
                .HasColumnType("money")
                .HasColumnName("yTotalNet");
            entity.Property(e => e.YTotalPrincipal)
                .HasColumnType("money")
                .HasColumnName("yTotalPrincipal");
            entity.Property(e => e.YWithheld)
                .HasColumnType("money")
                .HasColumnName("yWithheld");
        });

        modelBuilder.Entity<DlfTransactionMap>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("dlfTransactionMap");

            entity.HasIndex(e => new { e.IKeyModule, e.CSourcePrimaryTranType, e.CSourceSecondaryTranType }, "dlfTransactionMapBLookup");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BFlagProcess).HasColumnName("bFlagProcess");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSourcePrimaryTranType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSourcePrimaryTranType");
            entity.Property(e => e.CSourceSecondaryTranType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSourceSecondaryTranType");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeDownloadTransactionPlacement).HasColumnName("iCodeDownloadTransactionPlacement");
            entity.Property(e => e.ICodeDownloadTransactionSign).HasColumnName("iCodeDownloadTransactionSign");
            entity.Property(e => e.IKeyModule).HasColumnName("iKeyModule");
            entity.Property(e => e.IKeyTranTypeNegative).HasColumnName("iKeyTranTypeNegative");
            entity.Property(e => e.IKeyTranTypePositive).HasColumnName("iKeyTranTypePositive");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<DstcusipChange>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("PK_DstCusip")
                .IsClustered(false);

            entity.ToTable("DSTCusipChange");

            entity.HasIndex(e => new { e.CNewCusip, e.CNewFundCode }, "DSTCusipChange_ByNew");

            entity.HasIndex(e => new { e.COldCusip, e.COldFundCode }, "DSTCusipChange_ByOld");

            entity.HasIndex(e => e.IKeyId, "IX_DSTCusipChange_byKeyID");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.CEffectiveDate)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cEffectiveDate");
            entity.Property(e => e.CNewCusip)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cNewCusip");
            entity.Property(e => e.CNewFundCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cNewFundCode");
            entity.Property(e => e.CNewFundName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cNewFundName");
            entity.Property(e => e.CNewManagementCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cNewManagementCode");
            entity.Property(e => e.CNewProdName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cNewProdName");
            entity.Property(e => e.COldCusip)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOldCusip");
            entity.Property(e => e.COldFundCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOldFundCode");
            entity.Property(e => e.COldFundName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOldFundName");
            entity.Property(e => e.COldManagementCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOldManagementCode");
            entity.Property(e => e.COldProdName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cOldProdName");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyId");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<Dstsecurity>(entity =>
        {
            entity.HasKey(e => e.GUid)
                .HasName("PK_DstFundcode")
                .IsClustered(false);

            entity.ToTable("DSTSecurity");

            entity.HasIndex(e => e.CSymbol, "DSTSecurity_Symbol");

            entity.HasIndex(e => new { e.CCusip, e.CFundcode }, "DSTSecurity_cusip");

            entity.HasIndex(e => e.IKeyId, "IX_DSTSecurity_byKeyID");

            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.CCusip)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusip");
            entity.Property(e => e.CFundcode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cFundcode");
            entity.Property(e => e.CFundname)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cFundname");
            entity.Property(e => e.CManagementCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cManagementCode");
            entity.Property(e => e.CManagementCompany)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cManagementCompany");
            entity.Property(e => e.CSecurityType)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSecurityType");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.CSystemId)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSystemID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<Fchsecurity>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("FCHSecurity");

            entity.HasIndex(e => e.CSecurityNumber, "FCHSecurity_SecurityNumber");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.CSecurityName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSecurityName");
            entity.Property(e => e.CSecurityNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSecurityNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<InfinetLink>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("InfinetLink");

            entity.HasIndex(e => e.DateSynched, "IX_InfinetLinkSynchDate");

            entity.HasIndex(e => e.IKeyInfinetGroup, "IX_InfinetLink_Group");

            entity.HasIndex(e => new { e.IkeyAaname, e.BUseTaxIdinSynch }, "IX_InfinetLink_IKeyAAName");

            entity.HasIndex(e => e.IKeyCtascustomer, "IX_InfinetLink_IKeyCTAS");

            entity.HasIndex(e => e.BArchived, "IX_InfinetLink_archived");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.BArchived).HasColumnName("bArchived");
            entity.Property(e => e.BUseTaxIdinSynch)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("bUseTaxIDInSynch");
            entity.Property(e => e.DateSynched)
                .HasColumnType("datetime")
                .HasColumnName("dateSynched");
            entity.Property(e => e.IKeyCtascustomer).HasColumnName("iKeyCTASCustomer");
            entity.Property(e => e.IKeyInfinetContact).HasColumnName("iKeyInfinetContact");
            entity.Property(e => e.IKeyInfinetGroup).HasColumnName("iKeyInfinetGroup");
            entity.Property(e => e.IkeyAaname).HasColumnName("IKeyAAName");
        });

        modelBuilder.Entity<InfinetLinkExtension>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("InfinetLinkExtension");

            entity.HasIndex(e => e.IkeyInfinetLink, "IX_InfinetLinkExtension_Link");

            entity.HasIndex(e => e.CTaxidAa, "IX_InfinetLinkExtension_TaxidAA");

            entity.HasIndex(e => e.BFlagTaxidChangeAa, "IX_InfinetLinkExtension_TaxidChangeAA");

            entity.HasIndex(e => e.BFlagTaxidChangeInfinet, "IX_InfinetLinkExtension_TaxidChangeIOL");

            entity.HasIndex(e => e.CTaxIdinfinet, "IX_InfinetLinkExtension_TaxidInfinet");

            entity.HasIndex(e => e.BFlagUpdatedAa, "IX_InfinetLinkExtension_UpdateAA");

            entity.HasIndex(e => e.BFlagUpdatedInfinet, "IX_InfinetLinkExtension_UpdatedIOL");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.BFlagTaxidChangeAa).HasColumnName("bFlagTaxidChangeAA");
            entity.Property(e => e.BFlagTaxidChangeInfinet).HasColumnName("bFlagTaxidChangeInfinet");
            entity.Property(e => e.BFlagUpdatedAa).HasColumnName("bFlagUpdatedAA");
            entity.Property(e => e.BFlagUpdatedInfinet).HasColumnName("bFlagUpdatedInfinet");
            entity.Property(e => e.CPassportAa)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cPassportAA");
            entity.Property(e => e.CRepCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cRepCode");
            entity.Property(e => e.CTaxIdinfinet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cTaxIDInfinet");
            entity.Property(e => e.CTaxidAa)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cTaxidAA");
            entity.Property(e => e.CdriversLicenseAa)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("CDriversLicenseAA");
            entity.Property(e => e.IkeyInfinetLink).HasColumnName("IKeyInfinetLink");
        });

        modelBuilder.Entity<InfinetLinkNewAa>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("InfinetLinkNewAA");

            entity.HasIndex(e => e.IKeyAaname, "IX_InfinetLinkNewAA_AAName");

            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.CDriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDriversLicense");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cPassport");
            entity.Property(e => e.CTaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cTaxID");
            entity.Property(e => e.IKeyAaname).HasColumnName("iKeyAAName");
        });

        modelBuilder.Entity<MsSqledStatementLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("pkmsSQLed_StatementLog");

            entity.ToTable("msSQLed_StatementLog");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.DatabaseName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ExecutionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LongSql)
                .HasColumnType("text")
                .HasColumnName("LongSQL");
            entity.Property(e => e.MachineName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NetworkUser)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ServerName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ServerUser)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ShortSql)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("ShortSQL");
            entity.Property(e => e.StatementError)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength();
        });

        modelBuilder.Entity<Prsfund>(entity =>
        {
            entity.HasKey(e => e.IKeyid);

            entity.ToTable("PRSFund");

            entity.Property(e => e.IKeyid)
                .ValueGeneratedNever()
                .HasColumnName("iKeyid");
            entity.Property(e => e.CCusip)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCusip");
            entity.Property(e => e.CFundId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cFundId");
            entity.Property(e => e.CFundName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cFundName");
            entity.Property(e => e.CSerialid)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialid");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<PrssecurityMatrix>(entity =>
        {
            entity.HasKey(e => e.IKeyId);

            entity.ToTable("PRSSecurityMatrix");

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyID");
            entity.Property(e => e.BFlagFixedValue).HasColumnName("bFlagFixedValue");
            entity.Property(e => e.BFlagOption).HasColumnName("bFlagOption");
            entity.Property(e => e.CCodeId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cCodeID");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CMatrix)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("cMatrix");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('SYS')")
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.ICodeNvstType).HasColumnName("iCodeNvstType");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<SwbmoneyMarket>(entity =>
        {
            entity.HasKey(e => e.IKeyId).HasName("PK_dbo.SWBMoneyMarkets");

            entity.ToTable("SWBMoneyMarkets");

            entity.HasIndex(e => e.CSymbol, "SWBMoneyMarkets_BySymbol");

            entity.HasIndex(e => e.CDownloadCode, "SWBMoneyMarkets_byCode");

            entity.HasIndex(e => e.GUid, "SWBMoneyMarkets_byGuid").IsUnique();

            entity.Property(e => e.IKeyId)
                .ValueGeneratedNever()
                .HasColumnName("iKeyId");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDescription");
            entity.Property(e => e.CDownloadCode)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cDownloadCode");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cSymbol");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("gUid");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<VwAanameKey000001>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAANameKey000001");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwAanameKey001000>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAANameKey001000");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwAppAutomationDataByName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAppAutomationDataByName");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressLocation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Addressee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CarrierRoute)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Country)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DateOfBirth).HasColumnType("date");
            entity.Property(e => e.DateOfMarriage).HasColumnType("date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DependentStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxAreacode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxContact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxExtension)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxLocation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullFax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullPhone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Greeting)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IncomeEarned).HasColumnType("money");
            entity.Property(e => e.IncomeTotal).HasColumnType("money");
            entity.Property(e => e.Industry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JobTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MaritalStatus)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MiddleINITIAL");
            entity.Property(e => e.MiddleName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NetWorth).HasColumnType("money");
            entity.Property(e => e.Occupation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneAreaCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneContact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneLocation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Region)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseDateOfBirth).HasColumnType("date");
            entity.Property(e => e.SpouseFirstName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseLastName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseMiddleInitial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SpouseMiddleINITIAL");
            entity.Property(e => e.SpouseMiddleName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.State)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Tobacco)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwDlfbalance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDLFBalance");

            entity.Property(e => e.CAaproducer1Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAAProducer1Name");
            entity.Property(e => e.CAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountNumber");
            entity.Property(e => e.CAccountTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountTypeCode");
            entity.Property(e => e.CAccountTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountTypeDescription");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CFilename)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFilename");
            entity.Property(e => e.COfficeNumber)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cOfficeNumber");
            entity.Property(e => e.CProcessResultAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultAbbr");
            entity.Property(e => e.CProcessResultDesc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultDesc");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.DBalanceDate)
                .HasColumnType("date")
                .HasColumnName("dBalanceDate");
            entity.Property(e => e.DProcessed)
                .HasColumnType("smalldatetime")
                .HasColumnName("dProcessed");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.YBuyingPower)
                .HasColumnType("money")
                .HasColumnName("yBuyingPower");
            entity.Property(e => e.YCashAvailable)
                .HasColumnType("money")
                .HasColumnName("yCashAvailable");
            entity.Property(e => e.YCashBalance)
                .HasColumnType("money")
                .HasColumnName("yCashBalance");
            entity.Property(e => e.YEquity)
                .HasColumnType("money")
                .HasColumnName("yEquity");
            entity.Property(e => e.YMarginBalance)
                .HasColumnType("money")
                .HasColumnName("yMarginBalance");
            entity.Property(e => e.YMarginMarketValue)
                .HasColumnType("money")
                .HasColumnName("yMarginMarketValue");
            entity.Property(e => e.YMarketValue)
                .HasColumnType("money")
                .HasColumnName("yMarketValue");
            entity.Property(e => e.YMarketValueLong)
                .HasColumnType("money")
                .HasColumnName("yMarketValueLong");
            entity.Property(e => e.YMarketValueShort)
                .HasColumnType("money")
                .HasColumnName("yMarketValueShort");
            entity.Property(e => e.YMoneyMarketBalance)
                .HasColumnType("money")
                .HasColumnName("yMoneyMarketBalance");
            entity.Property(e => e.YSmabalance)
                .HasColumnType("money")
                .HasColumnName("ySMABalance");
        });

        modelBuilder.Entity<VwDlffile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDLFFile");

            entity.Property(e => e.CFilename)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFilename");
            entity.Property(e => e.COriginalFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cOriginalFilename");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.DFile)
                .HasColumnType("smalldatetime")
                .HasColumnName("dFile");
            entity.Property(e => e.DProcessed)
                .HasColumnType("smalldatetime")
                .HasColumnName("dProcessed");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.FileStatusAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FileStatusDesc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IBalances).HasColumnName("iBalances");
            entity.Property(e => e.IBalancesProcessed).HasColumnName("iBalancesProcessed");
            entity.Property(e => e.ICoverages).HasColumnName("iCoverages");
            entity.Property(e => e.ICoveragesProcessed).HasColumnName("iCoveragesProcessed");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IPolicies).HasColumnName("iPolicies");
            entity.Property(e => e.IPoliciesProcessed).HasColumnName("iPoliciesProcessed");
            entity.Property(e => e.IPolicyPositions).HasColumnName("iPolicyPositions");
            entity.Property(e => e.IPolicyPositionsProcessed).HasColumnName("iPolicyPositionsProcessed");
            entity.Property(e => e.IPositions).HasColumnName("iPositions");
            entity.Property(e => e.IPositionsProcessed).HasColumnName("iPositionsProcessed");
            entity.Property(e => e.IPrices).HasColumnName("iPrices");
            entity.Property(e => e.IPricesProcessed).HasColumnName("iPricesProcessed");
            entity.Property(e => e.IRegistrations).HasColumnName("iRegistrations");
            entity.Property(e => e.IRegistrationsProcessed).HasColumnName("iRegistrationsProcessed");
            entity.Property(e => e.ISecurities).HasColumnName("iSecurities");
            entity.Property(e => e.ISecuritiesProcessed).HasColumnName("iSecuritiesProcessed");
            entity.Property(e => e.ITransactions).HasColumnName("iTransactions");
            entity.Property(e => e.ITransactionsProcessed).HasColumnName("iTransactionsProcessed");
        });

        modelBuilder.Entity<VwDlfoutOfBalance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDLFOutOfBalance");

            entity.Property(e => e.BFlagPositionOnly).HasColumnName("bFlagPositionOnly");
            entity.Property(e => e.CAaproducer1Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAAProducer1Name");
            entity.Property(e => e.CAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountNumber");
            entity.Property(e => e.CReinvest)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cReinvest");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CSecurityId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("cSecurityID");
            entity.Property(e => e.CSecurityName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSecurityName");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NOutOfBalance)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nOutOfBalance");
            entity.Property(e => e.NOutOfBalanceAbsoluteValue)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nOutOfBalanceAbsoluteValue");
            entity.Property(e => e.NPosition)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nPosition");
        });

        modelBuilder.Entity<VwDlfpolicyCoverage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDLFPolicyCoverage");

            entity.Property(e => e.CAaproducer1Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAAProducer1Name");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CFilename)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFilename");
            entity.Property(e => e.CPlanAbbreviation)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("cPlanAbbreviation");
            entity.Property(e => e.CPlanDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cPlanDescription");
            entity.Property(e => e.CPlanTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cPlanTypeCode");
            entity.Property(e => e.CPlanTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cPlanTypeDescription");
            entity.Property(e => e.CPolicyNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPolicyNumber");
            entity.Property(e => e.CProcessResultAbbrCoverage)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cProcessResultAbbr_Coverage");
            entity.Property(e => e.CProcessResultAbbrPolicy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultAbbr_Policy");
            entity.Property(e => e.CProcessResultDescCoverage)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cProcessResultDesc_Coverage");
            entity.Property(e => e.CProcessResultDescPolicy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultDesc_Policy");
            entity.Property(e => e.CRegistration)
                .IsUnicode(false)
                .HasColumnName("cRegistration");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CReportMessageCoverage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage_Coverage");
            entity.Property(e => e.CReportMessagePolicy)
                .IsUnicode(false)
                .HasColumnName("cReportMessage_Policy");
            entity.Property(e => e.CWhoAdded)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.ClassDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DEffective)
                .HasColumnType("date")
                .HasColumnName("dEffective");
            entity.Property(e => e.DProcessed)
                .HasColumnType("smalldatetime")
                .HasColumnName("dProcessed");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Guid).HasColumnName("guid");
            entity.Property(e => e.ICodeProcessResultCoverage).HasColumnName("iCodeProcessResult_Coverage");
            entity.Property(e => e.ICodeProcessResultPolicy).HasColumnName("iCodeProcessResult_Policy");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.OwnerFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.YBenefitAmount)
                .HasColumnType("money")
                .HasColumnName("yBenefitAmount");
            entity.Property(e => e.YCashValue)
                .HasColumnType("money")
                .HasColumnName("yCashValue");
            entity.Property(e => e.YPremiumToDate)
                .HasColumnType("money")
                .HasColumnName("yPremiumToDate");
        });

        modelBuilder.Entity<VwDlfpolicyPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDLFPolicyPosition");

            entity.Property(e => e.CAaproducer1Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAAProducer1Name");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CFilename)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFilename");
            entity.Property(e => e.CPlanAbbreviation)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPlanAbbreviation");
            entity.Property(e => e.CPlanDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPlanDescription");
            entity.Property(e => e.CPlanTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPlanTypeCode");
            entity.Property(e => e.CPlanTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPlanTypeDescription");
            entity.Property(e => e.CPolicyNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPolicyNumber");
            entity.Property(e => e.CProcessResultAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultAbbr");
            entity.Property(e => e.CProcessResultDesc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultDesc");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.ClassDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DPosition)
                .HasColumnType("date")
                .HasColumnName("dPosition");
            entity.Property(e => e.DPremiumPaidThru)
                .HasColumnType("date")
                .HasColumnName("dPremiumPaidThru");
            entity.Property(e => e.DProcessed)
                .HasColumnType("smalldatetime")
                .HasColumnName("dProcessed");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.OwnerFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.YCashValue)
                .HasColumnType("money")
                .HasColumnName("yCashValue");
            entity.Property(e => e.YLoanAmount)
                .HasColumnType("money")
                .HasColumnName("yLoanAmount");
            entity.Property(e => e.YMaxAvailableLoan)
                .HasColumnType("money")
                .HasColumnName("yMaxAvailableLoan");
            entity.Property(e => e.YPremiumToDate)
                .HasColumnType("money")
                .HasColumnName("yPremiumToDate");
            entity.Property(e => e.YSurrenderCharge)
                .HasColumnType("money")
                .HasColumnName("ySurrenderCharge");
            entity.Property(e => e.YSurrenderValue)
                .HasColumnType("money")
                .HasColumnName("ySurrenderValue");
        });

        modelBuilder.Entity<VwDlfposition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDLFPosition");

            entity.Property(e => e.BFlagMoneyMarket).HasColumnName("bFlagMoneyMarket");
            entity.Property(e => e.CAaproducer1Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAAProducer1Name");
            entity.Property(e => e.CAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountNumber");
            entity.Property(e => e.CAccountObjectiveCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountObjectiveCode");
            entity.Property(e => e.CAccountObjectiveDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountObjectiveDescription");
            entity.Property(e => e.CAccountTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountTypeCode");
            entity.Property(e => e.CAccountTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountTypeDescription");
            entity.Property(e => e.CAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAlternateID");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CCusip)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCusip");
            entity.Property(e => e.CCusipExt)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCusipExt");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CFilename)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFilename");
            entity.Property(e => e.CInvTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInvTypeCode");
            entity.Property(e => e.CInvTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInvTypeDescription");
            entity.Property(e => e.COfficeNumber)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cOfficeNumber");
            entity.Property(e => e.CProcessResultAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultAbbr");
            entity.Property(e => e.CProcessResultDesc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultDesc");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSecurityId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("cSecurityID");
            entity.Property(e => e.CSecurityName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSecurityName");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.DAcquiredAccount)
                .HasColumnType("date")
                .HasColumnName("dAcquiredAccount");
            entity.Property(e => e.DAcquiredInvestment)
                .HasColumnType("date")
                .HasColumnName("dAcquiredInvestment");
            entity.Property(e => e.DMaturity)
                .HasColumnType("date")
                .HasColumnName("dMaturity");
            entity.Property(e => e.DProcessed)
                .HasColumnType("smalldatetime")
                .HasColumnName("dProcessed");
            entity.Property(e => e.DValue)
                .HasColumnType("date")
                .HasColumnName("dValue");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NNumUnits)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nNumUnits");
            entity.Property(e => e.NPoolFactor)
                .HasColumnType("numeric(12, 9)")
                .HasColumnName("nPoolFactor");
            entity.Property(e => e.NPriceFactor)
                .HasColumnType("numeric(12, 6)")
                .HasColumnName("nPriceFactor");
            entity.Property(e => e.NUnitFactor)
                .HasColumnType("numeric(12, 6)")
                .HasColumnName("nUnitFactor");
            entity.Property(e => e.NUnitValue)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nUnitValue");
            entity.Property(e => e.YCostBasis)
                .HasColumnType("money")
                .HasColumnName("yCostBasis");
            entity.Property(e => e.YLoanValue)
                .HasColumnType("money")
                .HasColumnName("yLoanValue");
            entity.Property(e => e.YSurrenderCharge)
                .HasColumnType("money")
                .HasColumnName("ySurrenderCharge");
            entity.Property(e => e.YSurrenderValue)
                .HasColumnType("money")
                .HasColumnName("ySurrenderValue");
            entity.Property(e => e.YValue)
                .HasColumnType("money")
                .HasColumnName("yValue");
        });

        modelBuilder.Entity<VwDlfregistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDLFRegistration");

            entity.Property(e => e.BFlagFixedValue).HasColumnName("bFlagFixedValue");
            entity.Property(e => e.BFlagMoneyMarket).HasColumnName("bFlagMoneyMarket");
            entity.Property(e => e.CAaproducer1Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAAProducer1Name");
            entity.Property(e => e.CAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountNumber");
            entity.Property(e => e.CAccountObjectiveCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountObjectiveCode");
            entity.Property(e => e.CAccountObjectiveDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountObjectiveDescription");
            entity.Property(e => e.CAccountTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountTypeCode");
            entity.Property(e => e.CAccountTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountTypeDescription");
            entity.Property(e => e.CAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAlternateID");
            entity.Property(e => e.CCategoryCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCategoryCode");
            entity.Property(e => e.CCategoryDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCategoryDescription");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CCusip)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCusip");
            entity.Property(e => e.CCusipExt)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCusipExt");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CFilename)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFilename");
            entity.Property(e => e.CInvTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInvTypeCode");
            entity.Property(e => e.CInvTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cInvTypeDescription");
            entity.Property(e => e.CProcessResultAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultAbbr");
            entity.Property(e => e.CProcessResultDesc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultDesc");
            entity.Property(e => e.CRegistration)
                .IsUnicode(false)
                .HasColumnName("cRegistration");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSectorCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSectorCode");
            entity.Property(e => e.CSectorDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSectorDescription");
            entity.Property(e => e.CSecurityId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("cSecurityID");
            entity.Property(e => e.CSecurityName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSecurityName");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.DAcquiredAccount)
                .HasColumnType("date")
                .HasColumnName("dAcquiredAccount");
            entity.Property(e => e.DAcquiredInvestment)
                .HasColumnType("date")
                .HasColumnName("dAcquiredInvestment");
            entity.Property(e => e.DProcessed)
                .HasColumnType("smalldatetime")
                .HasColumnName("dProcessed");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.YContributions)
                .HasColumnType("money")
                .HasColumnName("yContributions");
            entity.Property(e => e.YCostBasis)
                .HasColumnType("money")
                .HasColumnName("yCostBasis");
        });

        modelBuilder.Entity<VwDlftransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDLFTransaction");

            entity.Property(e => e.BFlagUnknownTransactionType).HasColumnName("bFlagUnknownTransactionType");
            entity.Property(e => e.CAaproducer1Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAAProducer1Name");
            entity.Property(e => e.CAatransactionCodeAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAATransactionCodeAbbr");
            entity.Property(e => e.CAatransactionCodeDesc)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAATransactionCodeDesc");
            entity.Property(e => e.CAccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAccountNumber");
            entity.Property(e => e.CAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cAlternateID");
            entity.Property(e => e.CCompanyCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyCode");
            entity.Property(e => e.CCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCompanyDescription");
            entity.Property(e => e.CCusip)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCusip");
            entity.Property(e => e.CCusipExt)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCusipExt");
            entity.Property(e => e.CDescription)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDescription");
            entity.Property(e => e.CFilename)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFilename");
            entity.Property(e => e.CKey1)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKey1");
            entity.Property(e => e.CKey2)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cKey2");
            entity.Property(e => e.COfficeNumber)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cOfficeNumber");
            entity.Property(e => e.CProcessResultAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultAbbr");
            entity.Property(e => e.CProcessResultDesc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cProcessResultDesc");
            entity.Property(e => e.CRelatedKey)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRelatedKey");
            entity.Property(e => e.CRep1Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Code");
            entity.Property(e => e.CRep1Fullname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRep1Fullname");
            entity.Property(e => e.CReportMessage)
                .IsUnicode(false)
                .HasColumnName("cReportMessage");
            entity.Property(e => e.CSecurityId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("cSecurityID");
            entity.Property(e => e.CSecurityName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSecurityName");
            entity.Property(e => e.CSourceTranTypePrimary)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSourceTranTypePrimary");
            entity.Property(e => e.CSourceTranTypeSecondary)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSourceTranTypeSecondary");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.CTranDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTranDescription");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.DProcessed)
                .HasColumnType("smalldatetime")
                .HasColumnName("dProcessed");
            entity.Property(e => e.DSettle)
                .HasColumnType("date")
                .HasColumnName("dSettle");
            entity.Property(e => e.DTranDate)
                .HasColumnType("date")
                .HasColumnName("dTranDate");
            entity.Property(e => e.DTransmittal)
                .HasColumnType("date")
                .HasColumnName("dTransmittal");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.ICodeProcessResult).HasColumnName("iCodeProcessResult");
            entity.Property(e => e.IKeyFile).HasColumnName("iKeyFile");
            entity.Property(e => e.IShareBalanceFlow).HasColumnName("iShareBalanceFlow");
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MTranComment)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("mTranComment");
            entity.Property(e => e.NTransactionUnitCost)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nTransactionUnitCost");
            entity.Property(e => e.NUnitValue)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nUnitValue");
            entity.Property(e => e.NUnits)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("nUnits");
            entity.Property(e => e.YAccruedInterest)
                .HasColumnType("money")
                .HasColumnName("yAccruedInterest");
            entity.Property(e => e.YCommissions)
                .HasColumnType("money")
                .HasColumnName("yCommissions");
            entity.Property(e => e.YFees)
                .HasColumnType("money")
                .HasColumnName("yFees");
            entity.Property(e => e.YTotalNet)
                .HasColumnType("money")
                .HasColumnName("yTotalNet");
            entity.Property(e => e.YTotalPrincipal)
                .HasColumnType("money")
                .HasColumnName("yTotalPrincipal");
            entity.Property(e => e.YWithheld)
                .HasColumnType("money")
                .HasColumnName("yWithheld");
        });

        modelBuilder.Entity<VwDstsecurity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDSTSecurity");

            entity.Property(e => e.CCusip)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCusip");
            entity.Property(e => e.CFundcode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cFundcode");
            entity.Property(e => e.CFundname)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cFundname");
            entity.Property(e => e.CManagementCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cManagementCode");
            entity.Property(e => e.CManagementCompany)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cManagementCompany");
            entity.Property(e => e.CSecurityType)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSecurityType");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSymbol)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSymbol");
            entity.Property(e => e.CSystemId)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSystemID");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasColumnType("datetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("datetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyID");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
        });

        modelBuilder.Entity<VwExchangeAccountUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwExchangeAccountUser");

            entity.Property(e => e.BFlagArchiveAllAccounts).HasColumnName("bFlagArchiveAllAccounts");
            entity.Property(e => e.BFlagArchiveIncomingEmail).HasColumnName("bFlagArchiveIncomingEmail");
            entity.Property(e => e.BFlagArchiveOutgoingEmail).HasColumnName("bFlagArchiveOutgoingEmail");
            entity.Property(e => e.BFlagDoNotArchiveAttachments).HasColumnName("bFlagDoNotArchiveAttachments");
            entity.Property(e => e.BFlagEnableExchangeSynch).HasColumnName("bFlagEnableExchangeSynch");
            entity.Property(e => e.BFlagForwardIncomingEmail).HasColumnName("bFlagForwardIncomingEmail");
            entity.Property(e => e.BFlagForwardOutgoingEmail).HasColumnName("bFlagForwardOutgoingEmail");
            entity.Property(e => e.BFlagLoggedIn).HasColumnName("bFlagLoggedIn");
            entity.Property(e => e.BFlagOverrideAttachmentArchivePath).HasColumnName("bFlagOverrideAttachmentArchivePath");
            entity.Property(e => e.BFlagServiceBirthdaysAnniversaries).HasColumnName("bFlagServiceBirthdaysAnniversaries");
            entity.Property(e => e.BFlagServiceSyncThisUserGlobal).HasColumnName("bFlagServiceSyncThisUserGlobal");
            entity.Property(e => e.BFlagServiceSynchCalendar).HasColumnName("bFlagServiceSynchCalendar");
            entity.Property(e => e.BFlagServiceSynchContacts).HasColumnName("bFlagServiceSynchContacts");
            entity.Property(e => e.BFlagServiceSynchEmail).HasColumnName("bFlagServiceSynchEmail");
            entity.Property(e => e.BFlagUseEmailCategories).HasColumnName("bFlagUseEmailCategories");
            entity.Property(e => e.BFlagUsingExchange).HasColumnName("bFlagUsingExchange");
            entity.Property(e => e.BFlagUsingOl365).HasColumnName("bFlagUsingOL365");
            entity.Property(e => e.BRealTimeContactsExport).HasColumnName("bRealTimeContactsExport");
            entity.Property(e => e.BRealTimeEventsExport).HasColumnName("bRealTimeEventsExport");
            entity.Property(e => e.CArchiveAddresses)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("cArchiveAddresses");
            entity.Property(e => e.CExchangeAutodiscoveryEmail)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("cExchangeAutodiscoveryEmail");
            entity.Property(e => e.CExchangeDomain)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("cExchangeDomain");
            entity.Property(e => e.CExchangeEmail)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("cExchangeEmail");
            entity.Property(e => e.CExchangeLoginId)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("cExchangeLoginID");
            entity.Property(e => e.CExchangePassword)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("cExchangePassword");
            entity.Property(e => e.CExchangeWebUri)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("cExchangeWebURI");
            entity.Property(e => e.CForwardEmail)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("cForwardEmail");
            entity.Property(e => e.CName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cName");
            entity.Property(e => e.COutlookAttachmentArchiveUserLocation)
                .IsUnicode(false)
                .HasColumnName("cOutlookAttachmentArchiveUserLocation");
            entity.Property(e => e.CPassword)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPassword");
            entity.Property(e => e.CRecordStamp)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cRecordStamp");
            entity.Property(e => e.CSelectedSynchOption)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("cSelectedSynchOption");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CServiceCategory)
                .IsUnicode(false)
                .HasColumnName("cServiceCategory");
            entity.Property(e => e.CStationName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cStationName");
            entity.Property(e => e.CUserId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cUserID");
            entity.Property(e => e.CUserInitials)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cUserInitials");
            entity.Property(e => e.CViewName)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cViewName");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IArchiveCheckDays).HasColumnName("iArchiveCheckDays");
            entity.Property(e => e.IArchiveDaysOption).HasColumnName("iArchiveDaysOption");
            entity.Property(e => e.IConnectionType).HasColumnName("iConnectionType");
            entity.Property(e => e.IKeyCalendar).HasColumnName("iKeyCalendar");
            entity.Property(e => e.IKeyCurrentView).HasColumnName("iKeyCurrentView");
            entity.Property(e => e.IKeyId).HasColumnName("iKeyId");
            entity.Property(e => e.IKeyRealTimeSyncProducer).HasColumnName("iKeyRealTimeSyncProducer");
            entity.Property(e => e.IKeyRole).HasColumnName("iKeyRole");
            entity.Property(e => e.IKeyServiceProducer).HasColumnName("iKeyServiceProducer");
            entity.Property(e => e.IKeyUser).HasColumnName("iKeyUser");
            entity.Property(e => e.IMailboxSearchOption).HasColumnName("iMailboxSearchOption");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.ISyncOption).HasColumnName("iSyncOption");
            entity.Property(e => e.TAalastEmailSynch)
                .HasColumnType("smalldatetime")
                .HasColumnName("tAALastEmailSynch");
            entity.Property(e => e.TServiceLastEmailSynch)
                .HasColumnType("smalldatetime")
                .HasColumnName("tServiceLastEmailSynch");
        });

        modelBuilder.Entity<VwExportClient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwExportClient");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressLocation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Addressee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BusinessName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanCallYn).HasColumnName("CanCallYN");
            entity.Property(e => e.CanEmailYn).HasColumnName("CanEmailYN");
            entity.Property(e => e.CanMailYn).HasColumnName("CanMailYN");
            entity.Property(e => e.CarrierRoute)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Country)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.County)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DateOfBirth).HasColumnType("date");
            entity.Property(e => e.DateOfMarriage).HasColumnType("date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DependentStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmailContact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmailGreeting)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxAreacode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxContact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxExtension)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxLocation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FaxNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullFax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullNickName)
                .HasMaxLength(133)
                .IsUnicode(false);
            entity.Property(e => e.FullPhone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Greeting)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HeadOfHouseholdYn).HasColumnName("HeadOfHouseholdYN");
            entity.Property(e => e.HouseholdName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IncomeEarned).HasColumnType("money");
            entity.Property(e => e.IncomeTotal).HasColumnType("money");
            entity.Property(e => e.Industry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JobTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MaritalStatus)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MiddleINITIAL");
            entity.Property(e => e.MiddleName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MonthDayDobsort).HasColumnName("MonthDayDOBSort");
            entity.Property(e => e.MonthDayOfBirth)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NameFlexField01Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField02Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField03Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField04Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField05Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.NameFlexField06Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.NameFlexField09Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField10Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField11Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField12Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField13Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField14Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField15Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField16Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField17Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField18Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField19Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField20Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField21Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField22Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField23Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField24Text)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NameFlexField25Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField26Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField27Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField28Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField29Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField30Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameStatus)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameTypeAbbrPrimary)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameTypeDescPrimary)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NetWorth).HasColumnType("money");
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Occupation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrganizationYn).HasColumnName("OrganizationYN");
            entity.Property(e => e.PhoneAreaCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneContact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneLocation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryAddrYn).HasColumnName("PrimaryAddrYN");
            entity.Property(e => e.PrimaryPhoneYn).HasColumnName("PrimaryPhoneYN");
            entity.Property(e => e.PrimaryProducer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProducerYn).HasColumnName("ProducerYN");
            entity.Property(e => e.Region)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseDateOfBirth).HasColumnType("date");
            entity.Property(e => e.SpouseFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseNickName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.State)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Tobacco)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueHouseholdId).HasColumnName("UniqueHouseholdID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ZipPostalCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwInsuranceCommissionTransactionSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInsuranceCommissionTransactionSummary");

            entity.Property(e => e.AgencyDistributionsDue).HasColumnType("money");
            entity.Property(e => e.AgencyDistributionsPaid).HasColumnType("money");
            entity.Property(e => e.AgencyGrossDue).HasColumnType("money");
            entity.Property(e => e.AgencyGrossPaid).HasColumnType("money");
            entity.Property(e => e.AgencyName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AgencyNetDue).HasColumnType("money");
            entity.Property(e => e.AgencyNetPaid).HasColumnType("money");
            entity.Property(e => e.BFlagContainsAdjustment).HasColumnName("bFlagContainsAdjustment");
            entity.Property(e => e.BFlagContainsBasePremium).HasColumnName("bFlagContainsBasePremium");
            entity.Property(e => e.BFlagContainsChargeback).HasColumnName("bFlagContainsChargeback");
            entity.Property(e => e.BFlagContainsExcess1Premium).HasColumnName("bFlagContainsExcess1Premium");
            entity.Property(e => e.BFlagContainsExcess2Premium).HasColumnName("bFlagContainsExcess2Premium");
            entity.Property(e => e.BFlagContainsFixedAmount).HasColumnName("bFlagContainsFixedAmount");
            entity.Property(e => e.BFlagContainsNormal).HasColumnName("bFlagContainsNormal");
            entity.Property(e => e.BFlagContainsOverride1).HasColumnName("bFlagContainsOverride1");
            entity.Property(e => e.BFlagContainsOverride2).HasColumnName("bFlagContainsOverride2");
            entity.Property(e => e.BFlagContainsParticipant).HasColumnName("bFlagContainsParticipant");
            entity.Property(e => e.BFlagContainsTrailer).HasColumnName("bFlagContainsTrailer");
            entity.Property(e => e.Comment)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.CoveragePlan)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoveragePrimaryInsuredSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoveragePrimaryInsuredUniqueId).HasColumnName("CoveragePrimaryInsuredUniqueID");
            entity.Property(e => e.DueDate).HasColumnType("date");
            entity.Property(e => e.FirstRenewal)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ManagersDirectDue).HasColumnType("money");
            entity.Property(e => e.ManagersDirectPaid).HasColumnType("money");
            entity.Property(e => e.ManagersGrossDue).HasColumnType("money");
            entity.Property(e => e.ManagersGrossPaid).HasColumnType("money");
            entity.Property(e => e.NormalTrailer)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PaidDateMax).HasColumnType("date");
            entity.Property(e => e.PaidDateMin).HasColumnType("date");
            entity.Property(e => e.PolicyCompanyAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PolicyManager1UniqueId).HasColumnName("PolicyManager1UniqueID");
            entity.Property(e => e.PolicyManager2UniqueId).HasColumnName("PolicyManager2UniqueID");
            entity.Property(e => e.PolicyManager3UniqueId).HasColumnName("PolicyManager3UniqueID");
            entity.Property(e => e.PolicyManager4UniqueId).HasColumnName("PolicyManager4UniqueID");
            entity.Property(e => e.PolicyNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false);
            entity.Property(e => e.PolicyOwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PolicyOwnerUniqueId).HasColumnName("PolicyOwnerUniqueID");
            entity.Property(e => e.PolicyProducer1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolicyProducer1UniqueId).HasColumnName("PolicyProducer1UniqueID");
            entity.Property(e => e.PolicyProducer2UniqueId).HasColumnName("PolicyProducer2UniqueID");
            entity.Property(e => e.PolicyProducer3UniqueId).HasColumnName("PolicyProducer3UniqueID");
            entity.Property(e => e.PolicyProducer4UniqueId).HasColumnName("PolicyProducer4UniqueID");
            entity.Property(e => e.ProducersDirectDue).HasColumnType("money");
            entity.Property(e => e.ProducersDirectPaid).HasColumnType("money");
            entity.Property(e => e.ProducersGrossDue).HasColumnType("money");
            entity.Property(e => e.ProducersGrossPaid).HasColumnType("money");
            entity.Property(e => e.RateTableSetName)
                .IsRequired()
                .HasMaxLength(65)
                .IsUnicode(false);
            entity.Property(e => e.TotalDirectDue).HasColumnType("money");
            entity.Property(e => e.TotalDirectPaid).HasColumnType("money");
            entity.Property(e => e.TransStatusDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueAdjustmentId).HasColumnName("UniqueAdjustmentID");
            entity.Property(e => e.UniqueAgencyId).HasColumnName("UniqueAgencyID");
            entity.Property(e => e.UniqueBaseCoverageId).HasColumnName("UniqueBaseCoverageID");
            entity.Property(e => e.UniqueBatchGuid).HasColumnName("UniqueBatchGUID");
            entity.Property(e => e.UniqueCompanyId).HasColumnName("UniqueCompanyID");
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueCoverageTypeId).HasColumnName("UniqueCoverageTypeID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniquePrimaryProducerId).HasColumnName("UniquePrimaryProducerID");
            entity.Property(e => e.UniqueRateTableSetId).HasColumnName("UniqueRateTableSetID");
            entity.Property(e => e.UniqueStatusId).HasColumnName("UniqueStatusID");
            entity.Property(e => e.UniqueTransactionId).HasColumnName("UniqueTransactionID");
        });

        modelBuilder.Entity<VwMobileClient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMobileClient");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Addressee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BusinessName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CarrierRoute)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CityStateZip)
                .HasMaxLength(48)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.County)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DateOfBirth).HasColumnType("date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DlexpirationDate)
                .HasColumnType("date")
                .HasColumnName("DLExpirationDate");
            entity.Property(e => e.DlissueDate)
                .HasColumnType("date")
                .HasColumnName("DLIssueDate");
            entity.Property(e => e.DriversLicenseId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DriversLicenseID");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullNickName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Greeting)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MiddleINITIAL");
            entity.Property(e => e.MiddleName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MonthDayDobsort).HasColumnName("MonthDayDOBSort");
            entity.Property(e => e.MonthDayOfBirth)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NameStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameTypeAbbrPrimary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameTypeDescPrimary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Occupation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrganizationYn).HasColumnName("OrganizationYN");
            entity.Property(e => e.SortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.State)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TaxID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueNameTypeCodeId).HasColumnName("UniqueNameTypeCodeID");
            entity.Property(e => e.ZipPostalCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwNameFilter0000000106>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter0000000106");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter0000000107>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter0000000107");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter09999999>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter09999999");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000019>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000019");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000028>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000028");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000030>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000030");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000033>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000033");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000034>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000034");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000037>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000037");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000038>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000038");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000040>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000040");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000046>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000046");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000048>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000048");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000049>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000049");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwNameFilter10000058>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNameFilter10000058");

            entity.Property(e => e.BFlagAccountPlaceholder).HasColumnName("bFlagAccountPlaceholder");
            entity.Property(e => e.BFlagOrganization).HasColumnName("bFlagOrganization");
            entity.Property(e => e.Bflagemail).HasColumnName("bflagemail");
            entity.Property(e => e.Bflagheadofhouse).HasColumnName("bflagheadofhouse");
            entity.Property(e => e.Bflagmail).HasColumnName("bflagmail");
            entity.Property(e => e.Bflagpdcr).HasColumnName("bflagpdcr");
            entity.Property(e => e.Bflagphone).HasColumnName("bflagphone");
            entity.Property(e => e.CApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey1");
            entity.Property(e => e.CApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey2");
            entity.Property(e => e.CApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cAPIKey3");
            entity.Property(e => e.CCitizen)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cCitizen");
            entity.Property(e => e.CDependantStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cDependantStatus");
            entity.Property(e => e.CFacebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cFacebook");
            entity.Property(e => e.CGooglePlus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGooglePlus");
            entity.Property(e => e.CGreencard)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cGreencard");
            entity.Property(e => e.CLinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cLinkedIn");
            entity.Property(e => e.CMedicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cMedicare");
            entity.Property(e => e.CPassport)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cPassport");
            entity.Property(e => e.CPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cPrefix");
            entity.Property(e => e.CRiskAlyzeRiskNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cRiskAlyzeRiskNumber");
            entity.Property(e => e.CSerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cSerialId");
            entity.Property(e => e.CSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cSuffix");
            entity.Property(e => e.CTwitter)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cTwitter");
            entity.Property(e => e.CWhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoAdded");
            entity.Property(e => e.CWhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cWhoChange");
            entity.Property(e => e.CdriversLicense)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDriversLicense");
            entity.Property(e => e.Cdwlid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cdwlid");
            entity.Property(e => e.Cfirstname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cfirstname");
            entity.Property(e => e.Clastname)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("clastname");
            entity.Property(e => e.Cmiddle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cmiddle");
            entity.Property(e => e.Cnameid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnameid");
            entity.Property(e => e.Cnickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cnickname");
            entity.Property(e => e.Csortname)
                .IsRequired()
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("csortname");
            entity.Property(e => e.Ctaxid)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxid");
            entity.Property(e => e.CtaxidLookup)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ctaxidLookup");
            entity.Property(e => e.DDriversLicenseExpiration)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseExpiration");
            entity.Property(e => e.DDriversLicenseIssue)
                .HasColumnType("date")
                .HasColumnName("dDriversLicenseIssue");
            entity.Property(e => e.DGreencardExpiration)
                .HasColumnType("date")
                .HasColumnName("dGreencardExpiration");
            entity.Property(e => e.DGreencardIssue)
                .HasColumnType("date")
                .HasColumnName("dGreencardIssue");
            entity.Property(e => e.DLastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("dLastChange");
            entity.Property(e => e.DLastSignificantChangeUtc)
                .HasColumnType("datetime")
                .HasColumnName("dLastSignificantChangeUTC");
            entity.Property(e => e.DPassportExpiration)
                .HasColumnType("date")
                .HasColumnName("dPassportExpiration");
            entity.Property(e => e.DPassportIssue)
                .HasColumnType("date")
                .HasColumnName("dPassportIssue");
            entity.Property(e => e.DPatriotForm)
                .HasColumnType("date")
                .HasColumnName("dPatriotForm");
            entity.Property(e => e.DWhenAdded)
                .HasColumnType("smalldatetime")
                .HasColumnName("dWhenAdded");
            entity.Property(e => e.Ddob)
                .HasColumnType("date")
                .HasColumnName("ddob");
            entity.Property(e => e.Dmarried)
                .HasColumnType("date")
                .HasColumnName("dmarried");
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.IAnniversary).HasColumnName("iAnniversary");
            entity.Property(e => e.IBirthday).HasColumnName("iBirthday");
            entity.Property(e => e.ICodeDriversLicenseState).HasColumnName("iCodeDriversLicenseState");
            entity.Property(e => e.ICodeGender).HasColumnName("iCodeGender");
            entity.Property(e => e.ICodeIndustry).HasColumnName("iCodeIndustry");
            entity.Property(e => e.ICodeMaritalStatus).HasColumnName("iCodeMaritalStatus");
            entity.Property(e => e.ICodePhase).HasColumnName("iCodePhase");
            entity.Property(e => e.ICodeRecordCreationSource).HasColumnName("iCodeRecordCreationSource");
            entity.Property(e => e.ICodeResidency).HasColumnName("iCodeResidency");
            entity.Property(e => e.ICodeTobacco).HasColumnName("iCodeTobacco");
            entity.Property(e => e.IKeyAddress).HasColumnName("iKeyAddress");
            entity.Property(e => e.IKeyEmail).HasColumnName("iKeyEmail");
            entity.Property(e => e.IKeyFax).HasColumnName("iKeyFax");
            entity.Property(e => e.IKeyFlex).HasColumnName("iKeyFlex");
            entity.Property(e => e.IKeyImportantInfoNote).HasColumnName("iKeyImportantInfoNote");
            entity.Property(e => e.IKeyMailingList).HasColumnName("iKeyMailingList");
            entity.Property(e => e.IKeyNameType).HasColumnName("iKeyNameType");
            entity.Property(e => e.IKeyPhone).HasColumnName("iKeyPhone");
            entity.Property(e => e.IKeyPrimaryHouseHold).HasColumnName("iKeyPrimaryHouseHold");
            entity.Property(e => e.IKeyPrimaryImage).HasColumnName("iKeyPrimaryImage");
            entity.Property(e => e.IKeyProducerReference).HasColumnName("iKeyProducerReference");
            entity.Property(e => e.IKeyUrl).HasColumnName("iKeyUrl");
            entity.Property(e => e.IRecVersion).HasColumnName("iRecVersion");
            entity.Property(e => e.IRiskAlyzeId).HasColumnName("iRiskAlyzeID");
            entity.Property(e => e.Icodeoccupation).HasColumnName("icodeoccupation");
            entity.Property(e => e.Icodestatus).HasColumnName("icodestatus");
            entity.Property(e => e.IkeyTop).HasColumnName("ikeyTop");
            entity.Property(e => e.IkeyVendor).HasColumnName("ikeyVendor");
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.Ikeyoffice).HasColumnName("ikeyoffice");
            entity.Property(e => e.Ikeypdcr).HasColumnName("ikeypdcr");
            entity.Property(e => e.Ikeyspouse).HasColumnName("ikeyspouse");
            entity.Property(e => e.Inumofdeps).HasColumnName("inumofdeps");
            entity.Property(e => e.NTaxBracket)
                .HasColumnType("numeric(7, 3)")
                .HasColumnName("nTaxBracket");
            entity.Property(e => e.YMarketVal)
                .HasColumnType("money")
                .HasColumnName("yMarketVal");
            entity.Property(e => e.Yearnedinc)
                .HasColumnType("money")
                .HasColumnName("yearnedinc");
            entity.Property(e => e.Ynetworth)
                .HasColumnType("money")
                .HasColumnName("ynetworth");
            entity.Property(e => e.Ytotalincome)
                .HasColumnType("money")
                .HasColumnName("ytotalincome");
        });

        modelBuilder.Entity<VwOutlookExportName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOutlookExportName");

            entity.Property(e => e.Anniv).HasColumnType("date");
            entity.Property(e => e.Dob)
                .HasColumnType("date")
                .HasColumnName("DOB");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GUid).HasColumnName("gUid");
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Ikeyid).HasColumnName("ikeyid");
            entity.Property(e => e.LastChange).HasColumnType("smalldatetime");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Middle)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Nickname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Occup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SerialID");
            entity.Property(e => e.Spouse)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TaxID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwPlanningExportAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPlanningExport_Address");

            entity.Property(e => e.AddressGuid).HasColumnName("AddressGUID");
            entity.Property(e => e.AddressTypeAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Addressee)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BusinessName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CityStateZip)
                .HasMaxLength(48)
                .IsUnicode(false);
            entity.Property(e => e.Greeting)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameGuid).HasColumnName("NameGUID");
            entity.Property(e => e.State)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Street1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Street2)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Street3)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.ZipCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPlanningExportInsured>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPlanningExport_Insured");

            entity.Property(e => e.CoverageGuid).HasColumnName("CoverageGUID");
            entity.Property(e => e.InsuredFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsuredNameGuid).HasColumnName("InsuredNameGUID");
            entity.Property(e => e.InsuredRelationshipAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsuredRelationshipDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsuredRelationshipGuid).HasColumnName("InsuredRelationshipGUID");
            entity.Property(e => e.PolicyGuid).HasColumnName("PolicyGUID");
            entity.Property(e => e.PolicyOwnerNameGuid).HasColumnName("PolicyOwnerNameGUID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwPlanningExportInvestment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPlanningExport_Investment");

            entity.Property(e => e.AccountBasis).HasColumnType("money");
            entity.Property(e => e.AccountCloseDate).HasColumnType("date");
            entity.Property(e => e.AccountGuid).HasColumnName("AccountGUID");
            entity.Property(e => e.AccountMarketValue).HasColumnType("money");
            entity.Property(e => e.AccountNetCashFlow).HasColumnType("money");
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountObjectiveAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountObjectiveDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountOpenDate).HasColumnType("date");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountTypeAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AssetAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AssetAlternateID");
            entity.Property(e => e.AssetBasis).HasColumnType("money");
            entity.Property(e => e.AssetCusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AssetCUSIP");
            entity.Property(e => e.AssetGuid).HasColumnName("AssetGUID");
            entity.Property(e => e.AssetLiquidationDate).HasColumnType("date");
            entity.Property(e => e.AssetMarketValue).HasColumnType("money");
            entity.Property(e => e.AssetName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetSharePriceDate).HasColumnType("date");
            entity.Property(e => e.AssetShares).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSymbol)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.NameGuid).HasColumnName("NameGUID");
            entity.Property(e => e.PolicyFundingOptionCodeId).HasColumnName("PolicyFundingOptionCodeID");
            entity.Property(e => e.PolicyNetBenefit).HasColumnType("money");
            entity.Property(e => e.SecurityCategoryAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecurityCategoryDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecurityCompanyAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecurityCompanyDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecuritySectorAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecuritySectorDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecurityTypeAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecurityTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SharePrice).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwPlanningExportNameType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPlanningExport_NameType");

            entity.Property(e => e.NameGuid).HasColumnName("NameGUID");
            entity.Property(e => e.NameTypeGuid).HasColumnName("NameTypeGUID");
            entity.Property(e => e.TypeAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwPlanningExportPhone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPlanningExport_Phone");

            entity.Property(e => e.Areacode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Contact)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullPhone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameGuid).HasColumnName("NameGUID");
            entity.Property(e => e.PhoneExtension)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneGuid).HasColumnName("PhoneGUID");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneTypeAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwPlanningExportPolicy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPlanningExport_Policy");

            entity.Property(e => e.CoverageApprovalBasisAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageApprovalBasisDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageBeneficiaryNamed)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageBenefit).HasColumnType("money");
            entity.Property(e => e.CoverageBenefitModeAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageBenefitModeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageCashValue).HasColumnType("money");
            entity.Property(e => e.CoverageClassAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageClassDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageConversionDate).HasColumnType("date");
            entity.Property(e => e.CoverageEffectiveDate).HasColumnType("date");
            entity.Property(e => e.CoverageExpirationDate).HasColumnType("date");
            entity.Property(e => e.CoverageGuid).HasColumnName("CoverageGUID");
            entity.Property(e => e.CoverageNetCashValue).HasColumnType("money");
            entity.Property(e => e.CoverageOtherValue).HasColumnType("money");
            entity.Property(e => e.CoveragePlanAbbreviation)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoveragePlanDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageRenewalDate).HasColumnType("date");
            entity.Property(e => e.CoverageStatusAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageStatusDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageSubmitDate).HasColumnType("date");
            entity.Property(e => e.CoverageTerminationDate).HasColumnType("date");
            entity.Property(e => e.CoverageTypeAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DeathBenefitOptionCodeId).HasColumnName("DeathBenefitOptionCodeID");
            entity.Property(e => e.NameGuid).HasColumnName("NameGUID");
            entity.Property(e => e.PolicyCompanyAbbreviation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyCompanyDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyFundingOptionCodeId).HasColumnName("PolicyFundingOptionCodeID");
            entity.Property(e => e.PolicyGuid).HasColumnName("PolicyGUID");
            entity.Property(e => e.PolicyIssueDate).HasColumnType("date");
            entity.Property(e => e.PolicyLoanAmount).HasColumnType("money");
            entity.Property(e => e.PolicyNetBenefit).HasColumnType("money");
            entity.Property(e => e.PolicyNetCashValue).HasColumnType("money");
            entity.Property(e => e.PolicyNumber)
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyPremiumToDate).HasColumnType("money");
            entity.Property(e => e.PolicySurrenderCharge).HasColumnType("money");
            entity.Property(e => e.PolicySurrenderValue).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageAnnualTotal).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageModalTotal).HasColumnType("money");
            entity.Property(e => e.PremiumLastPaidDate).HasColumnType("date");
            entity.Property(e => e.PremiumMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PremiumNextDueDate).HasColumnType("date");
            entity.Property(e => e.PremiumPolicyAnnualTotal).HasColumnType("money");
            entity.Property(e => e.PremiumPolicyModalTotal).HasColumnType("money");
            entity.Property(e => e.PremiumsPaidThruDate).HasColumnType("date");
            entity.Property(e => e.QualifiedPlanTypeAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.QualifiedPlanTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RenewalProvisionAbbreviation)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RenewalProvisionDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwReportAccount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportAccount");

            entity.Property(e => e.AccountAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AccountBasisType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountBeneficiaryText)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.AccountClientMoneyFlowIn).HasColumnType("money");
            entity.Property(e => e.AccountClientMoneyFlowNet).HasColumnType("money");
            entity.Property(e => e.AccountClientMoneyFlowOut).HasColumnType("money");
            entity.Property(e => e.AccountClosedDate).HasColumnType("date");
            entity.Property(e => e.AccountCustodian)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountDistributions).HasColumnType("money");
            entity.Property(e => e.AccountManagementFee).HasColumnType("money");
            entity.Property(e => e.AccountManager1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNetExpenses).HasColumnType("money");
            entity.Property(e => e.AccountNetGains).HasColumnType("money");
            entity.Property(e => e.AccountNetTransfers).HasColumnType("money");
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountObjective)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountRegistrationType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountRordate)
                .HasColumnType("date")
                .HasColumnName("AccountRORDate");
            entity.Property(e => e.AccountRordollarAnnualized)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("AccountRORDollarAnnualized");
            entity.Property(e => e.AccountRorsimpleAnnualized)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("AccountRORSimpleAnnualized");
            entity.Property(e => e.AccountRortimeAnnualized)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("AccountRORTimeAnnualized");
            entity.Property(e => e.AccountStatus)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTaxStatus)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTypeAndNumber)
                .HasMaxLength(77)
                .IsUnicode(false);
            entity.Property(e => e.AccountValue).HasColumnType("money");
            entity.Property(e => e.AccountValueDate).HasColumnType("date");
            entity.Property(e => e.DownloadModule)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Investor)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwReportAccountProfile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportAccountProfile");

            entity.Property(e => e.AllocationStrategy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuthorizedPerson).IsUnicode(false);
            entity.Property(e => e.HoldStrategy).IsUnicode(false);
            entity.Property(e => e.LiquidityAmount).HasColumnType("money");
            entity.Property(e => e.LiquidityTimePeriod)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RiskTolerance)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TimeHorizon)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
        });

        modelBuilder.Entity<VwReportAccountRelatedName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportAccountRelatedNames");

            entity.Property(e => e.BeneficiaryFreeForm)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RelatedFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RelatedNameType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RelatedSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RelationshipDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueInvestorId).HasColumnName("UniqueInvestorID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueRelatedNameId).HasColumnName("UniqueRelatedNameID");
        });

        modelBuilder.Entity<VwReportAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportAddress");

            entity.Property(e => e.AddressPoint)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Addressee)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BusinessName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CityStateZip)
                .HasMaxLength(48)
                .IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.Country)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.County)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Greeting)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Route)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.State)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Street1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Street2)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Street3)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueAddressId).HasColumnName("UniqueAddressID");
            entity.Property(e => e.UniqueHouseholdId).HasColumnName("UniqueHouseholdID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.ZipCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportAnnuity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportAnnuity");

            entity.Property(e => e.AccountKeyId).HasColumnName("AccountKeyID");
            entity.Property(e => e.AnnuitantName)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AnnuitizationDate).HasColumnType("datetime");
            entity.Property(e => e.AnnuitySurrenderPeriodDescription)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AnnuityType)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BaseCoverageKeyId).HasColumnName("BaseCoverageKeyID");
            entity.Property(e => e.CompanyDescription)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ContractNumber)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.CoverageKeyId).HasColumnName("CoverageKeyID");
            entity.Property(e => e.InceptionDate).HasColumnType("datetime");
            entity.Property(e => e.IncomeDate).HasColumnType("datetime");
            entity.Property(e => e.InterestRate).HasColumnType("numeric(10, 3)");
            entity.Property(e => e.NetCashValue).HasColumnType("money");
            entity.Property(e => e.OwnerName)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Pk).HasColumnName("PK");
            entity.Property(e => e.PlanDescription)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PlanKeyId).HasColumnName("PlanKeyID");
            entity.Property(e => e.PolicyKeyId).HasColumnName("PolicyKeyID");
            entity.Property(e => e.ProjectedSurrenderPeriodEndDate).HasColumnType("datetime");
            entity.Property(e => e.StatusDescription)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SurrenderPeriodRemaining)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TotalNetValuesAsOf).HasColumnType("datetime");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwReportAttachForm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportAttachForm");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line01)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line02)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line03)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line04)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line05)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line06)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line07)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line08)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line09)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line10)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line11)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line12)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line13)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line14)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line15)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line16)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line17)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line18)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Line19)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueFormId).HasColumnName("UniqueFormID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwReportCalendarEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportCalendarEvent");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Addressee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BeginDate).HasPrecision(6);
            entity.Property(e => e.BeginDateLong)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BeginDayOfWeek)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BeginTime).HasPrecision(6);
            entity.Property(e => e.BeginTimeText)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.CalendarsAssigned)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.CarrierRoute)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ContactNames)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ContactProducer)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueDate).HasPrecision(6);
            entity.Property(e => e.DueDayOfWeek)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueTime).HasPrecision(6);
            entity.Property(e => e.DueTimeText)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasPrecision(6);
            entity.Property(e => e.EndDayOfWeek)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndTime).HasPrecision(6);
            entity.Property(e => e.EndTimeText)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EventAdded).HasColumnType("smalldatetime");
            entity.Property(e => e.EventAddedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EventCompletedYn).HasColumnName("EventCompletedYN");
            entity.Property(e => e.EventDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EventLastChanged).HasColumnType("smalldatetime");
            entity.Property(e => e.EventLastChangedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EventLocation)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EventNotes)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.EventPriority)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EventSubType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EventType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExceptionKeyId).HasColumnName("ExceptionKeyID");
            entity.Property(e => e.FullPhone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Greeting)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JobTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalBegin).HasPrecision(6);
            entity.Property(e => e.PhoneAreacode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneContact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Prefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SortName)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Suffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueCalendarId).HasColumnName("UniqueCalendarID");
            entity.Property(e => e.UniqueEventDetailId).HasColumnName("UniqueEventDetailID");
            entity.Property(e => e.UniqueEventId).HasColumnName("UniqueEventID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportClient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportClient");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Addressee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BusinessName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanCallYn).HasColumnName("CanCallYN");
            entity.Property(e => e.CanEmailYn).HasColumnName("CanEmailYN");
            entity.Property(e => e.CanMailYn).HasColumnName("CanMailYN");
            entity.Property(e => e.CarrierRoute)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CityStateZip)
                .HasMaxLength(48)
                .IsUnicode(false);
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Country)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.County)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DateOfBirth).HasColumnType("date");
            entity.Property(e => e.DateOfMarriage).HasColumnType("date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DependentStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DlexpirationDate)
                .HasColumnType("date")
                .HasColumnName("DLExpirationDate");
            entity.Property(e => e.DlissueDate)
                .HasColumnType("date")
                .HasColumnName("DLIssueDate");
            entity.Property(e => e.DlissueState)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DLIssueState");
            entity.Property(e => e.DriversLicenseId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DriversLicenseID");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmailContact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmailGreeting)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullNickName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullPhone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Greeting)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HeadOfHouseholdFirstName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HeadOfHouseholdId).HasColumnName("HeadOfHouseholdID");
            entity.Property(e => e.HeadOfHouseholdLastName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HeadOfHouseholdYn).HasColumnName("HeadOfHouseholdYN");
            entity.Property(e => e.HouseholdName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IncomeEarned).HasColumnType("money");
            entity.Property(e => e.IncomeTotal).HasColumnType("money");
            entity.Property(e => e.Industry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JobTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Medicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MiddleINITIAL");
            entity.Property(e => e.MiddleName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MonthDayDobsort).HasColumnName("MonthDayDOBSort");
            entity.Property(e => e.MonthDayOfBirth)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MonthDayOfMarriage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NameAddedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameAddedDate).HasColumnType("smalldatetime");
            entity.Property(e => e.NameApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NameAPIKey1");
            entity.Property(e => e.NameApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NameAPIKey2");
            entity.Property(e => e.NameApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NameAPIKey3");
            entity.Property(e => e.NameChangedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField01Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField02Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField03Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField04Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField05Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.NameFlexField06Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.NameFlexField09Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField10Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField11Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField12Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField13Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField14Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField15Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField16Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField17Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField18Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField19Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField20Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField21Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField22Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField23Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField24Text)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NameFlexField25Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField26Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField27Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField28Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField29Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField30Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameGuid).HasColumnName("NameGUID");
            entity.Property(e => e.NameLastChangeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.NamePhase)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameTypeAbbrPrimary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameTypeDescPrimary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NetWorth).HasColumnType("money");
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Occupation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrganizationYn).HasColumnName("OrganizationYN");
            entity.Property(e => e.PhoneAreaCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneContact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Prefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducerFirstName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PrimaryProducerID");
            entity.Property(e => e.PrimaryProducerLastName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProducerYn).HasColumnName("ProducerYN");
            entity.Property(e => e.Region)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseDateOfBirth).HasColumnType("date");
            entity.Property(e => e.SpouseDlexpirationDate)
                .HasColumnType("date")
                .HasColumnName("SpouseDLExpirationDate");
            entity.Property(e => e.SpouseDlissueDate)
                .HasColumnType("date")
                .HasColumnName("SpouseDLIssueDate");
            entity.Property(e => e.SpouseDriversLicenseId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SpouseDriversLicenseID");
            entity.Property(e => e.SpouseEmailAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseMedicare)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SpouseNickName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseOccupation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseTaxId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SpouseTaxID");
            entity.Property(e => e.State)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Suffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaxBracket).HasColumnType("numeric(7, 3)");
            entity.Property(e => e.TaxBracketPct)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TaxID");
            entity.Property(e => e.Tobacco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueHouseholdId).HasColumnName("UniqueHouseholdID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueNameTypeCodeId).HasColumnName("UniqueNameTypeCodeID");
            entity.Property(e => e.UniquePrimaryProducerAddressId).HasColumnName("UniquePrimaryProducerAddressID");
            entity.Property(e => e.UniquePrimaryProducerId).HasColumnName("UniquePrimaryProducerID");
            entity.Property(e => e.UniquePrimaryProducerNameId).HasColumnName("UniquePrimaryProducerNameID");
            entity.Property(e => e.UniquePrimaryProducerPhoneId).HasColumnName("UniquePrimaryProducerPhoneID");
            entity.Property(e => e.WebAddress).IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ZipPostalCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportClientHhtotal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportClientHHTotals");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Addressee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BusinessName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanCallYn).HasColumnName("CanCallYN");
            entity.Property(e => e.CanEmailYn).HasColumnName("CanEmailYN");
            entity.Property(e => e.CanMailYn).HasColumnName("CanMailYN");
            entity.Property(e => e.CarrierRoute)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CityStateZip)
                .HasMaxLength(48)
                .IsUnicode(false);
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Country)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.County)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DateOfBirth).HasColumnType("date");
            entity.Property(e => e.DateOfMarriage).HasColumnType("date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DependentStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DlexpirationDate)
                .HasColumnType("date")
                .HasColumnName("DLExpirationDate");
            entity.Property(e => e.DlissueDate)
                .HasColumnType("date")
                .HasColumnName("DLIssueDate");
            entity.Property(e => e.DlissueState)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DLIssueState");
            entity.Property(e => e.DriversLicenseId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DriversLicenseID");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmailContact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmailGreeting)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullNickName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullPhone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Greeting)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HeadOfHouseholdFirstName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HeadOfHouseholdId).HasColumnName("HeadOfHouseholdID");
            entity.Property(e => e.HeadOfHouseholdLastName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HeadOfHouseholdYn).HasColumnName("HeadOfHouseholdYN");
            entity.Property(e => e.HouseholdName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IncomeEarned).HasColumnType("money");
            entity.Property(e => e.IncomeTotal).HasColumnType("money");
            entity.Property(e => e.Industry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JobTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Medicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MiddleINITIAL");
            entity.Property(e => e.MiddleName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MonthDayDobsort).HasColumnName("MonthDayDOBSort");
            entity.Property(e => e.MonthDayOfBirth)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MonthDayOfMarriage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NameAddedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameAddedDate).HasColumnType("smalldatetime");
            entity.Property(e => e.NameApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NameAPIKey1");
            entity.Property(e => e.NameApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NameAPIKey2");
            entity.Property(e => e.NameApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NameAPIKey3");
            entity.Property(e => e.NameChangedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField01Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField02Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField03Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField04Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField05Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.NameFlexField06Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.NameFlexField09Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField10Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField11Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField12Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField13Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField14Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField15Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField16Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField17Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField18Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField19Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField20Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField21Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField22Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField23Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField24Text)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NameFlexField25Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField26Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField27Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField28Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField29Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField30Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameGuid).HasColumnName("NameGUID");
            entity.Property(e => e.NameLastChangeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.NamePhase)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameTypeAbbrPrimary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameTypeDescPrimary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NetWorth).HasColumnType("money");
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Occupation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrganizationYn).HasColumnName("OrganizationYN");
            entity.Property(e => e.PhoneAreaCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneContact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Prefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducerFirstName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PrimaryProducerID");
            entity.Property(e => e.PrimaryProducerLastName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProducerYn).HasColumnName("ProducerYN");
            entity.Property(e => e.Region)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseDateOfBirth).HasColumnType("date");
            entity.Property(e => e.SpouseDlexpirationDate)
                .HasColumnType("date")
                .HasColumnName("SpouseDLExpirationDate");
            entity.Property(e => e.SpouseDlissueDate)
                .HasColumnType("date")
                .HasColumnName("SpouseDLIssueDate");
            entity.Property(e => e.SpouseDriversLicenseId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SpouseDriversLicenseID");
            entity.Property(e => e.SpouseEmailAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseMedicare)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SpouseNickName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseOccupation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseTaxId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SpouseTaxID");
            entity.Property(e => e.State)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Suffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaxBracket).HasColumnType("numeric(7, 3)");
            entity.Property(e => e.TaxBracketPct)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TaxID");
            entity.Property(e => e.Tobacco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalHouseHoldMarketValue).HasColumnType("money");
            entity.Property(e => e.TotalHouseholdAnnualPremiums).HasColumnType("money");
            entity.Property(e => e.UniqueHouseholdId).HasColumnName("UniqueHouseholdID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueNameTypeCodeId).HasColumnName("UniqueNameTypeCodeID");
            entity.Property(e => e.UniquePrimaryProducerAddressId).HasColumnName("UniquePrimaryProducerAddressID");
            entity.Property(e => e.UniquePrimaryProducerId).HasColumnName("UniquePrimaryProducerID");
            entity.Property(e => e.UniquePrimaryProducerNameId).HasColumnName("UniquePrimaryProducerNameID");
            entity.Property(e => e.UniquePrimaryProducerPhoneId).HasColumnName("UniquePrimaryProducerPhoneID");
            entity.Property(e => e.WebAddress).IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ZipPostalCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportClientHhtotalsInforce>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportClientHHTotalsINFORCE");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddressType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Addressee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BusinessName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanCallYn).HasColumnName("CanCallYN");
            entity.Property(e => e.CanEmailYn).HasColumnName("CanEmailYN");
            entity.Property(e => e.CanMailYn).HasColumnName("CanMailYN");
            entity.Property(e => e.CarrierRoute)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CityStateZip)
                .HasMaxLength(48)
                .IsUnicode(false);
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Country)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.County)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DateOfBirth).HasColumnType("date");
            entity.Property(e => e.DateOfMarriage).HasColumnType("date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DependentStatus)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DlexpirationDate)
                .HasColumnType("date")
                .HasColumnName("DLExpirationDate");
            entity.Property(e => e.DlissueDate)
                .HasColumnType("date")
                .HasColumnName("DLIssueDate");
            entity.Property(e => e.DlissueState)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DLIssueState");
            entity.Property(e => e.DriversLicenseId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DriversLicenseID");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmailContact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmailGreeting)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullNickName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullPhone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Greeting)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HeadOfHouseholdFirstName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HeadOfHouseholdId).HasColumnName("HeadOfHouseholdID");
            entity.Property(e => e.HeadOfHouseholdLastName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HeadOfHouseholdYn).HasColumnName("HeadOfHouseholdYN");
            entity.Property(e => e.HouseholdName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IncomeEarned).HasColumnType("money");
            entity.Property(e => e.IncomeTotal).HasColumnType("money");
            entity.Property(e => e.Industry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JobTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Medicare)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MiddleINITIAL");
            entity.Property(e => e.MiddleName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MonthDayDobsort).HasColumnName("MonthDayDOBSort");
            entity.Property(e => e.MonthDayOfBirth)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MonthDayOfMarriage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NameAddedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameAddedDate).HasColumnType("smalldatetime");
            entity.Property(e => e.NameApikey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NameAPIKey1");
            entity.Property(e => e.NameApikey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NameAPIKey2");
            entity.Property(e => e.NameApikey3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NameAPIKey3");
            entity.Property(e => e.NameChangedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField01Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField02Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField03Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField04Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.NameFlexField05Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.NameFlexField06Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.NameFlexField09Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField10Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField11Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField12Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField13Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField14Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField15Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField16Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField17Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField18Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField19Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField20Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField21Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField22Date).HasColumnType("date");
            entity.Property(e => e.NameFlexField23Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField24Text)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NameFlexField25Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField26Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField27Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField28Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField29Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameFlexField30Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameGuid).HasColumnName("NameGUID");
            entity.Property(e => e.NameLastChangeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.NamePhase)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameTypeAbbrPrimary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameTypeDescPrimary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NetWorth).HasColumnType("money");
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Occupation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrganizationYn).HasColumnName("OrganizationYN");
            entity.Property(e => e.PhoneAreaCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneContact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Prefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducerFirstName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PrimaryProducerID");
            entity.Property(e => e.PrimaryProducerLastName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProducerYn).HasColumnName("ProducerYN");
            entity.Property(e => e.Region)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseDateOfBirth).HasColumnType("date");
            entity.Property(e => e.SpouseDlexpirationDate)
                .HasColumnType("date")
                .HasColumnName("SpouseDLExpirationDate");
            entity.Property(e => e.SpouseDlissueDate)
                .HasColumnType("date")
                .HasColumnName("SpouseDLIssueDate");
            entity.Property(e => e.SpouseDriversLicenseId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SpouseDriversLicenseID");
            entity.Property(e => e.SpouseEmailAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseMedicare)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SpouseNickName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseOccupation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SpouseTaxId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SpouseTaxID");
            entity.Property(e => e.State)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Suffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaxBracket).HasColumnType("numeric(7, 3)");
            entity.Property(e => e.TaxBracketPct)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TaxId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TaxID");
            entity.Property(e => e.Tobacco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalHouseHoldMarketValue).HasColumnType("money");
            entity.Property(e => e.TotalHouseholdAnnualPremiums).HasColumnType("money");
            entity.Property(e => e.UniqueHouseholdId).HasColumnName("UniqueHouseholdID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueNameTypeCodeId).HasColumnName("UniqueNameTypeCodeID");
            entity.Property(e => e.UniquePrimaryProducerAddressId).HasColumnName("UniquePrimaryProducerAddressID");
            entity.Property(e => e.UniquePrimaryProducerId).HasColumnName("UniquePrimaryProducerID");
            entity.Property(e => e.UniquePrimaryProducerNameId).HasColumnName("UniquePrimaryProducerNameID");
            entity.Property(e => e.UniquePrimaryProducerPhoneId).HasColumnName("UniquePrimaryProducerPhoneID");
            entity.Property(e => e.WebAddress).IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ZipPostalCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportClientNameType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportClientNameTypes");

            entity.Property(e => e.BPrimary).HasColumnName("bPrimary");
            entity.Property(e => e.NameType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwReportCommDistribution>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportCommDistribution");

            entity.Property(e => e.AgencyCommDue).HasColumnType("money");
            entity.Property(e => e.BFlagTransactionContainsAdjustment).HasColumnName("bFlagTransactionContainsAdjustment");
            entity.Property(e => e.BFlagTransactionContainsBasePremium).HasColumnName("bFlagTransactionContainsBasePremium");
            entity.Property(e => e.BFlagTransactionContainsChargeback).HasColumnName("bFlagTransactionContainsChargeback");
            entity.Property(e => e.BFlagTransactionContainsExcess1Premium).HasColumnName("bFlagTransactionContainsExcess1Premium");
            entity.Property(e => e.BFlagTransactionContainsExcess2Premium).HasColumnName("bFlagTransactionContainsExcess2Premium");
            entity.Property(e => e.BFlagTransactionContainsFixedAmount).HasColumnName("bFlagTransactionContainsFixedAmount");
            entity.Property(e => e.BFlagTransactionContainsNormal).HasColumnName("bFlagTransactionContainsNormal");
            entity.Property(e => e.BFlagTransactionContainsOverride1).HasColumnName("bFlagTransactionContainsOverride1");
            entity.Property(e => e.BFlagTransactionContainsOverride2).HasColumnName("bFlagTransactionContainsOverride2");
            entity.Property(e => e.BFlagTransactionContainsParticipant).HasColumnName("bFlagTransactionContainsParticipant");
            entity.Property(e => e.BFlagTransactionContainsTrailer).HasColumnName("bFlagTransactionContainsTrailer");
            entity.Property(e => e.BaseAmount).HasColumnType("numeric(19, 4)");
            entity.Property(e => e.CoverageEffectiveDate).HasColumnType("date");
            entity.Property(e => e.CoverageModalPremium).HasColumnType("money");
            entity.Property(e => e.CoveragePlan)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoveragePlanAbbrev)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoveragePrimaryInsuredUniqueId).HasColumnName("CoveragePrimaryInsuredUniqueID");
            entity.Property(e => e.CoverageTypeAbbrev)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoverageTypeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DueAmount).HasColumnType("money");
            entity.Property(e => e.DueDate).HasColumnType("date");
            entity.Property(e => e.FirstRenewal)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.NormalTrailer)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PayeeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PayeeSplit).HasColumnType("numeric(10, 4)");
            entity.Property(e => e.PolicyCompanyAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PolicyManager1UniqueId).HasColumnName("PolicyManager1UniqueID");
            entity.Property(e => e.PolicyManager2UniqueId).HasColumnName("PolicyManager2UniqueID");
            entity.Property(e => e.PolicyManager3UniqueId).HasColumnName("PolicyManager3UniqueID");
            entity.Property(e => e.PolicyManager4UniqueId).HasColumnName("PolicyManager4UniqueID");
            entity.Property(e => e.PolicyNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false);
            entity.Property(e => e.PolicyOwnerUniqueId).HasColumnName("PolicyOwnerUniqueID");
            entity.Property(e => e.PolicyProducer1Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolicyProducer1UniqueId).HasColumnName("PolicyProducer1UniqueID");
            entity.Property(e => e.PolicyProducer2UniqueId).HasColumnName("PolicyProducer2UniqueID");
            entity.Property(e => e.PolicyProducer3UniqueId).HasColumnName("PolicyProducer3UniqueID");
            entity.Property(e => e.PolicyProducer4UniqueId).HasColumnName("PolicyProducer4UniqueID");
            entity.Property(e => e.PostedAmount).HasColumnType("money");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate).HasColumnType("date");
            entity.Property(e => e.PostedOn).HasColumnType("smalldatetime");
            entity.Property(e => e.PrimaryInsuredSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Rate).HasColumnType("numeric(18, 8)");
            entity.Property(e => e.UniqueAgencyId).HasColumnName("UniqueAgencyID");
            entity.Property(e => e.UniqueCompanyId).HasColumnName("UniqueCompanyID");
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueCoverageTypeId).HasColumnName("UniqueCoverageTypeID");
            entity.Property(e => e.UniqueDistributionId).HasColumnName("UniqueDistributionID");
            entity.Property(e => e.UniqueDistributionTypeId).HasColumnName("UniqueDistributionTypeID");
            entity.Property(e => e.UniqueOverrideTypeId).HasColumnName("UniqueOverrideTypeID");
            entity.Property(e => e.UniquePayeeId).HasColumnName("UniquePayeeID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniquePostingId).HasColumnName("UniquePostingID");
            entity.Property(e => e.UniquePrimaryProducerId).HasColumnName("UniquePrimaryProducerID");
            entity.Property(e => e.UniqueRemainderId).HasColumnName("UniqueRemainderID");
            entity.Property(e => e.UniqueRiderId).HasColumnName("UniqueRiderID");
            entity.Property(e => e.UniqueStatusId).HasColumnName("UniqueStatusID");
            entity.Property(e => e.UniqueTransactionId).HasColumnName("UniqueTransactionID");
        });

        modelBuilder.Entity<VwReportCommTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportCommTransaction");

            entity.Property(e => e.AgencyDistributionsDue).HasColumnType("money");
            entity.Property(e => e.AgencyDistributionsPaid).HasColumnType("money");
            entity.Property(e => e.AgencyGrossDue).HasColumnType("money");
            entity.Property(e => e.AgencyGrossPaid).HasColumnType("money");
            entity.Property(e => e.AgencyName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AgencyNetDue).HasColumnType("money");
            entity.Property(e => e.AgencyNetPaid).HasColumnType("money");
            entity.Property(e => e.CoveragePlan)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoveragePrimaryInsuredSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoveragePrimaryInsuredUniqueId).HasColumnName("CoveragePrimaryInsuredUniqueID");
            entity.Property(e => e.FirstRenewal)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ManagersDirectDue).HasColumnType("money");
            entity.Property(e => e.ManagersDirectPaid).HasColumnType("money");
            entity.Property(e => e.ManagersGrossDue).HasColumnType("money");
            entity.Property(e => e.ManagersGrossPaid).HasColumnType("money");
            entity.Property(e => e.NormalTrailer)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PaidDateMax).HasColumnType("date");
            entity.Property(e => e.PaidDateMin).HasColumnType("date");
            entity.Property(e => e.PolicyCompanyAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PolicyManager1UniqueId).HasColumnName("PolicyManager1UniqueID");
            entity.Property(e => e.PolicyManager2UniqueId).HasColumnName("PolicyManager2UniqueID");
            entity.Property(e => e.PolicyManager3UniqueId).HasColumnName("PolicyManager3UniqueID");
            entity.Property(e => e.PolicyManager4UniqueId).HasColumnName("PolicyManager4UniqueID");
            entity.Property(e => e.PolicyNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false);
            entity.Property(e => e.PolicyOwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PolicyOwnerUniqueId).HasColumnName("PolicyOwnerUniqueID");
            entity.Property(e => e.PolicyProducer1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolicyProducer1UniqueId).HasColumnName("PolicyProducer1UniqueID");
            entity.Property(e => e.PolicyProducer2UniqueId).HasColumnName("PolicyProducer2UniqueID");
            entity.Property(e => e.PolicyProducer3UniqueId).HasColumnName("PolicyProducer3UniqueID");
            entity.Property(e => e.PolicyProducer4UniqueId).HasColumnName("PolicyProducer4UniqueID");
            entity.Property(e => e.ProducersDirectDue).HasColumnType("money");
            entity.Property(e => e.ProducersDirectPaid).HasColumnType("money");
            entity.Property(e => e.ProducersGrossDue).HasColumnType("money");
            entity.Property(e => e.ProducersGrossPaid).HasColumnType("money");
            entity.Property(e => e.RateTableSetName)
                .IsRequired()
                .HasMaxLength(65)
                .IsUnicode(false);
            entity.Property(e => e.TotalDirectDue).HasColumnType("money");
            entity.Property(e => e.TotalDirectPaid).HasColumnType("money");
            entity.Property(e => e.TransComment)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.TransDueDate).HasColumnType("date");
            entity.Property(e => e.UniqueAgencyId).HasColumnName("UniqueAgencyID");
            entity.Property(e => e.UniqueCompanyId).HasColumnName("UniqueCompanyID");
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueCoverageTypeId).HasColumnName("UniqueCoverageTypeID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniqueRateTableSetId).HasColumnName("UniqueRateTableSetID");
            entity.Property(e => e.UniqueTransactionId).HasColumnName("UniqueTransactionID");
        });

        modelBuilder.Entity<VwReportCommTransactionComment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportCommTransactionComment");

            entity.Property(e => e.Comment)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.UniqueTransactionId).HasColumnName("UniqueTransactionID");
        });

        modelBuilder.Entity<VwReportDisclosure>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportDisclosures");

            entity.Property(e => e.AccountCustodian)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountCustodianAbbr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountTypeAndNumber)
                .HasMaxLength(77)
                .IsUnicode(false);
            entity.Property(e => e.CompanyControlNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CustodianContactInfo).IsUnicode(false);
            entity.Property(e => e.CustodianPhone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataSourceModule)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RelationType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueGroupWithId).HasColumnName("UniqueGroupWithID");
            entity.Property(e => e.UniqueHouseholdId).HasColumnName("UniqueHouseholdID");
            entity.Property(e => e.UniqueInvestorId).HasColumnName("UniqueInvestorID");
            entity.Property(e => e.UniquePrimaryProducerNameId).HasColumnName("UniquePrimaryProducerNameID");
            entity.Property(e => e.UniqueRelatedClientId).HasColumnName("UniqueRelatedClientID");
        });

        modelBuilder.Entity<VwReportDownloadRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportDownloadRegistration");

            entity.Property(e => e.ModuleLongName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ModuleShortName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RegistrationBlock)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("date");
            entity.Property(e => e.RegistrationNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniqueRegistrationId).HasColumnName("UniqueRegistrationID");
        });

        modelBuilder.Entity<VwReportEmail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportEmail");

            entity.Property(e => e.BusinessName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.Contact)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmailAddress)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueEmailId).HasColumnName("UniqueEmailID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwReportFileHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportFileHistory");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ActionId).HasColumnName("ActionID");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.ClientName)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DetailKeyId).HasColumnName("DetailKeyID");
            entity.Property(e => e.FileHistoryLogKeyId).HasColumnName("FileHistoryLogKeyID");
            entity.Property(e => e.FileName).IsUnicode(false);
            entity.Property(e => e.FilePath).IsUnicode(false);
            entity.Property(e => e.FileSource)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Holding)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Reference)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");
            entity.Property(e => e.UniqueFileId).HasColumnName("UniqueFileID");
            entity.Property(e => e.UserName)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwReportFileHistoryAccount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportFileHistoryAccount");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ActionId).HasColumnName("ActionID");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.ClientName)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DetailKeyId).HasColumnName("DetailKeyID");
            entity.Property(e => e.FileHistoryLogKeyId).HasColumnName("FileHistoryLogKeyID");
            entity.Property(e => e.FileName).IsUnicode(false);
            entity.Property(e => e.FilePath).IsUnicode(false);
            entity.Property(e => e.FileSource)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Holding)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Reference)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");
            entity.Property(e => e.UniqueFileId).HasColumnName("UniqueFileID");
            entity.Property(e => e.UserName)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwReportFileHistoryClient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportFileHistoryClient");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ActionId).HasColumnName("ActionID");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.ClientName)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DetailKeyId).HasColumnName("DetailKeyID");
            entity.Property(e => e.FileHistoryLogKeyId).HasColumnName("FileHistoryLogKeyID");
            entity.Property(e => e.FileName).IsUnicode(false);
            entity.Property(e => e.FilePath).IsUnicode(false);
            entity.Property(e => e.FileSource)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Holding)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Reference)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");
            entity.Property(e => e.UniqueFileId).HasColumnName("UniqueFileID");
            entity.Property(e => e.UserName)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwReportFileHistoryPolicy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportFileHistoryPolicy");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ActionId).HasColumnName("ActionID");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.ClientName)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DetailKeyId).HasColumnName("DetailKeyID");
            entity.Property(e => e.FileHistoryLogKeyId).HasColumnName("FileHistoryLogKeyID");
            entity.Property(e => e.FileName).IsUnicode(false);
            entity.Property(e => e.FilePath).IsUnicode(false);
            entity.Property(e => e.FileSource)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Holding)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Reference)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");
            entity.Property(e => e.UniqueFileId).HasColumnName("UniqueFileID");
            entity.Property(e => e.UserName)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwReportFlexFieldLabel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportFlexFieldLabels");

            entity.Property(e => e.FieldLabel01)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel02)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel03)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel04)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel05)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel06)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel07)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel08)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel09)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel10)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel11)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel12)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel13)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel14)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel15)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel16)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel17)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel18)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel19)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel20)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel21)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel22)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel23)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel24)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel25)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel26)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel27)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel28)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel29)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel30)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueCodeId).HasColumnName("UniqueCodeID");
            entity.Property(e => e.UniqueLabelId).HasColumnName("UniqueLabelID");
        });

        modelBuilder.Entity<VwReportFlexFieldWorkflowLabel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportFlexFieldWorkflowLabels");

            entity.Property(e => e.FieldLabel01)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel02)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel03)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel04)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel05)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel06)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel07)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel08)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel09)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel10)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel11)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel12)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel13)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel14)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel15)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel16)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel17)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel18)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel19)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel20)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel21)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel22)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel23)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel24)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel25)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel26)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel27)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel28)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel29)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel30)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueLabelId).HasColumnName("UniqueLabelID");
            entity.Property(e => e.UniqueWorkflowMasterId).HasColumnName("UniqueWorkflowMasterID");
        });

        modelBuilder.Entity<VwReportFlexFieldWorkflowValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportFlexFieldWorkflowValues");

            entity.Property(e => e.UniqueWorkflowFlexFieldId).HasColumnName("UniqueWorkflowFlexFieldID");
            entity.Property(e => e.UniqueWorkflowId).HasColumnName("UniqueWorkflowID");
            entity.Property(e => e.WorkflowFlexField01Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.WorkflowFlexField02Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.WorkflowFlexField03Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.WorkflowFlexField04Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.WorkflowFlexField05Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.WorkflowFlexField06Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.WorkflowFlexField09Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField10Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField11Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField12Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField13Date).HasColumnType("date");
            entity.Property(e => e.WorkflowFlexField14Date).HasColumnType("date");
            entity.Property(e => e.WorkflowFlexField15Date).HasColumnType("date");
            entity.Property(e => e.WorkflowFlexField16Date).HasColumnType("date");
            entity.Property(e => e.WorkflowFlexField17Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField18Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField19Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField20Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField21Date).HasColumnType("date");
            entity.Property(e => e.WorkflowFlexField22Date).HasColumnType("date");
            entity.Property(e => e.WorkflowFlexField23Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField24Text)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.WorkflowFlexField25Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField26Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField27Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField28Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField29Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WorkflowFlexField30Text)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportHouseholdMember>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportHouseholdMember");

            entity.Property(e => e.HeadDateOfBirth).HasColumnType("date");
            entity.Property(e => e.HeadFullname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HeadNameTypeDescriptionPrimary)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HouseholdName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MemberDateOfBirth).HasColumnType("date");
            entity.Property(e => e.MemberFullname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MemberNameTypeDescriptionPrimary)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MemberPrimaryProducer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MemberRelationToHead)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MemberSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueHouseholdHeadNameId).HasColumnName("UniqueHouseholdHeadNameID");
            entity.Property(e => e.UniqueHouseholdId).HasColumnName("UniqueHouseholdID");
            entity.Property(e => e.UniqueMemberId).HasColumnName("UniqueMemberID");
            entity.Property(e => e.UniqueMemberNameId).HasColumnName("UniqueMemberNameID");
        });

        modelBuilder.Entity<VwReportHouseholdOf>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportHouseholdOf");

            entity.Property(e => e.HouseholdHeadFullname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HouseholdName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueHouseholdHeadNameId).HasColumnName("UniqueHouseholdHeadNameID");
            entity.Property(e => e.UniqueHouseholdId).HasColumnName("UniqueHouseholdID");
            entity.Property(e => e.UniqueMemberNameId).HasColumnName("UniqueMemberNameID");
        });

        modelBuilder.Entity<VwReportHouseholdTotal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportHouseholdTotals");

            entity.Property(e => e.AccountMarketValue).HasColumnType("money");
            entity.Property(e => e.AnnualInsurancePremiums).HasColumnType("money");
            entity.Property(e => e.HohnameKeyId).HasColumnName("HOHNameKeyID");
            entity.Property(e => e.UniqueHouseholdId).HasColumnName("UniqueHouseholdID");
        });

        modelBuilder.Entity<VwReportInsuranceNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportInsuranceNote");

            entity.Property(e => e.NoteContent).IsUnicode(false);
            entity.Property(e => e.NoteFollowUpCompletedYn).HasColumnName("NoteFollowUpCompletedYN");
            entity.Property(e => e.NoteFollowUpDate).HasPrecision(6);
            entity.Property(e => e.PrivateNoteUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Topic)
                .IsRequired()
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.UniqueNoteId).HasColumnName("UniqueNoteID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniquePolicyOwnerId).HasColumnName("UniquePolicyOwnerID");
            entity.Property(e => e.UniquePolicyPrimaryInsuredId).HasColumnName("UniquePolicyPrimaryInsuredID");
            entity.Property(e => e.UniquePrivateNoteUserId).HasColumnName("UniquePrivateNoteUserID");
            entity.Property(e => e.WhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WhoChanged)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportInsuranceProduction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportInsuranceProduction");

            entity.Property(e => e.CertificateId)
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CertificateID");
            entity.Property(e => e.CommissionCoverage1stYrTotal).HasColumnType("money");
            entity.Property(e => e.CommissionPolicy1stYrTotal).HasColumnType("money");
            entity.Property(e => e.ConversionMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageApprovalBasis)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageBeneficiaryLong)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.CoverageBeneficiaryNamed)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageBenefit).HasColumnType("money");
            entity.Property(e => e.CoverageBenefitMode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageCashValue).HasColumnType("money");
            entity.Property(e => e.CoverageClass)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageCompletedDate).HasColumnType("date");
            entity.Property(e => e.CoverageCompletedMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageConversionDate).HasColumnType("date");
            entity.Property(e => e.CoverageDividendOption)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageEffectiveDate).HasColumnType("date");
            entity.Property(e => e.CoverageEffectiveMonthDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageEffectiveMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageExpirationDate).HasColumnType("date");
            entity.Property(e => e.CoverageExpirationMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageOtherValue).HasColumnType("money");
            entity.Property(e => e.CoveragePlan)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoveragePrimaryInsured)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoveragePrimaryInsuredSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageRenewalDate).HasColumnType("date");
            entity.Property(e => e.CoverageRenewalMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageStatus)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageSubmitDate).HasColumnType("date");
            entity.Property(e => e.CoverageSubmitMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageTerminationDate).HasColumnType("date");
            entity.Property(e => e.CoverageTerminationMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageTotalRiderCashValue).HasColumnType("money");
            entity.Property(e => e.CoverageTotalRiderLoanAmount).HasColumnType("money");
            entity.Property(e => e.CoverageType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageUnderwriter)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FundingOption)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupMasterCoverage)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GroupMasterCoverageUniqueId).HasColumnName("GroupMasterCoverageUniqueID");
            entity.Property(e => e.PolicyCompany)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyCompanyAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyIssueDate).HasColumnType("date");
            entity.Property(e => e.PolicyIssueMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolicyLoanAmount).HasColumnType("money");
            entity.Property(e => e.PolicyNetBenefit).HasColumnType("money");
            entity.Property(e => e.PolicyNetCashValue).HasColumnType("money");
            entity.Property(e => e.PolicyNumber)
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyOwner)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyOwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyOwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyPayor)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyPremiumToDate).HasColumnType("money");
            entity.Property(e => e.PolicySurrenderCharge).HasColumnType("money");
            entity.Property(e => e.PolicySurrenderValue).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageAnnualTotal).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageBaseAnnual).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageExcessAnnual1).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageExcessAnnual2).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageModalTotal).HasColumnType("money");
            entity.Property(e => e.PremiumLastPaidDate).HasColumnType("date");
            entity.Property(e => e.PremiumModeAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PremiumNextDueDate).HasColumnType("date");
            entity.Property(e => e.PremiumPolicyAnnualTotal).HasColumnType("money");
            entity.Property(e => e.PremiumPolicyModalTotal).HasColumnType("money");
            entity.Property(e => e.PremiumsPaidThruDate).HasColumnType("date");
            entity.Property(e => e.PrimaryCoverageYn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PrimaryCoverageYN");
            entity.Property(e => e.Producer1stYrSplit).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.ProducerCommCoverage1stYr).HasColumnType("money");
            entity.Property(e => e.ProducerCommPolicy1stYr).HasColumnType("money");
            entity.Property(e => e.ProducerName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProducerRankDescription)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProducerRenewalSplit).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.QualifiedPlanType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RenewalProvision)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueCoverageInsuredNameId).HasColumnName("UniqueCoverageInsuredNameID");
            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniquePolicyInsuredNameId).HasColumnName("UniquePolicyInsuredNameID");
            entity.Property(e => e.UniqueProducerNameId).HasColumnName("UniqueProducerNameID");
        });

        modelBuilder.Entity<VwReportInsuranceRelatedName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportInsuranceRelatedNames");

            entity.Property(e => e.BeneficiaryFreeForm)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.OwnerFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RelatedFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RelatedNameType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RelatedSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RelationshipDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniquePrimaryBeneficiaryNameId).HasColumnName("UniquePrimaryBeneficiaryNameID");
            entity.Property(e => e.UniquePrimaryInsuredNameId).HasColumnName("UniquePrimaryInsuredNameID");
            entity.Property(e => e.UniqueRelatedNameId).HasColumnName("UniqueRelatedNameID");
        });

        modelBuilder.Entity<VwReportInsured>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportInsured");

            entity.Property(e => e.CoverageExpiration).HasColumnType("date");
            entity.Property(e => e.CoverageInsuredEffectiveDate).HasColumnType("date");
            entity.Property(e => e.CoverageInsuredFirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageInsuredFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageInsuredLastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueInsuredId).HasColumnName("UniqueInsuredID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
        });

        modelBuilder.Entity<VwReportInvestment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportInvestment");

            entity.Property(e => e.AccountAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AccountAdditions).HasColumnType("money");
            entity.Property(e => e.AccountAllocationStrategy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountAuthorizedPerson).IsUnicode(false);
            entity.Property(e => e.AccountClosedDate).HasColumnType("date");
            entity.Property(e => e.AccountCustodian)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountCustodianAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountHoldStrategy).IsUnicode(false);
            entity.Property(e => e.AccountLiquidityAmount).HasColumnType("money");
            entity.Property(e => e.AccountLiquidityTimePeriod)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountManagementFees).HasColumnType("money");
            entity.Property(e => e.AccountManager1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountManager1Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountManager1Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountManager2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountManager2Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountManager2Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountManager3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountManager3Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountManager3Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountManager4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountManager4Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountManager4Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountMarketValue).HasColumnType("money");
            entity.Property(e => e.AccountNetCashFlow).HasColumnType("money");
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountObjective)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountOwnership)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountOwnershipAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer1Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountProducer1Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountProducer2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer2Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountProducer2Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountProducer3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer3Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountProducer3Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountProducer4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer4Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountProducer4Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.AccountRiskTolerance)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTaxStatus)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTimeHorizon)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTypeAndNumber)
                .HasMaxLength(77)
                .IsUnicode(false);
            entity.Property(e => e.AccountWithdrawals).HasColumnType("money");
            entity.Property(e => e.AssetAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AssetAdditions).HasColumnType("money");
            entity.Property(e => e.AssetAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AssetAlternateID");
            entity.Property(e => e.AssetBasis).HasColumnType("money");
            entity.Property(e => e.AssetBasisPerShare).HasColumnType("numeric(38, 17)");
            entity.Property(e => e.AssetBasisType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCapGainStreinvested)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainSTReinvested");
            entity.Property(e => e.AssetCapGainsLtpaidOut)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsLTPaidOut");
            entity.Property(e => e.AssetCapGainsLtreinvested)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsLTReinvested");
            entity.Property(e => e.AssetCapGainsLttotal)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsLTTotal");
            entity.Property(e => e.AssetCapGainsStpaidOut)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsSTPaidOut");
            entity.Property(e => e.AssetCapGainsSttotal)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsSTTotal");
            entity.Property(e => e.AssetCategory)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetClass)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCommissions).HasColumnType("money");
            entity.Property(e => e.AssetCompany)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCompanyAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AssetCUSIP");
            entity.Property(e => e.AssetCusipext)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AssetCUSIPExt");
            entity.Property(e => e.AssetDividendsPaidOut).HasColumnType("money");
            entity.Property(e => e.AssetDividendsReinvested).HasColumnType("money");
            entity.Property(e => e.AssetDividendsTotal).HasColumnType("money");
            entity.Property(e => e.AssetExpenses).HasColumnType("money");
            entity.Property(e => e.AssetExpensesFees).HasColumnType("money");
            entity.Property(e => e.AssetExpensesMisc).HasColumnType("money");
            entity.Property(e => e.AssetExpensesTotal).HasColumnType("money");
            entity.Property(e => e.AssetFlexField01Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.AssetFlexField02Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.AssetFlexField03Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.AssetFlexField04Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.AssetFlexField05Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetFlexField06Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetFlexField09Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField10Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField11Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField12Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField13Date).HasColumnType("date");
            entity.Property(e => e.AssetFlexField14Date).HasColumnType("date");
            entity.Property(e => e.AssetFlexField15Date).HasColumnType("date");
            entity.Property(e => e.AssetFlexField16Date).HasColumnType("date");
            entity.Property(e => e.AssetFlexField17Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField18Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField19Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField20Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField21Date).HasColumnType("date");
            entity.Property(e => e.AssetFlexField22Date).HasColumnType("date");
            entity.Property(e => e.AssetFlexField23Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField24Text)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.AssetFlexField25Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField26Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField27Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField28Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField29Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetFlexField30Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetGainLossTotal).HasColumnType("money");
            entity.Property(e => e.AssetGainsRealized).HasColumnType("money");
            entity.Property(e => e.AssetGainsUnrealized).HasColumnType("money");
            entity.Property(e => e.AssetHoldStrategy).IsUnicode(false);
            entity.Property(e => e.AssetInterestPaidOut).HasColumnType("money");
            entity.Property(e => e.AssetInterestReinvested).HasColumnType("money");
            entity.Property(e => e.AssetInterestTotal).HasColumnType("money");
            entity.Property(e => e.AssetLiquidatedDate).HasColumnType("date");
            entity.Property(e => e.AssetMarketValue).HasColumnType("money");
            entity.Property(e => e.AssetMaturityDate).HasColumnType("date");
            entity.Property(e => e.AssetName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetNetCashFlow).HasColumnType("money");
            entity.Property(e => e.AssetObjective)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetObjectiveAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetRordollarAnnualized)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("AssetRORDollarAnnualized");
            entity.Property(e => e.AssetRorsimpleAnnualized)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("AssetRORSimpleAnnualized");
            entity.Property(e => e.AssetRortimeAnnualized)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("AssetRORTimeAnnualized");
            entity.Property(e => e.AssetSector)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetSharePrice).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSharePriceDate).HasColumnType("date");
            entity.Property(e => e.AssetShares).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSymbol)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.AssetTransactionCost).HasColumnType("money");
            entity.Property(e => e.AssetType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetWithdrawals).HasColumnType("money");
            entity.Property(e => e.HouseHoldAdditions).HasColumnType("money");
            entity.Property(e => e.HouseHoldNetAdditions).HasColumnType("money");
            entity.Property(e => e.HouseHoldWithdrawals).HasColumnType("money");
            entity.Property(e => e.InvestorAdditions).HasColumnType("money");
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorHeadOfHouseholdId).HasColumnName("InvestorHeadOfHouseholdID");
            entity.Property(e => e.InvestorHouseholdId).HasColumnName("InvestorHouseholdID");
            entity.Property(e => e.InvestorHouseholdName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorMarketValue).HasColumnType("money");
            entity.Property(e => e.InvestorNetAdditions).HasColumnType("money");
            entity.Property(e => e.InvestorPrimaryProducer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorPrimaryProducerNameId).HasColumnName("InvestorPrimaryProducerNameID");
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorWithdrawals).HasColumnType("money");
            entity.Property(e => e.OwnerFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecurityMaturityDate).HasColumnType("date");
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueCustodianId).HasColumnName("UniqueCustodianID");
            entity.Property(e => e.UniqueInvestmentId).HasColumnName("UniqueInvestmentID");
            entity.Property(e => e.UniqueInvestorId).HasColumnName("UniqueInvestorID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwReportInvestmentIce>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportInvestmentICE");

            entity.Property(e => e.AccountAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AccountAdditions).HasColumnType("money");
            entity.Property(e => e.AccountManagementFees).HasColumnType("money");
            entity.Property(e => e.AccountManager1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNetCashFlow).HasColumnType("money");
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountObjective)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTaxStatus)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTypeAndNumber)
                .HasMaxLength(77)
                .IsUnicode(false);
            entity.Property(e => e.AccountTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountWithdrawals).HasColumnType("money");
            entity.Property(e => e.AssetAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AssetAdditions).HasColumnType("money");
            entity.Property(e => e.AssetBasis).HasColumnType("money");
            entity.Property(e => e.AssetBasisPerShare).HasColumnType("numeric(38, 17)");
            entity.Property(e => e.AssetBasisType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCapGainStreinvested)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainSTReinvested");
            entity.Property(e => e.AssetCapGainsLtpaidOut)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsLTPaidOut");
            entity.Property(e => e.AssetCapGainsLtreinvested)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsLTReinvested");
            entity.Property(e => e.AssetCapGainsLttotal)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsLTTotal");
            entity.Property(e => e.AssetCapGainsStpaidOut)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsSTPaidOut");
            entity.Property(e => e.AssetCapGainsSttotal)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsSTTotal");
            entity.Property(e => e.AssetCategory)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCommissions).HasColumnType("money");
            entity.Property(e => e.AssetCompany)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCompanyAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AssetCUSIP");
            entity.Property(e => e.AssetCusipExt)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetDividendsPaidOut).HasColumnType("money");
            entity.Property(e => e.AssetDividendsReinvested).HasColumnType("money");
            entity.Property(e => e.AssetDividendsTotal).HasColumnType("money");
            entity.Property(e => e.AssetExpenses).HasColumnType("money");
            entity.Property(e => e.AssetExpensesFees).HasColumnType("money");
            entity.Property(e => e.AssetExpensesMisc).HasColumnType("money");
            entity.Property(e => e.AssetExpensesTotal).HasColumnType("money");
            entity.Property(e => e.AssetGainLossTotal).HasColumnType("money");
            entity.Property(e => e.AssetGainsRealized).HasColumnType("money");
            entity.Property(e => e.AssetGainsUnrealized).HasColumnType("money");
            entity.Property(e => e.AssetInterestPaidOut).HasColumnType("money");
            entity.Property(e => e.AssetInterestReinvested).HasColumnType("money");
            entity.Property(e => e.AssetInterestTotal).HasColumnType("money");
            entity.Property(e => e.AssetLiquidatedDate).HasColumnType("date");
            entity.Property(e => e.AssetMarketValue).HasColumnType("money");
            entity.Property(e => e.AssetName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetNetCashFlow).HasColumnType("money");
            entity.Property(e => e.AssetRordollarAnnualized)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("AssetRORDollarAnnualized");
            entity.Property(e => e.AssetRorsimpleAnnualized)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("AssetRORSimpleAnnualized");
            entity.Property(e => e.AssetRortimeAnnualized)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("AssetRORTimeAnnualized");
            entity.Property(e => e.AssetSector)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetSharePrice).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSharePriceDate).HasColumnType("date");
            entity.Property(e => e.AssetShares).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetTransactionCost).HasColumnType("money");
            entity.Property(e => e.AssetType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetWithdrawals).HasColumnType("money");
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorHouseholdId).HasColumnName("InvestorHouseholdID");
            entity.Property(e => e.InvestorHouseholdName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorPrimaryProducer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorPrimaryProducerNameId).HasColumnName("InvestorPrimaryProducerNameID");
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueInvestmentId).HasColumnName("UniqueInvestmentID");
            entity.Property(e => e.UniqueInvestorId).HasColumnName("UniqueInvestorID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueSecurityId).HasColumnName("UniqueSecurityID");
        });

        modelBuilder.Entity<VwReportInvestmentMgmt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportInvestmentMgmt");

            entity.Property(e => e.AccountClosedDate).HasColumnType("date");
            entity.Property(e => e.AccountCustodian)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountCustodianAbbr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountManager1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountMarketValue).HasColumnType("money");
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AssetCategory)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCompany)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCompanyAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AssetCUSIP");
            entity.Property(e => e.AssetDownloadSource)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetLiquidatedDate).HasColumnType("date");
            entity.Property(e => e.AssetMarketValue).HasColumnType("money");
            entity.Property(e => e.AssetName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetSharePrice).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSharePriceDate).HasColumnType("date");
            entity.Property(e => e.AssetShares).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BeneficiaryFreeForm)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorGroupWithMarketValue).HasColumnType("money");
            entity.Property(e => e.InvestorHouseholdHeadOfHouseholdFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorHouseholdHeadOfHouseholdSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorHouseholdHeadOfHouseholdUniqueNameId).HasColumnName("InvestorHouseholdHeadOfHouseholdUniqueNameID");
            entity.Property(e => e.InvestorHouseholdId).HasColumnName("InvestorHouseholdID");
            entity.Property(e => e.InvestorHouseholdMarketValue).HasColumnType("money");
            entity.Property(e => e.InvestorHouseholdName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorMarketValue).HasColumnType("money");
            entity.Property(e => e.InvestorPrimaryProducer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorPrimaryProducerNameId).HasColumnName("InvestorPrimaryProducerNameID");
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueCustodianId).HasColumnName("UniqueCustodianID");
            entity.Property(e => e.UniqueInvestmentId).HasColumnName("UniqueInvestmentID");
            entity.Property(e => e.UniqueInvestorId).HasColumnName("UniqueInvestorID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwReportInvestmentNewBiz>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportInvestmentNewBiz");

            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionCodeAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionCodeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionComment)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.ActionCompletedDate).HasColumnType("date");
            entity.Property(e => e.ActionCompletedYn).HasColumnName("ActionCompletedYN");
            entity.Property(e => e.ActionFollowupDate).HasPrecision(6);
            entity.Property(e => e.ActionInitiatedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionInitiatedDate).HasColumnType("date");
            entity.Property(e => e.ActionLastChangedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionPriority)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.InvestorFullname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueNewBizId).HasColumnName("UniqueNewBizID");
            entity.Property(e => e.VendorFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportInvestmentNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportInvestmentNote");

            entity.Property(e => e.NoteContent)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.NoteFollowUpCompletedYn).HasColumnName("NoteFollowUpCompletedYN");
            entity.Property(e => e.NoteFollowUpDate).HasPrecision(6);
            entity.Property(e => e.PrivateNoteUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Topic)
                .IsRequired()
                .HasMaxLength(33)
                .IsUnicode(false);
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueNoteId).HasColumnName("UniqueNoteID");
            entity.Property(e => e.UniquePrivateNoteUserId).HasColumnName("UniquePrivateNoteUserID");
            entity.Property(e => e.WhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WhoChanged)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportInvestmentSecurity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportInvestmentSecurities");

            entity.Property(e => e.AnnYieldPerShare).HasColumnType("numeric(9, 3)");
            entity.Property(e => e.AssetDownloadSource)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CallDate).HasColumnType("date");
            entity.Property(e => e.FactorAlpha).HasColumnType("numeric(9, 2)");
            entity.Property(e => e.FactorBeta).HasColumnType("numeric(9, 2)");
            entity.Property(e => e.InterestAccruesForRortf).HasColumnName("InterestAccruesForRORTF");
            entity.Property(e => e.InterestBearingTf).HasColumnName("InterestBearingTF");
            entity.Property(e => e.InterestDepreciationPoolTf).HasColumnName("InterestDepreciationPoolTF");
            entity.Property(e => e.InterestFixedIncomeTf).HasColumnName("InterestFixedIncomeTF");
            entity.Property(e => e.InterestFromPositionTf).HasColumnName("InterestFromPositionTF");
            entity.Property(e => e.InterestRateAnnual).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.LiquidityLevel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MaturityDate).HasColumnType("date");
            entity.Property(e => e.NormalLoad).HasColumnType("numeric(12, 6)");
            entity.Property(e => e.OptionExpires).HasColumnType("date");
            entity.Property(e => e.OptionStrikePrice).HasColumnType("money");
            entity.Property(e => e.OptionTf).HasColumnName("OptionTF");
            entity.Property(e => e.PriceFactor).HasColumnType("numeric(12, 6)");
            entity.Property(e => e.ReconcileFrequency)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReconcileShareTolerance).HasColumnType("numeric(8, 6)");
            entity.Property(e => e.RiskLevel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SecAlternateID");
            entity.Property(e => e.SecCatagory)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecCompany)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecCusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SecCUSIP");
            entity.Property(e => e.SecCusipextension)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SecCUSIPExtension");
            entity.Property(e => e.SecName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecObjective)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecPreviousAlternamteId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SecPreviousAlternamteID");
            entity.Property(e => e.SecPreviousCusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecPreviousExtension)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecSector)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ShareFactor).HasColumnType("numeric(12, 6)");
            entity.Property(e => e.StockExchange)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TrailerBegins).HasColumnType("date");
            entity.Property(e => e.TrailerCommPce).HasColumnType("numeric(9, 6)");
            entity.Property(e => e.TrailerCommsPaidThru).HasColumnType("date");
            entity.Property(e => e.TrailerCommsTf).HasColumnName("TrailerCommsTF");
            entity.Property(e => e.UniqueCompanyId).HasColumnName("UniqueCompanyID");
            entity.Property(e => e.UniqueDlid).HasColumnName("UniqueDLID");
            entity.Property(e => e.UniqueInvestmentTypeId).HasColumnName("UniqueInvestmentTypeID");
            entity.Property(e => e.UniqueSecurityId).HasColumnName("UniqueSecurityID");
            entity.Property(e => e.UpdatePriceMethod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportInvestmentTrailerComm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportInvestmentTrailerComm");

            entity.Property(e => e.AccountManager1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountTypeAndNumber)
                .HasMaxLength(77)
                .IsUnicode(false);
            entity.Property(e => e.AssetAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AssetCategory)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCompany)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCompanyAbbr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCusip)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AssetCUSIP");
            entity.Property(e => e.AssetCusipextension)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AssetCUSIPExtension");
            entity.Property(e => e.AssetDownloadSource)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetLiquidatedDate).HasColumnType("date");
            entity.Property(e => e.AssetMarketValue).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.AssetName)
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetSharePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.AssetSharePriceDate).HasColumnType("date");
            entity.Property(e => e.AssetShares).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.AssetSymbol)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BFlagTrailerCommission).HasColumnName("bFlagTrailerCommission");
            entity.Property(e => e.InvesorPrimaryProducerId).HasColumnName("InvesorPrimaryProducerID");
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorHouseholdId).HasColumnName("InvestorHouseholdID");
            entity.Property(e => e.InvestorHouseholdName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorPrimaryProducer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorPrimaryProducerNameId).HasColumnName("InvestorPrimaryProducerNameID");
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TrailerBeginDate)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TrailerBeginsNmonthsAfterAcquired).HasColumnName("TrailerBeginsNMonthsAfterAcquired");
            entity.Property(e => e.TrailerCalcBeginDate)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TrailerCalcEndDate)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TrailerCalcMethod)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TrailerCommPct).HasColumnType("numeric(9, 6)");
            entity.Property(e => e.TrailerCommissionAmount).HasColumnType("numeric(32, 12)");
            entity.Property(e => e.TrailerCommsPaidThru).HasColumnType("date");
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueCompanyId).HasColumnName("UniqueCompanyID");
            entity.Property(e => e.UniqueCustodianId).HasColumnName("UniqueCustodianID");
            entity.Property(e => e.UniqueDlid).HasColumnName("UniqueDLID");
            entity.Property(e => e.UniqueInvestmentId).HasColumnName("UniqueInvestmentID");
            entity.Property(e => e.UniqueInvestorId).HasColumnName("UniqueInvestorID");
            entity.Property(e => e.UniqueManager1Id).HasColumnName("UniqueManager1ID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueProducer1Id).HasColumnName("UniqueProducer1ID");
            entity.Property(e => e.UniqueProducer2Id).HasColumnName("UniqueProducer2ID");
            entity.Property(e => e.UniqueSecurityId).HasColumnName("UniqueSecurityID");
        });

        modelBuilder.Entity<VwReportLink>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportLink");

            entity.Property(e => e.DateOfBirth).HasColumnType("date");
            entity.Property(e => e.LastChanged).HasColumnType("smalldatetime");
            entity.Property(e => e.LinkRelationship)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LinkedFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LinkedSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NameTypeDescriptionPrimary)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueLinkedNameId).HasColumnName("UniqueLinkedNameID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.WhoChanged)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportMarket>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportMarket");

            entity.Property(e => e.FollowupDate).HasPrecision(6);
            entity.Property(e => e.LastChange).HasColumnType("smalldatetime");
            entity.Property(e => e.MarketDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.WhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportNameFile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportNameFile");

            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Filename)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
        });

        modelBuilder.Entity<VwReportNameNewBiz>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportNameNewBiz");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionCodeAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionCodeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionComment)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.ActionCompletedDate).HasColumnType("date");
            entity.Property(e => e.ActionCompletedYn).HasColumnName("ActionCompletedYN");
            entity.Property(e => e.ActionFollowupDate).HasPrecision(6);
            entity.Property(e => e.ActionInitiatedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionInitiatedDate).HasColumnType("date");
            entity.Property(e => e.ActionLastChangedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionPriority)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueNewBizId).HasColumnName("UniqueNewBizID");
            entity.Property(e => e.VendorFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportNameNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportNameNote");

            entity.Property(e => e.NoteContent)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.NoteFollowUpCompletedYn).HasColumnName("NoteFollowUpCompletedYN");
            entity.Property(e => e.NoteFollowUpDate).HasPrecision(6);
            entity.Property(e => e.PrivateNoteUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Topic)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueHouseholdId).HasColumnName("UniqueHouseholdID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniquePrivateNoteUserId).HasColumnName("UniquePrivateNoteUserID");
            entity.Property(e => e.UniqueTopicTypeCodeId).HasColumnName("UniqueTopicTypeCodeID");
            entity.Property(e => e.WhoAdded)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WhoChanged)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportPerformance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportPerformance");

            entity.Property(e => e.AccountAdditions).HasColumnType("money");
            entity.Property(e => e.AccountAverageDailyBalance).HasColumnType("money");
            entity.Property(e => e.AccountCalculationErrorMessage).IsUnicode(false);
            entity.Property(e => e.AccountCustodian)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountCustodianAbbr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountDistributionsInternal).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsPaidout).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsTotal).HasColumnType("money");
            entity.Property(e => e.AccountExpenses).HasColumnType("money");
            entity.Property(e => e.AccountGainLossTotal).HasColumnType("money");
            entity.Property(e => e.AccountManagementFees).HasColumnType("money");
            entity.Property(e => e.AccountManager1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNetCashFlow).HasColumnType("money");
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountObjective)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountPeriodEndCashBalance).HasColumnType("money");
            entity.Property(e => e.AccountPeriodEndDate).HasColumnType("datetime");
            entity.Property(e => e.AccountPeriodEndValue).HasColumnType("money");
            entity.Property(e => e.AccountPeriodStartDate).HasColumnType("datetime");
            entity.Property(e => e.AccountPeriodStartValue).HasColumnType("money");
            entity.Property(e => e.AccountProducer1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountRordollar)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORDollar");
            entity.Property(e => e.AccountRordollarAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORDollarAnnualized");
            entity.Property(e => e.AccountRorisAnnualized).HasColumnName("AccountRORIsAnnualized");
            entity.Property(e => e.AccountRorsimple)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORSimple");
            entity.Property(e => e.AccountRorsimpleAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORSimpleAnnualized");
            entity.Property(e => e.AccountRortime)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORTime");
            entity.Property(e => e.AccountRortimeAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORTimeAnnualized");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTypeAndNumber)
                .HasMaxLength(77)
                .IsUnicode(false);
            entity.Property(e => e.AccountWithdrawals).HasColumnType("money");
            entity.Property(e => e.AssetAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AssetAdditions).HasColumnType("money");
            entity.Property(e => e.AssetAverageDailyBalance).HasColumnType("money");
            entity.Property(e => e.AssetBasisType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCalculateRor).HasColumnName("AssetCalculateROR");
            entity.Property(e => e.AssetCalculationErrorMessage).IsUnicode(false);
            entity.Property(e => e.AssetCapGainsLtpaidOut)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsLTPaidOut");
            entity.Property(e => e.AssetCapGainsLtreinvested)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsLTReinvested");
            entity.Property(e => e.AssetCapGainsStpaidOut)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsSTPaidOut");
            entity.Property(e => e.AssetCapGainsStreinvested)
                .HasColumnType("money")
                .HasColumnName("AssetCapGainsSTReinvested");
            entity.Property(e => e.AssetCapGainsTotal).HasColumnType("money");
            entity.Property(e => e.AssetCategory)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetClass)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCommissions).HasColumnType("money");
            entity.Property(e => e.AssetCompany)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCusip)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetDistributionsPaidOut).HasColumnType("money");
            entity.Property(e => e.AssetDistributionsReinvested).HasColumnType("money");
            entity.Property(e => e.AssetDistributionsTotal).HasColumnType("money");
            entity.Property(e => e.AssetDividendsPaidOut).HasColumnType("money");
            entity.Property(e => e.AssetDividendsReinvested).HasColumnType("money");
            entity.Property(e => e.AssetDividendsTotal).HasColumnType("money");
            entity.Property(e => e.AssetExpenses).HasColumnType("money");
            entity.Property(e => e.AssetFaceValue).HasColumnType("money");
            entity.Property(e => e.AssetFaceValuePlusReinvestedInterest).HasColumnType("money");
            entity.Property(e => e.AssetGainLossTotal).HasColumnType("money");
            entity.Property(e => e.AssetGainsAndReinvestedDistributions).HasColumnType("money");
            entity.Property(e => e.AssetGainsRealized).HasColumnType("money");
            entity.Property(e => e.AssetGainsUnRealized).HasColumnType("money");
            entity.Property(e => e.AssetInterestAccrued).HasColumnType("money");
            entity.Property(e => e.AssetInterestPaidOut).HasColumnType("money");
            entity.Property(e => e.AssetInterestReinvested).HasColumnType("money");
            entity.Property(e => e.AssetInterestTotal).HasColumnType("money");
            entity.Property(e => e.AssetLiquidatedDate).HasColumnType("date");
            entity.Property(e => e.AssetName)
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetNetCashFlow).HasColumnType("money");
            entity.Property(e => e.AssetObjective)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetObjectiveAbbr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetPeriodEndDate).HasColumnType("datetime");
            entity.Property(e => e.AssetPeriodEndSharePrice).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetPeriodEndSharePriceDate).HasColumnType("datetime");
            entity.Property(e => e.AssetPeriodEndShares).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetPeriodEndValue).HasColumnType("money");
            entity.Property(e => e.AssetPeriodStartDate).HasColumnType("datetime");
            entity.Property(e => e.AssetPeriodStartSharePrice).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetPeriodStartSharePriceDate).HasColumnType("datetime");
            entity.Property(e => e.AssetPeriodStartShares).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetPeriodStartValue).HasColumnType("money");
            entity.Property(e => e.AssetPriceIncreasePct).HasColumnType("decimal(16, 9)");
            entity.Property(e => e.AssetRordollar)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORDollar");
            entity.Property(e => e.AssetRordollarAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORDollarAnnualized");
            entity.Property(e => e.AssetRorisAnnualized).HasColumnName("AssetRORIsAnnualized");
            entity.Property(e => e.AssetRorsimple)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORSimple");
            entity.Property(e => e.AssetRorsimpleAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORSimpleAnnualized");
            entity.Property(e => e.AssetRortime)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORTime");
            entity.Property(e => e.AssetRortimeAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORTimeAnnualized");
            entity.Property(e => e.AssetSector)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetSymbol)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetWithdrawals).HasColumnType("money");
            entity.Property(e => e.BFlagAdvisoryAccount).HasColumnName("bFlagAdvisoryAccount");
            entity.Property(e => e.GroupedWithFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupedWithSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HouseHoldName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorHeadOfHouseholdId).HasColumnName("InvestorHeadOfHouseholdID");
            entity.Property(e => e.InvestorNickName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorPrefix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorSuffix)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level1Additions).HasColumnType("money");
            entity.Property(e => e.Level1AverageDailyBalance).HasColumnType("money");
            entity.Property(e => e.Level1CalculationErrorMessage).IsUnicode(false);
            entity.Property(e => e.Level1DistributionsInternal).HasColumnType("money");
            entity.Property(e => e.Level1DistributionsPaidout).HasColumnType("money");
            entity.Property(e => e.Level1DistributionsTotal).HasColumnType("money");
            entity.Property(e => e.Level1Expenses).HasColumnType("money");
            entity.Property(e => e.Level1GainLossTotal).HasColumnType("money");
            entity.Property(e => e.Level1ManagementFees).HasColumnType("money");
            entity.Property(e => e.Level1NetCashFlow).HasColumnType("money");
            entity.Property(e => e.Level1PeriodEndDate).HasColumnType("datetime");
            entity.Property(e => e.Level1PeriodEndValue).HasColumnType("money");
            entity.Property(e => e.Level1PeriodStartDate).HasColumnType("datetime");
            entity.Property(e => e.Level1PeriodStartValue).HasColumnType("money");
            entity.Property(e => e.Level1Rordollar)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORDollar");
            entity.Property(e => e.Level1RordollarAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORDollarAnnualized");
            entity.Property(e => e.Level1RorisAnnualized).HasColumnName("Level1RORIsAnnualized");
            entity.Property(e => e.Level1Rorsimple)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORSimple");
            entity.Property(e => e.Level1RorsimpleAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORSimpleAnnualized");
            entity.Property(e => e.Level1Rortime)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORTime");
            entity.Property(e => e.Level1RortimeAnnualized)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORTimeAnnualized");
            entity.Property(e => e.Level1Withdrawals).HasColumnType("money");
            entity.Property(e => e.OwnerFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducerFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducerSortName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReportDateEnd).HasColumnType("datetime");
            entity.Property(e => e.ReportDateStart).HasColumnType("datetime");
            entity.Property(e => e.ReportLevel1Data)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReportLevel1Label)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ReportLevel2Data)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReportLevel2Label)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueClientId).HasColumnName("UniqueClientID");
            entity.Property(e => e.UniqueCustodianId).HasColumnName("UniqueCustodianID");
            entity.Property(e => e.UniqueGroupWithId).HasColumnName("UniqueGroupWithID");
            entity.Property(e => e.UniqueHouseHoldId).HasColumnName("UniqueHouseHoldID");
            entity.Property(e => e.UniqueInvestmentId).HasColumnName("UniqueInvestmentID");
            entity.Property(e => e.UniqueInvestorId).HasColumnName("UniqueInvestorID");
            entity.Property(e => e.UniqueLevel1Id).HasColumnName("UniqueLevel1ID");
            entity.Property(e => e.UniqueLevel2Id).HasColumnName("UniqueLevel2ID");
            entity.Property(e => e.UniqueOwnerId).HasColumnName("UniqueOwnerID");
            entity.Property(e => e.UniquePrimaryProducerId).HasColumnName("UniquePrimaryProducerID");
            entity.Property(e => e.UniqueSecurityId).HasColumnName("UniqueSecurityID");
        });

        modelBuilder.Entity<VwReportPerformanceMp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportPerformanceMP");

            entity.Property(e => e.AccountAdditionsP1).HasColumnType("money");
            entity.Property(e => e.AccountAdditionsP2).HasColumnType("money");
            entity.Property(e => e.AccountAdditionsP3).HasColumnType("money");
            entity.Property(e => e.AccountAdditionsP4).HasColumnType("money");
            entity.Property(e => e.AccountAverageDailyBalanceP1).HasColumnType("money");
            entity.Property(e => e.AccountAverageDailyBalanceP2).HasColumnType("money");
            entity.Property(e => e.AccountAverageDailyBalanceP3).HasColumnType("money");
            entity.Property(e => e.AccountAverageDailyBalanceP4).HasColumnType("money");
            entity.Property(e => e.AccountCustodian)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountCustodianAbbr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountDistributionsInternalP1).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsInternalP2).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsInternalP3).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsInternalP4).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsPaidoutP1).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsPaidoutP2).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsPaidoutP3).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsPaidoutP4).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsTotalP1).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsTotalP2).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsTotalP3).HasColumnType("money");
            entity.Property(e => e.AccountDistributionsTotalP4).HasColumnType("money");
            entity.Property(e => e.AccountEndCashBalanceP1).HasColumnType("money");
            entity.Property(e => e.AccountEndCashBalanceP2).HasColumnType("money");
            entity.Property(e => e.AccountEndCashBalanceP3).HasColumnType("money");
            entity.Property(e => e.AccountEndCashBalanceP4).HasColumnType("money");
            entity.Property(e => e.AccountEndDateP1).HasColumnType("datetime");
            entity.Property(e => e.AccountEndDateP2).HasColumnType("datetime");
            entity.Property(e => e.AccountEndDateP3).HasColumnType("datetime");
            entity.Property(e => e.AccountEndDateP4).HasColumnType("datetime");
            entity.Property(e => e.AccountEndValueP1).HasColumnType("money");
            entity.Property(e => e.AccountEndValueP2).HasColumnType("money");
            entity.Property(e => e.AccountEndValueP3).HasColumnType("money");
            entity.Property(e => e.AccountEndValueP4).HasColumnType("money");
            entity.Property(e => e.AccountExpensesP1).HasColumnType("money");
            entity.Property(e => e.AccountExpensesP2).HasColumnType("money");
            entity.Property(e => e.AccountExpensesP3).HasColumnType("money");
            entity.Property(e => e.AccountExpensesP4).HasColumnType("money");
            entity.Property(e => e.AccountGainLossP1).HasColumnType("money");
            entity.Property(e => e.AccountGainLossP2).HasColumnType("money");
            entity.Property(e => e.AccountGainLossP3).HasColumnType("money");
            entity.Property(e => e.AccountGainLossP4).HasColumnType("money");
            entity.Property(e => e.AccountManagementFeesP1).HasColumnType("money");
            entity.Property(e => e.AccountManagementFeesP2).HasColumnType("money");
            entity.Property(e => e.AccountManagementFeesP3).HasColumnType("money");
            entity.Property(e => e.AccountManagementFeesP4).HasColumnType("money");
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountObjective)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountRordollarAnnualizedP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORDollarAnnualizedP1");
            entity.Property(e => e.AccountRordollarAnnualizedP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORDollarAnnualizedP2");
            entity.Property(e => e.AccountRordollarAnnualizedP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORDollarAnnualizedP3");
            entity.Property(e => e.AccountRordollarAnnualizedP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORDollarAnnualizedP4");
            entity.Property(e => e.AccountRordollarP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORDollarP1");
            entity.Property(e => e.AccountRordollarP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORDollarP2");
            entity.Property(e => e.AccountRordollarP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORDollarP3");
            entity.Property(e => e.AccountRordollarP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORDollarP4");
            entity.Property(e => e.AccountRorisAnnualizedP1).HasColumnName("AccountRORIsAnnualizedP1");
            entity.Property(e => e.AccountRorisAnnualizedP2).HasColumnName("AccountRORIsAnnualizedP2");
            entity.Property(e => e.AccountRorisAnnualizedP3).HasColumnName("AccountRORIsAnnualizedP3");
            entity.Property(e => e.AccountRorisAnnualizedP4).HasColumnName("AccountRORIsAnnualizedP4");
            entity.Property(e => e.AccountRorsimpleAnnualizedP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORSimpleAnnualizedP1");
            entity.Property(e => e.AccountRorsimpleAnnualizedP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORSimpleAnnualizedP2");
            entity.Property(e => e.AccountRorsimpleAnnualizedP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORSimpleAnnualizedP3");
            entity.Property(e => e.AccountRorsimpleAnnualizedP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORSimpleAnnualizedP4");
            entity.Property(e => e.AccountRorsimpleP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORSimpleP1");
            entity.Property(e => e.AccountRorsimpleP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORSimpleP2");
            entity.Property(e => e.AccountRorsimpleP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORSimpleP3");
            entity.Property(e => e.AccountRorsimpleP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORSimpleP4");
            entity.Property(e => e.AccountRortimeAnnualizedP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORTimeAnnualizedP1");
            entity.Property(e => e.AccountRortimeAnnualizedP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORTimeAnnualizedP2");
            entity.Property(e => e.AccountRortimeAnnualizedP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORTimeAnnualizedP3");
            entity.Property(e => e.AccountRortimeAnnualizedP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORTimeAnnualizedP4");
            entity.Property(e => e.AccountRortimeP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORTimeP1");
            entity.Property(e => e.AccountRortimeP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORTimeP2");
            entity.Property(e => e.AccountRortimeP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORTimeP3");
            entity.Property(e => e.AccountRortimeP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AccountRORTimeP4");
            entity.Property(e => e.AccountStartDateP1).HasColumnType("datetime");
            entity.Property(e => e.AccountStartDateP2).HasColumnType("datetime");
            entity.Property(e => e.AccountStartDateP3).HasColumnType("datetime");
            entity.Property(e => e.AccountStartDateP4).HasColumnType("datetime");
            entity.Property(e => e.AccountStartValueP1).HasColumnType("money");
            entity.Property(e => e.AccountStartValueP2).HasColumnType("money");
            entity.Property(e => e.AccountStartValueP3).HasColumnType("money");
            entity.Property(e => e.AccountStartValueP4).HasColumnType("money");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTypeAndNumber)
                .HasMaxLength(77)
                .IsUnicode(false);
            entity.Property(e => e.AccountWithdrawalsP1).HasColumnType("money");
            entity.Property(e => e.AccountWithdrawalsP2).HasColumnType("money");
            entity.Property(e => e.AccountWithdrawalsP3).HasColumnType("money");
            entity.Property(e => e.AccountWithdrawalsP4).HasColumnType("money");
            entity.Property(e => e.AssetAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AssetAdditionsP1).HasColumnType("money");
            entity.Property(e => e.AssetAdditionsP2).HasColumnType("money");
            entity.Property(e => e.AssetAdditionsP3).HasColumnType("money");
            entity.Property(e => e.AssetAdditionsP4).HasColumnType("money");
            entity.Property(e => e.AssetAverageDailyBalanceP1).HasColumnType("money");
            entity.Property(e => e.AssetAverageDailyBalanceP2).HasColumnType("money");
            entity.Property(e => e.AssetAverageDailyBalanceP3).HasColumnType("money");
            entity.Property(e => e.AssetAverageDailyBalanceP4).HasColumnType("money");
            entity.Property(e => e.AssetCalculateRor).HasColumnName("AssetCalculateROR");
            entity.Property(e => e.AssetCalculationErrorMessage).IsUnicode(false);
            entity.Property(e => e.AssetCashFlowNetP1).HasColumnType("money");
            entity.Property(e => e.AssetCashFlowNetP2).HasColumnType("money");
            entity.Property(e => e.AssetCashFlowNetP3).HasColumnType("money");
            entity.Property(e => e.AssetCashFlowNetP4).HasColumnType("money");
            entity.Property(e => e.AssetCategory)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetClass)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCompany)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetDistributionsPaidOutP1).HasColumnType("money");
            entity.Property(e => e.AssetDistributionsPaidOutP2).HasColumnType("money");
            entity.Property(e => e.AssetDistributionsPaidOutP3).HasColumnType("money");
            entity.Property(e => e.AssetDistributionsPaidOutP4).HasColumnType("money");
            entity.Property(e => e.AssetDistributionsReinvestedP1).HasColumnType("money");
            entity.Property(e => e.AssetDistributionsReinvestedP2).HasColumnType("money");
            entity.Property(e => e.AssetDistributionsReinvestedP3).HasColumnType("money");
            entity.Property(e => e.AssetDistributionsReinvestedP4).HasColumnType("money");
            entity.Property(e => e.AssetEndDateP1).HasColumnType("datetime");
            entity.Property(e => e.AssetEndDateP2).HasColumnType("datetime");
            entity.Property(e => e.AssetEndDateP3).HasColumnType("datetime");
            entity.Property(e => e.AssetEndDateP4).HasColumnType("datetime");
            entity.Property(e => e.AssetExpensesP1).HasColumnType("money");
            entity.Property(e => e.AssetExpensesP2).HasColumnType("money");
            entity.Property(e => e.AssetExpensesP3).HasColumnType("money");
            entity.Property(e => e.AssetExpensesP4).HasColumnType("money");
            entity.Property(e => e.AssetGainLossP1).HasColumnType("money");
            entity.Property(e => e.AssetGainLossP2).HasColumnType("money");
            entity.Property(e => e.AssetGainLossP3).HasColumnType("money");
            entity.Property(e => e.AssetGainLossP4).HasColumnType("money");
            entity.Property(e => e.AssetLiquidatedDate).HasColumnType("date");
            entity.Property(e => e.AssetName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetObjective)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetObjectiveAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetRordollarAnnualizedP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORDollarAnnualizedP1");
            entity.Property(e => e.AssetRordollarAnnualizedP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORDollarAnnualizedP2");
            entity.Property(e => e.AssetRordollarAnnualizedP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORDollarAnnualizedP3");
            entity.Property(e => e.AssetRordollarAnnualizedP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORDollarAnnualizedP4");
            entity.Property(e => e.AssetRordollarP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORDollarP1");
            entity.Property(e => e.AssetRordollarP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORDollarP2");
            entity.Property(e => e.AssetRordollarP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORDollarP3");
            entity.Property(e => e.AssetRordollarP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORDollarP4");
            entity.Property(e => e.AssetRorisAnnualizedP1).HasColumnName("AssetRORIsAnnualizedP1");
            entity.Property(e => e.AssetRorisAnnualizedP2).HasColumnName("AssetRORIsAnnualizedP2");
            entity.Property(e => e.AssetRorisAnnualizedP3).HasColumnName("AssetRORIsAnnualizedP3");
            entity.Property(e => e.AssetRorisAnnualizedP4).HasColumnName("AssetRORIsAnnualizedP4");
            entity.Property(e => e.AssetRorsimpleAnnualizedP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORSimpleAnnualizedP1");
            entity.Property(e => e.AssetRorsimpleAnnualizedP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORSimpleAnnualizedP2");
            entity.Property(e => e.AssetRorsimpleAnnualizedP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORSimpleAnnualizedP3");
            entity.Property(e => e.AssetRorsimpleAnnualizedP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORSimpleAnnualizedP4");
            entity.Property(e => e.AssetRorsimpleP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORSimpleP1");
            entity.Property(e => e.AssetRorsimpleP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORSimpleP2");
            entity.Property(e => e.AssetRorsimpleP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORSimpleP3");
            entity.Property(e => e.AssetRorsimpleP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORSimpleP4");
            entity.Property(e => e.AssetRortimeAnnualizedP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORTimeAnnualizedP1");
            entity.Property(e => e.AssetRortimeAnnualizedP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORTimeAnnualizedP2");
            entity.Property(e => e.AssetRortimeAnnualizedP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORTimeAnnualizedP3");
            entity.Property(e => e.AssetRortimeAnnualizedP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORTimeAnnualizedP4");
            entity.Property(e => e.AssetRortimeP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORTimeP1");
            entity.Property(e => e.AssetRortimeP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORTimeP2");
            entity.Property(e => e.AssetRortimeP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORTimeP3");
            entity.Property(e => e.AssetRortimeP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("AssetRORTimeP4");
            entity.Property(e => e.AssetSector)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetSharesAtEndP1).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSharesAtEndP2).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSharesAtEndP3).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSharesAtEndP4).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSharesAtStartP1).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSharesAtStartP2).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSharesAtStartP3).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetSharesAtStartP4).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.AssetStartDateP1).HasColumnType("datetime");
            entity.Property(e => e.AssetStartDateP2).HasColumnType("datetime");
            entity.Property(e => e.AssetStartDateP3).HasColumnType("datetime");
            entity.Property(e => e.AssetStartDateP4).HasColumnType("datetime");
            entity.Property(e => e.AssetSymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetValueAtEndP1).HasColumnType("money");
            entity.Property(e => e.AssetValueAtEndP2).HasColumnType("money");
            entity.Property(e => e.AssetValueAtEndP3).HasColumnType("money");
            entity.Property(e => e.AssetValueAtEndP4).HasColumnType("money");
            entity.Property(e => e.AssetValueAtStartP1).HasColumnType("money");
            entity.Property(e => e.AssetValueAtStartP2).HasColumnType("money");
            entity.Property(e => e.AssetValueAtStartP3).HasColumnType("money");
            entity.Property(e => e.AssetValueAtStartP4).HasColumnType("money");
            entity.Property(e => e.AssetWithdrawalsP1).HasColumnType("money");
            entity.Property(e => e.AssetWithdrawalsP2).HasColumnType("money");
            entity.Property(e => e.AssetWithdrawalsP3).HasColumnType("money");
            entity.Property(e => e.AssetWithdrawalsP4).HasColumnType("money");
            entity.Property(e => e.BFlagAdvisoryAccount).HasColumnName("bFlagAdvisoryAccount");
            entity.Property(e => e.GroupedWithFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupedWithSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HouseHoldName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorHeadOfHouseholdId).HasColumnName("InvestorHeadOfHouseholdID");
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Level1EndDateP1).HasColumnType("datetime");
            entity.Property(e => e.Level1EndDateP2).HasColumnType("datetime");
            entity.Property(e => e.Level1EndDateP3).HasColumnType("datetime");
            entity.Property(e => e.Level1EndDateP4).HasColumnType("datetime");
            entity.Property(e => e.Level1EndValueP1).HasColumnType("money");
            entity.Property(e => e.Level1EndValueP2).HasColumnType("money");
            entity.Property(e => e.Level1EndValueP3).HasColumnType("money");
            entity.Property(e => e.Level1EndValueP4).HasColumnType("money");
            entity.Property(e => e.Level1RordollarAnnualizedP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORDollarAnnualizedP1");
            entity.Property(e => e.Level1RordollarAnnualizedP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORDollarAnnualizedP2");
            entity.Property(e => e.Level1RordollarAnnualizedP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORDollarAnnualizedP3");
            entity.Property(e => e.Level1RordollarAnnualizedP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORDollarAnnualizedP4");
            entity.Property(e => e.Level1RordollarP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORDollarP1");
            entity.Property(e => e.Level1RordollarP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORDollarP2");
            entity.Property(e => e.Level1RordollarP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORDollarP3");
            entity.Property(e => e.Level1RordollarP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORDollarP4");
            entity.Property(e => e.Level1RorisAnnualizedP1).HasColumnName("Level1RORIsAnnualizedP1");
            entity.Property(e => e.Level1RorisAnnualizedP2).HasColumnName("Level1RORIsAnnualizedP2");
            entity.Property(e => e.Level1RorisAnnualizedP3).HasColumnName("Level1RORIsAnnualizedP3");
            entity.Property(e => e.Level1RorisAnnualizedP4).HasColumnName("Level1RORIsAnnualizedP4");
            entity.Property(e => e.Level1RorsimpleAnnualizedP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORSimpleAnnualizedP1");
            entity.Property(e => e.Level1RorsimpleAnnualizedP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORSimpleAnnualizedP2");
            entity.Property(e => e.Level1RorsimpleAnnualizedP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORSimpleAnnualizedP3");
            entity.Property(e => e.Level1RorsimpleAnnualizedP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORSimpleAnnualizedP4");
            entity.Property(e => e.Level1RorsimpleP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORSimpleP1");
            entity.Property(e => e.Level1RorsimpleP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORSimpleP2");
            entity.Property(e => e.Level1RorsimpleP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORSimpleP3");
            entity.Property(e => e.Level1RorsimpleP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORSimpleP4");
            entity.Property(e => e.Level1RortimeAnnualizedP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORTimeAnnualizedP1");
            entity.Property(e => e.Level1RortimeAnnualizedP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORTimeAnnualizedP2");
            entity.Property(e => e.Level1RortimeAnnualizedP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORTimeAnnualizedP3");
            entity.Property(e => e.Level1RortimeAnnualizedP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORTimeAnnualizedP4");
            entity.Property(e => e.Level1RortimeP1)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORTimeP1");
            entity.Property(e => e.Level1RortimeP2)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORTimeP2");
            entity.Property(e => e.Level1RortimeP3)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORTimeP3");
            entity.Property(e => e.Level1RortimeP4)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("Level1RORTimeP4");
            entity.Property(e => e.Level1StartDateP1).HasColumnType("datetime");
            entity.Property(e => e.Level1StartDateP2).HasColumnType("datetime");
            entity.Property(e => e.Level1StartDateP3).HasColumnType("datetime");
            entity.Property(e => e.Level1StartDateP4).HasColumnType("datetime");
            entity.Property(e => e.Level1StartValueP1).HasColumnType("money");
            entity.Property(e => e.Level1StartValueP2).HasColumnType("money");
            entity.Property(e => e.Level1StartValueP3).HasColumnType("money");
            entity.Property(e => e.Level1StartValueP4).HasColumnType("money");
            entity.Property(e => e.OwnerFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.P1endDate)
                .HasColumnType("datetime")
                .HasColumnName("P1EndDate");
            entity.Property(e => e.P1selected).HasColumnName("P1Selected");
            entity.Property(e => e.P1startDate)
                .HasColumnType("datetime")
                .HasColumnName("P1StartDate");
            entity.Property(e => e.P2endDate)
                .HasColumnType("datetime")
                .HasColumnName("P2EndDate");
            entity.Property(e => e.P2selected).HasColumnName("P2Selected");
            entity.Property(e => e.P2startDate)
                .HasColumnType("datetime")
                .HasColumnName("P2StartDate");
            entity.Property(e => e.P3endDate)
                .HasColumnType("datetime")
                .HasColumnName("P3EndDate");
            entity.Property(e => e.P3selected).HasColumnName("P3Selected");
            entity.Property(e => e.P3startDate)
                .HasColumnType("datetime")
                .HasColumnName("P3StartDate");
            entity.Property(e => e.P4endDate)
                .HasColumnType("datetime")
                .HasColumnName("P4EndDate");
            entity.Property(e => e.P4selected).HasColumnName("P4Selected");
            entity.Property(e => e.P4startDate)
                .HasColumnType("datetime")
                .HasColumnName("P4StartDate");
            entity.Property(e => e.PrimaryProduceFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryProducerSortName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReportLevel1Data)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReportLevel1Label)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueCustodianId).HasColumnName("UniqueCustodianID");
            entity.Property(e => e.UniqueGroupWithId).HasColumnName("UniqueGroupWithID");
            entity.Property(e => e.UniqueHouseHoldId).HasColumnName("UniqueHouseHoldID");
            entity.Property(e => e.UniqueInvestmentId).HasColumnName("UniqueInvestmentID");
            entity.Property(e => e.UniqueInvestorId).HasColumnName("UniqueInvestorID");
            entity.Property(e => e.UniqueLevel1Id).HasColumnName("UniqueLevel1ID");
            entity.Property(e => e.UniqueOwnerId).HasColumnName("UniqueOwnerID");
            entity.Property(e => e.UniquePrimaryProducerId).HasColumnName("UniquePrimaryProducerID");
            entity.Property(e => e.UniqueSecurityId).HasColumnName("UniqueSecurityID");
        });

        modelBuilder.Entity<VwReportPhone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportPhone");

            entity.Property(e => e.Areacode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.Contact)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FullPhone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneExtension)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueHoldholdId).HasColumnName("UniqueHoldholdID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniquePhoneId).HasColumnName("UniquePhoneID");
        });

        modelBuilder.Entity<VwReportPolicyCoverage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportPolicyCoverage");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AnnuitySurrenderPeriod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CaseReference)
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CertificateId)
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CertificateID");
            entity.Property(e => e.CommissionCoverage1stYrTotal).HasColumnType("money");
            entity.Property(e => e.CommissionPolicy1stYrTotal).HasColumnType("money");
            entity.Property(e => e.ConversionMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageApprovalBasis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageBeneficiaryLong)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.CoverageBeneficiaryNamed)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageBenefit).HasColumnType("money");
            entity.Property(e => e.CoverageBenefitAccident).HasColumnType("money");
            entity.Property(e => e.CoverageBenefitMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageBenefitPeriod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageBenefitPeriodAccident)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageBenefitPeriodSick)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageBenefitSick).HasColumnType("money");
            entity.Property(e => e.CoverageCashValue).HasColumnType("money");
            entity.Property(e => e.CoverageCashWithApp).HasColumnType("money");
            entity.Property(e => e.CoverageClass)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageClassAbbr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageCompletedDate).HasColumnType("date");
            entity.Property(e => e.CoverageCompletedMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageConversionDate).HasColumnType("date");
            entity.Property(e => e.CoverageDividendOption)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageEffectiveDate).HasColumnType("date");
            entity.Property(e => e.CoverageEffectiveMonthDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageEffectiveMonthDaySort)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageEffectiveMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageElimPeriodAccident)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageElimPeriodSick)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageExpirationDate).HasColumnType("date");
            entity.Property(e => e.CoverageExpirationMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageFlexField01Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.CoverageFlexField02Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.CoverageFlexField03Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.CoverageFlexField04Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.CoverageFlexField05Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.CoverageFlexField06Numeric).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.CoverageFlexField09Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField10Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField11Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField12Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField13Date).HasColumnType("date");
            entity.Property(e => e.CoverageFlexField14Date).HasColumnType("date");
            entity.Property(e => e.CoverageFlexField15Date).HasColumnType("date");
            entity.Property(e => e.CoverageFlexField16Date).HasColumnType("date");
            entity.Property(e => e.CoverageFlexField17Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField18Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField19Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField20Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField21Date).HasColumnType("date");
            entity.Property(e => e.CoverageFlexField22Date).HasColumnType("date");
            entity.Property(e => e.CoverageFlexField23Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField24Text)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.CoverageFlexField25Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField26Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField27Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField28Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField29Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageFlexField30Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageLastPaidAmount).HasColumnType("money");
            entity.Property(e => e.CoverageLoanAmount).HasColumnType("money");
            entity.Property(e => e.CoverageNetCashValue).HasColumnType("money");
            entity.Property(e => e.CoverageOtherValue).HasColumnType("money");
            entity.Property(e => e.CoveragePlan)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoveragePlanAbbr)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageRenewalDate).HasColumnType("date");
            entity.Property(e => e.CoverageRenewalMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageSubmitDate).HasColumnType("date");
            entity.Property(e => e.CoverageSubmitMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageSurrenderCharge).HasColumnType("money");
            entity.Property(e => e.CoverageSurrenderValue).HasColumnType("money");
            entity.Property(e => e.CoverageTerminationDate).HasColumnType("date");
            entity.Property(e => e.CoverageTerminationMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageTotalRiderCashValue).HasColumnType("money");
            entity.Property(e => e.CoverageTotalRiderLoanAmount).HasColumnType("money");
            entity.Property(e => e.CoverageType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageTypeDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageUnderwriter)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FundingOption)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupMasterCoverage)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GroupMasterCoverageUniqueId).HasColumnName("GroupMasterCoverageUniqueID");
            entity.Property(e => e.OwnerHeadOfHouseholdId).HasColumnName("OwnerHeadOfHouseholdID");
            entity.Property(e => e.OwnerHouseholdId).HasColumnName("OwnerHouseholdID");
            entity.Property(e => e.PolicyCompany)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyCompanyAbbr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyIssueDate).HasColumnType("date");
            entity.Property(e => e.PolicyIssueMonthYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolicyLoanAmount).HasColumnType("money");
            entity.Property(e => e.PolicyManager1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyManager1Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyManager1Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyManager1UniqueId).HasColumnName("PolicyManager1UniqueID");
            entity.Property(e => e.PolicyManager2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyManager2Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyManager2Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyManager2UniqueId).HasColumnName("PolicyManager2UniqueID");
            entity.Property(e => e.PolicyManager3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyManager3Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyManager3Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyManager3UniqueId).HasColumnName("PolicyManager3UniqueID");
            entity.Property(e => e.PolicyManager4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyManager4Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyManager4Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyManager4UniqueId).HasColumnName("PolicyManager4UniqueID");
            entity.Property(e => e.PolicyManagerNameId1).HasColumnName("PolicyManagerNameID1");
            entity.Property(e => e.PolicyManagerNameId2).HasColumnName("PolicyManagerNameID2");
            entity.Property(e => e.PolicyManagerNameId3).HasColumnName("PolicyManagerNameID3");
            entity.Property(e => e.PolicyManagerNameId4).HasColumnName("PolicyManagerNameID4");
            entity.Property(e => e.PolicyNetBenefit).HasColumnType("money");
            entity.Property(e => e.PolicyNetCashValue).HasColumnType("money");
            entity.Property(e => e.PolicyNumber)
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyOwner)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyOwnerDateOfBirth).HasColumnType("date");
            entity.Property(e => e.PolicyOwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyOwnerFirstname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyOwnerLastname)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyOwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyPayor)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyPayorDateOfBirth).HasColumnType("date");
            entity.Property(e => e.PolicyPremiumToDate).HasColumnType("money");
            entity.Property(e => e.PolicyProducer1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyProducer1Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyProducer1Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyProducer1UniqueId).HasColumnName("PolicyProducer1UniqueID");
            entity.Property(e => e.PolicyProducer2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyProducer2Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyProducer2Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyProducer2UniqueId).HasColumnName("PolicyProducer2UniqueID");
            entity.Property(e => e.PolicyProducer3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyProducer3Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyProducer3Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyProducer3UniqueId).HasColumnName("PolicyProducer3UniqueID");
            entity.Property(e => e.PolicyProducer4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyProducer4Renew).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyProducer4Split).HasColumnType("numeric(13, 7)");
            entity.Property(e => e.PolicyProducer4UniqueId).HasColumnName("PolicyProducer4UniqueID");
            entity.Property(e => e.PolicyProducerNameId1).HasColumnName("PolicyProducerNameID1");
            entity.Property(e => e.PolicyProducerNameId2).HasColumnName("PolicyProducerNameID2");
            entity.Property(e => e.PolicyProducerNameId3).HasColumnName("PolicyProducerNameID3");
            entity.Property(e => e.PolicyProducerNameId4).HasColumnName("PolicyProducerNameID4");
            entity.Property(e => e.PolicySurrenderCharge).HasColumnType("money");
            entity.Property(e => e.PolicySurrenderValue).HasColumnType("money");
            entity.Property(e => e.PolicyTobacco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyTobaccoDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyValuationDate).HasColumnType("date");
            entity.Property(e => e.PremiumCoverageAnnualTotal).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageBaseAnnual).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageExcessAnnual1).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageExcessAnnual2).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageModalTotal).HasColumnType("money");
            entity.Property(e => e.PremiumLastPaidDate).HasColumnType("date");
            entity.Property(e => e.PremiumMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PremiumModeAbbr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PremiumNextDueDate).HasColumnType("date");
            entity.Property(e => e.PremiumPolicyAnnualTotal).HasColumnType("money");
            entity.Property(e => e.PremiumPolicyModalTotal).HasColumnType("money");
            entity.Property(e => e.PremiumsPaidThruDate).HasColumnType("date");
            entity.Property(e => e.PrimaryCoverage)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryInsured)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryInsuredDateOfBirth).HasColumnType("date");
            entity.Property(e => e.PrimaryInsuredFirstname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryInsuredHeadOfHouseholdId).HasColumnName("PrimaryInsuredHeadOfHouseholdID");
            entity.Property(e => e.PrimaryInsuredHouseholdId).HasColumnName("PrimaryInsuredHouseholdID");
            entity.Property(e => e.PrimaryInsuredLastname)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryInsuredSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.QualifiedPlanType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RenewalProvision)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusPolicy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueCoverageInsuredNameId).HasColumnName("UniqueCoverageInsuredNameID");
            entity.Property(e => e.UniqueCoverageTypeId).HasColumnName("UniqueCoverageTypeID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniquePolicyInsuredNameId).HasColumnName("UniquePolicyInsuredNameID");
            entity.Property(e => e.UniquePolicyTobaccoId).HasColumnName("UniquePolicyTobaccoID");
        });

        modelBuilder.Entity<VwReportPolicyNewBiz>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportPolicyNewBiz");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionCodeAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionCodeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionComment)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.ActionCompletedDate).HasColumnType("date");
            entity.Property(e => e.ActionCompletedYn).HasColumnName("ActionCompletedYN");
            entity.Property(e => e.ActionFollowupDate).HasPrecision(6);
            entity.Property(e => e.ActionInitiatedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionInitiatedDate).HasColumnType("date");
            entity.Property(e => e.ActionLastChangedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionPriority)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AnnualPremium).HasColumnType("money");
            entity.Property(e => e.CommissionCoverage1stYrTotal).HasColumnType("numeric(31, 8)");
            entity.Property(e => e.CoverageBenefit).HasColumnType("money");
            entity.Property(e => e.CoverageClass)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageEffectiveDate).HasColumnType("date");
            entity.Property(e => e.CoveragePlan)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageStatus)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageSubmitDate).HasColumnType("date");
            entity.Property(e => e.InsuredFirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsuredFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsuredLastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsuredMiddleName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsuredSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerFirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerLastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerMiddleName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyCompany)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyProducer1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PremiumCoverageAnnualTotal).HasColumnType("money");
            entity.Property(e => e.PremiumPolicyAnnualTotal).HasColumnType("money");
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueInsuredNameId).HasColumnName("UniqueInsuredNameID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueNewBizId).HasColumnName("UniqueNewBizID");
            entity.Property(e => e.UniqueNewBizNameId).HasColumnName("UniqueNewBizNameID");
            entity.Property(e => e.VendorFullName)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportPolicyNewBizInsured>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportPolicyNewBizInsured");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionCodeAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionCodeDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionComment)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.ActionCompletedDate).HasColumnType("date");
            entity.Property(e => e.ActionCompletedYn).HasColumnName("ActionCompletedYN");
            entity.Property(e => e.ActionFollowupDate).HasPrecision(6);
            entity.Property(e => e.ActionInitiatedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionInitiatedDate).HasColumnType("date");
            entity.Property(e => e.ActionLastChangedBy)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActionLastChangedDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ActionPriority)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AnnualPremium).HasColumnType("money");
            entity.Property(e => e.CommissionCoverage1stYrTotal).HasColumnType("numeric(31, 8)");
            entity.Property(e => e.CoverageBenefit).HasColumnType("money");
            entity.Property(e => e.CoverageClass)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoveragePlan)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageSubmitDate).HasColumnType("date");
            entity.Property(e => e.CoverageType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsuredFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsuredSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyCompany)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyProducer1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PremiumCoverageAnnualTotal).HasColumnType("money");
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueInsuredNameId).HasColumnName("UniqueInsuredNameID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueNewBizId).HasColumnName("UniqueNewBizID");
            entity.Property(e => e.UniqueNewBizNameId).HasColumnName("UniqueNewBizNameID");
            entity.Property(e => e.VendorFullName)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwReportRider>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportRider");

            entity.Property(e => e.CoverageBenefit).HasColumnType("money");
            entity.Property(e => e.CoverageBenefitMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageClass)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageEffectiveDate).HasColumnType("date");
            entity.Property(e => e.CoveragePlan)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsuredName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyCompany)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyOwner)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PremiumCoverageAnnualTotal).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageBaseAnnual).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageModalTotal).HasColumnType("money");
            entity.Property(e => e.PremiumMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PremiumRiderAnnual).HasColumnType("money");
            entity.Property(e => e.PremiumRiderModal).HasColumnType("money");
            entity.Property(e => e.PrimaryInsured)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RiderBenefit).HasColumnType("money");
            entity.Property(e => e.RiderCashValue).HasColumnType("money");
            entity.Property(e => e.RiderEffectiveDate).HasColumnType("date");
            entity.Property(e => e.RiderExpirationDate).HasColumnType("date");
            entity.Property(e => e.RiderLoanAmount).HasColumnType("money");
            entity.Property(e => e.RiderNextExerciseDate).HasColumnType("date");
            entity.Property(e => e.RiderOtherFeatures)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.RiderPlan)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RiderTerminationDate).HasColumnType("date");
            entity.Property(e => e.RiderType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueInsuredNameId).HasColumnName("UniqueInsuredNameID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniqueRiderId).HasColumnName("UniqueRiderID");
        });

        modelBuilder.Entity<VwReportRiderInsured>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportRiderInsured");

            entity.Property(e => e.CoverageBenefit).HasColumnType("money");
            entity.Property(e => e.CoverageBenefitMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageClass)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageEffectiveDate).HasColumnType("date");
            entity.Property(e => e.CoveragePlan)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsuredName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyCompany)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyOwner)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PremiumCoverageAnnualTotal).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageBaseAnnual).HasColumnType("money");
            entity.Property(e => e.PremiumCoverageModalTotal).HasColumnType("money");
            entity.Property(e => e.PremiumMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PremiumRiderAnnual).HasColumnType("money");
            entity.Property(e => e.PremiumRiderModal).HasColumnType("money");
            entity.Property(e => e.PrimaryInsured)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RiderBenefit).HasColumnType("money");
            entity.Property(e => e.RiderCashValue).HasColumnType("money");
            entity.Property(e => e.RiderEffectiveDate).HasColumnType("date");
            entity.Property(e => e.RiderExpirationDate).HasColumnType("date");
            entity.Property(e => e.RiderLoanAmount).HasColumnType("money");
            entity.Property(e => e.RiderNextExerciseDate).HasColumnType("date");
            entity.Property(e => e.RiderOtherFeatures)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.RiderPlan)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RiderTerminationDate).HasColumnType("date");
            entity.Property(e => e.RiderType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueOwnerNameId).HasColumnName("UniqueOwnerNameID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniqueRiderId).HasColumnName("UniqueRiderID");
        });

        modelBuilder.Entity<VwReportSymbol>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportSymbol");

            entity.Property(e => e.SecurityAlternateId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SecurityAlternateID");
            entity.Property(e => e.SecurityCategory)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecurityCompany)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecurityCompanyAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecurityCusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SecurityCUSIP");
            entity.Property(e => e.SecurityCusipext)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SecurityCUSIPExt");
            entity.Property(e => e.SecurityName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecuritySector)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecuritySymbol)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecurityType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueSecurityId).HasColumnName("UniqueSecurityID");
        });

        modelBuilder.Entity<VwReportTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportTransaction");

            entity.Property(e => e.AccountAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AccountCustodian)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountCustodianAbbr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountManager1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountProducer2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountTypeAndNumber)
                .HasMaxLength(77)
                .IsUnicode(false);
            entity.Property(e => e.AssetAcquiredDate).HasColumnType("date");
            entity.Property(e => e.AssetBeginingOfDayShares).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.AssetBeginingOfDayValue).HasColumnType("money");
            entity.Property(e => e.AssetCusip)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetCusipExt)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetEndOfDayShares).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.AssetEndOfDayValue).HasColumnType("money");
            entity.Property(e => e.AssetName)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AssetSymbol)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.AssetType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DateOfTransaction).HasColumnType("date");
            entity.Property(e => e.DateSettled).HasColumnType("date");
            entity.Property(e => e.DateTransmittled).HasColumnType("date");
            entity.Property(e => e.DownloadModule)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DownloadTransactionTypePrimary)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DownloadTransactionTypeSecondary)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndOfDaySharePriceDate).HasColumnType("date");
            entity.Property(e => e.EndofDaySharePrice).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.InvestorFirstName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorLastName)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerFullName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransAccruedInterest).HasColumnType("money");
            entity.Property(e => e.TransBasisFrozenYn).HasColumnName("TransBasisFrozenYN");
            entity.Property(e => e.TransBasisIn).HasColumnType("money");
            entity.Property(e => e.TransBasisOut).HasColumnType("money");
            entity.Property(e => e.TransBasisPerShare).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.TransCancelDate).HasColumnType("date");
            entity.Property(e => e.TransCancelledYn).HasColumnName("TransCancelledYN");
            entity.Property(e => e.TransClientTotal).HasColumnType("money");
            entity.Property(e => e.TransComment)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.TransCommissionIncluded).HasColumnType("money");
            entity.Property(e => e.TransFee).HasColumnType("money");
            entity.Property(e => e.TransLoadIncluded).HasColumnType("money");
            entity.Property(e => e.TransMiscExpense).HasColumnType("money");
            entity.Property(e => e.TransMoneySourceOrDestination)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.TransOnBlotterYn).HasColumnName("TransOnBlotterYN");
            entity.Property(e => e.TransPrincipal).HasColumnType("money");
            entity.Property(e => e.TransSharePrice).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.TransShares).HasColumnType("numeric(16, 6)");
            entity.Property(e => e.TransType)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueCustodianId).HasColumnName("UniqueCustodianID");
            entity.Property(e => e.UniqueInvestmentId).HasColumnName("UniqueInvestmentID");
            entity.Property(e => e.UniqueInvestorId).HasColumnName("UniqueInvestorID");
            entity.Property(e => e.UniqueTransactionId).HasColumnName("UniqueTransactionID");
        });

        modelBuilder.Entity<VwReportWeb>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportWeb");

            entity.Property(e => e.BusinessName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Contact)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniqueWebId).HasColumnName("UniqueWebID");
            entity.Property(e => e.WebAddress)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwReportWorkFlow>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportWorkFlow");

            entity.Property(e => e.ClientSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel01)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel02)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel03)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel04)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel05)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel06)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlexField01Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.FlexField02Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.FlexField03Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlexField04Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlexField05Date).HasColumnType("date");
            entity.Property(e => e.FlexField06Date).HasColumnType("date");
            entity.Property(e => e.PhaseLabel)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniquePrimaryProducerId).HasColumnName("UniquePrimaryProducerID");
            entity.Property(e => e.UniqueProducerGroupId).HasColumnName("UniqueProducerGroupID");
            entity.Property(e => e.UniqueWorkflowId).HasColumnName("UniqueWorkflowID");
            entity.Property(e => e.UniqueWorkflowMasterId).HasColumnName("UniqueWorkflowMasterID");
            entity.Property(e => e.WfbeginDate)
                .HasColumnType("date")
                .HasColumnName("WFBeginDate");
            entity.Property(e => e.WfchangeDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("WFChangeDate");
            entity.Property(e => e.WfcompletedPct)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("WFCompletedPct");
            entity.Property(e => e.WfcreatedByUserInitials)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFCreatedByUserInitials");
            entity.Property(e => e.WfcreatedByUserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFCreatedByUserName");
            entity.Property(e => e.Wfdescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WFDescription");
            entity.Property(e => e.Wfduration).HasColumnName("WFDuration");
            entity.Property(e => e.WfendDate)
                .HasColumnType("date")
                .HasColumnName("WFEndDate");
            entity.Property(e => e.WfeventCount).HasColumnName("WFEventCount");
            entity.Property(e => e.Wfpriority).HasColumnName("WFPriority");
            entity.Property(e => e.Wfreference)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WFReference");
            entity.Property(e => e.Wfstatus).HasColumnName("WFStatus");
            entity.Property(e => e.WftotalRevenue)
                .HasColumnType("money")
                .HasColumnName("WFTotalRevenue");
            entity.Property(e => e.Wftype)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFType");
            entity.Property(e => e.WfwhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFWhoChange");
        });

        modelBuilder.Entity<VwReportWorkFlowEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportWorkFlowEvent");

            entity.Property(e => e.ClientSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EvassignedUserGroupName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EVAssignedUserGroupName");
            entity.Property(e => e.EvassignedUserInitials)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVAssignedUserInitials");
            entity.Property(e => e.EvassignedUserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVAssignedUserName");
            entity.Property(e => e.EvbeginDate)
                .HasColumnType("date")
                .HasColumnName("EVBeginDate");
            entity.Property(e => e.EvcompletedDate)
                .HasColumnType("date")
                .HasColumnName("EVCompletedDate");
            entity.Property(e => e.EvcurrentTf).HasColumnName("EVCurrentTF");
            entity.Property(e => e.Evdescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EVDescription");
            entity.Property(e => e.EvdueDate)
                .HasColumnType("date")
                .HasColumnName("EVDueDate");
            entity.Property(e => e.EvlastChange)
                .HasColumnType("smalldatetime")
                .HasColumnName("EVLastChange");
            entity.Property(e => e.Evnotes)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("EVNotes");
            entity.Property(e => e.EvorigionalDueDate)
                .HasColumnType("date")
                .HasColumnName("EVOrigionalDueDate");
            entity.Property(e => e.EvoverdueTf).HasColumnName("EVOverdueTF");
            entity.Property(e => e.Evphase)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVPhase");
            entity.Property(e => e.Evrevenue)
                .HasColumnType("money")
                .HasColumnName("EVRevenue");
            entity.Property(e => e.EvrevenueTf).HasColumnName("EVRevenueTF");
            entity.Property(e => e.Evsequence).HasColumnName("EVSequence");
            entity.Property(e => e.Evstatus).HasColumnName("EVStatus");
            entity.Property(e => e.Evtype).HasColumnName("EVType");
            entity.Property(e => e.EvwhoChange)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVWhoChange");
            entity.Property(e => e.LinkedToFullName)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LinkedToSortName)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PhaseLabel)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UniqueAccountId).HasColumnName("UniqueAccountID");
            entity.Property(e => e.UniqueLinkedToNameId).HasColumnName("UniqueLinkedToNameID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniquePrimaryProducerId).HasColumnName("UniquePrimaryProducerID");
            entity.Property(e => e.UniqueWorkflowEventId).HasColumnName("UniqueWorkflowEventID");
            entity.Property(e => e.UniqueWorkflowEventMasterId).HasColumnName("UniqueWorkflowEventMasterID");
            entity.Property(e => e.UniqueWorkflowId).HasColumnName("UniqueWorkflowID");
            entity.Property(e => e.UniqueWorkflowMasterId).HasColumnName("UniqueWorkflowMasterID");
            entity.Property(e => e.WfbeginDate)
                .HasColumnType("date")
                .HasColumnName("WFBeginDate");
            entity.Property(e => e.WfcompletedPct)
                .HasColumnType("numeric(16, 6)")
                .HasColumnName("WFCompletedPct");
            entity.Property(e => e.WfcreatedByUserInitials)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFCreatedByUserInitials");
            entity.Property(e => e.WfcreatedByUserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFCreatedByUserName");
            entity.Property(e => e.Wfduration).HasColumnName("WFDuration");
            entity.Property(e => e.WfendDate)
                .HasColumnType("date")
                .HasColumnName("WFEndDate");
            entity.Property(e => e.Wfpriority).HasColumnName("WFPriority");
            entity.Property(e => e.Wfstatus).HasColumnName("WFStatus");
            entity.Property(e => e.WftotalRevenue)
                .HasColumnType("money")
                .HasColumnName("WFTotalRevenue");
            entity.Property(e => e.Wftype)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFType");
        });

        modelBuilder.Entity<VwReportWorkFlowMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportWorkFlowMaster");

            entity.Property(e => e.FieldLabel01)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel02)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel03)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel04)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel05)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel06)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueWorkflowMasterId).HasColumnName("UniqueWorkflowMasterID");
            entity.Property(e => e.WfmcreatorUserInitials)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFMCreatorUserInitials");
            entity.Property(e => e.WfmcreatorUserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFMCreatorUserName");
            entity.Property(e => e.Wfmdescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WFMDescription");
            entity.Property(e => e.Wfmduration).HasColumnName("WFMDuration");
            entity.Property(e => e.WfmeventCount).HasColumnName("WFMEventCount");
            entity.Property(e => e.Wfmtype)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFMType");
        });

        modelBuilder.Entity<VwReportWorkFlowMasterEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportWorkFlowMasterEvent");

            entity.Property(e => e.PhaseLabel)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UniqueWorkflowEventMasterId).HasColumnName("UniqueWorkflowEventMasterID");
            entity.Property(e => e.UniqueWorkflowMasterId).HasColumnName("UniqueWorkflowMasterID");
            entity.Property(e => e.WfemallowSkipTf).HasColumnName("WFEMAllowSkipTF");
            entity.Property(e => e.WfemdefaultUserGroupName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("WFEMDefaultUserGroupName");
            entity.Property(e => e.WfemdefaultUserInitials)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFEMDefaultUserInitials");
            entity.Property(e => e.WfemdefaultUserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFEMDefaultUserName");
            entity.Property(e => e.Wfemdescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WFEMDescription");
            entity.Property(e => e.Wfemduration).HasColumnName("WFEMDuration");
            entity.Property(e => e.Wfeminstructions)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("WFEMInstructions");
            entity.Property(e => e.Wfemphase)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFEMPhase");
            entity.Property(e => e.WfemrevenueStepFlag).HasColumnName("WFEMRevenueStepFlag");
            entity.Property(e => e.Wfemsequence).HasColumnName("WFEMSequence");
            entity.Property(e => e.Wfemtype)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFEMType");
            entity.Property(e => e.WfemwaitDays).HasColumnName("WFEMWaitDays");
            entity.Property(e => e.WfmcreatorUserInitials)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFMCreatorUserInitials");
            entity.Property(e => e.WfmcreatorUserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFMCreatorUserName");
            entity.Property(e => e.Wfmdescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WFMDescription");
            entity.Property(e => e.Wfmduration).HasColumnName("WFMDuration");
            entity.Property(e => e.WfmeventCount).HasColumnName("WFMEventCount");
            entity.Property(e => e.Wfmtype)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WFMType");
        });

        modelBuilder.Entity<VwReportWorkflowTeamMember>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportWorkflowTeamMember");

            entity.Property(e => e.ClientSortName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel01)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel02)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel03)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel04)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel05)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FieldLabel06)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlexField01Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.FlexField02Numeric).HasColumnType("numeric(13, 2)");
            entity.Property(e => e.FlexField03Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlexField04Text)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlexField05Date).HasColumnType("date");
            entity.Property(e => e.FlexField06Date).HasColumnType("date");
            entity.Property(e => e.LastActivityDesc)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.NamePhase)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhaseLabel)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TeamMemberDisplayName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TeamMemberRevenue).HasColumnType("numeric(27, 7)");
            entity.Property(e => e.TeamMemberSplit).HasColumnType("numeric(7, 3)");
            entity.Property(e => e.TeamName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniquePrimaryProducerId).HasColumnName("UniquePrimaryProducerID");
            entity.Property(e => e.UniqueTeamId).HasColumnName("UniqueTeamID");
            entity.Property(e => e.UniqueTeamMemberId).HasColumnName("UniqueTeamMemberID");
            entity.Property(e => e.UniqueWorkflowId).HasColumnName("UniqueWorkflowID");
            entity.Property(e => e.UniqueWorkflowMasterId).HasColumnName("UniqueWorkflowMasterID");
            entity.Property(e => e.UniqueWorkflowTeamMemberLinkId).HasColumnName("UniqueWorkflowTeamMemberLinkID");
            entity.Property(e => e.Wfdescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WFDescription");
            entity.Property(e => e.Wfstatus).HasColumnName("WFStatus");
            entity.Property(e => e.WftotalRevenue)
                .HasColumnType("money")
                .HasColumnName("WFTotalRevenue");
        });

        modelBuilder.Entity<VwViewscreenReportClientInsurance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwViewscreenReport_Client_Insurance");

            entity.Property(e => e.Company)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageEffectiveDate).HasColumnType("date");
            entity.Property(e => e.CoveragePlan)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CoverageType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DTermination)
                .HasColumnType("date")
                .HasColumnName("dTermination");
            entity.Property(e => e.HeadOfHouseholdUniqueNameId).HasColumnName("HeadOfHouseholdUniqueNameID");
            entity.Property(e => e.IKeyBaseCoverage).HasColumnName("iKeyBaseCoverage");
            entity.Property(e => e.Owner)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OwnerUniqueNameId).HasColumnName("OwnerUniqueNameID");
            entity.Property(e => e.PerspectiveKeyId).HasColumnName("PerspectiveKeyID");
            entity.Property(e => e.PolicyNumber)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.PremiumMode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryInsured)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrimaryInsuredUniqueNameId).HasColumnName("PrimaryInsuredUniqueNameID");
            entity.Property(e => e.Producer1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Producer1UniqueId).HasColumnName("Producer1UniqueID");
            entity.Property(e => e.Producer1UniqueNameId).HasColumnName("Producer1UniqueNameID");
            entity.Property(e => e.Producer2UniqueId).HasColumnName("Producer2UniqueID");
            entity.Property(e => e.Producer2UniqueNameId).HasColumnName("Producer2UniqueNameID");
            entity.Property(e => e.Producer3UniqueId).HasColumnName("Producer3UniqueID");
            entity.Property(e => e.Producer3UniqueNameId).HasColumnName("Producer3UniqueNameID");
            entity.Property(e => e.Producer4UniqueId).HasColumnName("Producer4UniqueID");
            entity.Property(e => e.Producer4UniqueNameId).HasColumnName("Producer4UniqueNameID");
            entity.Property(e => e.Producer5UniqueId).HasColumnName("Producer5UniqueID");
            entity.Property(e => e.Producer5UniqueNameId).HasColumnName("Producer5UniqueNameID");
            entity.Property(e => e.Producer6UniqueId).HasColumnName("Producer6UniqueID");
            entity.Property(e => e.Producer6UniqueNameId).HasColumnName("Producer6UniqueNameID");
            entity.Property(e => e.Producer7UniqueId).HasColumnName("Producer7UniqueID");
            entity.Property(e => e.Producer7UniqueNameId).HasColumnName("Producer7UniqueNameID");
            entity.Property(e => e.Producer8UniqueId).HasColumnName("Producer8UniqueID");
            entity.Property(e => e.Producer8UniqueNameId).HasColumnName("Producer8UniqueNameID");
            entity.Property(e => e.ProductClassCodeKeyId).HasColumnName("ProductClassCodeKeyID");
            entity.Property(e => e.RelationGuid).HasColumnName("RelationGUID");
            entity.Property(e => e.RelationshipCodeKeyId).HasColumnName("RelationshipCodeKeyID");
            entity.Property(e => e.StatusCoverage)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalBenefit).HasColumnType("money");
            entity.Property(e => e.TotalModalPremium).HasColumnType("money");
            entity.Property(e => e.TotalPremium).HasColumnType("money");
            entity.Property(e => e.UniqueAnnuitySurrenderPeriodCodeId).HasColumnName("UniqueAnnuitySurrenderPeriodCodeID");
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueNameId).HasColumnName("UniqueNameID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniqueStatusCodeId).HasColumnName("UniqueStatusCodeID");
        });

        modelBuilder.Entity<VwViewscreenReportPolicyCommission>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwViewscreenReport_Policy_Commissions");

            entity.Property(e => e.BaseAmount).HasColumnType("numeric(16, 4)");
            entity.Property(e => e.BaseAmountType)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Comment)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.CoveragePlan)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueAmount).HasColumnType("money");
            entity.Property(e => e.DueDate).HasColumnType("date");
            entity.Property(e => e.InsuredFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PayeeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PayeePosition)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.PostedAmount).HasColumnType("money");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate).HasColumnType("date");
            entity.Property(e => e.PostedOn).HasColumnType("smalldatetime");
            entity.Property(e => e.Rate).HasColumnType("numeric(18, 8)");
            entity.Property(e => e.RiderAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueDistributionId).HasColumnName("UniqueDistributionID");
            entity.Property(e => e.UniqueLevelCodeId).HasColumnName("UniqueLevelCodeID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniqueRemainderId).HasColumnName("UniqueRemainderID");
            entity.Property(e => e.UniqueTransactionId).HasColumnName("UniqueTransactionID");
        });

        modelBuilder.Entity<VwViewscreenReportPolicyCommissionsAgency>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwViewscreenReport_Policy_Commissions_Agency");

            entity.Property(e => e.BaseAmount).HasColumnType("numeric(16, 4)");
            entity.Property(e => e.BaseAmountType)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Comment)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.CoveragePlan)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueAmount).HasColumnType("money");
            entity.Property(e => e.DueDate).HasColumnType("date");
            entity.Property(e => e.InsuredFullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PayeeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PayeePosition)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.PostedAmount).HasColumnType("money");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate).HasColumnType("date");
            entity.Property(e => e.PostedOn).HasColumnType("smalldatetime");
            entity.Property(e => e.Rate).HasColumnType("numeric(18, 8)");
            entity.Property(e => e.RiderAbbr)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UniqueCoverageId).HasColumnName("UniqueCoverageID");
            entity.Property(e => e.UniqueDistributionId).HasColumnName("UniqueDistributionID");
            entity.Property(e => e.UniqueLevelCodeId).HasColumnName("UniqueLevelCodeID");
            entity.Property(e => e.UniquePolicyId).HasColumnName("UniquePolicyID");
            entity.Property(e => e.UniqueRemainderId).HasColumnName("UniqueRemainderID");
            entity.Property(e => e.UniqueTransactionId).HasColumnName("UniqueTransactionID");
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}