// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Rhyous.DataMigration.AdvisorsAssistant.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Rhyous.DataMigration.AdvisorsAssistant.Models
{
    public partial class AdvisorsAssistantContext
    {
        private IAdvisorsAssistantContextProcedures _procedures;

        public virtual IAdvisorsAssistantContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AdvisorsAssistantContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IAdvisorsAssistantContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<sp_AACalEventDataGetByCriteriaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_AACalEventDataGetByCriteriaSubCallsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_AACalEventDataGetByCriteriaWithNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ActiveDLFServiceModulesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_AddNameToHouseholdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_AddOutlookEntryIDCalendarRowResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_AddOutlookEntryIDNameRowResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_AllCatalogDropResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_AnalyzeInvestmentDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_API_GetInvestmentDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_BackupAllDatabasesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_BenchMarkReportDatasetAccountLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_BenchMarkReportDatasetNvstAndAcctLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_BenchMarkReportDatasetNvstLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_BenchMarkReportDatasetTopLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_BenchMarkReportDatasetTopValuationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_BenchMarkReportRetrievalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_BlankZeroValueRecordsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CalculateCoverageNetCashValueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CalculatePolicyNetCashValueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CalculatePremiumDueDatesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CalculatePremiumDueDatesWithBlackoutsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CalculateSecurityReturnResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CalEventGetActiveEventListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CalEventGetActiveEventNameListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CalEventsGetEarlierEventsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CalEventsRolloverResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CalEventsRolloverByWorkflowResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CAMRetrieveInfoForCaseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CheckCalendarEventResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CheckCalendarEventCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CheckCLIMARKUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CheckMessageAndEventCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CommCalcForCoverageResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CommCalcForParticipantAgencyLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CommCalcForParticipantManagerLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CommCalcForParticipantOneLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CommCalcForParticipantProducerLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CommCalcForTrailerAgencyLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CommCalcForTrailerManagerLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CommCalcForTrailerOneLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CommCalcForTrailerProducerLevelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CopyAddressToHouseholdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CopyPhoneToHouseholdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CreatePersonalContactCalendarEventFromTempDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_CreateSSOTokenToNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DatabaseGetStatisticsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DatabaseUpgradeInitResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DatabaseUpgradeResetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DBUGetTemplateBackupsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DeleteCalEventsByUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFAdditionsByFileQueryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFAddNewSecuritiesBySetsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFALBPrecheckPositionPricesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfAutoAddSecurityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFBulkPositionAddAccountsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFBulkPositionAddNvstResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFBulkPositionAddPositionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFBulkPositionAddPriceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFBulkPositionCodeKeyChecksResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFBulkPositionReconcileAddResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFBulkPositionReconcileCheckForReversalsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFBulkPositionReconcileGetPricesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFBulkPositionReconcileSummPosSharesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFBulkPositionReconcileSummTransSharesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfBulkPositionStatisticsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFBulkPositionUpdatePositionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfCleanOutOrphanedDLFRecordsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFCreateZeroBalanceCashPositionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFDSTPrecheckResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DlfFCHCheckMoneyMarketPositionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DlfFCHCheckMoneyMarketSecurityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfFCHUpdateMissingPositionRepsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFFCHValidateMoneyMarketNamesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFFolioFNPrecheckTransactionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DlfGetKeysToProcessResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DlfGetKeysToValidateAccountsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFGetLastProcessForReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfGetNonValidatedAccountCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfGetPlansNotFoundResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFGetProcessReportStatsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfGetRepCodesNotFoundResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFIBrokePrecheckTransactionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFInitProcessKeyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfModulePreProcessSecurityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFNLGPrecheckPartiesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfPopulateAccountKeysResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DlfPopulateEmptyProducerReferencesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPopulateSecurityKeysGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfPopulateSecurityKeysOneRecordResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPositionAccountUpdateSetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPositionInvestmentUpdateSetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPositionSecurityUpdateSetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DlfPreValidateProducersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPrsPopulateFundResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPushOnePositionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPushOneRegistrationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPushOneSecurityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPushOneTransactionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPushPositonGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPushRegistrationGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPushSecurityGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFPushTransactionGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFRBCPreCheckPartiesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFRBCValidateDividendPositionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFReplicationPreValidateAccountsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DlfReplicationPrevalidateSecuritiesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFSecurityUpdateFromBulkProcessResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Sp_dlfUnRecognizedTransactionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFUpdateSecurityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFValidateAccountsBySetsLeadingZerosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFValidateAccountsInSetsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfValidateModuleSecurityMappingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFValidateNvstResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFValidateSecuritiesBySetsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFValidatevwDSTSecurityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DLFWedBushCheckBondFactoringResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_dlfWedbushPreCheckPartiesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_DSTSetupSecurityViewResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ExchangeSetSysPrefDefaultsAllUsersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ExchangeSynchCalendarEventResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ExchangeSynchCalendarEvent_2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ExchangeSynchCalendarEvent_3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ExchangeSynchCalendarEvent_4Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ExchangeSynchCalendarEvent_CheckRecurExceptionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ExchangeSynchCalendarEvent_SetRecurResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ExchangeSynchContactNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ExchangeSynchContactName2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_FileHistoryLogRowCountByFileHistoryLogKeyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_FinanceLogixExportByNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_FMGSuiteEmailContactsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GenerateEventsGenericResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetActiveMessageCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetAllCodeForeignKeysResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetApplicationInfoByClientIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetAppointmentDataSetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetAppointmentDataSet2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetCalendarUserLookupDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetCityStateCountyCountryFromZipResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetClientReportDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetCostBasisAverageForNvstResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetCostBasisLotAndGainsForNvstResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetDataToProcessByModuleResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetDistinctDayViewDatesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetDuplicateNamesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetEmailExportDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetEventSummaryByCalendarResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetEventSummaryByDeptResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetEventSummaryByUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetForUserMessageNotificationLogFormResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetGreetingsAndAddresseesByNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetHouseholdInfoByClientIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetInsuranceExportDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetInvestmentExportDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetLatestNoteTopicKeyByClientResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetLotForEditScreenResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetMessagesByUserIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNameActivityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNameExportDataByTypeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNameLinksResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNAVOnOrAfterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNAVOnOrBeforeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNextKeyIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNoteListFormListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNoteListFormListMessagesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNoteListPagingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNoteListPagingByAccountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNoteListPagingByPolicyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNotesByClientForGridResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNotesByGroupsForGridResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNotesListViewScreenAndReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNoteTopicListViewScreenMessagesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNvstSalesAndTaxLotResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNvstSharesOnOrAfterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetNvstSharesOnOrBeforeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetOutlookEntryIDCalendarRowByEntryIDAndStoreKeyIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetOutlookEntryIDCalendarRowByKeyAALinkAndStoreKeyIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetOutlookEntryIDNameRowByEntryIDAndStoreKeyIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetOutlookEntryIDNameRowByKeyAALinkAndStoreKeyIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetPartnerListForAccountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetPartnerListForClientResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetRORNavDataSetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetSecurityTasksByUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetStartAndEndNvstSharesAndNavResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetStartAndEndNvstSharesAndNavBulkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetSummedNvstValuesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetSuperViewKeyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetSystemInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetTaskAndCallDataSetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetTaskAndCallDataSet2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetTasksAndOverridesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetUniqueCodeAbbreviationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetUserGroupLookupDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetUsersByTaskResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetUserSyncOptionsByCalendarManyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetValuationsForRorCalculationsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetValuationsForRorCalculationsBulkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewAccountDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewAccountDataCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewClientAddressesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewClientDataCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewClientEmailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewClientNameTypesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewClientURLsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewClientWithNotesClientPerspectiveListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewInvestmentDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewInvestmentDataCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewPolicyDataCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewPolicyDataCoverageResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetViewPolicyDataPolicyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetWorkflowSummaryByUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetWorkflowSummaryByUserGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Infinet4ToAA_InsertIntoAAResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Infinet4ToAA_ValidateGroupMembersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Infinet4ToAA_ValidateGroupsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Infinet4ToAA_ValidateRelationsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Infinet4ToAAConnectNRAsFromIOLToAAResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Infinet4ToAAConnectWithTaxidsFromIOLToAAResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Infinet4ToAAPopulateNewIOL4ContactsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Infinet4ToAAValidateIOLLinkKeysResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Infinex4ToAAProducerValidationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_LinksGetForDiagramByContactResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_LiquidateInvestmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ManageUserRecentNameListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MergeOldInvestmentsIntoNewOnesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2AddressGreetingsAndAddresseesByNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2CheckUserTaskResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2CompleteCalendarEventResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2CreateAccountNewBizResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2CreateAddressResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2CreateCoverageNewBizResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2CreateEmailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2CreateLinkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2CreateNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2CreateNameNewBizResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2CreatePhoneResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2CreateWebResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2DeleteNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2EditAddressResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2EditEventResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2EditNoteTopicResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2EditPhoneResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetAccountDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetAccountInvestmentListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetAccountListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetAccountNewBizDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetAccountNewBizListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetAccountRelationListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetAddressDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetAlbridgeApplinkDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetAnnuitiesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetApplicationInfoByClientIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetCalendarResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetCalendarDayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetCalendarItemResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetCalendarUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetCityStateFromZipResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetCoverageDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetCoverageNewBizDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetCoverageNewBizListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetCoverageRelationListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetCoverageRiderListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetEmailDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetEventDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetFileDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetFlexLabelsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetFlexNameFieldsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetImageDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetInvestmentDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetInvestmentTransactionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetNameDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetNameDataAdditionalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetNameListByInitialResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetNameNewBizDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetNameNewBizListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetNamePersonalIdentificationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetNoteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetNotePagingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetPhoneDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetPolicyDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetPolicyListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetProducerIDListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetReadyDocLoginResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetRecentNameListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetReportListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetSavedQueryListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetSavedQuerySetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetTaskStackResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetViewableCalendarsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetViewableCalendarsForGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetViewClientDataCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2GetWebDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2InsertNoteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2LoginResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2LoginSSOResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2MoneyGuidProByNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2ProcessMarketValuesForAccountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2UpdateLinkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2UpdateLoginActivityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2UpdateMarketResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2UpdateSavedQuerySetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Mobile2ValidateUserEmailAddressResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileAddressGreetingsAndAddresseesByNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileCheckUserTaskResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileCreateAddressResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileCreateEmailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileCreateLinkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileCreateNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileCreatePhoneResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileCreateWebResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileCurrentViewNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileDeleteNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileEditEmailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileEditEventResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileEditMarketResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileEditNoteTopicResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileEditWebResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetAccountDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetAccountInvestmentListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetAccountListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetAccountNewBizListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetAccountRelationListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetAddressDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetAlbridgeApplinkDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetCalendarResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetCalendarDayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetCalendarItemResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetCoverageDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetCoverageNewBizDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetCoverageNewBizListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetCoverageRelationListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetCoverageRiderListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetEmailDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetEventDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetHouseholdDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetInvestmentDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetNameDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetNameListByInitialResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetNoteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetNotePagingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetPhoneDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetPolicyDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetPolicyListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetPolicyRelationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetRecentNameListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetRiderDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetViewableCalendarsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileGetWebDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileInsertNoteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileLoginResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileLoginSSOResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileProcessMarketValuesForAccountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileRolloverAllCalendarResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileUpdateLinkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MobileUpdateMarketResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_MoneyGuideProExportByNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameGetLastActivityAndVisibilityManyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameGetLastActivityManyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupByAllResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupByCityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupByFirstNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupByLastNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupByNameTypeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupByNickNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupByProducerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupByStateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupByStreetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupBySuffixResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupByTitleResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupByZipResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameLookupGetProducerKeysForViewResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NameVisibilityManyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NoteCatalogValidateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_NotesExportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_PlanningExportByNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ProcessEventExceptionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ProcessEventExceptionsInternalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ProcessLogRowCountByProcessLogKeyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ProcessMarketValuesForAccountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ProcessMarketValuesForInvestmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ReCreateTaxLotForInvestmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_RemoveAddressFromHouseholdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_RemovePhoneFromHouseholdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ResetAATempDataForRORResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_SchlegelGroupWithSummaryReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ServiceDLFActiveModulesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_SetNavForSecurityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_SubReportGetTaxLotForNvstResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_SubReportGetTaxLotTotalsForNvstResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_SyncGetNameKeysByEmailAddressesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_TransactionRegistrationExportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_UpdateAreaCodeByPrefixResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_UpdateBasisNoLotResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_UpdateNvstRORValuesBulkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_UpdateTransactionBasisValuesNoTriggerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateBasisAdjustmentsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateCusipChangedAssetsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateInvestmentBasisResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateSSOResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateStockSplitLinkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateTaxLotBasisForInvestmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateTaxLotBasisForSellResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateTaxLotBasisForSplitResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateTaxLotModelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateTransactionCashFlowResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateUsernamePasswordResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateUsernamePassword2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ValidateZeroRecordsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WorkflowCalEventCanCompleteManyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WorkflowCompleteEventResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WorkflowCreateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WorkFlowCreateStepResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WorkflowDataFixForSupportOnlyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WorkflowDataFixForSupportOnlyByDaysResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WorkFlowGetLastActivityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WorkflowRecalStatusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WorkflowRecalStatusAllResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WorkflowRecalStatusManyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WorkflowUpdateCalEventResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WSAddSessionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WSValidateSessionResult>().HasNoKey().ToView(null);
        }
    }

    public partial class AdvisorsAssistantContextProcedures : IAdvisorsAssistantContextProcedures
    {
        private readonly AdvisorsAssistantContext _context;

        public AdvisorsAssistantContextProcedures(AdvisorsAssistantContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_AACalEventDataGetByCriteriaResult>> sp_AACalEventDataGetByCriteriaAsync(int? iKeyUser, string sReturnOption, DateTime? dDateRangeStart, DateTime? dDateRangeEnd, bool? bSearchAllCalendars, bool? bSearchAllTypes, bool? bSearchAllSubTypes, bool? bSearchSpecifiedWithName, bool? bNoWorkFlows, bool? bHasWithName, bool? bDoesNotHaveAWithName, int? iPriority, string sKeyWord, bool? bExcludeRecurringTasks, int? iRecurOption, string cStatus, bool? bNoOldappointments, DateTime? dChangeRangeBegin, DateTime? dchangeRangeEnd, DateTime? dDueRangeBegin, DateTime? dDueRangeEnd, bool? bOnlyWorkFlows, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sReturnOption",
                    Size = 1,
                    Value = sReturnOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "dDateRangeStart",
                    Value = dDateRangeStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dDateRangeEnd",
                    Value = dDateRangeEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bSearchAllCalendars",
                    Value = bSearchAllCalendars ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSearchAllTypes",
                    Value = bSearchAllTypes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSearchAllSubTypes",
                    Value = bSearchAllSubTypes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSearchSpecifiedWithName",
                    Value = bSearchSpecifiedWithName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bNoWorkFlows",
                    Value = bNoWorkFlows ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bHasWithName",
                    Value = bHasWithName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bDoesNotHaveAWithName",
                    Value = bDoesNotHaveAWithName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iPriority",
                    Value = iPriority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sKeyWord",
                    Size = 100,
                    Value = sKeyWord ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bExcludeRecurringTasks",
                    Value = bExcludeRecurringTasks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurOption",
                    Value = iRecurOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cStatus",
                    Size = 1,
                    Value = cStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bNoOldappointments",
                    Value = bNoOldappointments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "dChangeRangeBegin",
                    Value = dChangeRangeBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dchangeRangeEnd",
                    Value = dchangeRangeEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dDueRangeBegin",
                    Value = dDueRangeBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dDueRangeEnd",
                    Value = dDueRangeEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bOnlyWorkFlows",
                    Value = bOnlyWorkFlows ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_AACalEventDataGetByCriteriaResult>("EXEC @returnValue = [dbo].[sp_AACalEventDataGetByCriteria] @iKeyUser = @iKeyUser, @sReturnOption = @sReturnOption, @dDateRangeStart = @dDateRangeStart, @dDateRangeEnd = @dDateRangeEnd, @bSearchAllCalendars = @bSearchAllCalendars, @bSearchAllTypes = @bSearchAllTypes, @bSearchAllSubTypes = @bSearchAllSubTypes, @bSearchSpecifiedWithName = @bSearchSpecifiedWithName, @bNoWorkFlows = @bNoWorkFlows, @bHasWithName = @bHasWithName, @bDoesNotHaveAWithName = @bDoesNotHaveAWithName, @iPriority = @iPriority, @sKeyWord = @sKeyWord, @bExcludeRecurringTasks = @bExcludeRecurringTasks, @iRecurOption = @iRecurOption, @cStatus = @cStatus, @bNoOldappointments = @bNoOldappointments, @dChangeRangeBegin = @dChangeRangeBegin, @dchangeRangeEnd = @dchangeRangeEnd, @dDueRangeBegin = @dDueRangeBegin, @dDueRangeEnd = @dDueRangeEnd, @bOnlyWorkFlows = @bOnlyWorkFlows", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_AACalEventDataGetByCriteriaSubCallsResult>> sp_AACalEventDataGetByCriteriaSubCallsAsync(int? iKeyUser, string cCall, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cCall",
                    Size = 30,
                    Value = cCall ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_AACalEventDataGetByCriteriaSubCallsResult>("EXEC @returnValue = [dbo].[sp_AACalEventDataGetByCriteriaSubCalls] @iKeyUser = @iKeyUser, @cCall = @cCall", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_AACalEventDataGetByCriteriaWithNameResult>> sp_AACalEventDataGetByCriteriaWithNameAsync(int? iKeyUser, string sReturnOption, DateTime? dDateRangeStart, DateTime? dDateRangeEnd, bool? bSearchAllCalendars, bool? bSearchAllTypes, bool? bSearchAllSubTypes, bool? bSearchSpecifiedWithName, bool? bNoWorkFlows, bool? bHasWithName, bool? bDoesNotHaveAWithName, int? iPriority, string sKeyWord, bool? bExcludeRecurringTasks, int? iRecurOption, string cStatus, bool? bNoOldappointments, DateTime? dChangeRangeBegin, DateTime? dchangeRangeEnd, DateTime? dDueRangeBegin, DateTime? dDueRangeEnd, bool? bOnlyWorkFlows, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sReturnOption",
                    Size = 1,
                    Value = sReturnOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "dDateRangeStart",
                    Value = dDateRangeStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dDateRangeEnd",
                    Value = dDateRangeEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bSearchAllCalendars",
                    Value = bSearchAllCalendars ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSearchAllTypes",
                    Value = bSearchAllTypes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSearchAllSubTypes",
                    Value = bSearchAllSubTypes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSearchSpecifiedWithName",
                    Value = bSearchSpecifiedWithName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bNoWorkFlows",
                    Value = bNoWorkFlows ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bHasWithName",
                    Value = bHasWithName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bDoesNotHaveAWithName",
                    Value = bDoesNotHaveAWithName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iPriority",
                    Value = iPriority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sKeyWord",
                    Size = 100,
                    Value = sKeyWord ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bExcludeRecurringTasks",
                    Value = bExcludeRecurringTasks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurOption",
                    Value = iRecurOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cStatus",
                    Size = 1,
                    Value = cStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bNoOldappointments",
                    Value = bNoOldappointments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "dChangeRangeBegin",
                    Value = dChangeRangeBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dchangeRangeEnd",
                    Value = dchangeRangeEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dDueRangeBegin",
                    Value = dDueRangeBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dDueRangeEnd",
                    Value = dDueRangeEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bOnlyWorkFlows",
                    Value = bOnlyWorkFlows ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_AACalEventDataGetByCriteriaWithNameResult>("EXEC @returnValue = [dbo].[sp_AACalEventDataGetByCriteriaWithName] @iKeyUser = @iKeyUser, @sReturnOption = @sReturnOption, @dDateRangeStart = @dDateRangeStart, @dDateRangeEnd = @dDateRangeEnd, @bSearchAllCalendars = @bSearchAllCalendars, @bSearchAllTypes = @bSearchAllTypes, @bSearchAllSubTypes = @bSearchAllSubTypes, @bSearchSpecifiedWithName = @bSearchSpecifiedWithName, @bNoWorkFlows = @bNoWorkFlows, @bHasWithName = @bHasWithName, @bDoesNotHaveAWithName = @bDoesNotHaveAWithName, @iPriority = @iPriority, @sKeyWord = @sKeyWord, @bExcludeRecurringTasks = @bExcludeRecurringTasks, @iRecurOption = @iRecurOption, @cStatus = @cStatus, @bNoOldappointments = @bNoOldappointments, @dChangeRangeBegin = @dChangeRangeBegin, @dchangeRangeEnd = @dchangeRangeEnd, @dDueRangeBegin = @dDueRangeBegin, @dDueRangeEnd = @dDueRangeEnd, @bOnlyWorkFlows = @bOnlyWorkFlows", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_AACalEventPopulateEventTempKeysAsync(int? iKeyUser, bool? bAllCalendarKeys, bool? bAllTypes, bool? bAllSubTypes, int? iKeyWithName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bAllCalendarKeys",
                    Value = bAllCalendarKeys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bAllTypes",
                    Value = bAllTypes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bAllSubTypes",
                    Value = bAllSubTypes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyWithName",
                    Value = iKeyWithName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_AACalEventPopulateEventTempKeys] @iKeyUser = @iKeyUser, @bAllCalendarKeys = @bAllCalendarKeys, @bAllTypes = @bAllTypes, @bAllSubTypes = @bAllSubTypes, @iKeyWithName = @iKeyWithName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ActiveDLFServiceModulesResult>> sp_ActiveDLFServiceModulesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ActiveDLFServiceModulesResult>("EXEC @returnValue = [dbo].[sp_ActiveDLFServiceModules]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_AddFileHistoryDetailAsync(int? iKeyLog, string cContact, string cHolding, DateTime? dFileDate, int? iCodeDetail, string cUserName, string cUserInitials, OutputParameter<int?> iReturnKeyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriReturnKeyId = new SqlParameter
            {
                ParameterName = "iReturnKeyId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iReturnKeyId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyLog",
                    Value = iKeyLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cContact",
                    Size = -1,
                    Value = cContact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cHolding",
                    Size = -1,
                    Value = cHolding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dFileDate",
                    Value = dFileDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeDetail",
                    Value = iCodeDetail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cUserName",
                    Size = 50,
                    Value = cUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriReturnKeyId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_AddFileHistoryDetail] @iKeyLog = @iKeyLog, @cContact = @cContact, @cHolding = @cHolding, @dFileDate = @dFileDate, @iCodeDetail = @iCodeDetail, @cUserName = @cUserName, @cUserInitials = @cUserInitials, @iReturnKeyId = @iReturnKeyId OUTPUT", sqlParameters, cancellationToken);

            iReturnKeyId.SetValue(parameteriReturnKeyId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_AddIndexPriceAsync(int? indexkey, decimal? close, decimal? high, decimal? low, DateTime? date, int? module, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "indexkey",
                    Value = indexkey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "close",
                    Precision = 16,
                    Scale = 6,
                    Value = close ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "high",
                    Precision = 16,
                    Scale = 6,
                    Value = high ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "low",
                    Precision = 16,
                    Scale = 6,
                    Value = low ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "date",
                    Value = date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_AddIndexPrice] @indexkey = @indexkey, @close = @close, @high = @high, @low = @low, @date = @date, @module = @module", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_AddIndexPrice2Async(int? indexkey, decimal? close, decimal? high, decimal? low, DateTime? date, string cDataStamp, bool? overwrite, OutputParameter<bool?> priceInserted, OutputParameter<bool?> priceOverwritten, OutputParameter<bool?> priceFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpriceInserted = new SqlParameter
            {
                ParameterName = "priceInserted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = priceInserted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterpriceOverwritten = new SqlParameter
            {
                ParameterName = "priceOverwritten",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = priceOverwritten?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterpriceFound = new SqlParameter
            {
                ParameterName = "priceFound",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = priceFound?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "indexkey",
                    Value = indexkey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "close",
                    Precision = 16,
                    Scale = 6,
                    Value = close ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "high",
                    Precision = 16,
                    Scale = 6,
                    Value = high ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "low",
                    Precision = 16,
                    Scale = 6,
                    Value = low ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "date",
                    Value = date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "overwrite",
                    Value = overwrite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterpriceInserted,
                parameterpriceOverwritten,
                parameterpriceFound,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_AddIndexPrice2] @indexkey = @indexkey, @close = @close, @high = @high, @low = @low, @date = @date, @cDataStamp = @cDataStamp, @overwrite = @overwrite, @priceInserted = @priceInserted OUTPUT, @priceOverwritten = @priceOverwritten OUTPUT, @priceFound = @priceFound OUTPUT", sqlParameters, cancellationToken);

            priceInserted.SetValue(parameterpriceInserted.Value);
            priceOverwritten.SetValue(parameterpriceOverwritten.Value);
            priceFound.SetValue(parameterpriceFound.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_AddNameToHouseholdResult>> sp_AddNameToHouseholdAsync(int? iHouseholdKeyID, int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iHouseholdKeyID",
                    Value = iHouseholdKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_AddNameToHouseholdResult>("EXEC @returnValue = [dbo].[sp_AddNameToHousehold] @iHouseholdKeyID = @iHouseholdKeyID, @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_AddNavAsync(int? symbolkey, decimal? close, decimal? high, decimal? low, int? volume, DateTime? date, int? module, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "symbolkey",
                    Value = symbolkey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "close",
                    Precision = 16,
                    Scale = 6,
                    Value = close ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "high",
                    Precision = 16,
                    Scale = 6,
                    Value = high ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "low",
                    Precision = 16,
                    Scale = 6,
                    Value = low ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "volume",
                    Value = volume ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "date",
                    Value = date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_AddNav] @symbolkey = @symbolkey, @close = @close, @high = @high, @low = @low, @volume = @volume, @date = @date, @module = @module, @cDataStamp = @cDataStamp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_AddNav2Async(int? symbolkey, decimal? close, decimal? high, decimal? low, int? volume, DateTime? date, int? module, string cDataStamp, bool? overwrite, OutputParameter<bool?> priceInserted, OutputParameter<bool?> priceOverwritten, OutputParameter<bool?> priceFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpriceInserted = new SqlParameter
            {
                ParameterName = "priceInserted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = priceInserted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterpriceOverwritten = new SqlParameter
            {
                ParameterName = "priceOverwritten",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = priceOverwritten?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterpriceFound = new SqlParameter
            {
                ParameterName = "priceFound",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = priceFound?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "symbolkey",
                    Value = symbolkey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "close",
                    Precision = 16,
                    Scale = 6,
                    Value = close ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "high",
                    Precision = 16,
                    Scale = 6,
                    Value = high ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "low",
                    Precision = 16,
                    Scale = 6,
                    Value = low ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "volume",
                    Value = volume ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "date",
                    Value = date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "overwrite",
                    Value = overwrite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterpriceInserted,
                parameterpriceOverwritten,
                parameterpriceFound,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_AddNav2] @symbolkey = @symbolkey, @close = @close, @high = @high, @low = @low, @volume = @volume, @date = @date, @module = @module, @cDataStamp = @cDataStamp, @overwrite = @overwrite, @priceInserted = @priceInserted OUTPUT, @priceOverwritten = @priceOverwritten OUTPUT, @priceFound = @priceFound OUTPUT", sqlParameters, cancellationToken);

            priceInserted.SetValue(parameterpriceInserted.Value);
            priceOverwritten.SetValue(parameterpriceOverwritten.Value);
            priceFound.SetValue(parameterpriceFound.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_AddNavAndIndexFromTempNavTableAsync(string cUserInit, bool? bDeleteAfterProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cUserInit",
                    Size = 10,
                    Value = cUserInit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bDeleteAfterProcess",
                    Value = bDeleteAfterProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_AddNavAndIndexFromTempNavTable] @cUserInit = @cUserInit, @bDeleteAfterProcess = @bDeleteAfterProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_AddNavWithPoolAsync(int? symbolkey, decimal? close, decimal? high, decimal? low, int? volume, DateTime? date, int? module, decimal? nPoolFactor, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "symbolkey",
                    Value = symbolkey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "close",
                    Precision = 16,
                    Scale = 6,
                    Value = close ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "high",
                    Precision = 16,
                    Scale = 6,
                    Value = high ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "low",
                    Precision = 16,
                    Scale = 6,
                    Value = low ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "volume",
                    Value = volume ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "date",
                    Value = date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nPoolFactor",
                    Precision = 12,
                    Scale = 8,
                    Value = nPoolFactor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_AddNavWithPool] @symbolkey = @symbolkey, @close = @close, @high = @high, @low = @low, @volume = @volume, @date = @date, @module = @module, @nPoolFactor = @nPoolFactor, @cDataStamp = @cDataStamp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_AddNavWithPoolAndFileAsync(int? symbolkey, decimal? close, decimal? high, decimal? low, int? volume, DateTime? date, int? module, decimal? nPoolFactor, string cDataStamp, int? iKeyFile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "symbolkey",
                    Value = symbolkey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "close",
                    Precision = 16,
                    Scale = 6,
                    Value = close ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "high",
                    Precision = 16,
                    Scale = 6,
                    Value = high ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "low",
                    Precision = 16,
                    Scale = 6,
                    Value = low ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "volume",
                    Value = volume ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "date",
                    Value = date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nPoolFactor",
                    Precision = 12,
                    Scale = 8,
                    Value = nPoolFactor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyFile",
                    Value = iKeyFile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_AddNavWithPoolAndFile] @symbolkey = @symbolkey, @close = @close, @high = @high, @low = @low, @volume = @volume, @date = @date, @module = @module, @nPoolFactor = @nPoolFactor, @cDataStamp = @cDataStamp, @iKeyFile = @iKeyFile", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_AddOutlookEntryIDCalendarRowResult>> sp_AddOutlookEntryIDCalendarRowAsync(int? iStoreKeyID, int? iKeyLink, string cEntryID, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyLink",
                    Value = iKeyLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = -1,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_AddOutlookEntryIDCalendarRowResult>("EXEC @returnValue = [dbo].[sp_AddOutlookEntryIDCalendarRow] @iStoreKeyID = @iStoreKeyID, @iKeyLink = @iKeyLink, @cEntryID = @cEntryID, @cUserInitials = @cUserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_AddOutlookEntryIDNameRowResult>> sp_AddOutlookEntryIDNameRowAsync(int? iStoreKeyID, int? iKeyLink, string cEntryID, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyLink",
                    Value = iKeyLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = -1,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_AddOutlookEntryIDNameRowResult>("EXEC @returnValue = [dbo].[sp_AddOutlookEntryIDNameRow] @iStoreKeyID = @iStoreKeyID, @iKeyLink = @iKeyLink, @cEntryID = @cEntryID, @cUserInitials = @cUserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_AddRemoveSecondaryProducerOnNameAsync(int? iKeyName, int? iKeyProducer, string cDataStamp, bool? bRemove, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyName",
                    Value = iKeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer",
                    Value = iKeyProducer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bRemove",
                    Value = bRemove ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_AddRemoveSecondaryProducerOnName] @iKeyName = @iKeyName, @iKeyProducer = @iKeyProducer, @cDataStamp = @cDataStamp, @bRemove = @bRemove", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_AllCatalogDropResult>> sp_AllCatalogDropAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_AllCatalogDropResult>("EXEC @returnValue = [dbo].[sp_AllCatalogDrop]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_AnalyzeInvestmentDataResult>> sp_AnalyzeInvestmentDataAsync(int? iKeyInvestment, bool? bCheckLotUnitsVsInvestmentUnits, bool? bCheckInvestmentLiquidatedNonZeroUnits, bool? bCheckTransactionsBeforeInit, bool? bCheckFirstTransactionNotAPurchase, bool? bCheckFirstTransactionNotAPurchaseCash, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyInvestment",
                    Value = iKeyInvestment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCheckLotUnitsVsInvestmentUnits",
                    Value = bCheckLotUnitsVsInvestmentUnits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bCheckInvestmentLiquidatedNonZeroUnits",
                    Value = bCheckInvestmentLiquidatedNonZeroUnits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bCheckTransactionsBeforeInit",
                    Value = bCheckTransactionsBeforeInit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bCheckFirstTransactionNotAPurchase",
                    Value = bCheckFirstTransactionNotAPurchase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bCheckFirstTransactionNotAPurchaseCash",
                    Value = bCheckFirstTransactionNotAPurchaseCash ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_AnalyzeInvestmentDataResult>("EXEC @returnValue = [dbo].[sp_AnalyzeInvestmentData] @iKeyInvestment = @iKeyInvestment, @bCheckLotUnitsVsInvestmentUnits = @bCheckLotUnitsVsInvestmentUnits, @bCheckInvestmentLiquidatedNonZeroUnits = @bCheckInvestmentLiquidatedNonZeroUnits, @bCheckTransactionsBeforeInit = @bCheckTransactionsBeforeInit, @bCheckFirstTransactionNotAPurchase = @bCheckFirstTransactionNotAPurchase, @bCheckFirstTransactionNotAPurchaseCash = @bCheckFirstTransactionNotAPurchaseCash", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_API_CalculateInvestmentValueAsync(int? InvestmentKey, DateTime? ValueDate, int? SymbolKey, OutputParameter<decimal?> InvestmentValue, OutputParameter<decimal?> InvestmentUnits, OutputParameter<decimal?> InvestmentUnitPrice, OutputParameter<DateTime?> InvestmentPriceDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterInvestmentValue = new SqlParameter
            {
                ParameterName = "InvestmentValue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = InvestmentValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameterInvestmentUnits = new SqlParameter
            {
                ParameterName = "InvestmentUnits",
                Precision = 16,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = InvestmentUnits?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterInvestmentUnitPrice = new SqlParameter
            {
                ParameterName = "InvestmentUnitPrice",
                Precision = 16,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = InvestmentUnitPrice?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterInvestmentPriceDate = new SqlParameter
            {
                ParameterName = "InvestmentPriceDate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = InvestmentPriceDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InvestmentKey",
                    Value = InvestmentKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ValueDate",
                    Value = ValueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SymbolKey",
                    Value = SymbolKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterInvestmentValue,
                parameterInvestmentUnits,
                parameterInvestmentUnitPrice,
                parameterInvestmentPriceDate,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_API_CalculateInvestmentValue] @InvestmentKey = @InvestmentKey, @ValueDate = @ValueDate, @SymbolKey = @SymbolKey, @InvestmentValue = @InvestmentValue OUTPUT, @InvestmentUnits = @InvestmentUnits OUTPUT, @InvestmentUnitPrice = @InvestmentUnitPrice OUTPUT, @InvestmentPriceDate = @InvestmentPriceDate OUTPUT", sqlParameters, cancellationToken);

            InvestmentValue.SetValue(parameterInvestmentValue.Value);
            InvestmentUnits.SetValue(parameterInvestmentUnits.Value);
            InvestmentUnitPrice.SetValue(parameterInvestmentUnitPrice.Value);
            InvestmentPriceDate.SetValue(parameterInvestmentPriceDate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_API_CheckNamePrimariesAsync(Guid? gName, Guid? gPrimaryAddress, Guid? gPrimaryPhone, Guid? gPrimaryEmailAddress, Guid? gPrimaryWebAddress, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gName",
                    Value = gName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "gPrimaryAddress",
                    Value = gPrimaryAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "gPrimaryPhone",
                    Value = gPrimaryPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "gPrimaryEmailAddress",
                    Value = gPrimaryEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "gPrimaryWebAddress",
                    Value = gPrimaryWebAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_API_CheckNamePrimaries] @gName = @gName, @gPrimaryAddress = @gPrimaryAddress, @gPrimaryPhone = @gPrimaryPhone, @gPrimaryEmailAddress = @gPrimaryEmailAddress, @gPrimaryWebAddress = @gPrimaryWebAddress", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_API_GetInvestmentDataResult>> sp_API_GetInvestmentDataAsync(string AccountKeyList, bool? IncludeLiquidatedInvestments, bool? IncludeZeroUnitsInvestments, bool? IncludeTransactions, DateTime? TransactionOnOrAfter, DateTime? TransactionOnOrBefore, DateTime? ValueHistoryOnOrAfter, DateTime? ValueHistoryOnOrBefore, bool? CalculateMissingValueHistory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccountKeyList",
                    Size = -1,
                    Value = AccountKeyList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeLiquidatedInvestments",
                    Value = IncludeLiquidatedInvestments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeZeroUnitsInvestments",
                    Value = IncludeZeroUnitsInvestments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeTransactions",
                    Value = IncludeTransactions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TransactionOnOrAfter",
                    Value = TransactionOnOrAfter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TransactionOnOrBefore",
                    Value = TransactionOnOrBefore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ValueHistoryOnOrAfter",
                    Value = ValueHistoryOnOrAfter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ValueHistoryOnOrBefore",
                    Value = ValueHistoryOnOrBefore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CalculateMissingValueHistory",
                    Value = CalculateMissingValueHistory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_API_GetInvestmentDataResult>("EXEC @returnValue = [dbo].[sp_API_GetInvestmentData] @AccountKeyList = @AccountKeyList, @IncludeLiquidatedInvestments = @IncludeLiquidatedInvestments, @IncludeZeroUnitsInvestments = @IncludeZeroUnitsInvestments, @IncludeTransactions = @IncludeTransactions, @TransactionOnOrAfter = @TransactionOnOrAfter, @TransactionOnOrBefore = @TransactionOnOrBefore, @ValueHistoryOnOrAfter = @ValueHistoryOnOrAfter, @ValueHistoryOnOrBefore = @ValueHistoryOnOrBefore, @CalculateMissingValueHistory = @CalculateMissingValueHistory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ArchiveAttachmentAsync(string cArchivedFileName, string cUserInitials, int? iFileSourceCode, int? iFileCategory, DateTime? tEmail, int? iFileSize, string cSubject, int? iNoteKeyID, int? iContactKeyID, string cUserName, string cClientVersion, string cDatabaseVersion, OutputParameter<bool?> bArchivedSuccessfully, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbArchivedSuccessfully = new SqlParameter
            {
                ParameterName = "bArchivedSuccessfully",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bArchivedSuccessfully?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cArchivedFileName",
                    Size = 1000,
                    Value = cArchivedFileName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iFileSourceCode",
                    Value = iFileSourceCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iFileCategory",
                    Value = iFileCategory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tEmail",
                    Value = tEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iFileSize",
                    Value = iFileSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cSubject",
                    Size = -1,
                    Value = cSubject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iNoteKeyID",
                    Value = iNoteKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iContactKeyID",
                    Value = iContactKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cUserName",
                    Size = 200,
                    Value = cUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cClientVersion",
                    Size = 20,
                    Value = cClientVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDatabaseVersion",
                    Size = 12,
                    Value = cDatabaseVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterbArchivedSuccessfully,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ArchiveAttachment] @cArchivedFileName = @cArchivedFileName, @cUserInitials = @cUserInitials, @iFileSourceCode = @iFileSourceCode, @iFileCategory = @iFileCategory, @tEmail = @tEmail, @iFileSize = @iFileSize, @cSubject = @cSubject, @iNoteKeyID = @iNoteKeyID, @iContactKeyID = @iContactKeyID, @cUserName = @cUserName, @cClientVersion = @cClientVersion, @cDatabaseVersion = @cDatabaseVersion, @bArchivedSuccessfully = @bArchivedSuccessfully OUTPUT", sqlParameters, cancellationToken);

            bArchivedSuccessfully.SetValue(parameterbArchivedSuccessfully.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ArchiveEmailAsync(string cEmailAddress, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, int? iCommit, OutputParameter<int?> iArchiveResult, OutputParameter<string> cArchivedClientNames, OutputParameter<string> cNameList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriArchiveResult = new SqlParameter
            {
                ParameterName = "iArchiveResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iArchiveResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercArchivedClientNames = new SqlParameter
            {
                ParameterName = "cArchivedClientNames",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cArchivedClientNames?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parametercNameList = new SqlParameter
            {
                ParameterName = "cNameList",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cNameList?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEmailAddress",
                    Size = 100,
                    Value = cEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriArchiveResult,
                new SqlParameter
                {
                    ParameterName = "cViewName",
                    Size = 20,
                    Value = cViewName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNoteText",
                    Size = -1,
                    Value = cNoteText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iActionCode",
                    Value = iActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tSent",
                    Value = tSent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tLastSynch",
                    Value = tLastSynch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cSubject",
                    Size = -1,
                    Value = cSubject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCommit",
                    Value = iCommit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametercArchivedClientNames,
                parametercNameList,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ArchiveEmail] @cEmailAddress = @cEmailAddress, @iArchiveResult = @iArchiveResult OUTPUT, @cViewName = @cViewName, @cUserInitials = @cUserInitials, @cNoteText = @cNoteText, @iStoreKeyID = @iStoreKeyID, @cEntryID = @cEntryID, @iActionCode = @iActionCode, @tSent = @tSent, @tLastSynch = @tLastSynch, @cSubject = @cSubject, @iCommit = @iCommit, @cArchivedClientNames = @cArchivedClientNames OUTPUT, @cNameList = @cNameList OUTPUT", sqlParameters, cancellationToken);

            iArchiveResult.SetValue(parameteriArchiveResult.Value);
            cArchivedClientNames.SetValue(parametercArchivedClientNames.Value);
            cNameList.SetValue(parametercNameList.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ArchiveEmail6Async(string cEmailAddress, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, OutputParameter<bool?> bArchivedSuccessfully, OutputParameter<string> cArchivedClientNames, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbArchivedSuccessfully = new SqlParameter
            {
                ParameterName = "bArchivedSuccessfully",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bArchivedSuccessfully?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parametercArchivedClientNames = new SqlParameter
            {
                ParameterName = "cArchivedClientNames",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cArchivedClientNames?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEmailAddress",
                    Size = 100,
                    Value = cEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterbArchivedSuccessfully,
                new SqlParameter
                {
                    ParameterName = "cViewName",
                    Size = 20,
                    Value = cViewName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNoteText",
                    Size = -1,
                    Value = cNoteText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iActionCode",
                    Value = iActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tSent",
                    Value = tSent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tLastSynch",
                    Value = tLastSynch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cSubject",
                    Size = -1,
                    Value = cSubject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametercArchivedClientNames,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ArchiveEmail6] @cEmailAddress = @cEmailAddress, @bArchivedSuccessfully = @bArchivedSuccessfully OUTPUT, @cViewName = @cViewName, @cUserInitials = @cUserInitials, @cNoteText = @cNoteText, @iStoreKeyID = @iStoreKeyID, @cEntryID = @cEntryID, @iActionCode = @iActionCode, @tSent = @tSent, @tLastSynch = @tLastSynch, @cSubject = @cSubject, @cArchivedClientNames = @cArchivedClientNames OUTPUT", sqlParameters, cancellationToken);

            bArchivedSuccessfully.SetValue(parameterbArchivedSuccessfully.Value);
            cArchivedClientNames.SetValue(parametercArchivedClientNames.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ArchiveEmail7Async(string cEmailAddress, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, int? iCommit, OutputParameter<int?> iArchiveResult, OutputParameter<string> cArchivedClientNames, OutputParameter<string> cNameList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriArchiveResult = new SqlParameter
            {
                ParameterName = "iArchiveResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iArchiveResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercArchivedClientNames = new SqlParameter
            {
                ParameterName = "cArchivedClientNames",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cArchivedClientNames?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parametercNameList = new SqlParameter
            {
                ParameterName = "cNameList",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cNameList?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEmailAddress",
                    Size = 100,
                    Value = cEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriArchiveResult,
                new SqlParameter
                {
                    ParameterName = "cViewName",
                    Size = 20,
                    Value = cViewName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNoteText",
                    Size = -1,
                    Value = cNoteText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iActionCode",
                    Value = iActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tSent",
                    Value = tSent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tLastSynch",
                    Value = tLastSynch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cSubject",
                    Size = -1,
                    Value = cSubject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCommit",
                    Value = iCommit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametercArchivedClientNames,
                parametercNameList,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ArchiveEmail7] @cEmailAddress = @cEmailAddress, @iArchiveResult = @iArchiveResult OUTPUT, @cViewName = @cViewName, @cUserInitials = @cUserInitials, @cNoteText = @cNoteText, @iStoreKeyID = @iStoreKeyID, @cEntryID = @cEntryID, @iActionCode = @iActionCode, @tSent = @tSent, @tLastSynch = @tLastSynch, @cSubject = @cSubject, @iCommit = @iCommit, @cArchivedClientNames = @cArchivedClientNames OUTPUT, @cNameList = @cNameList OUTPUT", sqlParameters, cancellationToken);

            iArchiveResult.SetValue(parameteriArchiveResult.Value);
            cArchivedClientNames.SetValue(parametercArchivedClientNames.Value);
            cNameList.SetValue(parametercNameList.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ArchiveEmail7CommitUpdatesAsync(string cEmailAddress, int? iEmailAddressKeyID, int? iNameKeyID, int? iCheckKey, int? iTopicKeyID, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, string cFullName, string cPathName, int? iCommit, OutputParameter<int?> iArchiveResult, OutputParameter<string> cArchivedClientNames, OutputParameter<string> cNameList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriArchiveResult = new SqlParameter
            {
                ParameterName = "iArchiveResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iArchiveResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercArchivedClientNames = new SqlParameter
            {
                ParameterName = "cArchivedClientNames",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cArchivedClientNames?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parametercNameList = new SqlParameter
            {
                ParameterName = "cNameList",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cNameList?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEmailAddress",
                    Size = 100,
                    Value = cEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iEmailAddressKeyID",
                    Value = iEmailAddressKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCheckKey",
                    Value = iCheckKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iTopicKeyID",
                    Value = iTopicKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriArchiveResult,
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNoteText",
                    Size = -1,
                    Value = cNoteText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iActionCode",
                    Value = iActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tSent",
                    Value = tSent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tLastSynch",
                    Value = tLastSynch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cSubject",
                    Size = -1,
                    Value = cSubject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cFullName",
                    Size = 500,
                    Value = cFullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cPathName",
                    Size = 1000,
                    Value = cPathName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCommit",
                    Value = iCommit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametercArchivedClientNames,
                parametercNameList,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ArchiveEmail7CommitUpdates] @cEmailAddress = @cEmailAddress, @iEmailAddressKeyID = @iEmailAddressKeyID, @iNameKeyID = @iNameKeyID, @iCheckKey = @iCheckKey, @iTopicKeyID = @iTopicKeyID, @iArchiveResult = @iArchiveResult OUTPUT, @cUserInitials = @cUserInitials, @cNoteText = @cNoteText, @iStoreKeyID = @iStoreKeyID, @cEntryID = @cEntryID, @iActionCode = @iActionCode, @tSent = @tSent, @tLastSynch = @tLastSynch, @cSubject = @cSubject, @cFullName = @cFullName, @cPathName = @cPathName, @iCommit = @iCommit, @cArchivedClientNames = @cArchivedClientNames OUTPUT, @cNameList = @cNameList OUTPUT", sqlParameters, cancellationToken);

            iArchiveResult.SetValue(parameteriArchiveResult.Value);
            cArchivedClientNames.SetValue(parametercArchivedClientNames.Value);
            cNameList.SetValue(parametercNameList.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ArchiveEmail7ToInputNameIDAsync(int? iNameKeyID, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, int? iCommit, OutputParameter<int?> iArchiveResult, OutputParameter<string> cArchivedClientNames, OutputParameter<string> cNameList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriArchiveResult = new SqlParameter
            {
                ParameterName = "iArchiveResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iArchiveResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercArchivedClientNames = new SqlParameter
            {
                ParameterName = "cArchivedClientNames",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cArchivedClientNames?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parametercNameList = new SqlParameter
            {
                ParameterName = "cNameList",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cNameList?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriArchiveResult,
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNoteText",
                    Size = -1,
                    Value = cNoteText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iActionCode",
                    Value = iActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tSent",
                    Value = tSent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tLastSynch",
                    Value = tLastSynch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cSubject",
                    Size = -1,
                    Value = cSubject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCommit",
                    Value = iCommit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametercArchivedClientNames,
                parametercNameList,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ArchiveEmail7ToInputNameID] @iNameKeyID = @iNameKeyID, @iArchiveResult = @iArchiveResult OUTPUT, @cUserInitials = @cUserInitials, @cNoteText = @cNoteText, @iStoreKeyID = @iStoreKeyID, @cEntryID = @cEntryID, @iActionCode = @iActionCode, @tSent = @tSent, @tLastSynch = @tLastSynch, @cSubject = @cSubject, @iCommit = @iCommit, @cArchivedClientNames = @cArchivedClientNames OUTPUT, @cNameList = @cNameList OUTPUT", sqlParameters, cancellationToken);

            iArchiveResult.SetValue(parameteriArchiveResult.Value);
            cArchivedClientNames.SetValue(parametercArchivedClientNames.Value);
            cNameList.SetValue(parametercNameList.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ArchiveEmailDictationAsync(string cPhone, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, string cInputFirstName, string cInputLastName, int? iCodeNoteTopic, string cTopicDescription, OutputParameter<bool?> bArchivedSuccessfully, OutputParameter<string> cArchivedClientNames, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbArchivedSuccessfully = new SqlParameter
            {
                ParameterName = "bArchivedSuccessfully",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bArchivedSuccessfully?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parametercArchivedClientNames = new SqlParameter
            {
                ParameterName = "cArchivedClientNames",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cArchivedClientNames?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cPhone",
                    Size = 15,
                    Value = cPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterbArchivedSuccessfully,
                new SqlParameter
                {
                    ParameterName = "cViewName",
                    Size = 20,
                    Value = cViewName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNoteText",
                    Size = -1,
                    Value = cNoteText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 140,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iActionCode",
                    Value = iActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tSent",
                    Value = tSent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tLastSynch",
                    Value = tLastSynch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cSubject",
                    Size = -1,
                    Value = cSubject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametercArchivedClientNames,
                new SqlParameter
                {
                    ParameterName = "cInputFirstName",
                    Size = 30,
                    Value = cInputFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cInputLastName",
                    Size = 60,
                    Value = cInputLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeNoteTopic",
                    Value = iCodeNoteTopic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTopicDescription",
                    Size = 50,
                    Value = cTopicDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ArchiveEmailDictation] @cPhone = @cPhone, @bArchivedSuccessfully = @bArchivedSuccessfully OUTPUT, @cViewName = @cViewName, @cUserInitials = @cUserInitials, @cNoteText = @cNoteText, @iStoreKeyID = @iStoreKeyID, @cEntryID = @cEntryID, @iActionCode = @iActionCode, @tSent = @tSent, @tLastSynch = @tLastSynch, @cSubject = @cSubject, @cArchivedClientNames = @cArchivedClientNames OUTPUT, @cInputFirstName = @cInputFirstName, @cInputLastName = @cInputLastName, @iCodeNoteTopic = @iCodeNoteTopic, @cTopicDescription = @cTopicDescription", sqlParameters, cancellationToken);

            bArchivedSuccessfully.SetValue(parameterbArchivedSuccessfully.Value);
            cArchivedClientNames.SetValue(parametercArchivedClientNames.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ArchiveEmailMobileAssistAsync(string cPhone, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, string cMobileAssistFirstName, string cMobileAssistLastName, OutputParameter<bool?> bArchivedSuccessfully, OutputParameter<string> cArchivedClientNames, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbArchivedSuccessfully = new SqlParameter
            {
                ParameterName = "bArchivedSuccessfully",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bArchivedSuccessfully?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parametercArchivedClientNames = new SqlParameter
            {
                ParameterName = "cArchivedClientNames",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cArchivedClientNames?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cPhone",
                    Size = 15,
                    Value = cPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterbArchivedSuccessfully,
                new SqlParameter
                {
                    ParameterName = "cViewName",
                    Size = 20,
                    Value = cViewName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNoteText",
                    Size = -1,
                    Value = cNoteText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 140,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iActionCode",
                    Value = iActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tSent",
                    Value = tSent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tLastSynch",
                    Value = tLastSynch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cSubject",
                    Size = -1,
                    Value = cSubject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametercArchivedClientNames,
                new SqlParameter
                {
                    ParameterName = "cMobileAssistFirstName",
                    Size = 30,
                    Value = cMobileAssistFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cMobileAssistLastName",
                    Size = 60,
                    Value = cMobileAssistLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ArchiveEmailMobileAssist] @cPhone = @cPhone, @bArchivedSuccessfully = @bArchivedSuccessfully OUTPUT, @cViewName = @cViewName, @cUserInitials = @cUserInitials, @cNoteText = @cNoteText, @iStoreKeyID = @iStoreKeyID, @cEntryID = @cEntryID, @iActionCode = @iActionCode, @tSent = @tSent, @tLastSynch = @tLastSynch, @cSubject = @cSubject, @cArchivedClientNames = @cArchivedClientNames OUTPUT, @cMobileAssistFirstName = @cMobileAssistFirstName, @cMobileAssistLastName = @cMobileAssistLastName", sqlParameters, cancellationToken);

            bArchivedSuccessfully.SetValue(parameterbArchivedSuccessfully.Value);
            cArchivedClientNames.SetValue(parametercArchivedClientNames.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ArchiveEmailMyCopyTalkAsync(string cPhone, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, string cInputFirstName, string cInputLastName, OutputParameter<bool?> bArchivedSuccessfully, OutputParameter<string> cArchivedClientNames, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbArchivedSuccessfully = new SqlParameter
            {
                ParameterName = "bArchivedSuccessfully",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bArchivedSuccessfully?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parametercArchivedClientNames = new SqlParameter
            {
                ParameterName = "cArchivedClientNames",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cArchivedClientNames?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cPhone",
                    Size = 15,
                    Value = cPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterbArchivedSuccessfully,
                new SqlParameter
                {
                    ParameterName = "cViewName",
                    Size = 20,
                    Value = cViewName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNoteText",
                    Size = -1,
                    Value = cNoteText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 140,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iActionCode",
                    Value = iActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tSent",
                    Value = tSent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tLastSynch",
                    Value = tLastSynch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cSubject",
                    Size = -1,
                    Value = cSubject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametercArchivedClientNames,
                new SqlParameter
                {
                    ParameterName = "cInputFirstName",
                    Size = 30,
                    Value = cInputFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cInputLastName",
                    Size = 60,
                    Value = cInputLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ArchiveEmailMyCopyTalk] @cPhone = @cPhone, @bArchivedSuccessfully = @bArchivedSuccessfully OUTPUT, @cViewName = @cViewName, @cUserInitials = @cUserInitials, @cNoteText = @cNoteText, @iStoreKeyID = @iStoreKeyID, @cEntryID = @cEntryID, @iActionCode = @iActionCode, @tSent = @tSent, @tLastSynch = @tLastSynch, @cSubject = @cSubject, @cArchivedClientNames = @cArchivedClientNames OUTPUT, @cInputFirstName = @cInputFirstName, @cInputLastName = @cInputLastName", sqlParameters, cancellationToken);

            bArchivedSuccessfully.SetValue(parameterbArchivedSuccessfully.Value);
            cArchivedClientNames.SetValue(parametercArchivedClientNames.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_BackupAllDatabasesResult>> sp_BackupAllDatabasesAsync(string Path, string Type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 128,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Type",
                    Size = 4,
                    Value = Type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_BackupAllDatabasesResult>("EXEC @returnValue = [dbo].[sp_BackupAllDatabases] @Path = @Path, @Type = @Type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_BenchMarkReportDatasetAccountLevelResult>> sp_BenchMarkReportDatasetAccountLevelAsync(int? iKeyReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyReport",
                    Value = iKeyReport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_BenchMarkReportDatasetAccountLevelResult>("EXEC @returnValue = [dbo].[sp_BenchMarkReportDatasetAccountLevel] @iKeyReport = @iKeyReport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_BenchMarkReportDatasetNvstAndAcctLevelResult>> sp_BenchMarkReportDatasetNvstAndAcctLevelAsync(int? iKeyReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyReport",
                    Value = iKeyReport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_BenchMarkReportDatasetNvstAndAcctLevelResult>("EXEC @returnValue = [dbo].[sp_BenchMarkReportDatasetNvstAndAcctLevel] @iKeyReport = @iKeyReport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_BenchMarkReportDatasetNvstLevelResult>> sp_BenchMarkReportDatasetNvstLevelAsync(int? iKeyReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyReport",
                    Value = iKeyReport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_BenchMarkReportDatasetNvstLevelResult>("EXEC @returnValue = [dbo].[sp_BenchMarkReportDatasetNvstLevel] @iKeyReport = @iKeyReport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_BenchMarkReportDatasetTopLevelResult>> sp_BenchMarkReportDatasetTopLevelAsync(int? iKeyReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyReport",
                    Value = iKeyReport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_BenchMarkReportDatasetTopLevelResult>("EXEC @returnValue = [dbo].[sp_BenchMarkReportDatasetTopLevel] @iKeyReport = @iKeyReport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_BenchMarkReportDatasetTopValuationResult>> sp_BenchMarkReportDatasetTopValuationAsync(int? iKeyReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyReport",
                    Value = iKeyReport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_BenchMarkReportDatasetTopValuationResult>("EXEC @returnValue = [dbo].[sp_BenchMarkReportDatasetTopValuation] @iKeyReport = @iKeyReport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_BenchMarkReportRetrievalResult>> sp_BenchMarkReportRetrievalAsync(DateTime? dSart, DateTime? dEnd, int? iKeyTopAccount, int? ikeyTopName, int? iKeytopHousehold, int? iKeyTopSector, int? iKeytopAdvisor, int? ikeyIndex1, int? iKeyIndex2, string cPeriod, bool? bIncludeFees, bool? bIncludeExpenses, decimal? yStartingValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dSart",
                    Value = dSart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dEnd",
                    Value = dEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTopAccount",
                    Value = iKeyTopAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyTopName",
                    Value = ikeyTopName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeytopHousehold",
                    Value = iKeytopHousehold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTopSector",
                    Value = iKeyTopSector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeytopAdvisor",
                    Value = iKeytopAdvisor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyIndex1",
                    Value = ikeyIndex1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyIndex2",
                    Value = iKeyIndex2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cPeriod",
                    Size = 20,
                    Value = cPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bIncludeFees",
                    Value = bIncludeFees ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bIncludeExpenses",
                    Value = bIncludeExpenses ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "yStartingValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yStartingValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_BenchMarkReportRetrievalResult>("EXEC @returnValue = [dbo].[sp_BenchMarkReportRetrieval] @dSart = @dSart, @dEnd = @dEnd, @iKeyTopAccount = @iKeyTopAccount, @ikeyTopName = @ikeyTopName, @iKeytopHousehold = @iKeytopHousehold, @iKeyTopSector = @iKeyTopSector, @iKeytopAdvisor = @iKeytopAdvisor, @ikeyIndex1 = @ikeyIndex1, @iKeyIndex2 = @iKeyIndex2, @cPeriod = @cPeriod, @bIncludeFees = @bIncludeFees, @bIncludeExpenses = @bIncludeExpenses, @yStartingValue = @yStartingValue", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_BlankZeroValueRecordsResult>> sp_BlankZeroValueRecordsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_BlankZeroValueRecordsResult>("EXEC @returnValue = [dbo].[sp_BlankZeroValueRecords]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CalculateAndUpdateMarketIndexByDateRangeAsync(int? iKeyIndex, DateTime? dFrom, DateTime? dTo, string cWhoChangeStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyIndex",
                    Value = iKeyIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dFrom",
                    Value = dFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dTo",
                    Value = dTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cWhoChangeStamp",
                    Size = 10,
                    Value = cWhoChangeStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CalculateAndUpdateMarketIndexByDateRange] @iKeyIndex = @iKeyIndex, @dFrom = @dFrom, @dTo = @dTo, @cWhoChangeStamp = @cWhoChangeStamp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CalculateAndUpdateMarketIndexReturnsAsync(int? iKeyIndexPrice, string cDatastamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyIndexPrice",
                    Value = iKeyIndexPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDatastamp",
                    Size = 10,
                    Value = cDatastamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CalculateAndUpdateMarketIndexReturns] @iKeyIndexPrice = @iKeyIndexPrice, @cDatastamp = @cDatastamp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CalculateCoverageNetBenefitAsync(int? iFundingOption, int? iBenefitOption, decimal? nCoverageBaseBenefit, decimal? nCoverageLoans, decimal? nNetCashValue, decimal? nTotalPremiumsToDate, int? iCoverageClass, decimal? yCashValue, int? iDividendOption, OutputParameter<decimal?> nReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternReturn = new SqlParameter
            {
                ParameterName = "nReturn",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nReturn?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iFundingOption",
                    Value = iFundingOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iBenefitOption",
                    Value = iBenefitOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nCoverageBaseBenefit",
                    Precision = 19,
                    Scale = 4,
                    Value = nCoverageBaseBenefit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nCoverageLoans",
                    Precision = 19,
                    Scale = 4,
                    Value = nCoverageLoans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nNetCashValue",
                    Precision = 19,
                    Scale = 4,
                    Value = nNetCashValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nTotalPremiumsToDate",
                    Precision = 19,
                    Scale = 4,
                    Value = nTotalPremiumsToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageClass",
                    Value = iCoverageClass ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yCashValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yCashValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "iDividendOption",
                    Value = iDividendOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameternReturn,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CalculateCoverageNetBenefit] @iFundingOption = @iFundingOption, @iBenefitOption = @iBenefitOption, @nCoverageBaseBenefit = @nCoverageBaseBenefit, @nCoverageLoans = @nCoverageLoans, @nNetCashValue = @nNetCashValue, @nTotalPremiumsToDate = @nTotalPremiumsToDate, @iCoverageClass = @iCoverageClass, @yCashValue = @yCashValue, @iDividendOption = @iDividendOption, @nReturn = @nReturn OUTPUT", sqlParameters, cancellationToken);

            nReturn.SetValue(parameternReturn.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CalculateCoverageNetCashValueResult>> sp_CalculateCoverageNetCashValueAsync(int? iFundingOption, decimal? nPolicyBaseCashValue, decimal? yFundingAccountMarketValue, decimal? nPolicyOtherValue, decimal? nPolicyLoans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iFundingOption",
                    Value = iFundingOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nPolicyBaseCashValue",
                    Precision = 19,
                    Scale = 4,
                    Value = nPolicyBaseCashValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yFundingAccountMarketValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yFundingAccountMarketValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nPolicyOtherValue",
                    Precision = 19,
                    Scale = 4,
                    Value = nPolicyOtherValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nPolicyLoans",
                    Precision = 19,
                    Scale = 4,
                    Value = nPolicyLoans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CalculateCoverageNetCashValueResult>("EXEC @returnValue = [dbo].[sp_CalculateCoverageNetCashValue] @iFundingOption = @iFundingOption, @nPolicyBaseCashValue = @nPolicyBaseCashValue, @yFundingAccountMarketValue = @yFundingAccountMarketValue, @nPolicyOtherValue = @nPolicyOtherValue, @nPolicyLoans = @nPolicyLoans", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CalculateCoverageNetCashValueInternalAsync(int? iFundingOption, decimal? nCoverageBaseCashValue, decimal? yFundingAccountMarketValue, decimal? nCoverageOtherValue, decimal? nCoverageLoans, OutputParameter<decimal?> nNetCashValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternNetCashValue = new SqlParameter
            {
                ParameterName = "nNetCashValue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nNetCashValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iFundingOption",
                    Value = iFundingOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nCoverageBaseCashValue",
                    Precision = 19,
                    Scale = 4,
                    Value = nCoverageBaseCashValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yFundingAccountMarketValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yFundingAccountMarketValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nCoverageOtherValue",
                    Precision = 19,
                    Scale = 4,
                    Value = nCoverageOtherValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nCoverageLoans",
                    Precision = 19,
                    Scale = 4,
                    Value = nCoverageLoans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameternNetCashValue,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CalculateCoverageNetCashValueInternal] @iFundingOption = @iFundingOption, @nCoverageBaseCashValue = @nCoverageBaseCashValue, @yFundingAccountMarketValue = @yFundingAccountMarketValue, @nCoverageOtherValue = @nCoverageOtherValue, @nCoverageLoans = @nCoverageLoans, @nNetCashValue = @nNetCashValue OUTPUT", sqlParameters, cancellationToken);

            nNetCashValue.SetValue(parameternNetCashValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CalculateMarketIndexReturnInternalAsync(int? iKeyIndex, DateTime? dEndPeriod, DateTime? dStartPeriod, OutputParameter<decimal?> nReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternReturn = new SqlParameter
            {
                ParameterName = "nReturn",
                Precision = 16,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nReturn?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyIndex",
                    Value = iKeyIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEndPeriod",
                    Value = dEndPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dStartPeriod",
                    Value = dStartPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameternReturn,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CalculateMarketIndexReturnInternal] @iKeyIndex = @iKeyIndex, @dEndPeriod = @dEndPeriod, @dStartPeriod = @dStartPeriod, @nReturn = @nReturn OUTPUT", sqlParameters, cancellationToken);

            nReturn.SetValue(parameternReturn.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CalculatePolicyNetCashValueResult>> sp_CalculatePolicyNetCashValueAsync(int? iFundingOption, decimal? nPolicyBaseCashValue, decimal? yFundingAccountMarketValue, decimal? nPolicyOtherValue, decimal? nPolicyLoans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iFundingOption",
                    Value = iFundingOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nPolicyBaseCashValue",
                    Precision = 19,
                    Scale = 4,
                    Value = nPolicyBaseCashValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yFundingAccountMarketValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yFundingAccountMarketValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nPolicyOtherValue",
                    Precision = 19,
                    Scale = 4,
                    Value = nPolicyOtherValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nPolicyLoans",
                    Precision = 19,
                    Scale = 4,
                    Value = nPolicyLoans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CalculatePolicyNetCashValueResult>("EXEC @returnValue = [dbo].[sp_CalculatePolicyNetCashValue] @iFundingOption = @iFundingOption, @nPolicyBaseCashValue = @nPolicyBaseCashValue, @yFundingAccountMarketValue = @yFundingAccountMarketValue, @nPolicyOtherValue = @nPolicyOtherValue, @nPolicyLoans = @nPolicyLoans", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CalculatePolicyNetCashValueInternalAsync(int? iFundingOption, decimal? nPolicyBaseCashValue, decimal? yFundingAccountMarketValue, decimal? nPolicyOtherValue, decimal? nPolicyLoans, OutputParameter<decimal?> nNetCashValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternNetCashValue = new SqlParameter
            {
                ParameterName = "nNetCashValue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nNetCashValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iFundingOption",
                    Value = iFundingOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nPolicyBaseCashValue",
                    Precision = 19,
                    Scale = 4,
                    Value = nPolicyBaseCashValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yFundingAccountMarketValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yFundingAccountMarketValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nPolicyOtherValue",
                    Precision = 19,
                    Scale = 4,
                    Value = nPolicyOtherValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nPolicyLoans",
                    Precision = 19,
                    Scale = 4,
                    Value = nPolicyLoans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameternNetCashValue,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CalculatePolicyNetCashValueInternal] @iFundingOption = @iFundingOption, @nPolicyBaseCashValue = @nPolicyBaseCashValue, @yFundingAccountMarketValue = @yFundingAccountMarketValue, @nPolicyOtherValue = @nPolicyOtherValue, @nPolicyLoans = @nPolicyLoans, @nNetCashValue = @nNetCashValue OUTPUT", sqlParameters, cancellationToken);

            nNetCashValue.SetValue(parameternNetCashValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CalculatePremiumDueDatesResult>> sp_CalculatePremiumDueDatesAsync(DateTime? dBase, DateTime? dStart, DateTime? dEnd, int? iTimesPerYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dBase",
                    Value = dBase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dStart",
                    Value = dStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dEnd",
                    Value = dEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iTimesPerYear",
                    Value = iTimesPerYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CalculatePremiumDueDatesResult>("EXEC @returnValue = [dbo].[sp_CalculatePremiumDueDates] @dBase = @dBase, @dStart = @dStart, @dEnd = @dEnd, @iTimesPerYear = @iTimesPerYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CalculatePremiumDueDatesWithBlackoutsResult>> sp_CalculatePremiumDueDatesWithBlackoutsAsync(DateTime? dBase, DateTime? dStart, DateTime? dEnd, int? iTimesPerYear, int? iRateTableKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dBase",
                    Value = dBase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dStart",
                    Value = dStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dEnd",
                    Value = dEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iTimesPerYear",
                    Value = iTimesPerYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableKeyID",
                    Value = iRateTableKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CalculatePremiumDueDatesWithBlackoutsResult>("EXEC @returnValue = [dbo].[sp_CalculatePremiumDueDatesWithBlackouts] @dBase = @dBase, @dStart = @dStart, @dEnd = @dEnd, @iTimesPerYear = @iTimesPerYear, @iRateTableKeyID = @iRateTableKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CalculateSecurityReturnResult>> sp_CalculateSecurityReturnAsync(int? iKeySecurity, DateTime? dEndPeriod, DateTime? dStartPeriod, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySecurity",
                    Value = iKeySecurity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEndPeriod",
                    Value = dEndPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dStartPeriod",
                    Value = dStartPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CalculateSecurityReturnResult>("EXEC @returnValue = [dbo].[sp_CalculateSecurityReturn] @iKeySecurity = @iKeySecurity, @dEndPeriod = @dEndPeriod, @dStartPeriod = @dStartPeriod", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CalculateSecurityReturnInternalAsync(int? iKeySecurity, DateTime? dEndPeriod, DateTime? dStartPeriod, OutputParameter<decimal?> nReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternReturn = new SqlParameter
            {
                ParameterName = "nReturn",
                Precision = 16,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nReturn?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySecurity",
                    Value = iKeySecurity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEndPeriod",
                    Value = dEndPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dStartPeriod",
                    Value = dStartPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameternReturn,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CalculateSecurityReturnInternal] @iKeySecurity = @iKeySecurity, @dEndPeriod = @dEndPeriod, @dStartPeriod = @dStartPeriod, @nReturn = @nReturn OUTPUT", sqlParameters, cancellationToken);

            nReturn.SetValue(parameternReturn.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CalEventGetActiveEventListResult>> sp_CalEventGetActiveEventListAsync(int? iCalUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalUserKeyID",
                    Value = iCalUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CalEventGetActiveEventListResult>("EXEC @returnValue = [dbo].[sp_CalEventGetActiveEventList] @iCalUserKeyID = @iCalUserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CalEventGetActiveEventNameListResult>> sp_CalEventGetActiveEventNameListAsync(int? iCalUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalUserKeyID",
                    Value = iCalUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CalEventGetActiveEventNameListResult>("EXEC @returnValue = [dbo].[sp_CalEventGetActiveEventNameList] @iCalUserKeyID = @iCalUserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CalEventLogDeleteAsync(int? NewTempDataKeyID, OutputParameter<int?> ProcessLogKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterProcessLogKeyID = new SqlParameter
            {
                ParameterName = "ProcessLogKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ProcessLogKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NewTempDataKeyID",
                    Value = NewTempDataKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterProcessLogKeyID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CalEventLogDelete] @NewTempDataKeyID = @NewTempDataKeyID, @ProcessLogKeyID = @ProcessLogKeyID OUTPUT", sqlParameters, cancellationToken);

            ProcessLogKeyID.SetValue(parameterProcessLogKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CalEventPreLogDeleteAsync(int? EventKeyID, int? Instance, string UserInitials, int? UserKeyID, string ContextMessage, string ProgramVersion, OutputParameter<int?> NewTempDataKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNewTempDataKeyID = new SqlParameter
            {
                ParameterName = "NewTempDataKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NewTempDataKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EventKeyID",
                    Value = EventKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Instance",
                    Value = Instance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ContextMessage",
                    Size = -1,
                    Value = ContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramVersion",
                    Size = 100,
                    Value = ProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterNewTempDataKeyID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CalEventPreLogDelete] @EventKeyID = @EventKeyID, @Instance = @Instance, @UserInitials = @UserInitials, @UserKeyID = @UserKeyID, @ContextMessage = @ContextMessage, @ProgramVersion = @ProgramVersion, @NewTempDataKeyID = @NewTempDataKeyID OUTPUT", sqlParameters, cancellationToken);

            NewTempDataKeyID.SetValue(parameterNewTempDataKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CalEventsGetEarlierEventsResult>> sp_CalEventsGetEarlierEventsAsync(int? iCalUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalUserKeyID",
                    Value = iCalUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CalEventsGetEarlierEventsResult>("EXEC @returnValue = [dbo].[sp_CalEventsGetEarlierEvents] @iCalUserKeyID = @iCalUserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CalEventsRolloverResult>> sp_CalEventsRolloverAsync(int? iCalUserKeyID, int? iDaysToRollover, Guid? GUID, OutputParameter<int?> iEventRolloverCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventRolloverCount = new SqlParameter
            {
                ParameterName = "iEventRolloverCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventRolloverCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalUserKeyID",
                    Value = iCalUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iDaysToRollover",
                    Value = iDaysToRollover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GUID",
                    Value = GUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameteriEventRolloverCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CalEventsRolloverResult>("EXEC @returnValue = [dbo].[sp_CalEventsRollover] @iCalUserKeyID = @iCalUserKeyID, @iDaysToRollover = @iDaysToRollover, @GUID = @GUID, @iEventRolloverCount = @iEventRolloverCount OUTPUT", sqlParameters, cancellationToken);

            iEventRolloverCount.SetValue(parameteriEventRolloverCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CalEventsRolloverByWorkflowResult>> sp_CalEventsRolloverByWorkflowAsync(int? iWorkflowKeyID, int? iDaysToRollover, Guid? GUID, OutputParameter<int?> iEventRolloverCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventRolloverCount = new SqlParameter
            {
                ParameterName = "iEventRolloverCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventRolloverCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iWorkflowKeyID",
                    Value = iWorkflowKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iDaysToRollover",
                    Value = iDaysToRollover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GUID",
                    Value = GUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameteriEventRolloverCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CalEventsRolloverByWorkflowResult>("EXEC @returnValue = [dbo].[sp_CalEventsRolloverByWorkflow] @iWorkflowKeyID = @iWorkflowKeyID, @iDaysToRollover = @iDaysToRollover, @GUID = @GUID, @iEventRolloverCount = @iEventRolloverCount OUTPUT", sqlParameters, cancellationToken);

            iEventRolloverCount.SetValue(parameteriEventRolloverCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CAMImportKeyAsync(Guid? gCamID, string cLastName, string cfirstName, string cInvType, DateTime? dDob, string cStreet, int? iKeyProducer, string cDataStamp, OutputParameter<int?> iKeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyName = new SqlParameter
            {
                ParameterName = "iKeyName",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyName?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gCamID",
                    Value = gCamID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cLastName",
                    Size = 70,
                    Value = cLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cfirstName",
                    Size = 40,
                    Value = cfirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cInvType",
                    Size = 50,
                    Value = cInvType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dDob",
                    Value = dDob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cStreet",
                    Size = 70,
                    Value = cStreet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer",
                    Value = iKeyProducer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKeyName,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CAMImportKey] @gCamID = @gCamID, @cLastName = @cLastName, @cfirstName = @cfirstName, @cInvType = @cInvType, @dDob = @dDob, @cStreet = @cStreet, @iKeyProducer = @iKeyProducer, @cDataStamp = @cDataStamp, @iKeyName = @iKeyName OUTPUT", sqlParameters, cancellationToken);

            iKeyName.SetValue(parameteriKeyName.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CAMRetrieveInfoForCaseResult>> sp_CAMRetrieveInfoForCaseAsync(int? iKeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyName",
                    Value = iKeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CAMRetrieveInfoForCaseResult>("EXEC @returnValue = [dbo].[sp_CAMRetrieveInfoForCase] @iKeyName = @iKeyName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CAMSetupEmployerAsync(int? iKeyClient, string cName, string cURL, string cStreet, string cCity, string cState, string czip, int? ikeyProducer, OutputParameter<int?> iKeyEmployer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyEmployer = new SqlParameter
            {
                ParameterName = "iKeyEmployer",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyEmployer?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyClient",
                    Value = iKeyClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cName",
                    Size = 100,
                    Value = cName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cURL",
                    Size = 100,
                    Value = cURL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStreet",
                    Size = 100,
                    Value = cStreet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCity",
                    Size = 50,
                    Value = cCity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cState",
                    Size = 20,
                    Value = cState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "czip",
                    Size = 20,
                    Value = czip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyProducer",
                    Value = ikeyProducer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriKeyEmployer,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CAMSetupEmployer] @iKeyClient = @iKeyClient, @cName = @cName, @cURL = @cURL, @cStreet = @cStreet, @cCity = @cCity, @cState = @cState, @czip = @czip, @ikeyProducer = @ikeyProducer, @iKeyEmployer = @iKeyEmployer OUTPUT", sqlParameters, cancellationToken);

            iKeyEmployer.SetValue(parameteriKeyEmployer.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CheckAACALEVENTZeroRecordAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CheckAACALEVENTZeroRecord]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CheckCalendarEventResult>> sp_CheckCalendarEventAsync(int? iCalUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalUserKeyID",
                    Value = iCalUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CheckCalendarEventResult>("EXEC @returnValue = [dbo].[sp_CheckCalendarEvent] @iCalUserKeyID = @iCalUserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CheckCalendarEventCountResult>> sp_CheckCalendarEventCountAsync(int? iCalUserKeyID, DateTime? dCurrentDateTime, int? iNumberOfMinutesToCheckInAdvance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalUserKeyID",
                    Value = iCalUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dCurrentDateTime",
                    Value = dCurrentDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iNumberOfMinutesToCheckInAdvance",
                    Value = iNumberOfMinutesToCheckInAdvance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CheckCalendarEventCountResult>("EXEC @returnValue = [dbo].[sp_CheckCalendarEventCount] @iCalUserKeyID = @iCalUserKeyID, @dCurrentDateTime = @dCurrentDateTime, @iNumberOfMinutesToCheckInAdvance = @iNumberOfMinutesToCheckInAdvance", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CheckCLIMARKUserResult>> sp_CheckCLIMARKUserAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CheckCLIMARKUserResult>("EXEC @returnValue = [dbo].[sp_CheckCLIMARKUser]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CheckLinkReciprocalAsync(int? iSourceNameKeyID, int? iTargetNameKeyID, int? iRelationCodeKeyID, string sCurrentUserInit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iSourceNameKeyID",
                    Value = iSourceNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iTargetNameKeyID",
                    Value = iTargetNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRelationCodeKeyID",
                    Value = iRelationCodeKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sCurrentUserInit",
                    Size = 10,
                    Value = sCurrentUserInit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CheckLinkReciprocal] @iSourceNameKeyID = @iSourceNameKeyID, @iTargetNameKeyID = @iTargetNameKeyID, @iRelationCodeKeyID = @iRelationCodeKeyID, @sCurrentUserInit = @sCurrentUserInit", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CheckLinkReciprocal2Async(int? iSourceNameKeyID, int? iTargetNameKeyID, int? iNewRelationCodeKeyID, int? iOldRelationCodeKeyID, string sCurrentUserInit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iSourceNameKeyID",
                    Value = iSourceNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iTargetNameKeyID",
                    Value = iTargetNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iNewRelationCodeKeyID",
                    Value = iNewRelationCodeKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iOldRelationCodeKeyID",
                    Value = iOldRelationCodeKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sCurrentUserInit",
                    Size = 10,
                    Value = sCurrentUserInit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CheckLinkReciprocal2] @iSourceNameKeyID = @iSourceNameKeyID, @iTargetNameKeyID = @iTargetNameKeyID, @iNewRelationCodeKeyID = @iNewRelationCodeKeyID, @iOldRelationCodeKeyID = @iOldRelationCodeKeyID, @sCurrentUserInit = @sCurrentUserInit", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CheckMessageAndEventCountResult>> sp_CheckMessageAndEventCountAsync(int? iUserKeyID, int? iCalUserKeyID, DateTime? dCurrentDateTime, int? iNumberOfMinutesToCheckInAdvance, string cComputerName, DateTime? dStationTime, OutputParameter<int?> iMessageCount, OutputParameter<int?> iEventCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriMessageCount = new SqlParameter
            {
                ParameterName = "iMessageCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iMessageCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriEventCount = new SqlParameter
            {
                ParameterName = "iEventCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iUserKeyID",
                    Value = iUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCalUserKeyID",
                    Value = iCalUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dCurrentDateTime",
                    Value = dCurrentDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iNumberOfMinutesToCheckInAdvance",
                    Value = iNumberOfMinutesToCheckInAdvance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriMessageCount,
                parameteriEventCount,
                new SqlParameter
                {
                    ParameterName = "cComputerName",
                    Size = 50,
                    Value = cComputerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "dStationTime",
                    Value = dStationTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CheckMessageAndEventCountResult>("EXEC @returnValue = [dbo].[sp_CheckMessageAndEventCount] @iUserKeyID = @iUserKeyID, @iCalUserKeyID = @iCalUserKeyID, @dCurrentDateTime = @dCurrentDateTime, @iNumberOfMinutesToCheckInAdvance = @iNumberOfMinutesToCheckInAdvance, @iMessageCount = @iMessageCount OUTPUT, @iEventCount = @iEventCount OUTPUT, @cComputerName = @cComputerName, @dStationTime = @dStationTime", sqlParameters, cancellationToken);

            iMessageCount.SetValue(parameteriMessageCount.Value);
            iEventCount.SetValue(parameteriEventCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CheckNameFaxAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CheckNameFax] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CheckNamePrimaryAddressAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CheckNamePrimaryAddress] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CheckNamePrimaryEmailAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CheckNamePrimaryEmail] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CheckNamePrimaryPhoneAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CheckNamePrimaryPhone] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CheckNamePrimaryWebsiteAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CheckNamePrimaryWebsite] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CheckZipCodeAsync(string cZip, string cCity, string cState, string cCounty, string cCountry, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cZip",
                    Size = 10,
                    Value = cZip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCity",
                    Size = 30,
                    Value = cCity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cState",
                    Size = 5,
                    Value = cState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCounty",
                    Size = 40,
                    Value = cCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCountry",
                    Size = 20,
                    Value = cCountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CheckZipCode] @cZip = @cZip, @cCity = @cCity, @cState = @cState, @cCounty = @cCounty, @cCountry = @cCountry", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CombineAccountAsync(int? iKeySurvivingAccount, int? iKeyCombiningAccount, string cUserStamp, string cProgramVersion, bool? bMatchingUnassignedAccountToExistingAccount, OutputParameter<string> cReturnMessage, OutputParameter<bool?> bSuccess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercReturnMessage = new SqlParameter
            {
                ParameterName = "cReturnMessage",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cReturnMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterbSuccess = new SqlParameter
            {
                ParameterName = "bSuccess",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bSuccess?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySurvivingAccount",
                    Value = iKeySurvivingAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCombiningAccount",
                    Value = iKeyCombiningAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cUserStamp",
                    Size = 12,
                    Value = cUserStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cProgramVersion",
                    Size = 20,
                    Value = cProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bMatchingUnassignedAccountToExistingAccount",
                    Value = bMatchingUnassignedAccountToExistingAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parametercReturnMessage,
                parameterbSuccess,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CombineAccount] @iKeySurvivingAccount = @iKeySurvivingAccount, @iKeyCombiningAccount = @iKeyCombiningAccount, @cUserStamp = @cUserStamp, @cProgramVersion = @cProgramVersion, @bMatchingUnassignedAccountToExistingAccount = @bMatchingUnassignedAccountToExistingAccount, @cReturnMessage = @cReturnMessage OUTPUT, @bSuccess = @bSuccess OUTPUT", sqlParameters, cancellationToken);

            cReturnMessage.SetValue(parametercReturnMessage.Value);
            bSuccess.SetValue(parameterbSuccess.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CombineAccountCombineRelationsAsync(int? iKeySurvivingAccount, int? iKeyCombiningAccount, int? iKeyLog, string cUserStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySurvivingAccount",
                    Value = iKeySurvivingAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCombiningAccount",
                    Value = iKeyCombiningAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyLog",
                    Value = iKeyLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cUserStamp",
                    Size = 10,
                    Value = cUserStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CombineAccountCombineRelations] @iKeySurvivingAccount = @iKeySurvivingAccount, @iKeyCombiningAccount = @iKeyCombiningAccount, @iKeyLog = @iKeyLog, @cUserStamp = @cUserStamp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CombineAccountProducerInfoAsync(int? iKeySource, int? iKeyTarget, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySource",
                    Value = iKeySource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTarget",
                    Value = iKeyTarget ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CombineAccountProducerInfo] @iKeySource = @iKeySource, @iKeyTarget = @iKeyTarget", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CommCalcForCoverageResult>> sp_CommCalcForCoverageAsync(int? iCoverageKeyID, DateTime? dPeriodBegin, DateTime? dPeriodEnd, bool? bIgnoreCommissionPaidThruDates, Guid? gTempGuid, string cUserInitials, bool? bReportCalculationErrorReason_CoverageSetToNotCalculate, bool? bReportCalculationErrorReason_CommissionsBeginAfterCalculationPeriod, bool? bReportCalculationErrorReason_CommissionsEndBeforeCalculationPeriod, bool? bReportCalculationErrorReason_CommissionsPaidThruCalculationPeriod, bool? bReportCalculationErrorReason_NoPremiumDueDates, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPeriodBegin",
                    Value = dPeriodBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dPeriodEnd",
                    Value = dPeriodEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "bIgnoreCommissionPaidThruDates",
                    Value = bIgnoreCommissionPaidThruDates ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bReportCalculationErrorReason_CoverageSetToNotCalculate",
                    Value = bReportCalculationErrorReason_CoverageSetToNotCalculate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bReportCalculationErrorReason_CommissionsBeginAfterCalculationPeriod",
                    Value = bReportCalculationErrorReason_CommissionsBeginAfterCalculationPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bReportCalculationErrorReason_CommissionsEndBeforeCalculationPeriod",
                    Value = bReportCalculationErrorReason_CommissionsEndBeforeCalculationPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bReportCalculationErrorReason_CommissionsPaidThruCalculationPeriod",
                    Value = bReportCalculationErrorReason_CommissionsPaidThruCalculationPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bReportCalculationErrorReason_NoPremiumDueDates",
                    Value = bReportCalculationErrorReason_NoPremiumDueDates ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CommCalcForCoverageResult>("EXEC @returnValue = [dbo].[sp_CommCalcForCoverage] @iCoverageKeyID = @iCoverageKeyID, @dPeriodBegin = @dPeriodBegin, @dPeriodEnd = @dPeriodEnd, @bIgnoreCommissionPaidThruDates = @bIgnoreCommissionPaidThruDates, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @bReportCalculationErrorReason_CoverageSetToNotCalculate = @bReportCalculationErrorReason_CoverageSetToNotCalculate, @bReportCalculationErrorReason_CommissionsBeginAfterCalculationPeriod = @bReportCalculationErrorReason_CommissionsBeginAfterCalculationPeriod, @bReportCalculationErrorReason_CommissionsEndBeforeCalculationPeriod = @bReportCalculationErrorReason_CommissionsEndBeforeCalculationPeriod, @bReportCalculationErrorReason_CommissionsPaidThruCalculationPeriod = @bReportCalculationErrorReason_CommissionsPaidThruCalculationPeriod, @bReportCalculationErrorReason_NoPremiumDueDates = @bReportCalculationErrorReason_NoPremiumDueDates", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcForFixedAmountAgencyLevelAsync(DateTime? dPeriodBegin, DateTime? dPeriodEnd, int? iCoverageKeyID, int? iRateTableSetKeyID, int? iAgencyKeyID, int? iCodePolicyPaymentMode, int? iCodePostingOption, DateTime? dEffective, int? iPremiumDueDay, DateTime? dRenewalBegin, DateTime? dTermination, DateTime? dExpiration, DateTime? dCommissionsBegin, DateTime? dCommissionsEnd, DateTime? dCommissionsPaidThru, bool? bIgnoreCommissionPaidThruDates, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bFixedAmountTransactionsAddedOrFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bFixedAmountTransactionsAddedOrFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFixedAmountTransactionsAddedOrFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dPeriodBegin",
                    Value = dPeriodBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dPeriodEnd",
                    Value = dPeriodEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iAgencyKeyID",
                    Value = iAgencyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePolicyPaymentMode",
                    Value = iCodePolicyPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePostingOption",
                    Value = iCodePostingOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEffective",
                    Value = dEffective ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iPremiumDueDay",
                    Value = iPremiumDueDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dRenewalBegin",
                    Value = dRenewalBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dTermination",
                    Value = dTermination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dExpiration",
                    Value = dExpiration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsBegin",
                    Value = dCommissionsBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsEnd",
                    Value = dCommissionsEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsPaidThru",
                    Value = dCommissionsPaidThru ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "bIgnoreCommissionPaidThruDates",
                    Value = bIgnoreCommissionPaidThruDates ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcForFixedAmountAgencyLevel] @dPeriodBegin = @dPeriodBegin, @dPeriodEnd = @dPeriodEnd, @iCoverageKeyID = @iCoverageKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @iAgencyKeyID = @iAgencyKeyID, @iCodePolicyPaymentMode = @iCodePolicyPaymentMode, @iCodePostingOption = @iCodePostingOption, @dEffective = @dEffective, @iPremiumDueDay = @iPremiumDueDay, @dRenewalBegin = @dRenewalBegin, @dTermination = @dTermination, @dExpiration = @dExpiration, @dCommissionsBegin = @dCommissionsBegin, @dCommissionsEnd = @dCommissionsEnd, @dCommissionsPaidThru = @dCommissionsPaidThru, @bIgnoreCommissionPaidThruDates = @bIgnoreCommissionPaidThruDates, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @bPrintDebugMessages = @bPrintDebugMessages, @bFixedAmountTransactionsAddedOrFoundForThisCoverage = @bFixedAmountTransactionsAddedOrFoundForThisCoverage OUTPUT", sqlParameters, cancellationToken);

            bFixedAmountTransactionsAddedOrFoundForThisCoverage.SetValue(parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcForFixedAmountManagerLevelAsync(DateTime? dPeriodBegin, DateTime? dPeriodEnd, int? iCoverageKeyID, int? iRateTableSetKeyID, int? iCodePolicyPaymentMode, int? iCodePostingOption, int? iManagerKeyID, bool? bDirectPayFromPolicy, int? iCodeCommissionLevel, DateTime? dEffective, int? iPremiumDueDay, DateTime? dRenewalBegin, DateTime? dTermination, DateTime? dExpiration, DateTime? dCommissionsBegin, DateTime? dCommissionsEnd, DateTime? dCommissionsPaidThru, bool? bIgnoreCommissionPaidThruDates, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bFixedAmountTransactionsAddedOrFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bFixedAmountTransactionsAddedOrFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFixedAmountTransactionsAddedOrFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dPeriodBegin",
                    Value = dPeriodBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dPeriodEnd",
                    Value = dPeriodEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePolicyPaymentMode",
                    Value = iCodePolicyPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePostingOption",
                    Value = iCodePostingOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iManagerKeyID",
                    Value = iManagerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayFromPolicy",
                    Value = bDirectPayFromPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionLevel",
                    Value = iCodeCommissionLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEffective",
                    Value = dEffective ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iPremiumDueDay",
                    Value = iPremiumDueDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dRenewalBegin",
                    Value = dRenewalBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dTermination",
                    Value = dTermination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dExpiration",
                    Value = dExpiration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsBegin",
                    Value = dCommissionsBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsEnd",
                    Value = dCommissionsEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsPaidThru",
                    Value = dCommissionsPaidThru ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "bIgnoreCommissionPaidThruDates",
                    Value = bIgnoreCommissionPaidThruDates ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcForFixedAmountManagerLevel] @dPeriodBegin = @dPeriodBegin, @dPeriodEnd = @dPeriodEnd, @iCoverageKeyID = @iCoverageKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @iCodePolicyPaymentMode = @iCodePolicyPaymentMode, @iCodePostingOption = @iCodePostingOption, @iManagerKeyID = @iManagerKeyID, @bDirectPayFromPolicy = @bDirectPayFromPolicy, @iCodeCommissionLevel = @iCodeCommissionLevel, @dEffective = @dEffective, @iPremiumDueDay = @iPremiumDueDay, @dRenewalBegin = @dRenewalBegin, @dTermination = @dTermination, @dExpiration = @dExpiration, @dCommissionsBegin = @dCommissionsBegin, @dCommissionsEnd = @dCommissionsEnd, @dCommissionsPaidThru = @dCommissionsPaidThru, @bIgnoreCommissionPaidThruDates = @bIgnoreCommissionPaidThruDates, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @bPrintDebugMessages = @bPrintDebugMessages, @bFixedAmountTransactionsAddedOrFoundForThisCoverage = @bFixedAmountTransactionsAddedOrFoundForThisCoverage OUTPUT", sqlParameters, cancellationToken);

            bFixedAmountTransactionsAddedOrFoundForThisCoverage.SetValue(parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcForFixedAmountOneLevelAsync(int? iFixedAmountKeyID, int? iTimesPerYear, int? iAdvanceMonths, DateTime? dPeriodBegin, DateTime? dPeriodEnd, int? iCoverageKeyID, int? iRateTableSetKeyID, int? iPayeeKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPayFromPolicy, int? iProducerSlot, DateTime? dEffective, int? iPremiumDueDay, DateTime? dRenewalBegin, DateTime? dTermination, DateTime? dExpiration, DateTime? dCommissionsBegin, DateTime? dCommissionsEnd, DateTime? dCommissionsPaidThru, bool? bIgnoreCommissionPaidThruDates, int? iCodeCommissionLevel, int? iCodeFixedAmountMode, int? iCodePostingOption, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bFixedAmountTransactionsAddedOrFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bFixedAmountTransactionsAddedOrFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFixedAmountTransactionsAddedOrFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iFixedAmountKeyID",
                    Value = iFixedAmountKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iTimesPerYear",
                    Value = iTimesPerYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iAdvanceMonths",
                    Value = iAdvanceMonths ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPeriodBegin",
                    Value = dPeriodBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dPeriodEnd",
                    Value = dPeriodEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPayeeKeyID",
                    Value = iPayeeKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitFirstYear",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitFirstYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitRenewal",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitRenewal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayFromPolicy",
                    Value = bDirectPayFromPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerSlot",
                    Value = iProducerSlot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEffective",
                    Value = dEffective ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iPremiumDueDay",
                    Value = iPremiumDueDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dRenewalBegin",
                    Value = dRenewalBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dTermination",
                    Value = dTermination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dExpiration",
                    Value = dExpiration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsBegin",
                    Value = dCommissionsBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsEnd",
                    Value = dCommissionsEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsPaidThru",
                    Value = dCommissionsPaidThru ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "bIgnoreCommissionPaidThruDates",
                    Value = bIgnoreCommissionPaidThruDates ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionLevel",
                    Value = iCodeCommissionLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeFixedAmountMode",
                    Value = iCodeFixedAmountMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePostingOption",
                    Value = iCodePostingOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcForFixedAmountOneLevel] @iFixedAmountKeyID = @iFixedAmountKeyID, @iTimesPerYear = @iTimesPerYear, @iAdvanceMonths = @iAdvanceMonths, @dPeriodBegin = @dPeriodBegin, @dPeriodEnd = @dPeriodEnd, @iCoverageKeyID = @iCoverageKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @iPayeeKeyID = @iPayeeKeyID, @nSplitFirstYear = @nSplitFirstYear, @nSplitRenewal = @nSplitRenewal, @bDirectPayFromPolicy = @bDirectPayFromPolicy, @iProducerSlot = @iProducerSlot, @dEffective = @dEffective, @iPremiumDueDay = @iPremiumDueDay, @dRenewalBegin = @dRenewalBegin, @dTermination = @dTermination, @dExpiration = @dExpiration, @dCommissionsBegin = @dCommissionsBegin, @dCommissionsEnd = @dCommissionsEnd, @dCommissionsPaidThru = @dCommissionsPaidThru, @bIgnoreCommissionPaidThruDates = @bIgnoreCommissionPaidThruDates, @iCodeCommissionLevel = @iCodeCommissionLevel, @iCodeFixedAmountMode = @iCodeFixedAmountMode, @iCodePostingOption = @iCodePostingOption, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @bPrintDebugMessages = @bPrintDebugMessages, @bFixedAmountTransactionsAddedOrFoundForThisCoverage = @bFixedAmountTransactionsAddedOrFoundForThisCoverage OUTPUT", sqlParameters, cancellationToken);

            bFixedAmountTransactionsAddedOrFoundForThisCoverage.SetValue(parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcForFixedAmountProducerLevelAsync(DateTime? dPeriodBegin, DateTime? dPeriodEnd, int? iCoverageKeyID, int? iRateTableSetKeyID, int? iCodePolicyPaymentMode, int? iCodePostingOption, int? iProducerKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPayFromPolicy, int? iProducerSlot, DateTime? dEffective, int? iPremiumDueDay, DateTime? dRenewalBegin, DateTime? dTermination, DateTime? dExpiration, DateTime? dCommissionsBegin, DateTime? dCommissionsEnd, DateTime? dCommissionsPaidThru, bool? bIgnoreCommissionPaidThruDates, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bFixedAmountTransactionsAddedOrFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bFixedAmountTransactionsAddedOrFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFixedAmountTransactionsAddedOrFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dPeriodBegin",
                    Value = dPeriodBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dPeriodEnd",
                    Value = dPeriodEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePolicyPaymentMode",
                    Value = iCodePolicyPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePostingOption",
                    Value = iCodePostingOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerKeyID",
                    Value = iProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitFirstYear",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitFirstYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitRenewal",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitRenewal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayFromPolicy",
                    Value = bDirectPayFromPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerSlot",
                    Value = iProducerSlot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEffective",
                    Value = dEffective ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iPremiumDueDay",
                    Value = iPremiumDueDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dRenewalBegin",
                    Value = dRenewalBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dTermination",
                    Value = dTermination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dExpiration",
                    Value = dExpiration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsBegin",
                    Value = dCommissionsBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsEnd",
                    Value = dCommissionsEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dCommissionsPaidThru",
                    Value = dCommissionsPaidThru ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "bIgnoreCommissionPaidThruDates",
                    Value = bIgnoreCommissionPaidThruDates ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcForFixedAmountProducerLevel] @dPeriodBegin = @dPeriodBegin, @dPeriodEnd = @dPeriodEnd, @iCoverageKeyID = @iCoverageKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @iCodePolicyPaymentMode = @iCodePolicyPaymentMode, @iCodePostingOption = @iCodePostingOption, @iProducerKeyID = @iProducerKeyID, @nSplitFirstYear = @nSplitFirstYear, @nSplitRenewal = @nSplitRenewal, @bDirectPayFromPolicy = @bDirectPayFromPolicy, @iProducerSlot = @iProducerSlot, @dEffective = @dEffective, @iPremiumDueDay = @iPremiumDueDay, @dRenewalBegin = @dRenewalBegin, @dTermination = @dTermination, @dExpiration = @dExpiration, @dCommissionsBegin = @dCommissionsBegin, @dCommissionsEnd = @dCommissionsEnd, @dCommissionsPaidThru = @dCommissionsPaidThru, @bIgnoreCommissionPaidThruDates = @bIgnoreCommissionPaidThruDates, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @bPrintDebugMessages = @bPrintDebugMessages, @bFixedAmountTransactionsAddedOrFoundForThisCoverage = @bFixedAmountTransactionsAddedOrFoundForThisCoverage OUTPUT", sqlParameters, cancellationToken);

            bFixedAmountTransactionsAddedOrFoundForThisCoverage.SetValue(parameterbFixedAmountTransactionsAddedOrFoundForThisCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CommCalcForParticipantAgencyLevelResult>> sp_CommCalcForParticipantAgencyLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iAgencyKeyID, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, Guid? gTempGuid, string cUserInitials, int? iParticipants, int? iCodePremiumPaymentMode, int? iCodeRateTablePostingOption_Participant, int? iCodeRateTablePostingOption_Rider, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbAttemptedToFindRateOfSomeKind = new SqlParameter
            {
                ParameterName = "bAttemptedToFindRateOfSomeKind",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bAttemptedToFindRateOfSomeKind?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNonZeroRateOfSomeKindFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bNonZeroRateOfSomeKindFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNonZeroRateOfSomeKindFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRiderKeyID",
                    Value = iRiderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iAgencyKeyID",
                    Value = iAgencyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dDueDate",
                    Value = dDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iParticipants",
                    Value = iParticipants ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePremiumPaymentMode",
                    Value = iCodePremiumPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Participant",
                    Value = iCodeRateTablePostingOption_Participant ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Rider",
                    Value = iCodeRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbAttemptedToFindRateOfSomeKind,
                parameterbNonZeroRateOfSomeKindFoundForThisCoverage,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CommCalcForParticipantAgencyLevelResult>("EXEC @returnValue = [dbo].[sp_CommCalcForParticipantAgencyLevel] @iCoverageKeyID = @iCoverageKeyID, @iRiderKeyID = @iRiderKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @iAgencyKeyID = @iAgencyKeyID, @dDueDate = @dDueDate, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @iParticipants = @iParticipants, @iCodePremiumPaymentMode = @iCodePremiumPaymentMode, @iCodeRateTablePostingOption_Participant = @iCodeRateTablePostingOption_Participant, @iCodeRateTablePostingOption_Rider = @iCodeRateTablePostingOption_Rider, @bPrintDebugMessages = @bPrintDebugMessages, @bAttemptedToFindRateOfSomeKind = @bAttemptedToFindRateOfSomeKind OUTPUT, @bNonZeroRateOfSomeKindFoundForThisCoverage = @bNonZeroRateOfSomeKindFoundForThisCoverage OUTPUT", sqlParameters, cancellationToken);

            bAttemptedToFindRateOfSomeKind.SetValue(parameterbAttemptedToFindRateOfSomeKind.Value);
            bNonZeroRateOfSomeKindFoundForThisCoverage.SetValue(parameterbNonZeroRateOfSomeKindFoundForThisCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CommCalcForParticipantManagerLevelResult>> sp_CommCalcForParticipantManagerLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iCodeCommissionLevel, int? iManagerKeyID, bool? bDirectPayFromPolicy, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, Guid? gTempGuid, string cUserInitials, int? iParticipants, int? iCodePremiumPaymentMode, int? iCodeRateTablePostingOption_Participant, int? iCodeRateTablePostingOption_Rider, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbAttemptedToFindRateOfSomeKind = new SqlParameter
            {
                ParameterName = "bAttemptedToFindRateOfSomeKind",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bAttemptedToFindRateOfSomeKind?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNonZeroRateOfSomeKindFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bNonZeroRateOfSomeKindFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNonZeroRateOfSomeKindFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRiderKeyID",
                    Value = iRiderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionLevel",
                    Value = iCodeCommissionLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iManagerKeyID",
                    Value = iManagerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayFromPolicy",
                    Value = bDirectPayFromPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "dDueDate",
                    Value = dDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iParticipants",
                    Value = iParticipants ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePremiumPaymentMode",
                    Value = iCodePremiumPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Participant",
                    Value = iCodeRateTablePostingOption_Participant ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Rider",
                    Value = iCodeRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbAttemptedToFindRateOfSomeKind,
                parameterbNonZeroRateOfSomeKindFoundForThisCoverage,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CommCalcForParticipantManagerLevelResult>("EXEC @returnValue = [dbo].[sp_CommCalcForParticipantManagerLevel] @iCoverageKeyID = @iCoverageKeyID, @iRiderKeyID = @iRiderKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @iCodeCommissionLevel = @iCodeCommissionLevel, @iManagerKeyID = @iManagerKeyID, @bDirectPayFromPolicy = @bDirectPayFromPolicy, @dDueDate = @dDueDate, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @iParticipants = @iParticipants, @iCodePremiumPaymentMode = @iCodePremiumPaymentMode, @iCodeRateTablePostingOption_Participant = @iCodeRateTablePostingOption_Participant, @iCodeRateTablePostingOption_Rider = @iCodeRateTablePostingOption_Rider, @bPrintDebugMessages = @bPrintDebugMessages, @bAttemptedToFindRateOfSomeKind = @bAttemptedToFindRateOfSomeKind OUTPUT, @bNonZeroRateOfSomeKindFoundForThisCoverage = @bNonZeroRateOfSomeKindFoundForThisCoverage OUTPUT", sqlParameters, cancellationToken);

            bAttemptedToFindRateOfSomeKind.SetValue(parameterbAttemptedToFindRateOfSomeKind.Value);
            bNonZeroRateOfSomeKindFoundForThisCoverage.SetValue(parameterbNonZeroRateOfSomeKindFoundForThisCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CommCalcForParticipantOneLevelResult>> sp_CommCalcForParticipantOneLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iPayeeKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPay, bool? bDirectPayDeductFromAgencyNet, int? iProducerSlot, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, int? iPremiumYear, int? iCodeCommissionLevel, int? iCodeCommissionParticipantRateApplyTo, Guid? gTempGuid, string cUserInitials, int? iParticipants, int? iCodePremiumPaymentMode, decimal? yRatePerParticipant, decimal? nRatePctOfAgencyCommission, int? iCodeRateTablePostingOption_Participant, int? iCodeRateTablePostingOption_Rider, bool? bPrintDebugMessages, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRiderKeyID",
                    Value = iRiderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPayeeKeyID",
                    Value = iPayeeKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitFirstYear",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitFirstYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitRenewal",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitRenewal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPay",
                    Value = bDirectPay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayDeductFromAgencyNet",
                    Value = bDirectPayDeductFromAgencyNet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerSlot",
                    Value = iProducerSlot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dDueDate",
                    Value = dDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPremiumYear",
                    Value = iPremiumYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionLevel",
                    Value = iCodeCommissionLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionParticipantRateApplyTo",
                    Value = iCodeCommissionParticipantRateApplyTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iParticipants",
                    Value = iParticipants ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePremiumPaymentMode",
                    Value = iCodePremiumPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yRatePerParticipant",
                    Precision = 19,
                    Scale = 4,
                    Value = yRatePerParticipant ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nRatePctOfAgencyCommission",
                    Precision = 10,
                    Scale = 6,
                    Value = nRatePctOfAgencyCommission ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Participant",
                    Value = iCodeRateTablePostingOption_Participant ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Rider",
                    Value = iCodeRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CommCalcForParticipantOneLevelResult>("EXEC @returnValue = [dbo].[sp_CommCalcForParticipantOneLevel] @iCoverageKeyID = @iCoverageKeyID, @iRiderKeyID = @iRiderKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @iPayeeKeyID = @iPayeeKeyID, @nSplitFirstYear = @nSplitFirstYear, @nSplitRenewal = @nSplitRenewal, @bDirectPay = @bDirectPay, @bDirectPayDeductFromAgencyNet = @bDirectPayDeductFromAgencyNet, @iProducerSlot = @iProducerSlot, @dDueDate = @dDueDate, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @iPremiumYear = @iPremiumYear, @iCodeCommissionLevel = @iCodeCommissionLevel, @iCodeCommissionParticipantRateApplyTo = @iCodeCommissionParticipantRateApplyTo, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @iParticipants = @iParticipants, @iCodePremiumPaymentMode = @iCodePremiumPaymentMode, @yRatePerParticipant = @yRatePerParticipant, @nRatePctOfAgencyCommission = @nRatePctOfAgencyCommission, @iCodeRateTablePostingOption_Participant = @iCodeRateTablePostingOption_Participant, @iCodeRateTablePostingOption_Rider = @iCodeRateTablePostingOption_Rider, @bPrintDebugMessages = @bPrintDebugMessages", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CommCalcForParticipantProducerLevelResult>> sp_CommCalcForParticipantProducerLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iProducerKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPayFromPolicy, int? iProducerSlot, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, Guid? gTempGuid, string cUserInitials, int? iParticipants, int? iCodePremiumPaymentMode, int? iCodeRateTablePostingOption_Participant, int? iCodeRateTablePostingOption_Rider, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbAttemptedToFindRateOfSomeKind = new SqlParameter
            {
                ParameterName = "bAttemptedToFindRateOfSomeKind",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bAttemptedToFindRateOfSomeKind?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNonZeroRateOfSomeKindFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bNonZeroRateOfSomeKindFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNonZeroRateOfSomeKindFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRiderKeyID",
                    Value = iRiderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerKeyID",
                    Value = iProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitFirstYear",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitFirstYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitRenewal",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitRenewal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayFromPolicy",
                    Value = bDirectPayFromPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerSlot",
                    Value = iProducerSlot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dDueDate",
                    Value = dDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iParticipants",
                    Value = iParticipants ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePremiumPaymentMode",
                    Value = iCodePremiumPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Participant",
                    Value = iCodeRateTablePostingOption_Participant ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Rider",
                    Value = iCodeRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbAttemptedToFindRateOfSomeKind,
                parameterbNonZeroRateOfSomeKindFoundForThisCoverage,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CommCalcForParticipantProducerLevelResult>("EXEC @returnValue = [dbo].[sp_CommCalcForParticipantProducerLevel] @iCoverageKeyID = @iCoverageKeyID, @iRiderKeyID = @iRiderKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @iProducerKeyID = @iProducerKeyID, @nSplitFirstYear = @nSplitFirstYear, @nSplitRenewal = @nSplitRenewal, @bDirectPayFromPolicy = @bDirectPayFromPolicy, @iProducerSlot = @iProducerSlot, @dDueDate = @dDueDate, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @iParticipants = @iParticipants, @iCodePremiumPaymentMode = @iCodePremiumPaymentMode, @iCodeRateTablePostingOption_Participant = @iCodeRateTablePostingOption_Participant, @iCodeRateTablePostingOption_Rider = @iCodeRateTablePostingOption_Rider, @bPrintDebugMessages = @bPrintDebugMessages, @bAttemptedToFindRateOfSomeKind = @bAttemptedToFindRateOfSomeKind OUTPUT, @bNonZeroRateOfSomeKindFoundForThisCoverage = @bNonZeroRateOfSomeKindFoundForThisCoverage OUTPUT", sqlParameters, cancellationToken);

            bAttemptedToFindRateOfSomeKind.SetValue(parameterbAttemptedToFindRateOfSomeKind.Value);
            bNonZeroRateOfSomeKindFoundForThisCoverage.SetValue(parameterbNonZeroRateOfSomeKindFoundForThisCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcForPremiumAgencyLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, decimal? yModalPremiumBase, decimal? yModalPremiumExcess1, decimal? yModalPremiumExcess2, int? iCodePremiumPaymentMode, int? iRateTableSetKeyID, int? iCodeRateTablePostingOption_Override1, int? iCodeRateTablePostingOption_Override2, int? iCodeRateTablePostingOption_Excess1, int? iCodeRateTablePostingOption_Excess2, int? iCodeRateTablePostingOption_Rider, int? iAgencyKeyID, DateTime? dPremiumPaymentDate, int? iCoverageYearForCurrentDueDate, DateTime? dEffective, DateTime? dRenewalBegin, Guid? gTempGuid, string cUserInitials, string cTransactionComment, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<decimal?> yTotalDue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbAttemptedToFindRateOfSomeKind = new SqlParameter
            {
                ParameterName = "bAttemptedToFindRateOfSomeKind",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bAttemptedToFindRateOfSomeKind?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNonZeroRateOfSomeKindFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bNonZeroRateOfSomeKindFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNonZeroRateOfSomeKindFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteryTotalDue = new SqlParameter
            {
                ParameterName = "yTotalDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yTotalDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRiderKeyID",
                    Value = iRiderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumBase",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumBase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumExcess1",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumExcess1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumExcess2",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumExcess2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePremiumPaymentMode",
                    Value = iCodePremiumPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Override1",
                    Value = iCodeRateTablePostingOption_Override1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Override2",
                    Value = iCodeRateTablePostingOption_Override2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Excess1",
                    Value = iCodeRateTablePostingOption_Excess1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Excess2",
                    Value = iCodeRateTablePostingOption_Excess2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Rider",
                    Value = iCodeRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iAgencyKeyID",
                    Value = iAgencyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPremiumPaymentDate",
                    Value = dPremiumPaymentDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEffective",
                    Value = dEffective ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dRenewalBegin",
                    Value = dRenewalBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cTransactionComment",
                    Size = 200,
                    Value = cTransactionComment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbAttemptedToFindRateOfSomeKind,
                parameterbNonZeroRateOfSomeKindFoundForThisCoverage,
                parameteryTotalDue,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcForPremiumAgencyLevel] @iCoverageKeyID = @iCoverageKeyID, @iRiderKeyID = @iRiderKeyID, @yModalPremiumBase = @yModalPremiumBase, @yModalPremiumExcess1 = @yModalPremiumExcess1, @yModalPremiumExcess2 = @yModalPremiumExcess2, @iCodePremiumPaymentMode = @iCodePremiumPaymentMode, @iRateTableSetKeyID = @iRateTableSetKeyID, @iCodeRateTablePostingOption_Override1 = @iCodeRateTablePostingOption_Override1, @iCodeRateTablePostingOption_Override2 = @iCodeRateTablePostingOption_Override2, @iCodeRateTablePostingOption_Excess1 = @iCodeRateTablePostingOption_Excess1, @iCodeRateTablePostingOption_Excess2 = @iCodeRateTablePostingOption_Excess2, @iCodeRateTablePostingOption_Rider = @iCodeRateTablePostingOption_Rider, @iAgencyKeyID = @iAgencyKeyID, @dPremiumPaymentDate = @dPremiumPaymentDate, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @dEffective = @dEffective, @dRenewalBegin = @dRenewalBegin, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @cTransactionComment = @cTransactionComment, @bPrintDebugMessages = @bPrintDebugMessages, @bAttemptedToFindRateOfSomeKind = @bAttemptedToFindRateOfSomeKind OUTPUT, @bNonZeroRateOfSomeKindFoundForThisCoverage = @bNonZeroRateOfSomeKindFoundForThisCoverage OUTPUT, @yTotalDue = @yTotalDue OUTPUT", sqlParameters, cancellationToken);

            bAttemptedToFindRateOfSomeKind.SetValue(parameterbAttemptedToFindRateOfSomeKind.Value);
            bNonZeroRateOfSomeKindFoundForThisCoverage.SetValue(parameterbNonZeroRateOfSomeKindFoundForThisCoverage.Value);
            yTotalDue.SetValue(parameteryTotalDue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcForPremiumManagerLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, decimal? yModalPremiumBase, decimal? yModalPremiumExcess1, decimal? yModalPremiumExcess2, int? iCodePremiumPaymentMode, int? iRateTableSetKeyID, int? iCodeCommissionLevel, int? iCodeRateTablePostingOption_Override1, int? iCodeRateTablePostingOption_Override2, int? iCodeRateTablePostingOption_Excess1, int? iCodeRateTablePostingOption_Excess2, int? iCodeRateTablePostingOption_Rider, int? iManagerKeyID, bool? bDirectPayFromPolicy, int? iProducer1KeyID, int? iProducer2KeyID, int? iProducer3KeyID, int? iProducer4KeyID, DateTime? dPremiumPaymentDate, int? iCoverageYearForCurrentDueDate, DateTime? dEffective, DateTime? dRenewalBegin, Guid? gTempGuid, string cUserInitials, string cTransactionComment, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<decimal?> yTotalDue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbAttemptedToFindRateOfSomeKind = new SqlParameter
            {
                ParameterName = "bAttemptedToFindRateOfSomeKind",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bAttemptedToFindRateOfSomeKind?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNonZeroRateOfSomeKindFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bNonZeroRateOfSomeKindFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNonZeroRateOfSomeKindFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteryTotalDue = new SqlParameter
            {
                ParameterName = "yTotalDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yTotalDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRiderKeyID",
                    Value = iRiderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumBase",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumBase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumExcess1",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumExcess1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumExcess2",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumExcess2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePremiumPaymentMode",
                    Value = iCodePremiumPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionLevel",
                    Value = iCodeCommissionLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Override1",
                    Value = iCodeRateTablePostingOption_Override1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Override2",
                    Value = iCodeRateTablePostingOption_Override2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Excess1",
                    Value = iCodeRateTablePostingOption_Excess1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Excess2",
                    Value = iCodeRateTablePostingOption_Excess2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Rider",
                    Value = iCodeRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iManagerKeyID",
                    Value = iManagerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayFromPolicy",
                    Value = bDirectPayFromPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iProducer1KeyID",
                    Value = iProducer1KeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iProducer2KeyID",
                    Value = iProducer2KeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iProducer3KeyID",
                    Value = iProducer3KeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iProducer4KeyID",
                    Value = iProducer4KeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPremiumPaymentDate",
                    Value = dPremiumPaymentDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEffective",
                    Value = dEffective ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dRenewalBegin",
                    Value = dRenewalBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cTransactionComment",
                    Size = 200,
                    Value = cTransactionComment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbAttemptedToFindRateOfSomeKind,
                parameterbNonZeroRateOfSomeKindFoundForThisCoverage,
                parameteryTotalDue,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcForPremiumManagerLevel] @iCoverageKeyID = @iCoverageKeyID, @iRiderKeyID = @iRiderKeyID, @yModalPremiumBase = @yModalPremiumBase, @yModalPremiumExcess1 = @yModalPremiumExcess1, @yModalPremiumExcess2 = @yModalPremiumExcess2, @iCodePremiumPaymentMode = @iCodePremiumPaymentMode, @iRateTableSetKeyID = @iRateTableSetKeyID, @iCodeCommissionLevel = @iCodeCommissionLevel, @iCodeRateTablePostingOption_Override1 = @iCodeRateTablePostingOption_Override1, @iCodeRateTablePostingOption_Override2 = @iCodeRateTablePostingOption_Override2, @iCodeRateTablePostingOption_Excess1 = @iCodeRateTablePostingOption_Excess1, @iCodeRateTablePostingOption_Excess2 = @iCodeRateTablePostingOption_Excess2, @iCodeRateTablePostingOption_Rider = @iCodeRateTablePostingOption_Rider, @iManagerKeyID = @iManagerKeyID, @bDirectPayFromPolicy = @bDirectPayFromPolicy, @iProducer1KeyID = @iProducer1KeyID, @iProducer2KeyID = @iProducer2KeyID, @iProducer3KeyID = @iProducer3KeyID, @iProducer4KeyID = @iProducer4KeyID, @dPremiumPaymentDate = @dPremiumPaymentDate, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @dEffective = @dEffective, @dRenewalBegin = @dRenewalBegin, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @cTransactionComment = @cTransactionComment, @bPrintDebugMessages = @bPrintDebugMessages, @bAttemptedToFindRateOfSomeKind = @bAttemptedToFindRateOfSomeKind OUTPUT, @bNonZeroRateOfSomeKindFoundForThisCoverage = @bNonZeroRateOfSomeKindFoundForThisCoverage OUTPUT, @yTotalDue = @yTotalDue OUTPUT", sqlParameters, cancellationToken);

            bAttemptedToFindRateOfSomeKind.SetValue(parameterbAttemptedToFindRateOfSomeKind.Value);
            bNonZeroRateOfSomeKindFoundForThisCoverage.SetValue(parameterbNonZeroRateOfSomeKindFoundForThisCoverage.Value);
            yTotalDue.SetValue(parameteryTotalDue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcForPremiumOneLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iPayeeKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPay, bool? bDirectPayDeductFromAgencyNet, int? iProducerSlot, DateTime? dPremiumPaymentDate, DateTime? dAdvancePeriodEnd, int? iCoverageYearForCurrentDueDate, int? iPremiumYear, int? iCodeCommissionLevel, int? iCodeCommissionPremiumRateApplyTo, int? iPremiumRateApplyToSpecificProducerKeyID, int? iCodePremiumPaymentMode, Guid? gTempGuid, string cUserInitials, decimal? yModalPremiumBase, decimal? yModalPremiumExcess1, decimal? yModalPremiumExcess2, decimal? nRatePremiumBase, decimal? nRatePremiumExcess1, decimal? nRatePremiumExcess2, decimal? nRatePremiumBaseOverride1, decimal? nRatePremiumExcess1Override1, decimal? nRatePremiumExcess2Override1, decimal? nRatePremiumBaseOverride2, decimal? nRatePremiumExcess1Override2, decimal? nRatePremiumExcess2Override2, int? iCodeRateTablePostingOption_Override1, int? iCodeRateTablePostingOption_Override2, int? iCodeRateTablePostingOption_Excess1, int? iCodeRateTablePostingOption_Excess2, int? iCodeRateTablePostingOption_Rider, string cTransactionComment, bool? bPrintDebugMessages, OutputParameter<decimal?> yTotalDue, OutputParameter<int?> iHighestDueKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteryTotalDue = new SqlParameter
            {
                ParameterName = "yTotalDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yTotalDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteriHighestDueKeyID = new SqlParameter
            {
                ParameterName = "iHighestDueKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iHighestDueKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRiderKeyID",
                    Value = iRiderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPayeeKeyID",
                    Value = iPayeeKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitFirstYear",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitFirstYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitRenewal",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitRenewal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPay",
                    Value = bDirectPay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayDeductFromAgencyNet",
                    Value = bDirectPayDeductFromAgencyNet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerSlot",
                    Value = iProducerSlot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPremiumPaymentDate",
                    Value = dPremiumPaymentDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dAdvancePeriodEnd",
                    Value = dAdvancePeriodEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPremiumYear",
                    Value = iPremiumYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionLevel",
                    Value = iCodeCommissionLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionPremiumRateApplyTo",
                    Value = iCodeCommissionPremiumRateApplyTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPremiumRateApplyToSpecificProducerKeyID",
                    Value = iPremiumRateApplyToSpecificProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePremiumPaymentMode",
                    Value = iCodePremiumPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumBase",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumBase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumExcess1",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumExcess1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumExcess2",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumExcess2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nRatePremiumBase",
                    Precision = 10,
                    Scale = 6,
                    Value = nRatePremiumBase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nRatePremiumExcess1",
                    Precision = 10,
                    Scale = 6,
                    Value = nRatePremiumExcess1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nRatePremiumExcess2",
                    Precision = 10,
                    Scale = 6,
                    Value = nRatePremiumExcess2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nRatePremiumBaseOverride1",
                    Precision = 10,
                    Scale = 6,
                    Value = nRatePremiumBaseOverride1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nRatePremiumExcess1Override1",
                    Precision = 10,
                    Scale = 6,
                    Value = nRatePremiumExcess1Override1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nRatePremiumExcess2Override1",
                    Precision = 10,
                    Scale = 6,
                    Value = nRatePremiumExcess2Override1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nRatePremiumBaseOverride2",
                    Precision = 10,
                    Scale = 6,
                    Value = nRatePremiumBaseOverride2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nRatePremiumExcess1Override2",
                    Precision = 10,
                    Scale = 6,
                    Value = nRatePremiumExcess1Override2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nRatePremiumExcess2Override2",
                    Precision = 10,
                    Scale = 6,
                    Value = nRatePremiumExcess2Override2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Override1",
                    Value = iCodeRateTablePostingOption_Override1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Override2",
                    Value = iCodeRateTablePostingOption_Override2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Excess1",
                    Value = iCodeRateTablePostingOption_Excess1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Excess2",
                    Value = iCodeRateTablePostingOption_Excess2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Rider",
                    Value = iCodeRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTransactionComment",
                    Size = 200,
                    Value = cTransactionComment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameteryTotalDue,
                parameteriHighestDueKeyID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcForPremiumOneLevel] @iCoverageKeyID = @iCoverageKeyID, @iRiderKeyID = @iRiderKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @iPayeeKeyID = @iPayeeKeyID, @nSplitFirstYear = @nSplitFirstYear, @nSplitRenewal = @nSplitRenewal, @bDirectPay = @bDirectPay, @bDirectPayDeductFromAgencyNet = @bDirectPayDeductFromAgencyNet, @iProducerSlot = @iProducerSlot, @dPremiumPaymentDate = @dPremiumPaymentDate, @dAdvancePeriodEnd = @dAdvancePeriodEnd, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @iPremiumYear = @iPremiumYear, @iCodeCommissionLevel = @iCodeCommissionLevel, @iCodeCommissionPremiumRateApplyTo = @iCodeCommissionPremiumRateApplyTo, @iPremiumRateApplyToSpecificProducerKeyID = @iPremiumRateApplyToSpecificProducerKeyID, @iCodePremiumPaymentMode = @iCodePremiumPaymentMode, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @yModalPremiumBase = @yModalPremiumBase, @yModalPremiumExcess1 = @yModalPremiumExcess1, @yModalPremiumExcess2 = @yModalPremiumExcess2, @nRatePremiumBase = @nRatePremiumBase, @nRatePremiumExcess1 = @nRatePremiumExcess1, @nRatePremiumExcess2 = @nRatePremiumExcess2, @nRatePremiumBaseOverride1 = @nRatePremiumBaseOverride1, @nRatePremiumExcess1Override1 = @nRatePremiumExcess1Override1, @nRatePremiumExcess2Override1 = @nRatePremiumExcess2Override1, @nRatePremiumBaseOverride2 = @nRatePremiumBaseOverride2, @nRatePremiumExcess1Override2 = @nRatePremiumExcess1Override2, @nRatePremiumExcess2Override2 = @nRatePremiumExcess2Override2, @iCodeRateTablePostingOption_Override1 = @iCodeRateTablePostingOption_Override1, @iCodeRateTablePostingOption_Override2 = @iCodeRateTablePostingOption_Override2, @iCodeRateTablePostingOption_Excess1 = @iCodeRateTablePostingOption_Excess1, @iCodeRateTablePostingOption_Excess2 = @iCodeRateTablePostingOption_Excess2, @iCodeRateTablePostingOption_Rider = @iCodeRateTablePostingOption_Rider, @cTransactionComment = @cTransactionComment, @bPrintDebugMessages = @bPrintDebugMessages, @yTotalDue = @yTotalDue OUTPUT, @iHighestDueKeyID = @iHighestDueKeyID OUTPUT", sqlParameters, cancellationToken);

            yTotalDue.SetValue(parameteryTotalDue.Value);
            iHighestDueKeyID.SetValue(parameteriHighestDueKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcForPremiumOneLevelOneTypeAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iPayeeKeyID, decimal? nSplitFactor, bool? bDirectPay, bool? bDirectPayDeductFromAgencyNet, int? iProducerSlot, DateTime? dPremiumPaymentDate, DateTime? dAdvancePeriodEnd, int? iCoverageYearForCurrentDueDate, int? iPremiumYear, int? iCodeCommissionLevel, int? iCodeCommissionType, string cCommissionTypeDescription, int? iCodeOverride, string cOverrideDescription, int? iCodeCommissionPremiumRateApplyTo, int? iPremiumRateApplyToSpecificProducerKeyID, int? iCodePremiumPaymentMode, Guid? gTempGuid, string cUserInitials, decimal? yModalPremium, decimal? nRatePremium, int? iCodeRateTablePostingOption_Override1, int? iCodeRateTablePostingOption_Override2, int? iCodeRateTablePostingOption_Excess1, int? iCodeRateTablePostingOption_Excess2, int? iCodeRateTablePostingOption_Rider, string cTransactionComment, bool? bPrintDebugMessages, OutputParameter<decimal?> yDue, OutputParameter<int?> iDueKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteryDue = new SqlParameter
            {
                ParameterName = "yDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteriDueKeyID = new SqlParameter
            {
                ParameterName = "iDueKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDueKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRiderKeyID",
                    Value = iRiderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPayeeKeyID",
                    Value = iPayeeKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitFactor",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitFactor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPay",
                    Value = bDirectPay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayDeductFromAgencyNet",
                    Value = bDirectPayDeductFromAgencyNet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerSlot",
                    Value = iProducerSlot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPremiumPaymentDate",
                    Value = dPremiumPaymentDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dAdvancePeriodEnd",
                    Value = dAdvancePeriodEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPremiumYear",
                    Value = iPremiumYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionLevel",
                    Value = iCodeCommissionLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionType",
                    Value = iCodeCommissionType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cCommissionTypeDescription",
                    Size = 20,
                    Value = cCommissionTypeDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeOverride",
                    Value = iCodeOverride ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cOverrideDescription",
                    Size = 20,
                    Value = cOverrideDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionPremiumRateApplyTo",
                    Value = iCodeCommissionPremiumRateApplyTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPremiumRateApplyToSpecificProducerKeyID",
                    Value = iPremiumRateApplyToSpecificProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePremiumPaymentMode",
                    Value = iCodePremiumPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremium",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremium ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nRatePremium",
                    Precision = 10,
                    Scale = 6,
                    Value = nRatePremium ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Override1",
                    Value = iCodeRateTablePostingOption_Override1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Override2",
                    Value = iCodeRateTablePostingOption_Override2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Excess1",
                    Value = iCodeRateTablePostingOption_Excess1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Excess2",
                    Value = iCodeRateTablePostingOption_Excess2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Rider",
                    Value = iCodeRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTransactionComment",
                    Size = 200,
                    Value = cTransactionComment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameteryDue,
                parameteriDueKeyID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcForPremiumOneLevelOneType] @iCoverageKeyID = @iCoverageKeyID, @iRiderKeyID = @iRiderKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @iPayeeKeyID = @iPayeeKeyID, @nSplitFactor = @nSplitFactor, @bDirectPay = @bDirectPay, @bDirectPayDeductFromAgencyNet = @bDirectPayDeductFromAgencyNet, @iProducerSlot = @iProducerSlot, @dPremiumPaymentDate = @dPremiumPaymentDate, @dAdvancePeriodEnd = @dAdvancePeriodEnd, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @iPremiumYear = @iPremiumYear, @iCodeCommissionLevel = @iCodeCommissionLevel, @iCodeCommissionType = @iCodeCommissionType, @cCommissionTypeDescription = @cCommissionTypeDescription, @iCodeOverride = @iCodeOverride, @cOverrideDescription = @cOverrideDescription, @iCodeCommissionPremiumRateApplyTo = @iCodeCommissionPremiumRateApplyTo, @iPremiumRateApplyToSpecificProducerKeyID = @iPremiumRateApplyToSpecificProducerKeyID, @iCodePremiumPaymentMode = @iCodePremiumPaymentMode, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @yModalPremium = @yModalPremium, @nRatePremium = @nRatePremium, @iCodeRateTablePostingOption_Override1 = @iCodeRateTablePostingOption_Override1, @iCodeRateTablePostingOption_Override2 = @iCodeRateTablePostingOption_Override2, @iCodeRateTablePostingOption_Excess1 = @iCodeRateTablePostingOption_Excess1, @iCodeRateTablePostingOption_Excess2 = @iCodeRateTablePostingOption_Excess2, @iCodeRateTablePostingOption_Rider = @iCodeRateTablePostingOption_Rider, @cTransactionComment = @cTransactionComment, @bPrintDebugMessages = @bPrintDebugMessages, @yDue = @yDue OUTPUT, @iDueKeyID = @iDueKeyID OUTPUT", sqlParameters, cancellationToken);

            yDue.SetValue(parameteryDue.Value);
            iDueKeyID.SetValue(parameteriDueKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcForPremiumProducerLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, decimal? yModalPremiumBase, decimal? yModalPremiumExcess1, decimal? yModalPremiumExcess2, int? iCodePremiumPaymentMode, int? iRateTableSetKeyID, int? iCodeRateTablePostingOption_Override1, int? iCodeRateTablePostingOption_Override2, int? iCodeRateTablePostingOption_Excess1, int? iCodeRateTablePostingOption_Excess2, int? iCodeRateTablePostingOption_Rider, int? iProducerKeyID, int? iProducerSlot, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPayFromPolicy, DateTime? dPremiumPaymentDate, int? iCoverageYearForCurrentDueDate, DateTime? dEffective, DateTime? dRenewalBegin, Guid? gTempGuid, string cUserInitials, string cTransactionComment, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<decimal?> yTotalDue, OutputParameter<int?> iHighestDueKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbAttemptedToFindRateOfSomeKind = new SqlParameter
            {
                ParameterName = "bAttemptedToFindRateOfSomeKind",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bAttemptedToFindRateOfSomeKind?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNonZeroRateOfSomeKindFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bNonZeroRateOfSomeKindFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNonZeroRateOfSomeKindFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteryTotalDue = new SqlParameter
            {
                ParameterName = "yTotalDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yTotalDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteriHighestDueKeyID = new SqlParameter
            {
                ParameterName = "iHighestDueKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iHighestDueKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRiderKeyID",
                    Value = iRiderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumBase",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumBase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumExcess1",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumExcess1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yModalPremiumExcess2",
                    Precision = 19,
                    Scale = 4,
                    Value = yModalPremiumExcess2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePremiumPaymentMode",
                    Value = iCodePremiumPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Override1",
                    Value = iCodeRateTablePostingOption_Override1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Override2",
                    Value = iCodeRateTablePostingOption_Override2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Excess1",
                    Value = iCodeRateTablePostingOption_Excess1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Excess2",
                    Value = iCodeRateTablePostingOption_Excess2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRateTablePostingOption_Rider",
                    Value = iCodeRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerKeyID",
                    Value = iProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerSlot",
                    Value = iProducerSlot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitFirstYear",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitFirstYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitRenewal",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitRenewal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayFromPolicy",
                    Value = bDirectPayFromPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "dPremiumPaymentDate",
                    Value = dPremiumPaymentDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEffective",
                    Value = dEffective ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dRenewalBegin",
                    Value = dRenewalBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cTransactionComment",
                    Size = 200,
                    Value = cTransactionComment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbAttemptedToFindRateOfSomeKind,
                parameterbNonZeroRateOfSomeKindFoundForThisCoverage,
                parameteryTotalDue,
                parameteriHighestDueKeyID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcForPremiumProducerLevel] @iCoverageKeyID = @iCoverageKeyID, @iRiderKeyID = @iRiderKeyID, @yModalPremiumBase = @yModalPremiumBase, @yModalPremiumExcess1 = @yModalPremiumExcess1, @yModalPremiumExcess2 = @yModalPremiumExcess2, @iCodePremiumPaymentMode = @iCodePremiumPaymentMode, @iRateTableSetKeyID = @iRateTableSetKeyID, @iCodeRateTablePostingOption_Override1 = @iCodeRateTablePostingOption_Override1, @iCodeRateTablePostingOption_Override2 = @iCodeRateTablePostingOption_Override2, @iCodeRateTablePostingOption_Excess1 = @iCodeRateTablePostingOption_Excess1, @iCodeRateTablePostingOption_Excess2 = @iCodeRateTablePostingOption_Excess2, @iCodeRateTablePostingOption_Rider = @iCodeRateTablePostingOption_Rider, @iProducerKeyID = @iProducerKeyID, @iProducerSlot = @iProducerSlot, @nSplitFirstYear = @nSplitFirstYear, @nSplitRenewal = @nSplitRenewal, @bDirectPayFromPolicy = @bDirectPayFromPolicy, @dPremiumPaymentDate = @dPremiumPaymentDate, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @dEffective = @dEffective, @dRenewalBegin = @dRenewalBegin, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @cTransactionComment = @cTransactionComment, @bPrintDebugMessages = @bPrintDebugMessages, @bAttemptedToFindRateOfSomeKind = @bAttemptedToFindRateOfSomeKind OUTPUT, @bNonZeroRateOfSomeKindFoundForThisCoverage = @bNonZeroRateOfSomeKindFoundForThisCoverage OUTPUT, @yTotalDue = @yTotalDue OUTPUT, @iHighestDueKeyID = @iHighestDueKeyID OUTPUT", sqlParameters, cancellationToken);

            bAttemptedToFindRateOfSomeKind.SetValue(parameterbAttemptedToFindRateOfSomeKind.Value);
            bNonZeroRateOfSomeKindFoundForThisCoverage.SetValue(parameterbNonZeroRateOfSomeKindFoundForThisCoverage.Value);
            yTotalDue.SetValue(parameteryTotalDue.Value);
            iHighestDueKeyID.SetValue(parameteriHighestDueKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CommCalcForTrailerAgencyLevelResult>> sp_CommCalcForTrailerAgencyLevelAsync(int? iCoverageKeyID, int? iRateTableSetKeyID, int? iAgencyKeyID, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, decimal? yCashValue, int? iCodePostingOption_Trailer, int? iRateTablePostingOption_Rider, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbAttemptedToFindRateOfSomeKind = new SqlParameter
            {
                ParameterName = "bAttemptedToFindRateOfSomeKind",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bAttemptedToFindRateOfSomeKind?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNonZeroRateOfSomeKindFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bNonZeroRateOfSomeKindFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNonZeroRateOfSomeKindFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iAgencyKeyID",
                    Value = iAgencyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dDueDate",
                    Value = dDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yCashValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yCashValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePostingOption_Trailer",
                    Value = iCodePostingOption_Trailer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTablePostingOption_Rider",
                    Value = iRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbAttemptedToFindRateOfSomeKind,
                parameterbNonZeroRateOfSomeKindFoundForThisCoverage,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CommCalcForTrailerAgencyLevelResult>("EXEC @returnValue = [dbo].[sp_CommCalcForTrailerAgencyLevel] @iCoverageKeyID = @iCoverageKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @iAgencyKeyID = @iAgencyKeyID, @dDueDate = @dDueDate, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @yCashValue = @yCashValue, @iCodePostingOption_Trailer = @iCodePostingOption_Trailer, @iRateTablePostingOption_Rider = @iRateTablePostingOption_Rider, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @bPrintDebugMessages = @bPrintDebugMessages, @bAttemptedToFindRateOfSomeKind = @bAttemptedToFindRateOfSomeKind OUTPUT, @bNonZeroRateOfSomeKindFoundForThisCoverage = @bNonZeroRateOfSomeKindFoundForThisCoverage OUTPUT", sqlParameters, cancellationToken);

            bAttemptedToFindRateOfSomeKind.SetValue(parameterbAttemptedToFindRateOfSomeKind.Value);
            bNonZeroRateOfSomeKindFoundForThisCoverage.SetValue(parameterbNonZeroRateOfSomeKindFoundForThisCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CommCalcForTrailerManagerLevelResult>> sp_CommCalcForTrailerManagerLevelAsync(int? iCoverageKeyID, int? iRateTableSetKeyID, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, decimal? yCashValue, int? iCodePostingOption_Trailer, int? iRateTablePostingOption_Rider, int? iCodeCommissionLevel, int? iManagerKeyID, bool? bDirectPayFromPolicy, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbAttemptedToFindRateOfSomeKind = new SqlParameter
            {
                ParameterName = "bAttemptedToFindRateOfSomeKind",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bAttemptedToFindRateOfSomeKind?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNonZeroRateOfSomeKindFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bNonZeroRateOfSomeKindFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNonZeroRateOfSomeKindFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dDueDate",
                    Value = dDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yCashValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yCashValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePostingOption_Trailer",
                    Value = iCodePostingOption_Trailer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTablePostingOption_Rider",
                    Value = iRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionLevel",
                    Value = iCodeCommissionLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iManagerKeyID",
                    Value = iManagerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayFromPolicy",
                    Value = bDirectPayFromPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbAttemptedToFindRateOfSomeKind,
                parameterbNonZeroRateOfSomeKindFoundForThisCoverage,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CommCalcForTrailerManagerLevelResult>("EXEC @returnValue = [dbo].[sp_CommCalcForTrailerManagerLevel] @iCoverageKeyID = @iCoverageKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @dDueDate = @dDueDate, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @yCashValue = @yCashValue, @iCodePostingOption_Trailer = @iCodePostingOption_Trailer, @iRateTablePostingOption_Rider = @iRateTablePostingOption_Rider, @iCodeCommissionLevel = @iCodeCommissionLevel, @iManagerKeyID = @iManagerKeyID, @bDirectPayFromPolicy = @bDirectPayFromPolicy, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @bPrintDebugMessages = @bPrintDebugMessages, @bAttemptedToFindRateOfSomeKind = @bAttemptedToFindRateOfSomeKind OUTPUT, @bNonZeroRateOfSomeKindFoundForThisCoverage = @bNonZeroRateOfSomeKindFoundForThisCoverage OUTPUT", sqlParameters, cancellationToken);

            bAttemptedToFindRateOfSomeKind.SetValue(parameterbAttemptedToFindRateOfSomeKind.Value);
            bNonZeroRateOfSomeKindFoundForThisCoverage.SetValue(parameterbNonZeroRateOfSomeKindFoundForThisCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CommCalcForTrailerOneLevelResult>> sp_CommCalcForTrailerOneLevelAsync(int? iCoverageKeyID, int? iRateTableSetKeyID, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, int? iPremiumYear, decimal? yCashValue, decimal? nTrailerRate, int? iCodeTrailerMode, int? iCodePostingOption_Trailer, int? iRateTablePostingOption_Rider, int? iPayeeKeyID, decimal? nProducerSplitFirstYear, decimal? nProducerSplitRenewal, bool? bDirectPayFromPolicy, bool? bDirectPayDeductFromAgencyNet, int? iProducerSlot, int? iCodeCommissionLevel, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dDueDate",
                    Value = dDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPremiumYear",
                    Value = iPremiumYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yCashValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yCashValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nTrailerRate",
                    Precision = 12,
                    Scale = 6,
                    Value = nTrailerRate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeTrailerMode",
                    Value = iCodeTrailerMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePostingOption_Trailer",
                    Value = iCodePostingOption_Trailer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTablePostingOption_Rider",
                    Value = iRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPayeeKeyID",
                    Value = iPayeeKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nProducerSplitFirstYear",
                    Precision = 10,
                    Scale = 4,
                    Value = nProducerSplitFirstYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nProducerSplitRenewal",
                    Precision = 10,
                    Scale = 4,
                    Value = nProducerSplitRenewal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayFromPolicy",
                    Value = bDirectPayFromPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayDeductFromAgencyNet",
                    Value = bDirectPayDeductFromAgencyNet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerSlot",
                    Value = iProducerSlot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionLevel",
                    Value = iCodeCommissionLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CommCalcForTrailerOneLevelResult>("EXEC @returnValue = [dbo].[sp_CommCalcForTrailerOneLevel] @iCoverageKeyID = @iCoverageKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @dDueDate = @dDueDate, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @iPremiumYear = @iPremiumYear, @yCashValue = @yCashValue, @nTrailerRate = @nTrailerRate, @iCodeTrailerMode = @iCodeTrailerMode, @iCodePostingOption_Trailer = @iCodePostingOption_Trailer, @iRateTablePostingOption_Rider = @iRateTablePostingOption_Rider, @iPayeeKeyID = @iPayeeKeyID, @nProducerSplitFirstYear = @nProducerSplitFirstYear, @nProducerSplitRenewal = @nProducerSplitRenewal, @bDirectPayFromPolicy = @bDirectPayFromPolicy, @bDirectPayDeductFromAgencyNet = @bDirectPayDeductFromAgencyNet, @iProducerSlot = @iProducerSlot, @iCodeCommissionLevel = @iCodeCommissionLevel, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @bPrintDebugMessages = @bPrintDebugMessages", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CommCalcForTrailerProducerLevelResult>> sp_CommCalcForTrailerProducerLevelAsync(int? iCoverageKeyID, int? iRateTableSetKeyID, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, decimal? yCashValue, int? iCodePostingOption_Trailer, int? iRateTablePostingOption_Rider, int? iProducerKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPayFromPolicy, int? iProducerSlot, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbAttemptedToFindRateOfSomeKind = new SqlParameter
            {
                ParameterName = "bAttemptedToFindRateOfSomeKind",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bAttemptedToFindRateOfSomeKind?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNonZeroRateOfSomeKindFoundForThisCoverage = new SqlParameter
            {
                ParameterName = "bNonZeroRateOfSomeKindFoundForThisCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNonZeroRateOfSomeKindFoundForThisCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTableSetKeyID",
                    Value = iRateTableSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dDueDate",
                    Value = dDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageYearForCurrentDueDate",
                    Value = iCoverageYearForCurrentDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yCashValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yCashValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePostingOption_Trailer",
                    Value = iCodePostingOption_Trailer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRateTablePostingOption_Rider",
                    Value = iRateTablePostingOption_Rider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerKeyID",
                    Value = iProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitFirstYear",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitFirstYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nSplitRenewal",
                    Precision = 10,
                    Scale = 4,
                    Value = nSplitRenewal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bDirectPayFromPolicy",
                    Value = bDirectPayFromPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerSlot",
                    Value = iProducerSlot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gTempGuid",
                    Value = gTempGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbAttemptedToFindRateOfSomeKind,
                parameterbNonZeroRateOfSomeKindFoundForThisCoverage,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CommCalcForTrailerProducerLevelResult>("EXEC @returnValue = [dbo].[sp_CommCalcForTrailerProducerLevel] @iCoverageKeyID = @iCoverageKeyID, @iRateTableSetKeyID = @iRateTableSetKeyID, @dDueDate = @dDueDate, @iCoverageYearForCurrentDueDate = @iCoverageYearForCurrentDueDate, @yCashValue = @yCashValue, @iCodePostingOption_Trailer = @iCodePostingOption_Trailer, @iRateTablePostingOption_Rider = @iRateTablePostingOption_Rider, @iProducerKeyID = @iProducerKeyID, @nSplitFirstYear = @nSplitFirstYear, @nSplitRenewal = @nSplitRenewal, @bDirectPayFromPolicy = @bDirectPayFromPolicy, @iProducerSlot = @iProducerSlot, @gTempGuid = @gTempGuid, @cUserInitials = @cUserInitials, @bPrintDebugMessages = @bPrintDebugMessages, @bAttemptedToFindRateOfSomeKind = @bAttemptedToFindRateOfSomeKind OUTPUT, @bNonZeroRateOfSomeKindFoundForThisCoverage = @bNonZeroRateOfSomeKindFoundForThisCoverage OUTPUT", sqlParameters, cancellationToken);

            bAttemptedToFindRateOfSomeKind.SetValue(parameterbAttemptedToFindRateOfSomeKind.Value);
            bNonZeroRateOfSomeKindFoundForThisCoverage.SetValue(parameterbNonZeroRateOfSomeKindFoundForThisCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcNetDueAsync(int? iKeyTransaction, bool? bPrintDebugMessages, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyTransaction",
                    Value = iKeyTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcNetDue] @iKeyTransaction = @iKeyTransaction, @bPrintDebugMessages = @bPrintDebugMessages", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcTransactionTotalsAsync(int? iTransactionKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iTransactionKeyID",
                    Value = iTransactionKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcTransactionTotals] @iTransactionKeyID = @iTransactionKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommCalcTransactionTotalsOutputAsync(int? iTransactionKeyID, DateTime? dDueRangeBegin, DateTime? dDueRangeEnd, DateTime? dPaidRangeBegin, DateTime? dPaidRangeEnd, OutputParameter<decimal?> yAgencyGrossDue, OutputParameter<decimal?> yAgencyGrossPaid, OutputParameter<decimal?> yAgencyDistributionsDue, OutputParameter<decimal?> yAgencyDistributionsPaid, OutputParameter<decimal?> yAgencyNetDue, OutputParameter<decimal?> yAgencyNetPaid, OutputParameter<decimal?> yProducerGrossDue, OutputParameter<decimal?> yProducerGrossPaid, OutputParameter<decimal?> yProducerDirectDue, OutputParameter<decimal?> yProducerDirectPaid, OutputParameter<decimal?> yManagerGrossDue, OutputParameter<decimal?> yManagerGrossPaid, OutputParameter<decimal?> yManagerDirectDue, OutputParameter<decimal?> yManagerDirectPaid, OutputParameter<decimal?> yCompanyNetDue, OutputParameter<decimal?> yCompanyNetPaid, OutputParameter<decimal?> yAdjustmentDue, OutputParameter<decimal?> yAdjustmentPaid, OutputParameter<DateTime?> dPaidDateMinimum, OutputParameter<DateTime?> dPaidDateMaximum, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteryAgencyGrossDue = new SqlParameter
            {
                ParameterName = "yAgencyGrossDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yAgencyGrossDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryAgencyGrossPaid = new SqlParameter
            {
                ParameterName = "yAgencyGrossPaid",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yAgencyGrossPaid?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryAgencyDistributionsDue = new SqlParameter
            {
                ParameterName = "yAgencyDistributionsDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yAgencyDistributionsDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryAgencyDistributionsPaid = new SqlParameter
            {
                ParameterName = "yAgencyDistributionsPaid",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yAgencyDistributionsPaid?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryAgencyNetDue = new SqlParameter
            {
                ParameterName = "yAgencyNetDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yAgencyNetDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryAgencyNetPaid = new SqlParameter
            {
                ParameterName = "yAgencyNetPaid",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yAgencyNetPaid?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryProducerGrossDue = new SqlParameter
            {
                ParameterName = "yProducerGrossDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yProducerGrossDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryProducerGrossPaid = new SqlParameter
            {
                ParameterName = "yProducerGrossPaid",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yProducerGrossPaid?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryProducerDirectDue = new SqlParameter
            {
                ParameterName = "yProducerDirectDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yProducerDirectDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryProducerDirectPaid = new SqlParameter
            {
                ParameterName = "yProducerDirectPaid",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yProducerDirectPaid?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryManagerGrossDue = new SqlParameter
            {
                ParameterName = "yManagerGrossDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yManagerGrossDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryManagerGrossPaid = new SqlParameter
            {
                ParameterName = "yManagerGrossPaid",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yManagerGrossPaid?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryManagerDirectDue = new SqlParameter
            {
                ParameterName = "yManagerDirectDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yManagerDirectDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryManagerDirectPaid = new SqlParameter
            {
                ParameterName = "yManagerDirectPaid",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yManagerDirectPaid?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryCompanyNetDue = new SqlParameter
            {
                ParameterName = "yCompanyNetDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yCompanyNetDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryCompanyNetPaid = new SqlParameter
            {
                ParameterName = "yCompanyNetPaid",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yCompanyNetPaid?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryAdjustmentDue = new SqlParameter
            {
                ParameterName = "yAdjustmentDue",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yAdjustmentDue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryAdjustmentPaid = new SqlParameter
            {
                ParameterName = "yAdjustmentPaid",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yAdjustmentPaid?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameterdPaidDateMinimum = new SqlParameter
            {
                ParameterName = "dPaidDateMinimum",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = dPaidDateMinimum?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };
            var parameterdPaidDateMaximum = new SqlParameter
            {
                ParameterName = "dPaidDateMaximum",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = dPaidDateMaximum?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iTransactionKeyID",
                    Value = iTransactionKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dDueRangeBegin",
                    Value = dDueRangeBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dDueRangeEnd",
                    Value = dDueRangeEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dPaidRangeBegin",
                    Value = dPaidRangeBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dPaidRangeEnd",
                    Value = dPaidRangeEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameteryAgencyGrossDue,
                parameteryAgencyGrossPaid,
                parameteryAgencyDistributionsDue,
                parameteryAgencyDistributionsPaid,
                parameteryAgencyNetDue,
                parameteryAgencyNetPaid,
                parameteryProducerGrossDue,
                parameteryProducerGrossPaid,
                parameteryProducerDirectDue,
                parameteryProducerDirectPaid,
                parameteryManagerGrossDue,
                parameteryManagerGrossPaid,
                parameteryManagerDirectDue,
                parameteryManagerDirectPaid,
                parameteryCompanyNetDue,
                parameteryCompanyNetPaid,
                parameteryAdjustmentDue,
                parameteryAdjustmentPaid,
                parameterdPaidDateMinimum,
                parameterdPaidDateMaximum,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommCalcTransactionTotalsOutput] @iTransactionKeyID = @iTransactionKeyID, @dDueRangeBegin = @dDueRangeBegin, @dDueRangeEnd = @dDueRangeEnd, @dPaidRangeBegin = @dPaidRangeBegin, @dPaidRangeEnd = @dPaidRangeEnd, @yAgencyGrossDue = @yAgencyGrossDue OUTPUT, @yAgencyGrossPaid = @yAgencyGrossPaid OUTPUT, @yAgencyDistributionsDue = @yAgencyDistributionsDue OUTPUT, @yAgencyDistributionsPaid = @yAgencyDistributionsPaid OUTPUT, @yAgencyNetDue = @yAgencyNetDue OUTPUT, @yAgencyNetPaid = @yAgencyNetPaid OUTPUT, @yProducerGrossDue = @yProducerGrossDue OUTPUT, @yProducerGrossPaid = @yProducerGrossPaid OUTPUT, @yProducerDirectDue = @yProducerDirectDue OUTPUT, @yProducerDirectPaid = @yProducerDirectPaid OUTPUT, @yManagerGrossDue = @yManagerGrossDue OUTPUT, @yManagerGrossPaid = @yManagerGrossPaid OUTPUT, @yManagerDirectDue = @yManagerDirectDue OUTPUT, @yManagerDirectPaid = @yManagerDirectPaid OUTPUT, @yCompanyNetDue = @yCompanyNetDue OUTPUT, @yCompanyNetPaid = @yCompanyNetPaid OUTPUT, @yAdjustmentDue = @yAdjustmentDue OUTPUT, @yAdjustmentPaid = @yAdjustmentPaid OUTPUT, @dPaidDateMinimum = @dPaidDateMinimum OUTPUT, @dPaidDateMaximum = @dPaidDateMaximum OUTPUT", sqlParameters, cancellationToken);

            yAgencyGrossDue.SetValue(parameteryAgencyGrossDue.Value);
            yAgencyGrossPaid.SetValue(parameteryAgencyGrossPaid.Value);
            yAgencyDistributionsDue.SetValue(parameteryAgencyDistributionsDue.Value);
            yAgencyDistributionsPaid.SetValue(parameteryAgencyDistributionsPaid.Value);
            yAgencyNetDue.SetValue(parameteryAgencyNetDue.Value);
            yAgencyNetPaid.SetValue(parameteryAgencyNetPaid.Value);
            yProducerGrossDue.SetValue(parameteryProducerGrossDue.Value);
            yProducerGrossPaid.SetValue(parameteryProducerGrossPaid.Value);
            yProducerDirectDue.SetValue(parameteryProducerDirectDue.Value);
            yProducerDirectPaid.SetValue(parameteryProducerDirectPaid.Value);
            yManagerGrossDue.SetValue(parameteryManagerGrossDue.Value);
            yManagerGrossPaid.SetValue(parameteryManagerGrossPaid.Value);
            yManagerDirectDue.SetValue(parameteryManagerDirectDue.Value);
            yManagerDirectPaid.SetValue(parameteryManagerDirectPaid.Value);
            yCompanyNetDue.SetValue(parameteryCompanyNetDue.Value);
            yCompanyNetPaid.SetValue(parameteryCompanyNetPaid.Value);
            yAdjustmentDue.SetValue(parameteryAdjustmentDue.Value);
            yAdjustmentPaid.SetValue(parameteryAdjustmentPaid.Value);
            dPaidDateMinimum.SetValue(parameterdPaidDateMinimum.Value);
            dPaidDateMaximum.SetValue(parameterdPaidDateMaximum.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommGetAdvancedFixedAmountAsync(DateTime? dDueDate, DateTime? dEffective, DateTime? dRenewalBegin, int? iCodeFixedAmountMode, int? iAdvanceMonths, int? iCodeCommissionLevel, bool? bPrintDebugMessages, OutputParameter<decimal?> yFixedAmount, OutputParameter<string> cTransactionComment, OutputParameter<DateTime?> dAdvancePeriodEnd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteryFixedAmount = new SqlParameter
            {
                ParameterName = "yFixedAmount",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yFixedAmount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parametercTransactionComment = new SqlParameter
            {
                ParameterName = "cTransactionComment",
                Size = 200,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cTransactionComment?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterdAdvancePeriodEnd = new SqlParameter
            {
                ParameterName = "dAdvancePeriodEnd",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = dAdvancePeriodEnd?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dDueDate",
                    Value = dDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dEffective",
                    Value = dEffective ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dRenewalBegin",
                    Value = dRenewalBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeFixedAmountMode",
                    Value = iCodeFixedAmountMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iAdvanceMonths",
                    Value = iAdvanceMonths ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCommissionLevel",
                    Value = iCodeCommissionLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteryFixedAmount,
                parametercTransactionComment,
                parameterdAdvancePeriodEnd,
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommGetAdvancedFixedAmount] @dDueDate = @dDueDate, @dEffective = @dEffective, @dRenewalBegin = @dRenewalBegin, @iCodeFixedAmountMode = @iCodeFixedAmountMode, @iAdvanceMonths = @iAdvanceMonths, @iCodeCommissionLevel = @iCodeCommissionLevel, @yFixedAmount = @yFixedAmount OUTPUT, @cTransactionComment = @cTransactionComment OUTPUT, @dAdvancePeriodEnd = @dAdvancePeriodEnd OUTPUT, @bPrintDebugMessages = @bPrintDebugMessages", sqlParameters, cancellationToken);

            yFixedAmount.SetValue(parameteryFixedAmount.Value);
            cTransactionComment.SetValue(parametercTransactionComment.Value);
            dAdvancePeriodEnd.SetValue(parameterdAdvancePeriodEnd.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CommGetAdvancedPremiumAsync(DateTime? dDueDate, DateTime? dEffective, DateTime? dRenewalBegin, int? iCodePremiumPaymentMode, int? iPremiumAdvanceMonths, int? iCoverageKeyID, string cCommentLevel, bool? bPrintDebugMessages, OutputParameter<decimal?> yModalPremiumBase, OutputParameter<decimal?> yModalPremiumExcess1, OutputParameter<decimal?> yModalPremiumExcess2, OutputParameter<string> cTransactionComment, OutputParameter<DateTime?> dAdvancePeriodEnd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteryModalPremiumBase = new SqlParameter
            {
                ParameterName = "yModalPremiumBase",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yModalPremiumBase?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryModalPremiumExcess1 = new SqlParameter
            {
                ParameterName = "yModalPremiumExcess1",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yModalPremiumExcess1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameteryModalPremiumExcess2 = new SqlParameter
            {
                ParameterName = "yModalPremiumExcess2",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = yModalPremiumExcess2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parametercTransactionComment = new SqlParameter
            {
                ParameterName = "cTransactionComment",
                Size = 200,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cTransactionComment?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterdAdvancePeriodEnd = new SqlParameter
            {
                ParameterName = "dAdvancePeriodEnd",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = dAdvancePeriodEnd?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dDueDate",
                    Value = dDueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dEffective",
                    Value = dEffective ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dRenewalBegin",
                    Value = dRenewalBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePremiumPaymentMode",
                    Value = iCodePremiumPaymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPremiumAdvanceMonths",
                    Value = iPremiumAdvanceMonths ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cCommentLevel",
                    Size = 10,
                    Value = cCommentLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteryModalPremiumBase,
                parameteryModalPremiumExcess1,
                parameteryModalPremiumExcess2,
                parametercTransactionComment,
                parameterdAdvancePeriodEnd,
                new SqlParameter
                {
                    ParameterName = "bPrintDebugMessages",
                    Value = bPrintDebugMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CommGetAdvancedPremium] @dDueDate = @dDueDate, @dEffective = @dEffective, @dRenewalBegin = @dRenewalBegin, @iCodePremiumPaymentMode = @iCodePremiumPaymentMode, @iPremiumAdvanceMonths = @iPremiumAdvanceMonths, @iCoverageKeyID = @iCoverageKeyID, @cCommentLevel = @cCommentLevel, @yModalPremiumBase = @yModalPremiumBase OUTPUT, @yModalPremiumExcess1 = @yModalPremiumExcess1 OUTPUT, @yModalPremiumExcess2 = @yModalPremiumExcess2 OUTPUT, @cTransactionComment = @cTransactionComment OUTPUT, @dAdvancePeriodEnd = @dAdvancePeriodEnd OUTPUT, @bPrintDebugMessages = @bPrintDebugMessages", sqlParameters, cancellationToken);

            yModalPremiumBase.SetValue(parameteryModalPremiumBase.Value);
            yModalPremiumExcess1.SetValue(parameteryModalPremiumExcess1.Value);
            yModalPremiumExcess2.SetValue(parameteryModalPremiumExcess2.Value);
            cTransactionComment.SetValue(parametercTransactionComment.Value);
            dAdvancePeriodEnd.SetValue(parameterdAdvancePeriodEnd.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ConversionRefactorGNMAAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ConversionRefactorGNMA]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CopyAddressToHouseholdResult>> sp_CopyAddressToHouseholdAsync(int? iKeyHousehold, int? iKeyAddress, int? iKeyProcessLog, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyHousehold",
                    Value = iKeyHousehold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyAddress",
                    Value = iKeyAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProcessLog",
                    Value = iKeyProcessLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CopyAddressToHouseholdResult>("EXEC @returnValue = [dbo].[sp_CopyAddressToHousehold] @iKeyHousehold = @iKeyHousehold, @iKeyAddress = @iKeyAddress, @iKeyProcessLog = @iKeyProcessLog", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CopyNameTypeToHouseholdAsync(int? iKeyHousehold, int? iCodeNameType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyHousehold",
                    Value = iKeyHousehold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeNameType",
                    Value = iCodeNameType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CopyNameTypeToHousehold] @iKeyHousehold = @iKeyHousehold, @iCodeNameType = @iCodeNameType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CopyPhoneToHouseholdResult>> sp_CopyPhoneToHouseholdAsync(int? iKeyHousehold, int? iKeyPhone, int? iKeyProcessLog, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyHousehold",
                    Value = iKeyHousehold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyPhone",
                    Value = iKeyPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProcessLog",
                    Value = iKeyProcessLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CopyPhoneToHouseholdResult>("EXEC @returnValue = [dbo].[sp_CopyPhoneToHousehold] @iKeyHousehold = @iKeyHousehold, @iKeyPhone = @iKeyPhone, @iKeyProcessLog = @iKeyProcessLog", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CopySecuityPricesAsync(int? iKeySourceSymbol, int? iKeyTargetSymbol, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySourceSymbol",
                    Value = iKeySourceSymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTargetSymbol",
                    Value = iKeyTargetSymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CopySecuityPrices] @iKeySourceSymbol = @iKeySourceSymbol, @iKeyTargetSymbol = @iKeyTargetSymbol", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CountCodeUsageAsync(string cCodeType, int? iKeyCode, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cCodeType",
                    Size = 12,
                    Value = cCodeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCode",
                    Value = iKeyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CountCodeUsage] @cCodeType = @cCodeType, @iKeyCode = @iKeyCode, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CountProducerGroupUsageAsync(int? iKeyProducerGroup, OutputParameter<int?> iWorkflowCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriWorkflowCount = new SqlParameter
            {
                ParameterName = "iWorkflowCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iWorkflowCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProducerGroup",
                    Value = iKeyProducerGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriWorkflowCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CountProducerGroupUsage] @iKeyProducerGroup = @iKeyProducerGroup, @iWorkflowCount = @iWorkflowCount OUTPUT", sqlParameters, cancellationToken);

            iWorkflowCount.SetValue(parameteriWorkflowCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CountProducerReferencesAsync(int? iKeyPdcr, bool? bCheckProducersName, OutputParameter<int?> iNames, OutputParameter<int?> iPolicies, OutputParameter<int?> iAccounts, OutputParameter<int?> iCommissionTransactions, OutputParameter<int?> iCommissionRateTables, OutputParameter<bool?> bHasPlaceholder, OutputParameter<bool?> bProducerIsDefaultManager, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriNames = new SqlParameter
            {
                ParameterName = "iNames",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iNames?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriPolicies = new SqlParameter
            {
                ParameterName = "iPolicies",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iPolicies?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriAccounts = new SqlParameter
            {
                ParameterName = "iAccounts",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iAccounts?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriCommissionTransactions = new SqlParameter
            {
                ParameterName = "iCommissionTransactions",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCommissionTransactions?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriCommissionRateTables = new SqlParameter
            {
                ParameterName = "iCommissionRateTables",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCommissionRateTables?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbHasPlaceholder = new SqlParameter
            {
                ParameterName = "bHasPlaceholder",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bHasPlaceholder?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbProducerIsDefaultManager = new SqlParameter
            {
                ParameterName = "bProducerIsDefaultManager",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bProducerIsDefaultManager?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyPdcr",
                    Value = iKeyPdcr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCheckProducersName",
                    Value = bCheckProducersName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameteriNames,
                parameteriPolicies,
                parameteriAccounts,
                parameteriCommissionTransactions,
                parameteriCommissionRateTables,
                parameterbHasPlaceholder,
                parameterbProducerIsDefaultManager,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CountProducerReferences] @iKeyPdcr = @iKeyPdcr, @bCheckProducersName = @bCheckProducersName, @iNames = @iNames OUTPUT, @iPolicies = @iPolicies OUTPUT, @iAccounts = @iAccounts OUTPUT, @iCommissionTransactions = @iCommissionTransactions OUTPUT, @iCommissionRateTables = @iCommissionRateTables OUTPUT, @bHasPlaceholder = @bHasPlaceholder OUTPUT, @bProducerIsDefaultManager = @bProducerIsDefaultManager OUTPUT", sqlParameters, cancellationToken);

            iNames.SetValue(parameteriNames.Value);
            iPolicies.SetValue(parameteriPolicies.Value);
            iAccounts.SetValue(parameteriAccounts.Value);
            iCommissionTransactions.SetValue(parameteriCommissionTransactions.Value);
            iCommissionRateTables.SetValue(parameteriCommissionRateTables.Value);
            bHasPlaceholder.SetValue(parameterbHasPlaceholder.Value);
            bProducerIsDefaultManager.SetValue(parameterbProducerIsDefaultManager.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CreateLetterLogFromTempDataAsync(int? iClientID, int? iTempID, int? iLetterLogNoteTopicKeyID, string sWhoChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iClientID",
                    Value = iClientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iTempID",
                    Value = iTempID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iLetterLogNoteTopicKeyID",
                    Value = iLetterLogNoteTopicKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sWhoChange",
                    Size = 10,
                    Value = sWhoChange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CreateLetterLogFromTempData] @iClientID = @iClientID, @iTempID = @iTempID, @iLetterLogNoteTopicKeyID = @iLetterLogNoteTopicKeyID, @sWhoChange = @sWhoChange", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CreateNameFilterAsync(int? UserKey, string NameKeyList, string ViewCommand, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NameKeyList",
                    Size = -1,
                    Value = NameKeyList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ViewCommand",
                    Size = -1,
                    Value = ViewCommand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CreateNameFilter] @UserKey = @UserKey, @NameKeyList = @NameKeyList, @ViewCommand = @ViewCommand", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CreatePersonalContactCalendarEventFromTempDataResult>> sp_CreatePersonalContactCalendarEventFromTempDataAsync(int? iClientID, int? iTempID, string sWhoChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iClientID",
                    Value = iClientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iTempID",
                    Value = iTempID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sWhoChange",
                    Size = 10,
                    Value = sWhoChange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CreatePersonalContactCalendarEventFromTempDataResult>("EXEC @returnValue = [dbo].[sp_CreatePersonalContactCalendarEventFromTempData] @iClientID = @iClientID, @iTempID = @iTempID, @sWhoChange = @sWhoChange", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_CreateSSOTokenAsync(string cUserID, OutputParameter<Guid?> gToken, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergToken = new SqlParameter
            {
                ParameterName = "gToken",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gToken?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cUserID",
                    Size = 20,
                    Value = cUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parametergToken,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CreateSSOToken] @cUserID = @cUserID, @gToken = @gToken OUTPUT", sqlParameters, cancellationToken);

            gToken.SetValue(parametergToken.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_CreateSSOTokenToNameResult>> sp_CreateSSOTokenToNameAsync(string cUserID, int? ContactID, OutputParameter<Guid?> gToken, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergToken = new SqlParameter
            {
                ParameterName = "gToken",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gToken?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cUserID",
                    Size = 20,
                    Value = cUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parametergToken,
                new SqlParameter
                {
                    ParameterName = "ContactID",
                    Value = ContactID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_CreateSSOTokenToNameResult>("EXEC @returnValue = [dbo].[sp_CreateSSOTokenToName] @cUserID = @cUserID, @gToken = @gToken OUTPUT, @ContactID = @ContactID", sqlParameters, cancellationToken);

            gToken.SetValue(parametergToken.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DatabaseGetStatisticsResult>> sp_DatabaseGetStatisticsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DatabaseGetStatisticsResult>("EXEC @returnValue = [dbo].[sp_DatabaseGetStatistics]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DatabaseReindexAllTablesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DatabaseReindexAllTables]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DatabaseReindexDLFTablesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DatabaseReindexDLFTables]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DatabaseReindexOneTableAsync(string cTable, string cIndex, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 100,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cIndex",
                    Size = 100,
                    Value = cIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DatabaseReindexOneTable] @cTable = @cTable, @cIndex = @cIndex", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DatabaseShrinkAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DatabaseShrink]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DatabaseTruncateTransactionLogAsync(bool? bShrinkLogCompletely, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "bShrinkLogCompletely",
                    Value = bShrinkLogCompletely ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DatabaseTruncateTransactionLog] @bShrinkLogCompletely = @bShrinkLogCompletely", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DatabaseUpgradeInitResult>> sp_DatabaseUpgradeInitAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DatabaseUpgradeInitResult>("EXEC @returnValue = [dbo].[sp_DatabaseUpgradeInit]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DatabaseUpgradeResetResult>> sp_DatabaseUpgradeResetAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DatabaseUpgradeResetResult>("EXEC @returnValue = [dbo].[sp_DatabaseUpgradeReset]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DBUGetTemplateBackupsResult>> sp_DBUGetTemplateBackupsAsync(string cPath, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cPath",
                    Size = 300,
                    Value = cPath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DBUGetTemplateBackupsResult>("EXEC @returnValue = [dbo].[sp_DBUGetTemplateBackups] @cPath = @cPath", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DeceasedCodeGetAsync(int? codeKeyID, OutputParameter<bool?> deceased, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterdeceased = new SqlParameter
            {
                ParameterName = "deceased",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = deceased?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codeKeyID",
                    Value = codeKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterdeceased,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DeceasedCodeGet] @codeKeyID = @codeKeyID, @deceased = @deceased OUTPUT", sqlParameters, cancellationToken);

            deceased.SetValue(parameterdeceased.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DeceasedCodeSetAsync(int? codeKeyID, bool? deceased, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codeKeyID",
                    Value = codeKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "deceased",
                    Value = deceased ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DeceasedCodeSet] @codeKeyID = @codeKeyID, @deceased = @deceased", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarIDAsync(string cEntryID, int? iKeyStore, int? iKeyCalendar, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbFoundAndDeleted = new SqlParameter
            {
                ParameterName = "bFoundAndDeleted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFoundAndDeleted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = -1,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyStore",
                    Value = iKeyStore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCalendar",
                    Value = iKeyCalendar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbFoundAndDeleted,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarID] @cEntryID = @cEntryID, @iKeyStore = @iKeyStore, @iKeyCalendar = @iKeyCalendar, @bFoundAndDeleted = @bFoundAndDeleted OUTPUT", sqlParameters, cancellationToken);

            bFoundAndDeleted.SetValue(parameterbFoundAndDeleted.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarID_2Async(string cEntryID, int? iKeyStore, int? iKeyCalendar, string UserInitials, int? UserKeyID, string ContextMessage, string ProgramVersion, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbFoundAndDeleted = new SqlParameter
            {
                ParameterName = "bFoundAndDeleted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFoundAndDeleted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = -1,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyStore",
                    Value = iKeyStore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCalendar",
                    Value = iKeyCalendar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ContextMessage",
                    Size = -1,
                    Value = ContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramVersion",
                    Size = 100,
                    Value = ProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterbFoundAndDeleted,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarID_2] @cEntryID = @cEntryID, @iKeyStore = @iKeyStore, @iKeyCalendar = @iKeyCalendar, @UserInitials = @UserInitials, @UserKeyID = @UserKeyID, @ContextMessage = @ContextMessage, @ProgramVersion = @ProgramVersion, @bFoundAndDeleted = @bFoundAndDeleted OUTPUT", sqlParameters, cancellationToken);

            bFoundAndDeleted.SetValue(parameterbFoundAndDeleted.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarIDAndGuIDsAsync(string cEntryID, int? iKeyStore, int? iKeyCalendar, string guidEvent, string guidEventCheck, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbFoundAndDeleted = new SqlParameter
            {
                ParameterName = "bFoundAndDeleted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFoundAndDeleted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = -1,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyStore",
                    Value = iKeyStore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCalendar",
                    Value = iKeyCalendar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "guidEvent",
                    Size = -1,
                    Value = guidEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "guidEventCheck",
                    Size = -1,
                    Value = guidEventCheck ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterbFoundAndDeleted,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarIDAndGuIDs] @cEntryID = @cEntryID, @iKeyStore = @iKeyStore, @iKeyCalendar = @iKeyCalendar, @guidEvent = @guidEvent, @guidEventCheck = @guidEventCheck, @bFoundAndDeleted = @bFoundAndDeleted OUTPUT", sqlParameters, cancellationToken);

            bFoundAndDeleted.SetValue(parameterbFoundAndDeleted.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarIDAndGuIDs_2Async(string cEntryID, int? iKeyStore, int? iKeyCalendar, string guidEvent, string guidEventCheck, string UserInitials, int? UserKeyID, string ContextMessage, string ProgramVersion, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbFoundAndDeleted = new SqlParameter
            {
                ParameterName = "bFoundAndDeleted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFoundAndDeleted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = -1,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyStore",
                    Value = iKeyStore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCalendar",
                    Value = iKeyCalendar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "guidEvent",
                    Size = -1,
                    Value = guidEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "guidEventCheck",
                    Size = -1,
                    Value = guidEventCheck ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ContextMessage",
                    Size = -1,
                    Value = ContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramVersion",
                    Size = 100,
                    Value = ProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterbFoundAndDeleted,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarIDAndGuIDs_2] @cEntryID = @cEntryID, @iKeyStore = @iKeyStore, @iKeyCalendar = @iKeyCalendar, @guidEvent = @guidEvent, @guidEventCheck = @guidEventCheck, @UserInitials = @UserInitials, @UserKeyID = @UserKeyID, @ContextMessage = @ContextMessage, @ProgramVersion = @ProgramVersion, @bFoundAndDeleted = @bFoundAndDeleted OUTPUT", sqlParameters, cancellationToken);

            bFoundAndDeleted.SetValue(parameterbFoundAndDeleted.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DeleteCalEventsByUserResult>> sp_DeleteCalEventsByUserAsync(int? iCalenderKeyID, bool? bDeleteCompletedEvents, int? iKeyIDToDeleteFrom, string UserInitials, int? UserKeyID, string DeleteCalendarEventContextMessage, string ProgramVersion, OutputParameter<int?> iLowestRemainingKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriLowestRemainingKeyID = new SqlParameter
            {
                ParameterName = "iLowestRemainingKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iLowestRemainingKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalenderKeyID",
                    Value = iCalenderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bDeleteCompletedEvents",
                    Value = bDeleteCompletedEvents ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyIDToDeleteFrom",
                    Value = iKeyIDToDeleteFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteCalendarEventContextMessage",
                    Size = -1,
                    Value = DeleteCalendarEventContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramVersion",
                    Size = 100,
                    Value = ProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameteriLowestRemainingKeyID,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DeleteCalEventsByUserResult>("EXEC @returnValue = [dbo].[sp_DeleteCalEventsByUser] @iCalenderKeyID = @iCalenderKeyID, @bDeleteCompletedEvents = @bDeleteCompletedEvents, @iKeyIDToDeleteFrom = @iKeyIDToDeleteFrom, @UserInitials = @UserInitials, @UserKeyID = @UserKeyID, @DeleteCalendarEventContextMessage = @DeleteCalendarEventContextMessage, @ProgramVersion = @ProgramVersion, @iLowestRemainingKeyID = @iLowestRemainingKeyID OUTPUT", sqlParameters, cancellationToken);

            iLowestRemainingKeyID.SetValue(parameteriLowestRemainingKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DeleteNameFilterAsync(int? UserKey, string ViewCommand, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ViewCommand",
                    Size = -1,
                    Value = ViewCommand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DeleteNameFilter] @UserKey = @UserKey, @ViewCommand = @ViewCommand", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DeleteOldPolicyPositionsAsync(int? iCoverageKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DeleteOldPolicyPositions] @iCoverageKeyID = @iCoverageKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DeleteProducerReferencesByProducerAsync(int? iKeyPdcr, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyPdcr",
                    Value = iKeyPdcr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DeleteProducerReferencesByProducer] @iKeyPdcr = @iKeyPdcr", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DeleteWorkFlowAsync(int? iKeyWorkflow, bool? bDeleteNotes, string UserInitials, int? UserKeyID, string ProgramVersion, string DeleteCalendarEventContextMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyWorkflow",
                    Value = iKeyWorkflow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bDeleteNotes",
                    Value = bDeleteNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramVersion",
                    Size = 100,
                    Value = ProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteCalendarEventContextMessage",
                    Size = -1,
                    Value = DeleteCalendarEventContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DeleteWorkFlow] @iKeyWorkflow = @iKeyWorkflow, @bDeleteNotes = @bDeleteNotes, @UserInitials = @UserInitials, @UserKeyID = @UserKeyID, @ProgramVersion = @ProgramVersion, @DeleteCalendarEventContextMessage = @DeleteCalendarEventContextMessage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFAccountAddToNameAsync(int? iNameKeyID, string cAccountnum, string cInvestorTaxID, DateTime? dInvestorDOB, int? iKeyModule, int? iKeyRep, string cDataStamp, string cRegistration, string cTable, DateTime? dRecord, int? iCodeStatus, int? iCodeBasisType, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, int? iKeyFile, OutputParameter<int?> iKeyAccount, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyAccount = new SqlParameter
            {
                ParameterName = "iKeyAccount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyAccount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyDownloadRegistration = new SqlParameter
            {
                ParameterName = "iKeyDownloadRegistration",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyDownloadRegistration?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cAccountnum",
                    Size = 24,
                    Value = cAccountnum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cInvestorTaxID",
                    Size = 100,
                    Value = cInvestorTaxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dInvestorDOB",
                    Value = dInvestorDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyRep",
                    Value = iKeyRep ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cRegistration",
                    Size = -1,
                    Value = cRegistration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 25,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKeyAccount,
                parameteriKeyDownloadRegistration,
                new SqlParameter
                {
                    ParameterName = "dRecord",
                    Value = dRecord ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeStatus",
                    Value = iCodeStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeBasisType",
                    Value = iCodeBasisType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyFile",
                    Value = iKeyFile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFAccountAddToName] @iNameKeyID = @iNameKeyID, @cAccountnum = @cAccountnum, @cInvestorTaxID = @cInvestorTaxID, @dInvestorDOB = @dInvestorDOB, @iKeyModule = @iKeyModule, @iKeyRep = @iKeyRep, @cDataStamp = @cDataStamp, @cRegistration = @cRegistration, @cTable = @cTable, @iKeyAccount = @iKeyAccount OUTPUT, @iKeyDownloadRegistration = @iKeyDownloadRegistration OUTPUT, @dRecord = @dRecord, @iCodeStatus = @iCodeStatus, @iCodeBasisType = @iCodeBasisType, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @iKeyFile = @iKeyFile", sqlParameters, cancellationToken);

            iKeyAccount.SetValue(parameteriKeyAccount.Value);
            iKeyDownloadRegistration.SetValue(parameteriKeyDownloadRegistration.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFAccountAddToPlaceholderAsync(string cAccountnum, string cInvestorTaxID, DateTime? dInvestorDOB, int? iKeyModule, int? iKeyRep, string cDataStamp, string cRegistration, string cTable, DateTime? dRecord, int? iCodeStatus, int? iCodeBasisType, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, int? iKeyFile, OutputParameter<int?> iKeyAccount, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyAccount = new SqlParameter
            {
                ParameterName = "iKeyAccount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyAccount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyDownloadRegistration = new SqlParameter
            {
                ParameterName = "iKeyDownloadRegistration",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyDownloadRegistration?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cAccountnum",
                    Size = 24,
                    Value = cAccountnum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cInvestorTaxID",
                    Size = 100,
                    Value = cInvestorTaxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dInvestorDOB",
                    Value = dInvestorDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyRep",
                    Value = iKeyRep ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cRegistration",
                    Size = -1,
                    Value = cRegistration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 25,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKeyAccount,
                parameteriKeyDownloadRegistration,
                new SqlParameter
                {
                    ParameterName = "dRecord",
                    Value = dRecord ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeStatus",
                    Value = iCodeStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeBasisType",
                    Value = iCodeBasisType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyFile",
                    Value = iKeyFile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFAccountAddToPlaceholder] @cAccountnum = @cAccountnum, @cInvestorTaxID = @cInvestorTaxID, @dInvestorDOB = @dInvestorDOB, @iKeyModule = @iKeyModule, @iKeyRep = @iKeyRep, @cDataStamp = @cDataStamp, @cRegistration = @cRegistration, @cTable = @cTable, @iKeyAccount = @iKeyAccount OUTPUT, @iKeyDownloadRegistration = @iKeyDownloadRegistration OUTPUT, @dRecord = @dRecord, @iCodeStatus = @iCodeStatus, @iCodeBasisType = @iCodeBasisType, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @iKeyFile = @iKeyFile", sqlParameters, cancellationToken);

            iKeyAccount.SetValue(parameteriKeyAccount.Value);
            iKeyDownloadRegistration.SetValue(parameteriKeyDownloadRegistration.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFAccountUpdateAsync(int? iKeyModule, Guid? gUidDlf, string cTable, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gUidDlf",
                    Value = gUidDlf ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 25,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFAccountUpdate] @iKeyModule = @iKeyModule, @gUidDlf = @gUidDlf, @cTable = @cTable, @cDataStamp = @cDataStamp, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFAccountUpdateFromBulkProcessAsync(int? iKeyId, int? iKeyModule, string cTable, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyId",
                    Value = iKeyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 25,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFAccountUpdateFromBulkProcess] @iKeyId = @iKeyId, @iKeyModule = @iKeyModule, @cTable = @cTable, @cDataStamp = @cDataStamp, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFAccountUpdateSetAsync(int? ikeyhaha, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyhaha",
                    Value = ikeyhaha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFAccountUpdateSet] @ikeyhaha = @ikeyhaha", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFAddCoverageAsync(int? iOwnerNameKeyID, int? iPrimaryInsuredNameKeyID, int? iKeyPolicy, int? iKeySeries, int? iKeyFundingAccount, string cDataStamp, int? iCodeRecordCreationSource, OutputParameter<int?> iKeyCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyCoverage = new SqlParameter
            {
                ParameterName = "iKeyCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iOwnerNameKeyID",
                    Value = iOwnerNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPrimaryInsuredNameKeyID",
                    Value = iPrimaryInsuredNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyPolicy",
                    Value = iKeyPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeySeries",
                    Value = iKeySeries ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyFundingAccount",
                    Value = iKeyFundingAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRecordCreationSource",
                    Value = iCodeRecordCreationSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriKeyCoverage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFAddCoverage] @iOwnerNameKeyID = @iOwnerNameKeyID, @iPrimaryInsuredNameKeyID = @iPrimaryInsuredNameKeyID, @iKeyPolicy = @iKeyPolicy, @iKeySeries = @iKeySeries, @iKeyFundingAccount = @iKeyFundingAccount, @cDataStamp = @cDataStamp, @iCodeRecordCreationSource = @iCodeRecordCreationSource, @iKeyCoverage = @iKeyCoverage OUTPUT", sqlParameters, cancellationToken);

            iKeyCoverage.SetValue(parameteriKeyCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFAddDownloadInfoNameAsync(string cTaxidInvestor, string cLastname, string cfirstname, string cMiddle, string cPrefix, string cSuffix, bool? bOrganization, int? iCodeGender, int? iCodeNameType, int? iCodeRecordSource, int? iCodeRelationType, DateTime? dDOB, string cDataStamp, int? iKeyDLInfoRegistration, Guid? gUidParty, string cDownloadID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cTaxidInvestor",
                    Size = 100,
                    Value = cTaxidInvestor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cLastname",
                    Size = 60,
                    Value = cLastname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cfirstname",
                    Size = 30,
                    Value = cfirstname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cMiddle",
                    Size = 20,
                    Value = cMiddle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cPrefix",
                    Size = 20,
                    Value = cPrefix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cSuffix",
                    Size = 20,
                    Value = cSuffix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bOrganization",
                    Value = bOrganization ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeGender",
                    Value = iCodeGender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeNameType",
                    Value = iCodeNameType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRecordSource",
                    Value = iCodeRecordSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRelationType",
                    Value = iCodeRelationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dDOB",
                    Value = dDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLInfoRegistration",
                    Value = iKeyDLInfoRegistration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gUidParty",
                    Value = gUidParty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDownloadID",
                    Size = 20,
                    Value = cDownloadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFAddDownloadInfoName] @cTaxidInvestor = @cTaxidInvestor, @cLastname = @cLastname, @cfirstname = @cfirstname, @cMiddle = @cMiddle, @cPrefix = @cPrefix, @cSuffix = @cSuffix, @bOrganization = @bOrganization, @iCodeGender = @iCodeGender, @iCodeNameType = @iCodeNameType, @iCodeRecordSource = @iCodeRecordSource, @iCodeRelationType = @iCodeRelationType, @dDOB = @dDOB, @cDataStamp = @cDataStamp, @iKeyDLInfoRegistration = @iKeyDLInfoRegistration, @gUidParty = @gUidParty, @cDownloadID = @cDownloadID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFAdditionsByFileQueryResult>> sp_DLFAdditionsByFileQueryAsync(int? iKeyFile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyFile",
                    Value = iKeyFile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFAdditionsByFileQueryResult>("EXEC @returnValue = [dbo].[sp_DLFAdditionsByFileQuery] @iKeyFile = @iKeyFile", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFAddNameAsync(int? iKeyProducer1InAA, string cTaxidInvestor, string cLastname, string cfirstname, string cMiddle, string cPrefix, string cSuffix, string cDownloadID, int? iKeyModule, bool? bOrganization, int? iCodeGender, int? iCodeDefaultType, DateTime? dDOB, string cDataStamp, OutputParameter<int?> iKeyAAName, OutputParameter<int?> iKeyAAFlexName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyAAName = new SqlParameter
            {
                ParameterName = "iKeyAAName",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyAAName?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyAAFlexName = new SqlParameter
            {
                ParameterName = "iKeyAAFlexName",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyAAFlexName?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProducer1InAA",
                    Value = iKeyProducer1InAA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTaxidInvestor",
                    Size = 100,
                    Value = cTaxidInvestor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cLastname",
                    Size = 60,
                    Value = cLastname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cfirstname",
                    Size = 30,
                    Value = cfirstname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cMiddle",
                    Size = 20,
                    Value = cMiddle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cPrefix",
                    Size = 20,
                    Value = cPrefix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cSuffix",
                    Size = 20,
                    Value = cSuffix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDownloadID",
                    Size = 20,
                    Value = cDownloadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bOrganization",
                    Value = bOrganization ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeGender",
                    Value = iCodeGender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeDefaultType",
                    Value = iCodeDefaultType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dDOB",
                    Value = dDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameteriKeyAAName,
                parameteriKeyAAFlexName,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFAddName] @iKeyProducer1InAA = @iKeyProducer1InAA, @cTaxidInvestor = @cTaxidInvestor, @cLastname = @cLastname, @cfirstname = @cfirstname, @cMiddle = @cMiddle, @cPrefix = @cPrefix, @cSuffix = @cSuffix, @cDownloadID = @cDownloadID, @iKeyModule = @iKeyModule, @bOrganization = @bOrganization, @iCodeGender = @iCodeGender, @iCodeDefaultType = @iCodeDefaultType, @dDOB = @dDOB, @cDataStamp = @cDataStamp, @iKeyAAName = @iKeyAAName OUTPUT, @iKeyAAFlexName = @iKeyAAFlexName OUTPUT", sqlParameters, cancellationToken);

            iKeyAAName.SetValue(parameteriKeyAAName.Value);
            iKeyAAFlexName.SetValue(parameteriKeyAAFlexName.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFAddNewSecuritiesBySetsResult>> sp_DLFAddNewSecuritiesBySetsAsync(int? iKeyProcess, string cTable, int? ikeyModule, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 50,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyModule",
                    Value = ikeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFAddNewSecuritiesBySetsResult>("EXEC @returnValue = [dbo].[sp_DLFAddNewSecuritiesBySets] @iKeyProcess = @iKeyProcess, @cTable = @cTable, @ikeyModule = @ikeyModule", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFALBPrecheckPositionPricesResult>> sp_DLFALBPrecheckPositionPricesAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFALBPrecheckPositionPricesResult>("EXEC @returnValue = [dbo].[sp_DLFALBPrecheckPositionPrices] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFAlbReplicationPreCheckInvestorsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFAlbReplicationPreCheckInvestors] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFAppendDLFFileAsync(int? KeyID, string Content, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KeyID",
                    Value = KeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Content",
                    Size = -1,
                    Value = Content ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFAppendDLFFile] @KeyID = @KeyID, @Content = @Content", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFAppendDLFFile2Async(int? KeyID, byte[] Content, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KeyID",
                    Value = KeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Content",
                    Size = -1,
                    Value = Content ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFAppendDLFFile2] @KeyID = @KeyID, @Content = @Content", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfAutoAddSecurityResult>> sp_dlfAutoAddSecurityAsync(string cSymbol, string cCusip, string cCusipExt, string cAlternateID, string cTableName, int? iProcessKeyID, string cDataStamp, int? iKeyModule, string cModule, OutputParameter<int?> iKeyOutput, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyOutput = new SqlParameter
            {
                ParameterName = "iKeyOutput",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyOutput?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cSymbol",
                    Size = 26,
                    Value = cSymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCusip",
                    Size = 20,
                    Value = cCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCusipExt",
                    Size = 20,
                    Value = cCusipExt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cAlternateID",
                    Size = 25,
                    Value = cAlternateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cTableName",
                    Size = 20,
                    Value = cTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cModule",
                    Size = 15,
                    Value = cModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameteriKeyOutput,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfAutoAddSecurityResult>("EXEC @returnValue = [dbo].[sp_dlfAutoAddSecurity] @cSymbol = @cSymbol, @cCusip = @cCusip, @cCusipExt = @cCusipExt, @cAlternateID = @cAlternateID, @cTableName = @cTableName, @iProcessKeyID = @iProcessKeyID, @cDataStamp = @cDataStamp, @iKeyModule = @iKeyModule, @cModule = @cModule, @iKeyOutput = @iKeyOutput OUTPUT", sqlParameters, cancellationToken);

            iKeyOutput.SetValue(parameteriKeyOutput.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFBalanceCusipsAndSymbolsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFBalanceCusipsAndSymbols] @ikeyProcess = @ikeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFBulkPositionAccountPreparationAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFBulkPositionAccountPreparation] @iKeyProcess = @iKeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFBulkPositionAddAccountsResult>> sp_DLFBulkPositionAddAccountsAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iTotalToAdd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriTotalToAdd = new SqlParameter
            {
                ParameterName = "iTotalToAdd",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iTotalToAdd?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriTotalToAdd,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFBulkPositionAddAccountsResult>("EXEC @returnValue = [dbo].[sp_DLFBulkPositionAddAccounts] @iKeyProcess = @iKeyProcess, @cDataStamp = @cDataStamp, @iTotalToAdd = @iTotalToAdd OUTPUT", sqlParameters, cancellationToken);

            iTotalToAdd.SetValue(parameteriTotalToAdd.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFBulkPositionAddNvstResult>> sp_DLFBulkPositionAddNvstAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iTotalToAdd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriTotalToAdd = new SqlParameter
            {
                ParameterName = "iTotalToAdd",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iTotalToAdd?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriTotalToAdd,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFBulkPositionAddNvstResult>("EXEC @returnValue = [dbo].[sp_DLFBulkPositionAddNvst] @iKeyProcess = @iKeyProcess, @cDataStamp = @cDataStamp, @iTotalToAdd = @iTotalToAdd OUTPUT", sqlParameters, cancellationToken);

            iTotalToAdd.SetValue(parameteriTotalToAdd.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFBulkPositionAddPositionResult>> sp_DLFBulkPositionAddPositionAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iTotalToAdd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriTotalToAdd = new SqlParameter
            {
                ParameterName = "iTotalToAdd",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iTotalToAdd?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriTotalToAdd,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFBulkPositionAddPositionResult>("EXEC @returnValue = [dbo].[sp_DLFBulkPositionAddPosition] @iKeyProcess = @iKeyProcess, @cDataStamp = @cDataStamp, @iTotalToAdd = @iTotalToAdd OUTPUT", sqlParameters, cancellationToken);

            iTotalToAdd.SetValue(parameteriTotalToAdd.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFBulkPositionAddPriceResult>> sp_DLFBulkPositionAddPriceAsync(int? ikeyProcess, string cDataStamp, OutputParameter<int?> iTotalToAdd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriTotalToAdd = new SqlParameter
            {
                ParameterName = "iTotalToAdd",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iTotalToAdd?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriTotalToAdd,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFBulkPositionAddPriceResult>("EXEC @returnValue = [dbo].[sp_DLFBulkPositionAddPrice] @ikeyProcess = @ikeyProcess, @cDataStamp = @cDataStamp, @iTotalToAdd = @iTotalToAdd OUTPUT", sqlParameters, cancellationToken);

            iTotalToAdd.SetValue(parameteriTotalToAdd.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFBulkPositionCodeKeyChecksResult>> sp_DLFBulkPositionCodeKeyChecksAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFBulkPositionCodeKeyChecksResult>("EXEC @returnValue = [dbo].[sp_DLFBulkPositionCodeKeyChecks] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFBulkPositionNvstPreparationAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFBulkPositionNvstPreparation] @iKeyProcess = @iKeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFBulkPositionPositionPreparationAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFBulkPositionPositionPreparation] @iKeyProcess = @iKeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFBulkPositionPricePreparationAsync(int? ikeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFBulkPositionPricePreparation] @ikeyProcess = @ikeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFBulkPositionReconcileAddResult>> sp_DLFBulkPositionReconcileAddAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFBulkPositionReconcileAddResult>("EXEC @returnValue = [dbo].[sp_DLFBulkPositionReconcileAdd] @iKeyProcess = @iKeyProcess, @cDataStamp = @cDataStamp, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFBulkPositionReconcileCheckForReversalsResult>> sp_DLFBulkPositionReconcileCheckForReversalsAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFBulkPositionReconcileCheckForReversalsResult>("EXEC @returnValue = [dbo].[sp_DLFBulkPositionReconcileCheckForReversals] @iKeyProcess = @iKeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFBulkPositionReconcileCountOutOfBalanceAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFBulkPositionReconcileCountOutOfBalance] @iKeyProcess = @iKeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFBulkPositionReconcileGetPricesResult>> sp_DLFBulkPositionReconcileGetPricesAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFBulkPositionReconcileGetPricesResult>("EXEC @returnValue = [dbo].[sp_DLFBulkPositionReconcileGetPrices] @iKeyProcess = @iKeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFBulkPositionReconcilePreparationAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFBulkPositionReconcilePreparation] @iKeyProcess = @iKeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFBulkPositionReconcileSummPosSharesResult>> sp_DLFBulkPositionReconcileSummPosSharesAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFBulkPositionReconcileSummPosSharesResult>("EXEC @returnValue = [dbo].[sp_DLFBulkPositionReconcileSummPosShares] @iKeyProcess = @iKeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFBulkPositionReconcileSummTransSharesResult>> sp_DLFBulkPositionReconcileSummTransSharesAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFBulkPositionReconcileSummTransSharesResult>("EXEC @returnValue = [dbo].[sp_DLFBulkPositionReconcileSummTransShares] @iKeyProcess = @iKeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFBulkPositionReconcileValidateDatesAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFBulkPositionReconcileValidateDates] @iKeyProcess = @iKeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFBulkPositionSecurityPreparationAsync(int? ikeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFBulkPositionSecurityPreparation] @ikeyProcess = @ikeyProcess, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfBulkPositionStatisticsResult>> sp_dlfBulkPositionStatisticsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfBulkPositionStatisticsResult>("EXEC @returnValue = [dbo].[sp_dlfBulkPositionStatistics] @ikeyProcess = @ikeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFBulkPositionUpdatePositionResult>> sp_DLFBulkPositionUpdatePositionAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iTotalToUpdate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriTotalToUpdate = new SqlParameter
            {
                ParameterName = "iTotalToUpdate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iTotalToUpdate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriTotalToUpdate,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFBulkPositionUpdatePositionResult>("EXEC @returnValue = [dbo].[sp_DLFBulkPositionUpdatePosition] @iKeyProcess = @iKeyProcess, @cDataStamp = @cDataStamp, @iTotalToUpdate = @iTotalToUpdate OUTPUT", sqlParameters, cancellationToken);

            iTotalToUpdate.SetValue(parameteriTotalToUpdate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfBulkPositionUpdateResultsAsync(int? iKeyProcess, bool? bSkipUnrecognizedProducers, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipUnrecognizedProducers",
                    Value = bSkipUnrecognizedProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfBulkPositionUpdateResults] @iKeyProcess = @iKeyProcess, @bSkipUnrecognizedProducers = @bSkipUnrecognizedProducers", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFCashFlowRecordAsync(Guid? gUidTrans, bool? bCreate, int? iKeySourceType, int? iKeyIdSource, int? iKeyAccount, int? iKeyModule, decimal? yPrincipal, decimal? yWithheld, decimal? yAccruedInt, string cSourceCodePrimary, string cSourceCodeSecondary, DateTime? dTransaction, DateTime? dSettle, DateTime? dTransmittal, string cRef, string cRef2, string cDataStamp, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKey = new SqlParameter
            {
                ParameterName = "iKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidTrans",
                    Value = gUidTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "bCreate",
                    Value = bCreate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iKeySourceType",
                    Value = iKeySourceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyIdSource",
                    Value = iKeyIdSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyAccount",
                    Value = iKeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yPrincipal",
                    Precision = 19,
                    Scale = 4,
                    Value = yPrincipal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yWithheld",
                    Precision = 19,
                    Scale = 4,
                    Value = yWithheld ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yAccruedInt",
                    Precision = 19,
                    Scale = 4,
                    Value = yAccruedInt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "cSourceCodePrimary",
                    Size = 10,
                    Value = cSourceCodePrimary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cSourceCodeSecondary",
                    Size = 10,
                    Value = cSourceCodeSecondary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dTransaction",
                    Value = dTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dSettle",
                    Value = dSettle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dTransmittal",
                    Value = dTransmittal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cRef",
                    Size = 20,
                    Value = cRef ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cRef2",
                    Size = 20,
                    Value = cRef2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKey,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFCashFlowRecord] @gUidTrans = @gUidTrans, @bCreate = @bCreate, @iKeySourceType = @iKeySourceType, @iKeyIdSource = @iKeyIdSource, @iKeyAccount = @iKeyAccount, @iKeyModule = @iKeyModule, @yPrincipal = @yPrincipal, @yWithheld = @yWithheld, @yAccruedInt = @yAccruedInt, @cSourceCodePrimary = @cSourceCodePrimary, @cSourceCodeSecondary = @cSourceCodeSecondary, @dTransaction = @dTransaction, @dSettle = @dSettle, @dTransmittal = @dTransmittal, @cRef = @cRef, @cRef2 = @cRef2, @cDataStamp = @cDataStamp, @iKey = @iKey OUTPUT", sqlParameters, cancellationToken);

            iKey.SetValue(parameteriKey.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfCheckCodeKeysAsync(int? iKeyCodeInAA, int? iKeyCodeInDLF, string cCodeType, string cCodeDLF, string cDescriptionDLF, bool? bAutoAdd, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKey = new SqlParameter
            {
                ParameterName = "iKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyCodeInAA",
                    Value = iKeyCodeInAA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCodeInDLF",
                    Value = iKeyCodeInDLF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cCodeType",
                    Size = 12,
                    Value = cCodeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCodeDLF",
                    Size = 12,
                    Value = cCodeDLF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDescriptionDLF",
                    Size = 50,
                    Value = cDescriptionDLF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bAutoAdd",
                    Value = bAutoAdd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameteriKey,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfCheckCodeKeys] @iKeyCodeInAA = @iKeyCodeInAA, @iKeyCodeInDLF = @iKeyCodeInDLF, @cCodeType = @cCodeType, @cCodeDLF = @cCodeDLF, @cDescriptionDLF = @cDescriptionDLF, @bAutoAdd = @bAutoAdd, @iKey = @iKey OUTPUT", sqlParameters, cancellationToken);

            iKey.SetValue(parameteriKey.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfCleanOutOrphanedDLFRecordsResult>> sp_dlfCleanOutOrphanedDLFRecordsAsync(string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 100,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfCleanOutOrphanedDLFRecordsResult>("EXEC @returnValue = [dbo].[sp_dlfCleanOutOrphanedDLFRecords] @cTable = @cTable", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFCleanUpOldFilesAsync(int? iKeyModule, int? iDaysOld, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iDaysOld",
                    Value = iDaysOld ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFCleanUpOldFiles] @iKeyModule = @iKeyModule, @iDaysOld = @iDaysOld", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFCoverageUpdateAsync(int? iKeyCoverage, int? iKeyModule, Guid? gUidDlf, string cTable, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyCoverage",
                    Value = iKeyCoverage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gUidDlf",
                    Value = gUidDlf ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 25,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFCoverageUpdate] @iKeyCoverage = @iKeyCoverage, @iKeyModule = @iKeyModule, @gUidDlf = @gUidDlf, @cTable = @cTable, @cDataStamp = @cDataStamp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLfCreateZeoBalanceDownloadPositionsAsync(int? iCodePositionType, int? iKeyProcess, OutputParameter<bool?> bComplete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbComplete = new SqlParameter
            {
                ParameterName = "bComplete",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bComplete?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCodePositionType",
                    Value = iCodePositionType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbComplete,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLfCreateZeoBalanceDownloadPositions] @iCodePositionType = @iCodePositionType, @iKeyProcess = @iKeyProcess, @bComplete = @bComplete OUTPUT", sqlParameters, cancellationToken);

            bComplete.SetValue(parameterbComplete.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFCreateZeroBalanceCashPositionsResult>> sp_DLFCreateZeroBalanceCashPositionsAsync(int? iCodePositionType, int? iKeyProcess, OutputParameter<bool?> bComplete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbComplete = new SqlParameter
            {
                ParameterName = "bComplete",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bComplete?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCodePositionType",
                    Value = iCodePositionType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbComplete,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFCreateZeroBalanceCashPositionsResult>("EXEC @returnValue = [dbo].[sp_DLFCreateZeroBalanceCashPositions] @iCodePositionType = @iCodePositionType, @iKeyProcess = @iKeyProcess, @bComplete = @bComplete OUTPUT", sqlParameters, cancellationToken);

            bComplete.SetValue(parameterbComplete.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFDeleteAddressesByProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFDeleteAddressesByProcessKey] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfDeleteEmailByProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfDeleteEmailByProcessKey] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFDeletePartyByProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFDeletePartyByProcessKey] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfDeletePhonesByProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfDeletePhonesByProcessKey] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFDeleteRidersByProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFDeleteRidersByProcessKey] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFDSTPrecheckResult>> sp_DLFDSTPrecheckAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFDSTPrecheckResult>("EXEC @returnValue = [dbo].[sp_DLFDSTPrecheck] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DlfDZLUpdateSecurityNamesAsync(int? iProcessKeyID, string cCusip, string cCusipExt, string cDesc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cCusip",
                    Size = 30,
                    Value = cCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCusipExt",
                    Size = 30,
                    Value = cCusipExt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cDesc",
                    Size = 100,
                    Value = cDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DlfDZLUpdateSecurityNames] @iProcessKeyID = @iProcessKeyID, @cCusip = @cCusip, @cCusipExt = @cCusipExt, @cDesc = @cDesc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFEndUserProcessesAsync(int? ikeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyUser",
                    Value = ikeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFEndUserProcesses] @ikeyUser = @ikeyUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DlfFCHChangeInvestmentSecurityAsync(int? iKeyInvestment, int? iKeySecurity, string cDataStamp, int? iKeyModule, int? iKeyTranType, DateTime? dTrandate, int? iKeyPlaceholderSecurity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyInvestment",
                    Value = iKeyInvestment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeySecurity",
                    Value = iKeySecurity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTranType",
                    Value = iKeyTranType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dTrandate",
                    Value = dTrandate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyPlaceholderSecurity",
                    Value = iKeyPlaceholderSecurity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DlfFCHChangeInvestmentSecurity] @iKeyInvestment = @iKeyInvestment, @iKeySecurity = @iKeySecurity, @cDataStamp = @cDataStamp, @iKeyModule = @iKeyModule, @iKeyTranType = @iKeyTranType, @dTrandate = @dTrandate, @iKeyPlaceholderSecurity = @iKeyPlaceholderSecurity", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DlfFCHCheckMoneyMarketPositionResult>> sp_DlfFCHCheckMoneyMarketPositionAsync(Guid? gUidPos, string cDataStamp, string cModule, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidPos",
                    Value = gUidPos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cModule",
                    Size = 15,
                    Value = cModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DlfFCHCheckMoneyMarketPositionResult>("EXEC @returnValue = [dbo].[sp_DlfFCHCheckMoneyMarketPosition] @gUidPos = @gUidPos, @cDataStamp = @cDataStamp, @cModule = @cModule", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DlfFCHCheckMoneyMarketSecurityResult>> sp_DlfFCHCheckMoneyMarketSecurityAsync(int? iProcessKeyID, int? iKeyModule, string cDataStamp, string cModule, OutputParameter<int?> iKeySecurity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeySecurity = new SqlParameter
            {
                ParameterName = "iKeySecurity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeySecurity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cModule",
                    Size = 15,
                    Value = cModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameteriKeySecurity,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DlfFCHCheckMoneyMarketSecurityResult>("EXEC @returnValue = [dbo].[sp_DlfFCHCheckMoneyMarketSecurity] @iProcessKeyID = @iProcessKeyID, @iKeyModule = @iKeyModule, @cDataStamp = @cDataStamp, @cModule = @cModule, @iKeySecurity = @iKeySecurity OUTPUT", sqlParameters, cancellationToken);

            iKeySecurity.SetValue(parameteriKeySecurity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfFchPrecheckMoneyMarketPositionsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfFchPrecheckMoneyMarketPositions] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfFCHUpdateMissingPositionRepsResult>> sp_dlfFCHUpdateMissingPositionRepsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfFCHUpdateMissingPositionRepsResult>("EXEC @returnValue = [dbo].[sp_dlfFCHUpdateMissingPositionReps] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFFCHValidateAccountMoneyFundsAsync(int? ikeyAccount, Guid? gUidPos, int? ikeyProcess, string cAccountNumber, OutputParameter<bool?> bUpdated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbUpdated = new SqlParameter
            {
                ParameterName = "bUpdated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bUpdated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyAccount",
                    Value = ikeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gUidPos",
                    Value = gUidPos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cAccountNumber",
                    Size = 24,
                    Value = cAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterbUpdated,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFFCHValidateAccountMoneyFunds] @ikeyAccount = @ikeyAccount, @gUidPos = @gUidPos, @ikeyProcess = @ikeyProcess, @cAccountNumber = @cAccountNumber, @bUpdated = @bUpdated OUTPUT", sqlParameters, cancellationToken);

            bUpdated.SetValue(parameterbUpdated.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFFCHValidateMoneyMarketNamesResult>> sp_DLFFCHValidateMoneyMarketNamesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFFCHValidateMoneyMarketNamesResult>("EXEC @returnValue = [dbo].[sp_DLFFCHValidateMoneyMarketNames]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFFIDPreProcessSplitReversalsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFFIDPreProcessSplitReversals] @ikeyProcess = @ikeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFFindRegistrationAsync(int? iKeyLink, string cLinkTable, string cNumber, int? iKeyModule, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iKeyPolicy, OutputParameter<int?> iKeyAccount, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyPolicy = new SqlParameter
            {
                ParameterName = "iKeyPolicy",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyPolicy?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyAccount = new SqlParameter
            {
                ParameterName = "iKeyAccount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyAccount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyDownloadRegistration = new SqlParameter
            {
                ParameterName = "iKeyDownloadRegistration",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyDownloadRegistration?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyLink",
                    Value = iKeyLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cLinkTable",
                    Size = 15,
                    Value = cLinkTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNumber",
                    Size = 24,
                    Value = cNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameteriKeyPolicy,
                parameteriKeyAccount,
                parameteriKeyDownloadRegistration,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFFindRegistration] @iKeyLink = @iKeyLink, @cLinkTable = @cLinkTable, @cNumber = @cNumber, @iKeyModule = @iKeyModule, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @iKeyPolicy = @iKeyPolicy OUTPUT, @iKeyAccount = @iKeyAccount OUTPUT, @iKeyDownloadRegistration = @iKeyDownloadRegistration OUTPUT", sqlParameters, cancellationToken);

            iKeyPolicy.SetValue(parameteriKeyPolicy.Value);
            iKeyAccount.SetValue(parameteriKeyAccount.Value);
            iKeyDownloadRegistration.SetValue(parameteriKeyDownloadRegistration.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFFolioFNPrecheckTransactionsResult>> sp_DLFFolioFNPrecheckTransactionsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFFolioFNPrecheckTransactionsResult>("EXEC @returnValue = [dbo].[sp_DLFFolioFNPrecheckTransactions] @ikeyProcess = @ikeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfFoundPlanInAAAsync(string cPlanAbbreviation, string cPlanDescription, OutputParameter<int?> iReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriReturn = new SqlParameter
            {
                ParameterName = "iReturn",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iReturn?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cPlanAbbreviation",
                    Size = 15,
                    Value = cPlanAbbreviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cPlanDescription",
                    Size = 50,
                    Value = cPlanDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriReturn,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfFoundPlanInAA] @cPlanAbbreviation = @cPlanAbbreviation, @cPlanDescription = @cPlanDescription, @iReturn = @iReturn OUTPUT", sqlParameters, cancellationToken);

            iReturn.SetValue(parameteriReturn.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfFoundSecurityInAAAsync(string cSymbol, string cCusip, string cCusipExt, string cAlternateID, OutputParameter<int?> iReturn, OutputParameter<bool?> bFoundInOld, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriReturn = new SqlParameter
            {
                ParameterName = "iReturn",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iReturn?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbFoundInOld = new SqlParameter
            {
                ParameterName = "bFoundInOld",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFoundInOld?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cSymbol",
                    Size = 30,
                    Value = cSymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCusip",
                    Size = 20,
                    Value = cCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCusipExt",
                    Size = 20,
                    Value = cCusipExt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cAlternateID",
                    Size = 25,
                    Value = cAlternateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriReturn,
                parameterbFoundInOld,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfFoundSecurityInAA] @cSymbol = @cSymbol, @cCusip = @cCusip, @cCusipExt = @cCusipExt, @cAlternateID = @cAlternateID, @iReturn = @iReturn OUTPUT, @bFoundInOld = @bFoundInOld OUTPUT", sqlParameters, cancellationToken);

            iReturn.SetValue(parameteriReturn.Value);
            bFoundInOld.SetValue(parameterbFoundInOld.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfGetAccountKeyAsync(string cAccountNum, OutputParameter<int?> iKey, OutputParameter<int?> iProducer1Key, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKey = new SqlParameter
            {
                ParameterName = "iKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriProducer1Key = new SqlParameter
            {
                ParameterName = "iProducer1Key",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProducer1Key?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cAccountNum",
                    Size = 35,
                    Value = cAccountNum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKey,
                parameteriProducer1Key,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfGetAccountKey] @cAccountNum = @cAccountNum, @iKey = @iKey OUTPUT, @iProducer1Key = @iProducer1Key OUTPUT", sqlParameters, cancellationToken);

            iKey.SetValue(parameteriKey.Value);
            iProducer1Key.SetValue(parameteriProducer1Key.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFGetBaseCoverageFromPolicyAsync(Guid? gPolicy, OutputParameter<Guid?> gCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergCoverage = new SqlParameter
            {
                ParameterName = "gCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gPolicy",
                    Value = gPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parametergCoverage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFGetBaseCoverageFromPolicy] @gPolicy = @gPolicy, @gCoverage = @gCoverage OUTPUT", sqlParameters, cancellationToken);

            gCoverage.SetValue(parametergCoverage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DlfGetKeysToProcessResult>> sp_DlfGetKeysToProcessAsync(int? iKeyProcess, string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 50,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DlfGetKeysToProcessResult>("EXEC @returnValue = [dbo].[sp_DlfGetKeysToProcess] @iKeyProcess = @iKeyProcess, @cTable = @cTable", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DlfGetKeysToValidateAccountsResult>> sp_DlfGetKeysToValidateAccountsAsync(int? iKeyProcess, string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 50,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DlfGetKeysToValidateAccountsResult>("EXEC @returnValue = [dbo].[sp_DlfGetKeysToValidateAccounts] @iKeyProcess = @iKeyProcess, @cTable = @cTable", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFGetLastProcessForReportResult>> sp_DLFGetLastProcessForReportAsync(int? ikeyModule, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyModule",
                    Value = ikeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFGetLastProcessForReportResult>("EXEC @returnValue = [dbo].[sp_DLFGetLastProcessForReport] @ikeyModule = @ikeyModule", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfGetNonValidatedAccountCountResult>> sp_dlfGetNonValidatedAccountCountAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfGetNonValidatedAccountCountResult>("EXEC @returnValue = [dbo].[sp_dlfGetNonValidatedAccountCount] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfGetPlansNotFoundResult>> sp_dlfGetPlansNotFoundAsync(int? iProcessKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfGetPlansNotFoundResult>("EXEC @returnValue = [dbo].[sp_dlfGetPlansNotFound] @iProcessKeyID = @iProcessKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfGetPolicyKeyAsync(string cPolicyNumber, int? iKeyProducer, OutputParameter<int?> iKeyPolicy, OutputParameter<int?> iKeyBaseCoverage, OutputParameter<bool?> bMultipleMatchesFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyPolicy = new SqlParameter
            {
                ParameterName = "iKeyPolicy",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyPolicy?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyBaseCoverage = new SqlParameter
            {
                ParameterName = "iKeyBaseCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyBaseCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbMultipleMatchesFound = new SqlParameter
            {
                ParameterName = "bMultipleMatchesFound",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bMultipleMatchesFound?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cPolicyNumber",
                    Size = 35,
                    Value = cPolicyNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer",
                    Value = iKeyProducer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriKeyPolicy,
                parameteriKeyBaseCoverage,
                parameterbMultipleMatchesFound,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfGetPolicyKey] @cPolicyNumber = @cPolicyNumber, @iKeyProducer = @iKeyProducer, @iKeyPolicy = @iKeyPolicy OUTPUT, @iKeyBaseCoverage = @iKeyBaseCoverage OUTPUT, @bMultipleMatchesFound = @bMultipleMatchesFound OUTPUT", sqlParameters, cancellationToken);

            iKeyPolicy.SetValue(parameteriKeyPolicy.Value);
            iKeyBaseCoverage.SetValue(parameteriKeyBaseCoverage.Value);
            bMultipleMatchesFound.SetValue(parameterbMultipleMatchesFound.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFGetPriceKeysToProcessAsync(string cTableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cTableName",
                    Size = 30,
                    Value = cTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFGetPriceKeysToProcess] @cTableName = @cTableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFGetProcessReportStatsResult>> sp_DLFGetProcessReportStatsAsync(int? ikeyProcess, string cReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cReturn",
                    Size = 10,
                    Value = cReturn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFGetProcessReportStatsResult>("EXEC @returnValue = [dbo].[sp_DLFGetProcessReportStats] @ikeyProcess = @ikeyProcess, @cReturn = @cReturn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfGetRepCodesNotFoundResult>> sp_dlfGetRepCodesNotFoundAsync(int? iKeyBatch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyBatch",
                    Value = iKeyBatch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfGetRepCodesNotFoundResult>("EXEC @returnValue = [dbo].[sp_dlfGetRepCodesNotFound] @iKeyBatch = @iKeyBatch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFIBrokePrecheckTransactionsResult>> sp_DLFIBrokePrecheckTransactionsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFIBrokePrecheckTransactionsResult>("EXEC @returnValue = [dbo].[sp_DLFIBrokePrecheckTransactions] @ikeyProcess = @ikeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFInitProcessKeyResult>> sp_DLFInitProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFInitProcessKeyResult>("EXEC @returnValue = [dbo].[sp_DLFInitProcessKey] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DlfLinkUpTransactionsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DlfLinkUpTransactions] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFLocateAndCancelTransactionAsync(int? iKeyCancelingTrans, string cCanceledTransactionRefID, int? iShareFlow, string cDataStamp, OutputParameter<int?> iKeyCancelledTransaction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyCancelledTransaction = new SqlParameter
            {
                ParameterName = "iKeyCancelledTransaction",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyCancelledTransaction?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyCancelingTrans",
                    Value = iKeyCancelingTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cCanceledTransactionRefID",
                    Size = 25,
                    Value = cCanceledTransactionRefID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iShareFlow",
                    Value = iShareFlow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKeyCancelledTransaction,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFLocateAndCancelTransaction] @iKeyCancelingTrans = @iKeyCancelingTrans, @cCanceledTransactionRefID = @cCanceledTransactionRefID, @iShareFlow = @iShareFlow, @cDataStamp = @cDataStamp, @iKeyCancelledTransaction = @iKeyCancelledTransaction OUTPUT", sqlParameters, cancellationToken);

            iKeyCancelledTransaction.SetValue(parameteriKeyCancelledTransaction.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFLPLPrecheckCashTransactionsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFLPLPrecheckCashTransactions]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfModulePreProcessSecurityResult>> sp_dlfModulePreProcessSecurityAsync(string cSymbol, string cCusip, string cCusipExt, string cAlternateID, string cModule, string cDataStamp, OutputParameter<int?> iKey, OutputParameter<bool?> bFoundInOld, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKey = new SqlParameter
            {
                ParameterName = "iKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbFoundInOld = new SqlParameter
            {
                ParameterName = "bFoundInOld",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFoundInOld?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cSymbol",
                    Size = 30,
                    Value = cSymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCusip",
                    Size = 25,
                    Value = cCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCusipExt",
                    Size = 20,
                    Value = cCusipExt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAlternateID",
                    Size = 25,
                    Value = cAlternateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cModule",
                    Size = 15,
                    Value = cModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKey,
                parameterbFoundInOld,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfModulePreProcessSecurityResult>("EXEC @returnValue = [dbo].[sp_dlfModulePreProcessSecurity] @cSymbol = @cSymbol, @cCusip = @cCusip, @cCusipExt = @cCusipExt, @cAlternateID = @cAlternateID, @cModule = @cModule, @cDataStamp = @cDataStamp, @iKey = @iKey OUTPUT, @bFoundInOld = @bFoundInOld OUTPUT", sqlParameters, cancellationToken);

            iKey.SetValue(parameteriKey.Value);
            bFoundInOld.SetValue(parameterbFoundInOld.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFNewBizUpdateAsync(int? iKeyCoverage, Guid? gUidNewBiz, string cDataStamp, OutputParameter<bool?> bNewBizAdded, OutputParameter<int?> iProcessResult, OutputParameter<int?> iKeyNewBiz, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbNewBizAdded = new SqlParameter
            {
                ParameterName = "bNewBizAdded",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNewBizAdded?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriProcessResult = new SqlParameter
            {
                ParameterName = "iProcessResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyNewBiz = new SqlParameter
            {
                ParameterName = "iKeyNewBiz",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyNewBiz?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyCoverage",
                    Value = iKeyCoverage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gUidNewBiz",
                    Value = gUidNewBiz ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterbNewBizAdded,
                parameteriProcessResult,
                parameteriKeyNewBiz,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFNewBizUpdate] @iKeyCoverage = @iKeyCoverage, @gUidNewBiz = @gUidNewBiz, @cDataStamp = @cDataStamp, @bNewBizAdded = @bNewBizAdded OUTPUT, @iProcessResult = @iProcessResult OUTPUT, @iKeyNewBiz = @iKeyNewBiz OUTPUT", sqlParameters, cancellationToken);

            bNewBizAdded.SetValue(parameterbNewBizAdded.Value);
            iProcessResult.SetValue(parameteriProcessResult.Value);
            iKeyNewBiz.SetValue(parameteriKeyNewBiz.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFNLGPrecheckPartiesResult>> sp_DLFNLGPrecheckPartiesAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFNLGPrecheckPartiesResult>("EXEC @returnValue = [dbo].[sp_DLFNLGPrecheckParties] @ikeyProcess = @ikeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFNvstUpdateFromBulkProcessAsync(int? iKeyAccount, int? iKeySymbol, int? iKeyid, string cTableName, string cDataStamp, int? iKeyModule, int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyAccount",
                    Value = iKeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeySymbol",
                    Value = iKeySymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyid",
                    Value = iKeyid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTableName",
                    Size = 25,
                    Value = cTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFNvstUpdateFromBulkProcess] @iKeyAccount = @iKeyAccount, @iKeySymbol = @iKeySymbol, @iKeyid = @iKeyid, @cTableName = @cTableName, @cDataStamp = @cDataStamp, @iKeyModule = @iKeyModule, @iKeyNvst = @iKeyNvst", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPolicyAddToNameAsync(int? iOwnerKeyID, string cOwnerTaxID, DateTime? dOwnerDOB, int? iPrimaryInsuredKeyID, int? iKeyModule, int? iKeyRep, string cDataStamp, string cRegistration, string cTable, Guid? gDLF, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iKeyPolicy, OutputParameter<int?> iKeyBaseCoverage, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyPolicy = new SqlParameter
            {
                ParameterName = "iKeyPolicy",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyPolicy?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyBaseCoverage = new SqlParameter
            {
                ParameterName = "iKeyBaseCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyBaseCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyDownloadRegistration = new SqlParameter
            {
                ParameterName = "iKeyDownloadRegistration",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyDownloadRegistration?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iOwnerKeyID",
                    Value = iOwnerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cOwnerTaxID",
                    Size = 100,
                    Value = cOwnerTaxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dOwnerDOB",
                    Value = dOwnerDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iPrimaryInsuredKeyID",
                    Value = iPrimaryInsuredKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyRep",
                    Value = iKeyRep ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cRegistration",
                    Size = -1,
                    Value = cRegistration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 25,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "gDLF",
                    Value = gDLF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameteriKeyPolicy,
                parameteriKeyBaseCoverage,
                parameteriKeyDownloadRegistration,
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPolicyAddToName] @iOwnerKeyID = @iOwnerKeyID, @cOwnerTaxID = @cOwnerTaxID, @dOwnerDOB = @dOwnerDOB, @iPrimaryInsuredKeyID = @iPrimaryInsuredKeyID, @iKeyModule = @iKeyModule, @iKeyRep = @iKeyRep, @cDataStamp = @cDataStamp, @cRegistration = @cRegistration, @cTable = @cTable, @gDLF = @gDLF, @iKeyPolicy = @iKeyPolicy OUTPUT, @iKeyBaseCoverage = @iKeyBaseCoverage OUTPUT, @iKeyDownloadRegistration = @iKeyDownloadRegistration OUTPUT, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules", sqlParameters, cancellationToken);

            iKeyPolicy.SetValue(parameteriKeyPolicy.Value);
            iKeyBaseCoverage.SetValue(parameteriKeyBaseCoverage.Value);
            iKeyDownloadRegistration.SetValue(parameteriKeyDownloadRegistration.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPolicyAddToPlaceholderAsync(int? iKeyModule, int? iKeyRep, string cDataStamp, string cRegistration, string cOwnerTaxID, DateTime? dOwnerDOB, string cTable, Guid? gDLF, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iKeyPolicy, OutputParameter<int?> iKeyBaseCoverage, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int?> iKeyPolicyPlaceholderNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyPolicy = new SqlParameter
            {
                ParameterName = "iKeyPolicy",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyPolicy?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyBaseCoverage = new SqlParameter
            {
                ParameterName = "iKeyBaseCoverage",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyBaseCoverage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyDownloadRegistration = new SqlParameter
            {
                ParameterName = "iKeyDownloadRegistration",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyDownloadRegistration?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyPolicyPlaceholderNameKeyID = new SqlParameter
            {
                ParameterName = "iKeyPolicyPlaceholderNameKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyPolicyPlaceholderNameKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyRep",
                    Value = iKeyRep ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cRegistration",
                    Size = -1,
                    Value = cRegistration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOwnerTaxID",
                    Size = 100,
                    Value = cOwnerTaxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dOwnerDOB",
                    Value = dOwnerDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 25,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "gDLF",
                    Value = gDLF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameteriKeyPolicy,
                parameteriKeyBaseCoverage,
                parameteriKeyDownloadRegistration,
                parameteriKeyPolicyPlaceholderNameKeyID,
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPolicyAddToPlaceholder] @iKeyModule = @iKeyModule, @iKeyRep = @iKeyRep, @cDataStamp = @cDataStamp, @cRegistration = @cRegistration, @cOwnerTaxID = @cOwnerTaxID, @dOwnerDOB = @dOwnerDOB, @cTable = @cTable, @gDLF = @gDLF, @iKeyPolicy = @iKeyPolicy OUTPUT, @iKeyBaseCoverage = @iKeyBaseCoverage OUTPUT, @iKeyDownloadRegistration = @iKeyDownloadRegistration OUTPUT, @iKeyPolicyPlaceholderNameKeyID = @iKeyPolicyPlaceholderNameKeyID OUTPUT, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules", sqlParameters, cancellationToken);

            iKeyPolicy.SetValue(parameteriKeyPolicy.Value);
            iKeyBaseCoverage.SetValue(parameteriKeyBaseCoverage.Value);
            iKeyDownloadRegistration.SetValue(parameteriKeyDownloadRegistration.Value);
            iKeyPolicyPlaceholderNameKeyID.SetValue(parameteriKeyPolicyPlaceholderNameKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPolicyPositionUpdateAsync(int? iKeyCoverage, int? iKeyModule, string cDataStamp, DateTime? dPosition, decimal? yCashValue, decimal? yPremiumPaidToDate, decimal? ySurrenderCharge, decimal? ySurrenderValue, decimal? yLoanAmount, decimal? yLoanMax, DateTime? dPremiumPaidThru, OutputParameter<int?> iPositionKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriPositionKeyID = new SqlParameter
            {
                ParameterName = "iPositionKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iPositionKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyCoverage",
                    Value = iKeyCoverage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "dPosition",
                    Value = dPosition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "yCashValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yCashValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yPremiumPaidToDate",
                    Precision = 19,
                    Scale = 4,
                    Value = yPremiumPaidToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ySurrenderCharge",
                    Precision = 19,
                    Scale = 4,
                    Value = ySurrenderCharge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ySurrenderValue",
                    Precision = 19,
                    Scale = 4,
                    Value = ySurrenderValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yLoanAmount",
                    Precision = 19,
                    Scale = 4,
                    Value = yLoanAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yLoanMax",
                    Precision = 19,
                    Scale = 4,
                    Value = yLoanMax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "dPremiumPaidThru",
                    Value = dPremiumPaidThru ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameteriPositionKeyID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPolicyPositionUpdate] @iKeyCoverage = @iKeyCoverage, @iKeyModule = @iKeyModule, @cDataStamp = @cDataStamp, @dPosition = @dPosition, @yCashValue = @yCashValue, @yPremiumPaidToDate = @yPremiumPaidToDate, @ySurrenderCharge = @ySurrenderCharge, @ySurrenderValue = @ySurrenderValue, @yLoanAmount = @yLoanAmount, @yLoanMax = @yLoanMax, @dPremiumPaidThru = @dPremiumPaidThru, @iPositionKeyID = @iPositionKeyID OUTPUT", sqlParameters, cancellationToken);

            iPositionKeyID.SetValue(parameteriPositionKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPolicyUpdateAsync(int? iKeyPolicy, int? iKeyModule, Guid? gUidDlf, string cTable, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iKeyFundingAccountOutput, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyFundingAccountOutput = new SqlParameter
            {
                ParameterName = "iKeyFundingAccountOutput",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyFundingAccountOutput?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyPolicy",
                    Value = iKeyPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gUidDlf",
                    Value = gUidDlf ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 25,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKeyFundingAccountOutput,
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPolicyUpdate] @iKeyPolicy = @iKeyPolicy, @iKeyModule = @iKeyModule, @gUidDlf = @gUidDlf, @cTable = @cTable, @cDataStamp = @cDataStamp, @iKeyFundingAccountOutput = @iKeyFundingAccountOutput OUTPUT, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules", sqlParameters, cancellationToken);

            iKeyFundingAccountOutput.SetValue(parameteriKeyFundingAccountOutput.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfPopulateAccountKeysResult>> sp_dlfPopulateAccountKeysAsync(int? iKeyBatch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyBatch",
                    Value = iKeyBatch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfPopulateAccountKeysResult>("EXEC @returnValue = [dbo].[sp_dlfPopulateAccountKeys] @iKeyBatch = @iKeyBatch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPopulateAccountKeysByGroupAsync(string cAccount1, string cAccount2, string cAccount3, string cAccount4, string cAccount5, string cAccount6, string cAccount7, string cAccount8, string cAccount9, string cAccount10, int? iKeyProcess, OutputParameter<int?> iAccountsNotFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriAccountsNotFound = new SqlParameter
            {
                ParameterName = "iAccountsNotFound",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iAccountsNotFound?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cAccount1",
                    Size = 24,
                    Value = cAccount1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAccount2",
                    Size = 24,
                    Value = cAccount2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAccount3",
                    Size = 24,
                    Value = cAccount3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAccount4",
                    Size = 24,
                    Value = cAccount4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAccount5",
                    Size = 24,
                    Value = cAccount5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAccount6",
                    Size = 24,
                    Value = cAccount6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAccount7",
                    Size = 24,
                    Value = cAccount7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAccount8",
                    Size = 24,
                    Value = cAccount8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAccount9",
                    Size = 24,
                    Value = cAccount9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAccount10",
                    Size = 24,
                    Value = cAccount10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriAccountsNotFound,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPopulateAccountKeysByGroup] @cAccount1 = @cAccount1, @cAccount2 = @cAccount2, @cAccount3 = @cAccount3, @cAccount4 = @cAccount4, @cAccount5 = @cAccount5, @cAccount6 = @cAccount6, @cAccount7 = @cAccount7, @cAccount8 = @cAccount8, @cAccount9 = @cAccount9, @cAccount10 = @cAccount10, @iKeyProcess = @iKeyProcess, @iAccountsNotFound = @iAccountsNotFound OUTPUT", sqlParameters, cancellationToken);

            iAccountsNotFound.SetValue(parameteriAccountsNotFound.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPopulateAccountKeysOneRecordAsync(int? iProcessKeyID, string cAccount, OutputParameter<bool?> bAccountOkay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbAccountOkay = new SqlParameter
            {
                ParameterName = "bAccountOkay",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bAccountOkay?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cAccount",
                    Size = 35,
                    Value = cAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterbAccountOkay,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPopulateAccountKeysOneRecord] @iProcessKeyID = @iProcessKeyID, @cAccount = @cAccount, @bAccountOkay = @bAccountOkay OUTPUT", sqlParameters, cancellationToken);

            bAccountOkay.SetValue(parameterbAccountOkay.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DlfPopulateEmptyProducerReferencesResult>> sp_DlfPopulateEmptyProducerReferencesAsync(int? ikeyProcess, int? ikeyBlankProducer, int? iStep, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyBlankProducer",
                    Value = ikeyBlankProducer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iStep",
                    Value = iStep ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DlfPopulateEmptyProducerReferencesResult>("EXEC @returnValue = [dbo].[sp_DlfPopulateEmptyProducerReferences] @ikeyProcess = @ikeyProcess, @ikeyBlankProducer = @ikeyBlankProducer, @iStep = @iStep", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfPopulatePlanKeysOneRecordAsync(int? iProcessKeyID, string cTableName, string cDataStamp, string cModule, string cPlanAbbreviation, string cPlanDescription, int? iKeyModule, OutputParameter<bool?> bPlanOK, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbPlanOK = new SqlParameter
            {
                ParameterName = "bPlanOK",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bPlanOK?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTableName",
                    Size = 20,
                    Value = cTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cModule",
                    Size = 15,
                    Value = cModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cPlanAbbreviation",
                    Size = 15,
                    Value = cPlanAbbreviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cPlanDescription",
                    Size = 50,
                    Value = cPlanDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbPlanOK,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfPopulatePlanKeysOneRecord] @iProcessKeyID = @iProcessKeyID, @cTableName = @cTableName, @cDataStamp = @cDataStamp, @cModule = @cModule, @cPlanAbbreviation = @cPlanAbbreviation, @cPlanDescription = @cPlanDescription, @iKeyModule = @iKeyModule, @bPlanOK = @bPlanOK OUTPUT", sqlParameters, cancellationToken);

            bPlanOK.SetValue(parameterbPlanOK.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPopulatePolicyKeysOneRecordAsync(int? iProcessKeyID, string cPolicyNumber, int? iProducerReferenceKeyID, int? iProducerKeyIDPassedIn, OutputParameter<bool?> bPolicyOkay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbPolicyOkay = new SqlParameter
            {
                ParameterName = "bPolicyOkay",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bPolicyOkay?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cPolicyNumber",
                    Size = 35,
                    Value = cPolicyNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerReferenceKeyID",
                    Value = iProducerReferenceKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iProducerKeyIDPassedIn",
                    Value = iProducerKeyIDPassedIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbPolicyOkay,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPopulatePolicyKeysOneRecord] @iProcessKeyID = @iProcessKeyID, @cPolicyNumber = @cPolicyNumber, @iProducerReferenceKeyID = @iProducerReferenceKeyID, @iProducerKeyIDPassedIn = @iProducerKeyIDPassedIn, @bPolicyOkay = @bPolicyOkay OUTPUT", sqlParameters, cancellationToken);

            bPolicyOkay.SetValue(parameterbPolicyOkay.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPopulateProducerKeysAsync(int? ikeyProcess, bool? bAutoAddProducer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bAutoAddProducer",
                    Value = bAutoAddProducer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPopulateProducerKeys] @ikeyProcess = @ikeyProcess, @bAutoAddProducer = @bAutoAddProducer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfPopulateProducerKeysOneSetAsync(int? iProcessKeyID, string cRepCode, bool? bAutoAddProducers, string cRepNameForAdding, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cRepCode",
                    Size = 20,
                    Value = cRepCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bAutoAddProducers",
                    Value = bAutoAddProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cRepNameForAdding",
                    Size = 50,
                    Value = cRepNameForAdding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfPopulateProducerKeysOneSet] @iProcessKeyID = @iProcessKeyID, @cRepCode = @cRepCode, @bAutoAddProducers = @bAutoAddProducers, @cRepNameForAdding = @cRepNameForAdding", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPopulateSecurityKeysGroupResult>> sp_DLFPopulateSecurityKeysGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, int? iKeyModule, string cDataStamp, string cModuleStamp, int? iKeyProcess, string cTableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyDLF1",
                    Value = iKeyDLF1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF2",
                    Value = iKeyDLF2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF3",
                    Value = iKeyDLF3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF4",
                    Value = iKeyDLF4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF5",
                    Value = iKeyDLF5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF6",
                    Value = iKeyDLF6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF7",
                    Value = iKeyDLF7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF8",
                    Value = iKeyDLF8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF9",
                    Value = iKeyDLF9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF10",
                    Value = iKeyDLF10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cModuleStamp",
                    Size = 12,
                    Value = cModuleStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTableName",
                    Size = 40,
                    Value = cTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPopulateSecurityKeysGroupResult>("EXEC @returnValue = [dbo].[sp_DLFPopulateSecurityKeysGroup] @iKeyDLF1 = @iKeyDLF1, @iKeyDLF2 = @iKeyDLF2, @iKeyDLF3 = @iKeyDLF3, @iKeyDLF4 = @iKeyDLF4, @iKeyDLF5 = @iKeyDLF5, @iKeyDLF6 = @iKeyDLF6, @iKeyDLF7 = @iKeyDLF7, @iKeyDLF8 = @iKeyDLF8, @iKeyDLF9 = @iKeyDLF9, @iKeyDLF10 = @iKeyDLF10, @iKeyModule = @iKeyModule, @cDataStamp = @cDataStamp, @cModuleStamp = @cModuleStamp, @iKeyProcess = @iKeyProcess, @cTableName = @cTableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfPopulateSecurityKeysOneRecordResult>> sp_dlfPopulateSecurityKeysOneRecordAsync(int? iProcessKeyID, string cTableName, string cDataStamp, string cModule, string cSymbol, string cCusip, string cExt, string cID, int? iKeyModule, OutputParameter<bool?> bSecurityOK, OutputParameter<int?> iKeySecurity, OutputParameter<bool?> bFoundInOld, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbSecurityOK = new SqlParameter
            {
                ParameterName = "bSecurityOK",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bSecurityOK?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriKeySecurity = new SqlParameter
            {
                ParameterName = "iKeySecurity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeySecurity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbFoundInOld = new SqlParameter
            {
                ParameterName = "bFoundInOld",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFoundInOld?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTableName",
                    Size = 20,
                    Value = cTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cModule",
                    Size = 15,
                    Value = cModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cSymbol",
                    Size = 30,
                    Value = cSymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCusip",
                    Size = 25,
                    Value = cCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cExt",
                    Size = 25,
                    Value = cExt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cID",
                    Size = 30,
                    Value = cID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbSecurityOK,
                parameteriKeySecurity,
                parameterbFoundInOld,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfPopulateSecurityKeysOneRecordResult>("EXEC @returnValue = [dbo].[sp_dlfPopulateSecurityKeysOneRecord] @iProcessKeyID = @iProcessKeyID, @cTableName = @cTableName, @cDataStamp = @cDataStamp, @cModule = @cModule, @cSymbol = @cSymbol, @cCusip = @cCusip, @cExt = @cExt, @cID = @cID, @iKeyModule = @iKeyModule, @bSecurityOK = @bSecurityOK OUTPUT, @iKeySecurity = @iKeySecurity OUTPUT, @bFoundInOld = @bFoundInOld OUTPUT", sqlParameters, cancellationToken);

            bSecurityOK.SetValue(parameterbSecurityOK.Value);
            iKeySecurity.SetValue(parameteriKeySecurity.Value);
            bFoundInOld.SetValue(parameterbFoundInOld.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPositionAccountUpdateSetResult>> sp_DLFPositionAccountUpdateSetAsync(int? iKeyProcess, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPositionAccountUpdateSetResult>("EXEC @returnValue = [dbo].[sp_DLFPositionAccountUpdateSet] @iKeyProcess = @iKeyProcess, @cDataStamp = @cDataStamp, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPositionInvestmentUpdateSetResult>> sp_DLFPositionInvestmentUpdateSetAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPositionInvestmentUpdateSetResult>("EXEC @returnValue = [dbo].[sp_DLFPositionInvestmentUpdateSet] @iKeyProcess = @iKeyProcess, @cDataStamp = @cDataStamp, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPositionSecurityUpdateSetResult>> sp_DLFPositionSecurityUpdateSetAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCount = new SqlParameter
            {
                ParameterName = "iCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPositionSecurityUpdateSetResult>("EXEC @returnValue = [dbo].[sp_DLFPositionSecurityUpdateSet] @iKeyProcess = @iKeyProcess, @cDataStamp = @cDataStamp, @iCount = @iCount OUTPUT", sqlParameters, cancellationToken);

            iCount.SetValue(parameteriCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPreCheckAccruedInterestAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPreCheckAccruedInterest] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DlfPreValidateProducersResult>> sp_DlfPreValidateProducersAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DlfPreValidateProducersResult>("EXEC @returnValue = [dbo].[sp_DlfPreValidateProducers] @ikeyProcess = @ikeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPrsPopulateFundResult>> sp_DLFPrsPopulateFundAsync(int? iProcessKeyID, string cFundId, string cMgrCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cFundId",
                    Size = 10,
                    Value = cFundId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cMgrCode",
                    Size = 10,
                    Value = cMgrCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPrsPopulateFundResult>("EXEC @returnValue = [dbo].[sp_DLFPrsPopulateFund] @iProcessKeyID = @iProcessKeyID, @cFundId = @cFundId, @cMgrCode = @cMgrCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPrsProcessMatrixAsync(int? iProcessKeyID, string cMatrixCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cMatrixCode",
                    Size = 5,
                    Value = cMatrixCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPrsProcessMatrix] @iProcessKeyID = @iProcessKeyID, @cMatrixCode = @cMatrixCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPushBalanceGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, string cModuleStamp, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedAccountsCreated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResultException = new SqlParameter
            {
                ParameterName = "iProcessResultException",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultException?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriProcessResultNeedsAttention = new SqlParameter
            {
                ParameterName = "iProcessResultNeedsAttention",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultNeedsAttention?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriprocessResultProcessed = new SqlParameter
            {
                ParameterName = "iprocessResultProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iprocessResultProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriUnassignedAccountsCreated = new SqlParameter
            {
                ParameterName = "iUnassignedAccountsCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iUnassignedAccountsCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyDLF1",
                    Value = iKeyDLF1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF2",
                    Value = iKeyDLF2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF3",
                    Value = iKeyDLF3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF4",
                    Value = iKeyDLF4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF5",
                    Value = iKeyDLF5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF6",
                    Value = iKeyDLF6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF7",
                    Value = iKeyDLF7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF8",
                    Value = iKeyDLF8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF9",
                    Value = iKeyDLF9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF10",
                    Value = iKeyDLF10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cModuleStamp",
                    Size = 10,
                    Value = cModuleStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriProcessResultException,
                parameteriProcessResultNeedsAttention,
                parameteriprocessResultProcessed,
                parameteriUnassignedAccountsCreated,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPushBalanceGroup] @iKeyDLF1 = @iKeyDLF1, @iKeyDLF2 = @iKeyDLF2, @iKeyDLF3 = @iKeyDLF3, @iKeyDLF4 = @iKeyDLF4, @iKeyDLF5 = @iKeyDLF5, @iKeyDLF6 = @iKeyDLF6, @iKeyDLF7 = @iKeyDLF7, @iKeyDLF8 = @iKeyDLF8, @iKeyDLF9 = @iKeyDLF9, @iKeyDLF10 = @iKeyDLF10, @cDataStamp = @cDataStamp, @cModuleStamp = @cModuleStamp, @iProcessResultException = @iProcessResultException OUTPUT, @iProcessResultNeedsAttention = @iProcessResultNeedsAttention OUTPUT, @iprocessResultProcessed = @iprocessResultProcessed OUTPUT, @iUnassignedAccountsCreated = @iUnassignedAccountsCreated OUTPUT", sqlParameters, cancellationToken);

            iProcessResultException.SetValue(parameteriProcessResultException.Value);
            iProcessResultNeedsAttention.SetValue(parameteriProcessResultNeedsAttention.Value);
            iprocessResultProcessed.SetValue(parameteriprocessResultProcessed.Value);
            iUnassignedAccountsCreated.SetValue(parameteriUnassignedAccountsCreated.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPushOneBalanceAsync(Guid? gUidBal, string cDataStamp, string cModuleStamp, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bUnassignedAccountCreated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResult = new SqlParameter
            {
                ParameterName = "iProcessResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbUnassignedAccountCreated = new SqlParameter
            {
                ParameterName = "bUnassignedAccountCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bUnassignedAccountCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidBal",
                    Value = gUidBal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cModuleStamp",
                    Size = 10,
                    Value = cModuleStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriProcessResult,
                parameterbUnassignedAccountCreated,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPushOneBalance] @gUidBal = @gUidBal, @cDataStamp = @cDataStamp, @cModuleStamp = @cModuleStamp, @iProcessResult = @iProcessResult OUTPUT, @bUnassignedAccountCreated = @bUnassignedAccountCreated OUTPUT", sqlParameters, cancellationToken);

            iProcessResult.SetValue(parameteriProcessResult.Value);
            bUnassignedAccountCreated.SetValue(parameterbUnassignedAccountCreated.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPushOnePolicyAsync(Guid? gUidPolicy, string cDataStamp, bool? bAddPolicyOwner, bool? bAddPolicyParties, int? iCodeNameTypeForAddedNames, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bUnassignedPolicyCreated, OutputParameter<int?> iCoveragesProcessed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResult = new SqlParameter
            {
                ParameterName = "iProcessResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbUnassignedPolicyCreated = new SqlParameter
            {
                ParameterName = "bUnassignedPolicyCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bUnassignedPolicyCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriCoveragesProcessed = new SqlParameter
            {
                ParameterName = "iCoveragesProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCoveragesProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidPolicy",
                    Value = gUidPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bAddPolicyOwner",
                    Value = bAddPolicyOwner ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bAddPolicyParties",
                    Value = bAddPolicyParties ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeNameTypeForAddedNames",
                    Value = iCodeNameTypeForAddedNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriProcessResult,
                parameterbUnassignedPolicyCreated,
                parameteriCoveragesProcessed,
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipUnrecognizedProducers",
                    Value = bSkipUnrecognizedProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPushOnePolicy] @gUidPolicy = @gUidPolicy, @cDataStamp = @cDataStamp, @bAddPolicyOwner = @bAddPolicyOwner, @bAddPolicyParties = @bAddPolicyParties, @iCodeNameTypeForAddedNames = @iCodeNameTypeForAddedNames, @iProcessResult = @iProcessResult OUTPUT, @bUnassignedPolicyCreated = @bUnassignedPolicyCreated OUTPUT, @iCoveragesProcessed = @iCoveragesProcessed OUTPUT, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @bSkipUnrecognizedProducers = @bSkipUnrecognizedProducers", sqlParameters, cancellationToken);

            iProcessResult.SetValue(parameteriProcessResult.Value);
            bUnassignedPolicyCreated.SetValue(parameterbUnassignedPolicyCreated.Value);
            iCoveragesProcessed.SetValue(parameteriCoveragesProcessed.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPushOnePolicyPositionAsync(Guid? gUidPosition, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bUnassignedPolicyCreated, OutputParameter<int?> iPolicyKeyID, OutputParameter<int?> iCoverageKeyID, OutputParameter<int?> iPositionKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResult = new SqlParameter
            {
                ParameterName = "iProcessResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbUnassignedPolicyCreated = new SqlParameter
            {
                ParameterName = "bUnassignedPolicyCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bUnassignedPolicyCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriPolicyKeyID = new SqlParameter
            {
                ParameterName = "iPolicyKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iPolicyKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriCoverageKeyID = new SqlParameter
            {
                ParameterName = "iCoverageKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCoverageKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriPositionKeyID = new SqlParameter
            {
                ParameterName = "iPositionKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iPositionKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidPosition",
                    Value = gUidPosition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriProcessResult,
                parameterbUnassignedPolicyCreated,
                parameteriPolicyKeyID,
                parameteriCoverageKeyID,
                parameteriPositionKeyID,
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipUnrecognizedProducers",
                    Value = bSkipUnrecognizedProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPushOnePolicyPosition] @gUidPosition = @gUidPosition, @cDataStamp = @cDataStamp, @iProcessResult = @iProcessResult OUTPUT, @bUnassignedPolicyCreated = @bUnassignedPolicyCreated OUTPUT, @iPolicyKeyID = @iPolicyKeyID OUTPUT, @iCoverageKeyID = @iCoverageKeyID OUTPUT, @iPositionKeyID = @iPositionKeyID OUTPUT, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @bSkipUnrecognizedProducers = @bSkipUnrecognizedProducers", sqlParameters, cancellationToken);

            iProcessResult.SetValue(parameteriProcessResult.Value);
            bUnassignedPolicyCreated.SetValue(parameterbUnassignedPolicyCreated.Value);
            iPolicyKeyID.SetValue(parameteriPolicyKeyID.Value);
            iCoverageKeyID.SetValue(parameteriCoverageKeyID.Value);
            iPositionKeyID.SetValue(parameteriPositionKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPushOnePositionResult>> sp_DLFPushOnePositionAsync(Guid? gUidPos, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bUnassignedAccountCreated, OutputParameter<int?> iKeyNvst, OutputParameter<bool?> bPriceProcessed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResult = new SqlParameter
            {
                ParameterName = "iProcessResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbUnassignedAccountCreated = new SqlParameter
            {
                ParameterName = "bUnassignedAccountCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bUnassignedAccountCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriKeyNvst = new SqlParameter
            {
                ParameterName = "iKeyNvst",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyNvst?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbPriceProcessed = new SqlParameter
            {
                ParameterName = "bPriceProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bPriceProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidPos",
                    Value = gUidPos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriProcessResult,
                parameterbUnassignedAccountCreated,
                parameteriKeyNvst,
                parameterbPriceProcessed,
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipUnrecognizedProducers",
                    Value = bSkipUnrecognizedProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPushOnePositionResult>("EXEC @returnValue = [dbo].[sp_DLFPushOnePosition] @gUidPos = @gUidPos, @cDataStamp = @cDataStamp, @iProcessResult = @iProcessResult OUTPUT, @bUnassignedAccountCreated = @bUnassignedAccountCreated OUTPUT, @iKeyNvst = @iKeyNvst OUTPUT, @bPriceProcessed = @bPriceProcessed OUTPUT, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @bSkipUnrecognizedProducers = @bSkipUnrecognizedProducers", sqlParameters, cancellationToken);

            iProcessResult.SetValue(parameteriProcessResult.Value);
            bUnassignedAccountCreated.SetValue(parameterbUnassignedAccountCreated.Value);
            iKeyNvst.SetValue(parameteriKeyNvst.Value);
            bPriceProcessed.SetValue(parameterbPriceProcessed.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPushOnePriceRecordAsync(int? iKeySymbol, decimal? nPrice, DateTime? dPrice, decimal? nPoolFactor, int? iKeyModule, string cDataStamp, string cCusip, bool? bUpdateToAllWithCusip, int? iKeyFile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySymbol",
                    Value = iKeySymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nPrice",
                    Precision = 16,
                    Scale = 6,
                    Value = nPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "dPrice",
                    Value = dPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "nPoolFactor",
                    Precision = 16,
                    Scale = 6,
                    Value = nPoolFactor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCusip",
                    Size = 20,
                    Value = cCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bUpdateToAllWithCusip",
                    Value = bUpdateToAllWithCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyFile",
                    Value = iKeyFile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPushOnePriceRecord] @iKeySymbol = @iKeySymbol, @nPrice = @nPrice, @dPrice = @dPrice, @nPoolFactor = @nPoolFactor, @iKeyModule = @iKeyModule, @cDataStamp = @cDataStamp, @cCusip = @cCusip, @bUpdateToAllWithCusip = @bUpdateToAllWithCusip, @iKeyFile = @iKeyFile", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPushOneRegistrationResult>> sp_DLFPushOneRegistrationAsync(Guid? gUidReg, string cDataStamp, bool? bAddAccountInvestor, bool? bAddAccountOtherParties, int? iCodeNameTypeForAddedNames, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<bool?> bUnassignedAccountCreated, OutputParameter<int?> iCodeProcessResult, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbUnassignedAccountCreated = new SqlParameter
            {
                ParameterName = "bUnassignedAccountCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bUnassignedAccountCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriCodeProcessResult = new SqlParameter
            {
                ParameterName = "iCodeProcessResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCodeProcessResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidReg",
                    Value = gUidReg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bAddAccountInvestor",
                    Value = bAddAccountInvestor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bAddAccountOtherParties",
                    Value = bAddAccountOtherParties ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeNameTypeForAddedNames",
                    Value = iCodeNameTypeForAddedNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbUnassignedAccountCreated,
                parameteriCodeProcessResult,
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipUnrecognizedProducers",
                    Value = bSkipUnrecognizedProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPushOneRegistrationResult>("EXEC @returnValue = [dbo].[sp_DLFPushOneRegistration] @gUidReg = @gUidReg, @cDataStamp = @cDataStamp, @bAddAccountInvestor = @bAddAccountInvestor, @bAddAccountOtherParties = @bAddAccountOtherParties, @iCodeNameTypeForAddedNames = @iCodeNameTypeForAddedNames, @bUnassignedAccountCreated = @bUnassignedAccountCreated OUTPUT, @iCodeProcessResult = @iCodeProcessResult OUTPUT, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @bSkipUnrecognizedProducers = @bSkipUnrecognizedProducers", sqlParameters, cancellationToken);

            bUnassignedAccountCreated.SetValue(parameterbUnassignedAccountCreated.Value);
            iCodeProcessResult.SetValue(parameteriCodeProcessResult.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPushOneSecurityResult>> sp_DLFPushOneSecurityAsync(Guid? gUidSec, string cDataStamp, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bPriceProcessed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResult = new SqlParameter
            {
                ParameterName = "iProcessResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbPriceProcessed = new SqlParameter
            {
                ParameterName = "bPriceProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bPriceProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidSec",
                    Value = gUidSec ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriProcessResult,
                parameterbPriceProcessed,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPushOneSecurityResult>("EXEC @returnValue = [dbo].[sp_DLFPushOneSecurity] @gUidSec = @gUidSec, @cDataStamp = @cDataStamp, @iProcessResult = @iProcessResult OUTPUT, @bPriceProcessed = @bPriceProcessed OUTPUT", sqlParameters, cancellationToken);

            iProcessResult.SetValue(parameteriProcessResult.Value);
            bPriceProcessed.SetValue(parameterbPriceProcessed.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPushOneTransactionResult>> sp_DLFPushOneTransactionAsync(Guid? gUidTrans, string cDataStamp, string cModuleStamp, int? iCodeAccountStatus, int? iCodeBasisType, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bUnassignedAccountCreated, OutputParameter<int?> iCreatedAccountKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResult = new SqlParameter
            {
                ParameterName = "iProcessResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterbUnassignedAccountCreated = new SqlParameter
            {
                ParameterName = "bUnassignedAccountCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bUnassignedAccountCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriCreatedAccountKeyID = new SqlParameter
            {
                ParameterName = "iCreatedAccountKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCreatedAccountKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidTrans",
                    Value = gUidTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cModuleStamp",
                    Size = 12,
                    Value = cModuleStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriProcessResult,
                parameterbUnassignedAccountCreated,
                parameteriCreatedAccountKeyID,
                new SqlParameter
                {
                    ParameterName = "iCodeAccountStatus",
                    Value = iCodeAccountStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeBasisType",
                    Value = iCodeBasisType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipUnrecognizedProducers",
                    Value = bSkipUnrecognizedProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPushOneTransactionResult>("EXEC @returnValue = [dbo].[sp_DLFPushOneTransaction] @gUidTrans = @gUidTrans, @cDataStamp = @cDataStamp, @cModuleStamp = @cModuleStamp, @iProcessResult = @iProcessResult OUTPUT, @bUnassignedAccountCreated = @bUnassignedAccountCreated OUTPUT, @iCreatedAccountKeyID = @iCreatedAccountKeyID OUTPUT, @iCodeAccountStatus = @iCodeAccountStatus, @iCodeBasisType = @iCodeBasisType, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @bSkipUnrecognizedProducers = @bSkipUnrecognizedProducers", sqlParameters, cancellationToken);

            iProcessResult.SetValue(parameteriProcessResult.Value);
            bUnassignedAccountCreated.SetValue(parameterbUnassignedAccountCreated.Value);
            iCreatedAccountKeyID.SetValue(parameteriCreatedAccountKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPushPolicyGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, bool? bAddPolicyOwner, bool? bAddPolicyParties, int? iCodeNameTypeForAddedNames, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedPolicyCreated, OutputParameter<int?> iCoveragesProcessed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResultException = new SqlParameter
            {
                ParameterName = "iProcessResultException",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultException?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriProcessResultNeedsAttention = new SqlParameter
            {
                ParameterName = "iProcessResultNeedsAttention",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultNeedsAttention?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriprocessResultProcessed = new SqlParameter
            {
                ParameterName = "iprocessResultProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iprocessResultProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriUnassignedPolicyCreated = new SqlParameter
            {
                ParameterName = "iUnassignedPolicyCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iUnassignedPolicyCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriCoveragesProcessed = new SqlParameter
            {
                ParameterName = "iCoveragesProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCoveragesProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyDLF1",
                    Value = iKeyDLF1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF2",
                    Value = iKeyDLF2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF3",
                    Value = iKeyDLF3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF4",
                    Value = iKeyDLF4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF5",
                    Value = iKeyDLF5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF6",
                    Value = iKeyDLF6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF7",
                    Value = iKeyDLF7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF8",
                    Value = iKeyDLF8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF9",
                    Value = iKeyDLF9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF10",
                    Value = iKeyDLF10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bAddPolicyOwner",
                    Value = bAddPolicyOwner ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bAddPolicyParties",
                    Value = bAddPolicyParties ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeNameTypeForAddedNames",
                    Value = iCodeNameTypeForAddedNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriProcessResultException,
                parameteriProcessResultNeedsAttention,
                parameteriprocessResultProcessed,
                parameteriUnassignedPolicyCreated,
                parameteriCoveragesProcessed,
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipUnrecognizedProducers",
                    Value = bSkipUnrecognizedProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPushPolicyGroup] @iKeyDLF1 = @iKeyDLF1, @iKeyDLF2 = @iKeyDLF2, @iKeyDLF3 = @iKeyDLF3, @iKeyDLF4 = @iKeyDLF4, @iKeyDLF5 = @iKeyDLF5, @iKeyDLF6 = @iKeyDLF6, @iKeyDLF7 = @iKeyDLF7, @iKeyDLF8 = @iKeyDLF8, @iKeyDLF9 = @iKeyDLF9, @iKeyDLF10 = @iKeyDLF10, @cDataStamp = @cDataStamp, @bAddPolicyOwner = @bAddPolicyOwner, @bAddPolicyParties = @bAddPolicyParties, @iCodeNameTypeForAddedNames = @iCodeNameTypeForAddedNames, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @iProcessResultException = @iProcessResultException OUTPUT, @iProcessResultNeedsAttention = @iProcessResultNeedsAttention OUTPUT, @iprocessResultProcessed = @iprocessResultProcessed OUTPUT, @iUnassignedPolicyCreated = @iUnassignedPolicyCreated OUTPUT, @iCoveragesProcessed = @iCoveragesProcessed OUTPUT, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @bSkipUnrecognizedProducers = @bSkipUnrecognizedProducers", sqlParameters, cancellationToken);

            iProcessResultException.SetValue(parameteriProcessResultException.Value);
            iProcessResultNeedsAttention.SetValue(parameteriProcessResultNeedsAttention.Value);
            iprocessResultProcessed.SetValue(parameteriprocessResultProcessed.Value);
            iUnassignedPolicyCreated.SetValue(parameteriUnassignedPolicyCreated.Value);
            iCoveragesProcessed.SetValue(parameteriCoveragesProcessed.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFPushPolicyPositionGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedPoliciesCreated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResultException = new SqlParameter
            {
                ParameterName = "iProcessResultException",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultException?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriProcessResultNeedsAttention = new SqlParameter
            {
                ParameterName = "iProcessResultNeedsAttention",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultNeedsAttention?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriprocessResultProcessed = new SqlParameter
            {
                ParameterName = "iprocessResultProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iprocessResultProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriUnassignedPoliciesCreated = new SqlParameter
            {
                ParameterName = "iUnassignedPoliciesCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iUnassignedPoliciesCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyDLF1",
                    Value = iKeyDLF1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF2",
                    Value = iKeyDLF2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF3",
                    Value = iKeyDLF3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF4",
                    Value = iKeyDLF4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF5",
                    Value = iKeyDLF5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF6",
                    Value = iKeyDLF6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF7",
                    Value = iKeyDLF7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF8",
                    Value = iKeyDLF8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF9",
                    Value = iKeyDLF9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF10",
                    Value = iKeyDLF10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriProcessResultException,
                parameteriProcessResultNeedsAttention,
                parameteriprocessResultProcessed,
                parameteriUnassignedPoliciesCreated,
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipUnrecognizedProducers",
                    Value = bSkipUnrecognizedProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFPushPolicyPositionGroup] @iKeyDLF1 = @iKeyDLF1, @iKeyDLF2 = @iKeyDLF2, @iKeyDLF3 = @iKeyDLF3, @iKeyDLF4 = @iKeyDLF4, @iKeyDLF5 = @iKeyDLF5, @iKeyDLF6 = @iKeyDLF6, @iKeyDLF7 = @iKeyDLF7, @iKeyDLF8 = @iKeyDLF8, @iKeyDLF9 = @iKeyDLF9, @iKeyDLF10 = @iKeyDLF10, @cDataStamp = @cDataStamp, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @iProcessResultException = @iProcessResultException OUTPUT, @iProcessResultNeedsAttention = @iProcessResultNeedsAttention OUTPUT, @iprocessResultProcessed = @iprocessResultProcessed OUTPUT, @iUnassignedPoliciesCreated = @iUnassignedPoliciesCreated OUTPUT, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @bSkipUnrecognizedProducers = @bSkipUnrecognizedProducers", sqlParameters, cancellationToken);

            iProcessResultException.SetValue(parameteriProcessResultException.Value);
            iProcessResultNeedsAttention.SetValue(parameteriProcessResultNeedsAttention.Value);
            iprocessResultProcessed.SetValue(parameteriprocessResultProcessed.Value);
            iUnassignedPoliciesCreated.SetValue(parameteriUnassignedPoliciesCreated.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPushPositonGroupResult>> sp_DLFPushPositonGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedAccountsCreated, OutputParameter<int?> iPricesAdded, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResultException = new SqlParameter
            {
                ParameterName = "iProcessResultException",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultException?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriProcessResultNeedsAttention = new SqlParameter
            {
                ParameterName = "iProcessResultNeedsAttention",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultNeedsAttention?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriprocessResultProcessed = new SqlParameter
            {
                ParameterName = "iprocessResultProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iprocessResultProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriUnassignedAccountsCreated = new SqlParameter
            {
                ParameterName = "iUnassignedAccountsCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iUnassignedAccountsCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriPricesAdded = new SqlParameter
            {
                ParameterName = "iPricesAdded",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iPricesAdded?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyDLF1",
                    Value = iKeyDLF1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF2",
                    Value = iKeyDLF2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF3",
                    Value = iKeyDLF3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF4",
                    Value = iKeyDLF4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF5",
                    Value = iKeyDLF5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF6",
                    Value = iKeyDLF6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF7",
                    Value = iKeyDLF7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF8",
                    Value = iKeyDLF8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF9",
                    Value = iKeyDLF9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF10",
                    Value = iKeyDLF10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriProcessResultException,
                parameteriProcessResultNeedsAttention,
                parameteriprocessResultProcessed,
                parameteriUnassignedAccountsCreated,
                parameteriPricesAdded,
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipUnrecognizedProducers",
                    Value = bSkipUnrecognizedProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPushPositonGroupResult>("EXEC @returnValue = [dbo].[sp_DLFPushPositonGroup] @iKeyDLF1 = @iKeyDLF1, @iKeyDLF2 = @iKeyDLF2, @iKeyDLF3 = @iKeyDLF3, @iKeyDLF4 = @iKeyDLF4, @iKeyDLF5 = @iKeyDLF5, @iKeyDLF6 = @iKeyDLF6, @iKeyDLF7 = @iKeyDLF7, @iKeyDLF8 = @iKeyDLF8, @iKeyDLF9 = @iKeyDLF9, @iKeyDLF10 = @iKeyDLF10, @cDataStamp = @cDataStamp, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @iProcessResultException = @iProcessResultException OUTPUT, @iProcessResultNeedsAttention = @iProcessResultNeedsAttention OUTPUT, @iprocessResultProcessed = @iprocessResultProcessed OUTPUT, @iUnassignedAccountsCreated = @iUnassignedAccountsCreated OUTPUT, @iPricesAdded = @iPricesAdded OUTPUT, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @bSkipUnrecognizedProducers = @bSkipUnrecognizedProducers", sqlParameters, cancellationToken);

            iProcessResultException.SetValue(parameteriProcessResultException.Value);
            iProcessResultNeedsAttention.SetValue(parameteriProcessResultNeedsAttention.Value);
            iprocessResultProcessed.SetValue(parameteriprocessResultProcessed.Value);
            iUnassignedAccountsCreated.SetValue(parameteriUnassignedAccountsCreated.Value);
            iPricesAdded.SetValue(parameteriPricesAdded.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPushRegistrationGroupResult>> sp_DLFPushRegistrationGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, bool? bAddAccountInvestor, bool? bAddAccountOtherParties, int? iCodeNameTypeForAddedNames, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedAccountsCreated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResultException = new SqlParameter
            {
                ParameterName = "iProcessResultException",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultException?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriProcessResultNeedsAttention = new SqlParameter
            {
                ParameterName = "iProcessResultNeedsAttention",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultNeedsAttention?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriprocessResultProcessed = new SqlParameter
            {
                ParameterName = "iprocessResultProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iprocessResultProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriUnassignedAccountsCreated = new SqlParameter
            {
                ParameterName = "iUnassignedAccountsCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iUnassignedAccountsCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyDLF1",
                    Value = iKeyDLF1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF2",
                    Value = iKeyDLF2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF3",
                    Value = iKeyDLF3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF4",
                    Value = iKeyDLF4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF5",
                    Value = iKeyDLF5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF6",
                    Value = iKeyDLF6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF7",
                    Value = iKeyDLF7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF8",
                    Value = iKeyDLF8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF9",
                    Value = iKeyDLF9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF10",
                    Value = iKeyDLF10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bAddAccountInvestor",
                    Value = bAddAccountInvestor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bAddAccountOtherParties",
                    Value = bAddAccountOtherParties ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeNameTypeForAddedNames",
                    Value = iCodeNameTypeForAddedNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriProcessResultException,
                parameteriProcessResultNeedsAttention,
                parameteriprocessResultProcessed,
                parameteriUnassignedAccountsCreated,
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipUnrecognizedProducers",
                    Value = bSkipUnrecognizedProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPushRegistrationGroupResult>("EXEC @returnValue = [dbo].[sp_DLFPushRegistrationGroup] @iKeyDLF1 = @iKeyDLF1, @iKeyDLF2 = @iKeyDLF2, @iKeyDLF3 = @iKeyDLF3, @iKeyDLF4 = @iKeyDLF4, @iKeyDLF5 = @iKeyDLF5, @iKeyDLF6 = @iKeyDLF6, @iKeyDLF7 = @iKeyDLF7, @iKeyDLF8 = @iKeyDLF8, @iKeyDLF9 = @iKeyDLF9, @iKeyDLF10 = @iKeyDLF10, @cDataStamp = @cDataStamp, @bAddAccountInvestor = @bAddAccountInvestor, @bAddAccountOtherParties = @bAddAccountOtherParties, @iCodeNameTypeForAddedNames = @iCodeNameTypeForAddedNames, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @iProcessResultException = @iProcessResultException OUTPUT, @iProcessResultNeedsAttention = @iProcessResultNeedsAttention OUTPUT, @iprocessResultProcessed = @iprocessResultProcessed OUTPUT, @iUnassignedAccountsCreated = @iUnassignedAccountsCreated OUTPUT, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @bSkipUnrecognizedProducers = @bSkipUnrecognizedProducers", sqlParameters, cancellationToken);

            iProcessResultException.SetValue(parameteriProcessResultException.Value);
            iProcessResultNeedsAttention.SetValue(parameteriProcessResultNeedsAttention.Value);
            iprocessResultProcessed.SetValue(parameteriprocessResultProcessed.Value);
            iUnassignedAccountsCreated.SetValue(parameteriUnassignedAccountsCreated.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPushSecurityGroupResult>> sp_DLFPushSecurityGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iPricesAdded, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResultException = new SqlParameter
            {
                ParameterName = "iProcessResultException",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultException?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriProcessResultNeedsAttention = new SqlParameter
            {
                ParameterName = "iProcessResultNeedsAttention",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultNeedsAttention?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriprocessResultProcessed = new SqlParameter
            {
                ParameterName = "iprocessResultProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iprocessResultProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriPricesAdded = new SqlParameter
            {
                ParameterName = "iPricesAdded",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iPricesAdded?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyDLF1",
                    Value = iKeyDLF1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF2",
                    Value = iKeyDLF2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF3",
                    Value = iKeyDLF3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF4",
                    Value = iKeyDLF4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF5",
                    Value = iKeyDLF5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF6",
                    Value = iKeyDLF6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF7",
                    Value = iKeyDLF7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF8",
                    Value = iKeyDLF8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF9",
                    Value = iKeyDLF9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF10",
                    Value = iKeyDLF10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriProcessResultException,
                parameteriProcessResultNeedsAttention,
                parameteriprocessResultProcessed,
                parameteriPricesAdded,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPushSecurityGroupResult>("EXEC @returnValue = [dbo].[sp_DLFPushSecurityGroup] @iKeyDLF1 = @iKeyDLF1, @iKeyDLF2 = @iKeyDLF2, @iKeyDLF3 = @iKeyDLF3, @iKeyDLF4 = @iKeyDLF4, @iKeyDLF5 = @iKeyDLF5, @iKeyDLF6 = @iKeyDLF6, @iKeyDLF7 = @iKeyDLF7, @iKeyDLF8 = @iKeyDLF8, @iKeyDLF9 = @iKeyDLF9, @iKeyDLF10 = @iKeyDLF10, @cDataStamp = @cDataStamp, @iProcessResultException = @iProcessResultException OUTPUT, @iProcessResultNeedsAttention = @iProcessResultNeedsAttention OUTPUT, @iprocessResultProcessed = @iprocessResultProcessed OUTPUT, @iPricesAdded = @iPricesAdded OUTPUT", sqlParameters, cancellationToken);

            iProcessResultException.SetValue(parameteriProcessResultException.Value);
            iProcessResultNeedsAttention.SetValue(parameteriProcessResultNeedsAttention.Value);
            iprocessResultProcessed.SetValue(parameteriprocessResultProcessed.Value);
            iPricesAdded.SetValue(parameteriPricesAdded.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFPushTransactionGroupResult>> sp_DLFPushTransactionGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, string cModuleStamp, int? iKeyBlankInDownloadProducerKeyID, int? iCodeAccountStatus, int? iCodeBasisType, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedAccountsCreated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriProcessResultException = new SqlParameter
            {
                ParameterName = "iProcessResultException",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultException?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriProcessResultNeedsAttention = new SqlParameter
            {
                ParameterName = "iProcessResultNeedsAttention",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResultNeedsAttention?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriprocessResultProcessed = new SqlParameter
            {
                ParameterName = "iprocessResultProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iprocessResultProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriUnassignedAccountsCreated = new SqlParameter
            {
                ParameterName = "iUnassignedAccountsCreated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iUnassignedAccountsCreated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyDLF1",
                    Value = iKeyDLF1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF2",
                    Value = iKeyDLF2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF3",
                    Value = iKeyDLF3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF4",
                    Value = iKeyDLF4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF5",
                    Value = iKeyDLF5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF6",
                    Value = iKeyDLF6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF7",
                    Value = iKeyDLF7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF8",
                    Value = iKeyDLF8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF9",
                    Value = iKeyDLF9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDLF10",
                    Value = iKeyDLF10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cModuleStamp",
                    Size = 12,
                    Value = cModuleStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriProcessResultException,
                parameteriProcessResultNeedsAttention,
                parameteriprocessResultProcessed,
                parameteriUnassignedAccountsCreated,
                new SqlParameter
                {
                    ParameterName = "iCodeAccountStatus",
                    Value = iCodeAccountStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeBasisType",
                    Value = iCodeBasisType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipUnrecognizedProducers",
                    Value = bSkipUnrecognizedProducers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFPushTransactionGroupResult>("EXEC @returnValue = [dbo].[sp_DLFPushTransactionGroup] @iKeyDLF1 = @iKeyDLF1, @iKeyDLF2 = @iKeyDLF2, @iKeyDLF3 = @iKeyDLF3, @iKeyDLF4 = @iKeyDLF4, @iKeyDLF5 = @iKeyDLF5, @iKeyDLF6 = @iKeyDLF6, @iKeyDLF7 = @iKeyDLF7, @iKeyDLF8 = @iKeyDLF8, @iKeyDLF9 = @iKeyDLF9, @iKeyDLF10 = @iKeyDLF10, @cDataStamp = @cDataStamp, @cModuleStamp = @cModuleStamp, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @iProcessResultException = @iProcessResultException OUTPUT, @iProcessResultNeedsAttention = @iProcessResultNeedsAttention OUTPUT, @iprocessResultProcessed = @iprocessResultProcessed OUTPUT, @iUnassignedAccountsCreated = @iUnassignedAccountsCreated OUTPUT, @iCodeAccountStatus = @iCodeAccountStatus, @iCodeBasisType = @iCodeBasisType, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules, @bSkipUnrecognizedProducers = @bSkipUnrecognizedProducers", sqlParameters, cancellationToken);

            iProcessResultException.SetValue(parameteriProcessResultException.Value);
            iProcessResultNeedsAttention.SetValue(parameteriProcessResultNeedsAttention.Value);
            iprocessResultProcessed.SetValue(parameteriprocessResultProcessed.Value);
            iUnassignedAccountsCreated.SetValue(parameteriUnassignedAccountsCreated.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFRBCPreCheckPartiesResult>> sp_DLFRBCPreCheckPartiesAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFRBCPreCheckPartiesResult>("EXEC @returnValue = [dbo].[sp_DLFRBCPreCheckParties] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFRBCValidateDividendPositionsResult>> sp_DLFRBCValidateDividendPositionsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFRBCValidateDividendPositionsResult>("EXEC @returnValue = [dbo].[sp_DLFRBCValidateDividendPositions] @ikeyProcess = @ikeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFRegistrationUpdateAsync(int? iKeyModule, string cDataStamp, int? iCodeRecordCreationSource, DateTime? dRecord, string cNumber, string cRegistration, string cOwnerTaxID, DateTime? dOwnerDOB, string cInvestorTaxID, DateTime? dInvestorDOB, int? iKeyLink, string cLinkTable, int? iKeyProducerKeyID, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iKeyPolicy, OutputParameter<int?> iKeyAccount, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyPolicy = new SqlParameter
            {
                ParameterName = "iKeyPolicy",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyPolicy?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyAccount = new SqlParameter
            {
                ParameterName = "iKeyAccount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyAccount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyDownloadRegistration = new SqlParameter
            {
                ParameterName = "iKeyDownloadRegistration",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyDownloadRegistration?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRecordCreationSource",
                    Value = iCodeRecordCreationSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dRecord",
                    Value = dRecord ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cNumber",
                    Size = 24,
                    Value = cNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cRegistration",
                    Size = -1,
                    Value = cRegistration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOwnerTaxID",
                    Size = 100,
                    Value = cOwnerTaxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dOwnerDOB",
                    Value = dOwnerDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cInvestorTaxID",
                    Size = 100,
                    Value = cInvestorTaxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dInvestorDOB",
                    Value = dInvestorDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyLink",
                    Value = iKeyLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cLinkTable",
                    Size = 15,
                    Value = cLinkTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKeyPolicy,
                parameteriKeyAccount,
                parameteriKeyDownloadRegistration,
                new SqlParameter
                {
                    ParameterName = "iKeyProducerKeyID",
                    Value = iKeyProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBlankInDownloadProducerKeyID",
                    Value = iKeyBlankInDownloadProducerKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCanUpdateRegistrationsFromOtherModules",
                    Value = bCanUpdateRegistrationsFromOtherModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFRegistrationUpdate] @iKeyModule = @iKeyModule, @cDataStamp = @cDataStamp, @iCodeRecordCreationSource = @iCodeRecordCreationSource, @dRecord = @dRecord, @cNumber = @cNumber, @cRegistration = @cRegistration, @cOwnerTaxID = @cOwnerTaxID, @dOwnerDOB = @dOwnerDOB, @cInvestorTaxID = @cInvestorTaxID, @dInvestorDOB = @dInvestorDOB, @iKeyLink = @iKeyLink, @cLinkTable = @cLinkTable, @iKeyPolicy = @iKeyPolicy OUTPUT, @iKeyAccount = @iKeyAccount OUTPUT, @iKeyDownloadRegistration = @iKeyDownloadRegistration OUTPUT, @iKeyProducerKeyID = @iKeyProducerKeyID, @iKeyBlankInDownloadProducerKeyID = @iKeyBlankInDownloadProducerKeyID, @bCanUpdateRegistrationsFromOtherModules = @bCanUpdateRegistrationsFromOtherModules", sqlParameters, cancellationToken);

            iKeyPolicy.SetValue(parameteriKeyPolicy.Value);
            iKeyAccount.SetValue(parameteriKeyAccount.Value);
            iKeyDownloadRegistration.SetValue(parameteriKeyDownloadRegistration.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFRemoveAdditionsFromOneProcessedFileAsync(int? iKeyFile, string cRemove, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyFile",
                    Value = iKeyFile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cRemove",
                    Size = 30,
                    Value = cRemove ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFRemoveAdditionsFromOneProcessedFile] @iKeyFile = @iKeyFile, @cRemove = @cRemove", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFReplicationPreValidateAccountsResult>> sp_DLFReplicationPreValidateAccountsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFReplicationPreValidateAccountsResult>("EXEC @returnValue = [dbo].[sp_DLFReplicationPreValidateAccounts] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DlfReplicationPrevalidateSecuritiesResult>> sp_DlfReplicationPrevalidateSecuritiesAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DlfReplicationPrevalidateSecuritiesResult>("EXEC @returnValue = [dbo].[sp_DlfReplicationPrevalidateSecurities] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfResetPlanKeysAsync(int? iKeyPlan, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyPlan",
                    Value = iKeyPlan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfResetPlanKeys] @iKeyPlan = @iKeyPlan", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfResetProducerKeysAsync(string cRepCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cRepCode",
                    Size = 20,
                    Value = cRepCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfResetProducerKeys] @cRepCode = @cRepCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfResetSecurityKeysAsync(int? iKeySecurity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySecurity",
                    Value = iKeySecurity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfResetSecurityKeys] @iKeySecurity = @iKeySecurity", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFRiderUpdateAsync(int? iKeyCoverage, Guid? gUidRider, string cDataStamp, OutputParameter<bool?> bRiderAdded, OutputParameter<int?> iProcessResult, OutputParameter<int?> iKeyRider, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbRiderAdded = new SqlParameter
            {
                ParameterName = "bRiderAdded",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bRiderAdded?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriProcessResult = new SqlParameter
            {
                ParameterName = "iProcessResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyRider = new SqlParameter
            {
                ParameterName = "iKeyRider",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyRider?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyCoverage",
                    Value = iKeyCoverage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gUidRider",
                    Value = gUidRider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterbRiderAdded,
                parameteriProcessResult,
                parameteriKeyRider,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFRiderUpdate] @iKeyCoverage = @iKeyCoverage, @gUidRider = @gUidRider, @cDataStamp = @cDataStamp, @bRiderAdded = @bRiderAdded OUTPUT, @iProcessResult = @iProcessResult OUTPUT, @iKeyRider = @iKeyRider OUTPUT", sqlParameters, cancellationToken);

            bRiderAdded.SetValue(parameterbRiderAdded.Value);
            iProcessResult.SetValue(parameteriProcessResult.Value);
            iKeyRider.SetValue(parameteriKeyRider.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFRJSPrecheckOptionsAsync(int? iKeyProcess, string cPriceTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cPriceTable",
                    Size = 100,
                    Value = cPriceTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFRJSPrecheckOptions] @iKeyProcess = @iKeyProcess, @cPriceTable = @cPriceTable", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfSecurityNeededAsync(int? iProcessKeyID, string cSymbol, string cCusip, string cCusipExt, string cAlternateID, OutputParameter<bool?> bSecurityUsed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbSecurityUsed = new SqlParameter
            {
                ParameterName = "bSecurityUsed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bSecurityUsed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cSymbol",
                    Size = 30,
                    Value = cSymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCusip",
                    Size = 20,
                    Value = cCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCusipExt",
                    Size = 20,
                    Value = cCusipExt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cAlternateID",
                    Size = 25,
                    Value = cAlternateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterbSecurityUsed,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfSecurityNeeded] @iProcessKeyID = @iProcessKeyID, @cSymbol = @cSymbol, @cCusip = @cCusip, @cCusipExt = @cCusipExt, @cAlternateID = @cAlternateID, @bSecurityUsed = @bSecurityUsed OUTPUT", sqlParameters, cancellationToken);

            bSecurityUsed.SetValue(parameterbSecurityUsed.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFSecurityUpdateFromBulkProcessResult>> sp_DLFSecurityUpdateFromBulkProcessAsync(int? iKeySecurityAA, int? ikeyProcess, int? iKeyModule, string cTableName, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySecurityAA",
                    Value = iKeySecurityAA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTableName",
                    Size = 30,
                    Value = cTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFSecurityUpdateFromBulkProcessResult>("EXEC @returnValue = [dbo].[sp_DLFSecurityUpdateFromBulkProcess] @iKeySecurityAA = @iKeySecurityAA, @ikeyProcess = @ikeyProcess, @iKeyModule = @iKeyModule, @cTableName = @cTableName, @cDataStamp = @cDataStamp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFSEIPrecheckAcccountSymbolsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFSEIPrecheckAcccountSymbols] @ikeyProcess = @ikeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfSetProcessKeysForFilesAsync(int? iKeyProcess, int? ikeyfile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyfile",
                    Value = ikeyfile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfSetProcessKeysForFiles] @iKeyProcess = @iKeyProcess, @ikeyfile = @ikeyfile", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFSetupProcessToDeleteAsync(int? iKeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFSetupProcessToDelete] @iKeyUser = @iKeyUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFSWBMoneyMarketTransactionsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFSWBMoneyMarketTransactions] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFSWBSetMoneyMarketsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFSWBSetMoneyMarkets] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFTDAPrecheckPoolAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFTDAPrecheckPool] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DlfTDAValidateINIRecordsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DlfTDAValidateINIRecords] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFTruncatePositionTempTablesAsync(int? iKeyUser, OutputParameter<bool?> bTruncate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbTruncate = new SqlParameter
            {
                ParameterName = "bTruncate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bTruncate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbTruncate,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFTruncatePositionTempTables] @iKeyUser = @iKeyUser, @bTruncate = @bTruncate OUTPUT", sqlParameters, cancellationToken);

            bTruncate.SetValue(parameterbTruncate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Sp_dlfUnRecognizedTransactionsResult>> Sp_dlfUnRecognizedTransactionsAsync(int? iKeyBatch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyBatch",
                    Value = iKeyBatch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Sp_dlfUnRecognizedTransactionsResult>("EXEC @returnValue = [dbo].[Sp_dlfUnRecognizedTransactions] @iKeyBatch = @iKeyBatch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfUpdateAccountKeysAsync(int? iProcessKeyID, int? iKeyAccount, string cAccountNumber, bool? bNeedsValidation, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyAccount",
                    Value = iKeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cAccountNumber",
                    Size = 35,
                    Value = cAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bNeedsValidation",
                    Value = bNeedsValidation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfUpdateAccountKeys] @iProcessKeyID = @iProcessKeyID, @iKeyAccount = @iKeyAccount, @cAccountNumber = @cAccountNumber, @bNeedsValidation = @bNeedsValidation", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFUpdateDateOfRecordAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFUpdateDateOfRecord]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfUpdatePlanKeysAsync(int? iProcessKeyID, int? iKeyPlan, string cPlanAbbreviation, string cPlanDescription, bool? bNeedsValidation, int? iModuleKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyPlan",
                    Value = iKeyPlan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cPlanAbbreviation",
                    Size = 15,
                    Value = cPlanAbbreviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cPlanDescription",
                    Size = 50,
                    Value = cPlanDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bNeedsValidation",
                    Value = bNeedsValidation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iModuleKeyID",
                    Value = iModuleKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfUpdatePlanKeys] @iProcessKeyID = @iProcessKeyID, @iKeyPlan = @iKeyPlan, @cPlanAbbreviation = @cPlanAbbreviation, @cPlanDescription = @cPlanDescription, @bNeedsValidation = @bNeedsValidation, @iModuleKeyID = @iModuleKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfUpdatePolicyKeysAsync(int? iProcessKeyID, int? iKeyPolicy, int? iKeyBaseCoverage, string cPolicyNumber, bool? bNeedsValidation, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyPolicy",
                    Value = iKeyPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBaseCoverage",
                    Value = iKeyBaseCoverage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cPolicyNumber",
                    Size = 35,
                    Value = cPolicyNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bNeedsValidation",
                    Value = bNeedsValidation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfUpdatePolicyKeys] @iProcessKeyID = @iProcessKeyID, @iKeyPolicy = @iKeyPolicy, @iKeyBaseCoverage = @iKeyBaseCoverage, @cPolicyNumber = @cPolicyNumber, @bNeedsValidation = @bNeedsValidation", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfUpdateRepCodeAsync(int? iProcessKeyID, string cRepCode, int? iKeyId, bool? bFlagNeedsValidation, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cRepCode",
                    Size = 20,
                    Value = cRepCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyId",
                    Value = iKeyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bFlagNeedsValidation",
                    Value = bFlagNeedsValidation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfUpdateRepCode] @iProcessKeyID = @iProcessKeyID, @cRepCode = @cRepCode, @iKeyId = @iKeyId, @bFlagNeedsValidation = @bFlagNeedsValidation", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFUpdateSecurityResult>> sp_DLFUpdateSecurityAsync(int? iKeySecurityAA, Guid? gUidDLF, int? iKeyModule, string cTableName, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySecurityAA",
                    Value = iKeySecurityAA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gUidDLF",
                    Value = gUidDLF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTableName",
                    Size = 30,
                    Value = cTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFUpdateSecurityResult>("EXEC @returnValue = [dbo].[sp_DLFUpdateSecurity] @iKeySecurityAA = @iKeySecurityAA, @gUidDLF = @gUidDLF, @iKeyModule = @iKeyModule, @cTableName = @cTableName, @cDataStamp = @cDataStamp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfUpdateSecurityKeysAsync(int? iProcessKeyID, int? iKeySecurity, string cSymbol, string cAlternateID, string cCusip, string cCusipExt, bool? bNeedsValidation, bool? bFoundInOld, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iProcessKeyID",
                    Value = iProcessKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeySecurity",
                    Value = iKeySecurity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cSymbol",
                    Size = 35,
                    Value = cSymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAlternateID",
                    Size = 25,
                    Value = cAlternateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCusip",
                    Size = 20,
                    Value = cCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCusipExt",
                    Size = 20,
                    Value = cCusipExt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bNeedsValidation",
                    Value = bNeedsValidation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bFoundInOld",
                    Value = bFoundInOld ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfUpdateSecurityKeys] @iProcessKeyID = @iProcessKeyID, @iKeySecurity = @iKeySecurity, @cSymbol = @cSymbol, @cAlternateID = @cAlternateID, @cCusip = @cCusip, @cCusipExt = @cCusipExt, @bNeedsValidation = @bNeedsValidation, @bFoundInOld = @bFoundInOld", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValdidateAddressAsync(Guid? gUidDLFAddress, int? ikeyAAName, string cDataStamp, int? iCodeRecordCreationSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidDLFAddress",
                    Value = gUidDLFAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyAAName",
                    Value = ikeyAAName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRecordCreationSource",
                    Value = iCodeRecordCreationSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValdidateAddress] @gUidDLFAddress = @gUidDLFAddress, @ikeyAAName = @ikeyAAName, @cDataStamp = @cDataStamp, @iCodeRecordCreationSource = @iCodeRecordCreationSource", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValdidateDownloadInfoAddressAsync(Guid? gUidDLFAddress, Guid? gUidParty, string cDataStamp, int? iCodeRecordCreationSource, int? iKeyDlRegistration, bool? bParty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidDLFAddress",
                    Value = gUidDLFAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "gUidParty",
                    Value = gUidParty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRecordCreationSource",
                    Value = iCodeRecordCreationSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDlRegistration",
                    Value = iKeyDlRegistration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bParty",
                    Value = bParty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValdidateDownloadInfoAddress] @gUidDLFAddress = @gUidDLFAddress, @gUidParty = @gUidParty, @cDataStamp = @cDataStamp, @iCodeRecordCreationSource = @iCodeRecordCreationSource, @iKeyDlRegistration = @iKeyDlRegistration, @bParty = @bParty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValdidateDownloadInfoEmailAsync(Guid? gUidDLFEmail, Guid? gUidParty, string cDataStamp, int? iCodeRecordCreationSource, int? iKeyDlRegistration, bool? bParty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidDLFEmail",
                    Value = gUidDLFEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "gUidParty",
                    Value = gUidParty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRecordCreationSource",
                    Value = iCodeRecordCreationSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDlRegistration",
                    Value = iKeyDlRegistration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bParty",
                    Value = bParty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValdidateDownloadInfoEmail] @gUidDLFEmail = @gUidDLFEmail, @gUidParty = @gUidParty, @cDataStamp = @cDataStamp, @iCodeRecordCreationSource = @iCodeRecordCreationSource, @iKeyDlRegistration = @iKeyDlRegistration, @bParty = @bParty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValdidateDownloadInfoPhoneAsync(Guid? gUidDLFPhone, Guid? gUidParty, string cDataStamp, int? iCodeRecordCreationSource, int? iKeyDlRegistration, bool? bParty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidDLFPhone",
                    Value = gUidDLFPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "gUidParty",
                    Value = gUidParty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRecordCreationSource",
                    Value = iCodeRecordCreationSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyDlRegistration",
                    Value = iKeyDlRegistration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bParty",
                    Value = bParty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValdidateDownloadInfoPhone] @gUidDLFPhone = @gUidDLFPhone, @gUidParty = @gUidParty, @cDataStamp = @cDataStamp, @iCodeRecordCreationSource = @iCodeRecordCreationSource, @iKeyDlRegistration = @iKeyDlRegistration, @bParty = @bParty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValdidateEmailAsync(Guid? gUidDLFEmail, int? ikeyAAName, string cDataStamp, int? iCodeRecordCreationSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidDLFEmail",
                    Value = gUidDLFEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyAAName",
                    Value = ikeyAAName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRecordCreationSource",
                    Value = iCodeRecordCreationSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValdidateEmail] @gUidDLFEmail = @gUidDLFEmail, @ikeyAAName = @ikeyAAName, @cDataStamp = @cDataStamp, @iCodeRecordCreationSource = @iCodeRecordCreationSource", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValdidatePhoneAsync(Guid? gUidDLFPhone, int? ikeyAAName, string cDataStamp, int? iCodeRecordCreationSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gUidDLFPhone",
                    Value = gUidDLFPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyAAName",
                    Value = ikeyAAName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRecordCreationSource",
                    Value = iCodeRecordCreationSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValdidatePhone] @gUidDLFPhone = @gUidDLFPhone, @ikeyAAName = @ikeyAAName, @cDataStamp = @cDataStamp, @iCodeRecordCreationSource = @iCodeRecordCreationSource", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFValidateAccountsBySetsLeadingZerosResult>> sp_DLFValidateAccountsBySetsLeadingZerosAsync(int? iKeyProcess, string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 60,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFValidateAccountsBySetsLeadingZerosResult>("EXEC @returnValue = [dbo].[sp_DLFValidateAccountsBySetsLeadingZeros] @iKeyProcess = @iKeyProcess, @cTable = @cTable", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFValidateAccountsInSetsResult>> sp_DLFValidateAccountsInSetsAsync(int? iKeyProcess, string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 60,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFValidateAccountsInSetsResult>("EXEC @returnValue = [dbo].[sp_DLFValidateAccountsInSets] @iKeyProcess = @iKeyProcess, @cTable = @cTable", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValidateDistributionsAndReinvestmentsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValidateDistributionsAndReinvestments] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValidateDownloadModuleAsync(int? ikeyDownloadModule, int? iKeyPreviousModule, int? iKeyThisModuleOnly, OutputParameter<bool?> bOkayToProceed, OutputParameter<string> cReportMessage, OutputParameter<int?> iProcessResult, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbOkayToProceed = new SqlParameter
            {
                ParameterName = "bOkayToProceed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bOkayToProceed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parametercReportMessage = new SqlParameter
            {
                ParameterName = "cReportMessage",
                Size = 200,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cReportMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameteriProcessResult = new SqlParameter
            {
                ParameterName = "iProcessResult",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iProcessResult?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyDownloadModule",
                    Value = ikeyDownloadModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyPreviousModule",
                    Value = iKeyPreviousModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyThisModuleOnly",
                    Value = iKeyThisModuleOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbOkayToProceed,
                parametercReportMessage,
                parameteriProcessResult,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValidateDownloadModule] @ikeyDownloadModule = @ikeyDownloadModule, @iKeyPreviousModule = @iKeyPreviousModule, @iKeyThisModuleOnly = @iKeyThisModuleOnly, @bOkayToProceed = @bOkayToProceed OUTPUT, @cReportMessage = @cReportMessage OUTPUT, @iProcessResult = @iProcessResult OUTPUT", sqlParameters, cancellationToken);

            bOkayToProceed.SetValue(parameterbOkayToProceed.Value);
            cReportMessage.SetValue(parametercReportMessage.Value);
            iProcessResult.SetValue(parameteriProcessResult.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfValidateModuleSecurityMappingResult>> sp_dlfValidateModuleSecurityMappingAsync(string cSymbol, string cCusip, string cCusipExt, string cAlternateID, string cModule, string cDataStamp, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKey = new SqlParameter
            {
                ParameterName = "iKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cSymbol",
                    Size = 30,
                    Value = cSymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCusip",
                    Size = 25,
                    Value = cCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCusipExt",
                    Size = 20,
                    Value = cCusipExt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAlternateID",
                    Size = 25,
                    Value = cAlternateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cModule",
                    Size = 15,
                    Value = cModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKey,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfValidateModuleSecurityMappingResult>("EXEC @returnValue = [dbo].[sp_dlfValidateModuleSecurityMapping] @cSymbol = @cSymbol, @cCusip = @cCusip, @cCusipExt = @cCusipExt, @cAlternateID = @cAlternateID, @cModule = @cModule, @cDataStamp = @cDataStamp, @iKey = @iKey OUTPUT", sqlParameters, cancellationToken);

            iKey.SetValue(parameteriKey.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFValidateNvstResult>> sp_DLFValidateNvstAsync(int? iKeyAccount, int? iKeySymbol, Guid? gUidDLF, string cTableName, string cDataStamp, DateTime? dAcquired, DateTime? dAsOf, int? iCodeBasisType, int? iKeyModule, OutputParameter<int?> iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyNvst = new SqlParameter
            {
                ParameterName = "iKeyNvst",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyNvst?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyAccount",
                    Value = iKeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeySymbol",
                    Value = iKeySymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gUidDLF",
                    Value = gUidDLF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cTableName",
                    Size = 25,
                    Value = cTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "dAcquired",
                    Value = dAcquired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dAsOf",
                    Value = dAsOf ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeBasisType",
                    Value = iCodeBasisType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriKeyNvst,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFValidateNvstResult>("EXEC @returnValue = [dbo].[sp_DLFValidateNvst] @iKeyAccount = @iKeyAccount, @iKeySymbol = @iKeySymbol, @gUidDLF = @gUidDLF, @cTableName = @cTableName, @cDataStamp = @cDataStamp, @dAcquired = @dAcquired, @dAsOf = @dAsOf, @iCodeBasisType = @iCodeBasisType, @iKeyModule = @iKeyModule, @iKeyNvst = @iKeyNvst OUTPUT", sqlParameters, cancellationToken);

            iKeyNvst.SetValue(parameteriKeyNvst.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValidatePlaceholderAsync(int? iKeyRep, string cDataStamp, OutputParameter<int?> iKeyAAName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyAAName = new SqlParameter
            {
                ParameterName = "iKeyAAName",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyAAName?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyRep",
                    Value = iKeyRep ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKeyAAName,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValidatePlaceholder] @iKeyRep = @iKeyRep, @cDataStamp = @cDataStamp, @iKeyAAName = @iKeyAAName OUTPUT", sqlParameters, cancellationToken);

            iKeyAAName.SetValue(parameteriKeyAAName.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValidatePositionAsync(int? iKeyNvst, DateTime? dPosition, decimal? nUnits, int? iKeyModule, int? iCodeAcctValueType, int? iCodePositionDateType, string cDataStamp, decimal? nUnitPrice, OutputParameter<bool?> bAdded, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbAdded = new SqlParameter
            {
                ParameterName = "bAdded",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bAdded?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPosition",
                    Value = dPosition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "nUnits",
                    Precision = 16,
                    Scale = 6,
                    Value = nUnits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeAcctValueType",
                    Value = iCodeAcctValueType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePositionDateType",
                    Value = iCodePositionDateType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nUnitPrice",
                    Precision = 16,
                    Scale = 6,
                    Value = nUnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterbAdded,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValidatePosition] @iKeyNvst = @iKeyNvst, @dPosition = @dPosition, @nUnits = @nUnits, @iKeyModule = @iKeyModule, @iCodeAcctValueType = @iCodeAcctValueType, @iCodePositionDateType = @iCodePositionDateType, @cDataStamp = @cDataStamp, @nUnitPrice = @nUnitPrice, @bAdded = @bAdded OUTPUT", sqlParameters, cancellationToken);

            bAdded.SetValue(parameterbAdded.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValidateProcessOfPriceAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValidateProcessOfPrice] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFValidateSecuritiesBySetsResult>> sp_DLFValidateSecuritiesBySetsAsync(int? iKeyProcess, string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 50,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFValidateSecuritiesBySetsResult>("EXEC @returnValue = [dbo].[sp_DLFValidateSecuritiesBySets] @iKeyProcess = @iKeyProcess, @cTable = @cTable", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_dlfValidateSecurityMappingAsync(string cSymbol, string cCusip, string cCusipExt, string cAlternateID, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKey = new SqlParameter
            {
                ParameterName = "iKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cSymbol",
                    Size = 30,
                    Value = cSymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCusip",
                    Size = 20,
                    Value = cCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCusipExt",
                    Size = 20,
                    Value = cCusipExt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cAlternateID",
                    Size = 25,
                    Value = cAlternateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKey,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dlfValidateSecurityMapping] @cSymbol = @cSymbol, @cCusip = @cCusip, @cCusipExt = @cCusipExt, @cAlternateID = @cAlternateID, @iKey = @iKey OUTPUT", sqlParameters, cancellationToken);

            iKey.SetValue(parameteriKey.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFValidateUnAssignedAccountsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFValidateUnAssignedAccounts]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFValidatevwDSTSecurityResult>> sp_DLFValidatevwDSTSecurityAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFValidatevwDSTSecurityResult>("EXEC @returnValue = [dbo].[sp_DLFValidatevwDSTSecurity]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DLFWedBushCheckBondFactoringResult>> sp_DLFWedBushCheckBondFactoringAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DLFWedBushCheckBondFactoringResult>("EXEC @returnValue = [dbo].[sp_DLFWedBushCheckBondFactoring] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFWedBushCheckForReinvestmentsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFWedBushCheckForReinvestments] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_dlfWedbushPreCheckPartiesResult>> sp_dlfWedbushPreCheckPartiesAsync(int? iKeyBatch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyBatch",
                    Value = iKeyBatch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_dlfWedbushPreCheckPartiesResult>("EXEC @returnValue = [dbo].[sp_dlfWedbushPreCheckParties] @iKeyBatch = @iKeyBatch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DLFWedbushPrecheckPositionsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DLFWedbushPrecheckPositions] @iKeyProcess = @iKeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DlfZapAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DlfZap]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_DlfZeroOutInitReconcilesAsync(int? iKeyModule, int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyProcess",
                    Value = ikeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DlfZeroOutInitReconciles] @iKeyModule = @iKeyModule, @ikeyProcess = @ikeyProcess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DSTSetupSecurityViewResult>> sp_DSTSetupSecurityViewAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DSTSetupSecurityViewResult>("EXEC @returnValue = [dbo].[sp_DSTSetupSecurityView]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_EmailAddressSkipArchiveSetAsync(string cEmailAddress, bool? bCheckState, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEmailAddress",
                    Size = 100,
                    Value = cEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bCheckState",
                    Value = bCheckState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_EmailAddressSkipArchiveSet] @cEmailAddress = @cEmailAddress, @bCheckState = @bCheckState", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_EmailAddressSkipArchiveStatusDifferentAsync(string cEmailAddress, bool? bCheckState, OutputParameter<bool?> bDifferent, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbDifferent = new SqlParameter
            {
                ParameterName = "bDifferent",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bDifferent?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEmailAddress",
                    Size = 100,
                    Value = cEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bCheckState",
                    Value = bCheckState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbDifferent,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_EmailAddressSkipArchiveStatusDifferent] @cEmailAddress = @cEmailAddress, @bCheckState = @bCheckState, @bDifferent = @bDifferent OUTPUT", sqlParameters, cancellationToken);

            bDifferent.SetValue(parameterbDifferent.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ExchangeGetStoreKeyFromStoreIDAsync(string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, int? iSynchType, int? iKeyUser, string cUserInitials, OutputParameter<int?> iKeyStore, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyStore = new SqlParameter
            {
                ParameterName = "iKeyStore",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyStore?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cStoreID",
                    Size = 512,
                    Value = cStoreID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderName",
                    Size = 60,
                    Value = cOutlookFolderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderEntryID",
                    Size = 512,
                    Value = cOutlookFolderEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreMachineName",
                    Size = -1,
                    Value = cStoreMachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserName",
                    Size = -1,
                    Value = cStoreUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserDomainName",
                    Size = -1,
                    Value = cStoreUserDomainName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iSynchType",
                    Value = iSynchType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKeyStore,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ExchangeGetStoreKeyFromStoreID] @cStoreID = @cStoreID, @cOutlookFolderName = @cOutlookFolderName, @cOutlookFolderEntryID = @cOutlookFolderEntryID, @cStoreMachineName = @cStoreMachineName, @cStoreUserName = @cStoreUserName, @cStoreUserDomainName = @cStoreUserDomainName, @iSynchType = @iSynchType, @iKeyUser = @iKeyUser, @cUserInitials = @cUserInitials, @iKeyStore = @iKeyStore OUTPUT", sqlParameters, cancellationToken);

            iKeyStore.SetValue(parameteriKeyStore.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ExchangeSetSysPrefDefaultsAllUsersResult>> sp_ExchangeSetSysPrefDefaultsAllUsersAsync(string cDomain, string cWebURL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cDomain",
                    Size = 60,
                    Value = cDomain ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cWebURL",
                    Size = 100,
                    Value = cWebURL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ExchangeSetSysPrefDefaultsAllUsersResult>("EXEC @returnValue = [dbo].[sp_ExchangeSetSysPrefDefaultsAllUsers] @cDomain = @cDomain, @cWebURL = @cWebURL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ExchangeSynchCalendarEventResult>> sp_ExchangeSynchCalendarEventAsync(string cEntryID, string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, string cOutlookEventType, DateTime? tEventStart, DateTime? tEventEnd, DateTime? tEventDue, string cEventDescription, string cEventLocation, bool? bAllDayEvent, int? iImportance, int? iNumberOfContactsForThisEvent, string mEventNotes, bool? bRecurs, int? iRecurrenceType, int? iDayOfWeekMask, DateTime? tRecurBeginDate, DateTime? tRecurEndDate, int? iRecurInterval, int? iRecurInstance, int? iRecurMonthOfYear, int? iRecurDayOfMonth, DateTime? tOriginalStart, bool? bCompleted, bool? bExchangeServer, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, OutputParameter<Guid?> gAACalEventGUID, OutputParameter<bool?> bEventAlreadyExistsInAA, OutputParameter<bool?> bEventUpdatedInAA, OutputParameter<bool?> bEventAlreadyUpToDateInAA, OutputParameter<bool?> bEventNewerInAA, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergAACalEventGUID = new SqlParameter
            {
                ParameterName = "gAACalEventGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gAACalEventGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterbEventAlreadyExistsInAA = new SqlParameter
            {
                ParameterName = "bEventAlreadyExistsInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventAlreadyExistsInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventUpdatedInAA = new SqlParameter
            {
                ParameterName = "bEventUpdatedInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventUpdatedInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventAlreadyUpToDateInAA = new SqlParameter
            {
                ParameterName = "bEventAlreadyUpToDateInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventAlreadyUpToDateInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventNewerInAA = new SqlParameter
            {
                ParameterName = "bEventNewerInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventNewerInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreID",
                    Size = -1,
                    Value = cStoreID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderName",
                    Size = 60,
                    Value = cOutlookFolderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderEntryID",
                    Size = 512,
                    Value = cOutlookFolderEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreMachineName",
                    Size = -1,
                    Value = cStoreMachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserName",
                    Size = -1,
                    Value = cStoreUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserDomainName",
                    Size = -1,
                    Value = cStoreUserDomainName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookEventType",
                    Size = 1,
                    Value = cOutlookEventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tEventStart",
                    Value = tEventStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tEventEnd",
                    Value = tEventEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tEventDue",
                    Value = tEventDue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cEventDescription",
                    Size = 50,
                    Value = cEventDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cEventLocation",
                    Size = 50,
                    Value = cEventLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bAllDayEvent",
                    Value = bAllDayEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iImportance",
                    Value = iImportance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iNumberOfContactsForThisEvent",
                    Value = iNumberOfContactsForThisEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mEventNotes",
                    Size = -1,
                    Value = mEventNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bRecurs",
                    Value = bRecurs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurrenceType",
                    Value = iRecurrenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iDayOfWeekMask",
                    Value = iDayOfWeekMask ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tRecurBeginDate",
                    Value = tRecurBeginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tRecurEndDate",
                    Value = tRecurEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurInterval",
                    Value = iRecurInterval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurInstance",
                    Value = iRecurInstance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurMonthOfYear",
                    Value = iRecurMonthOfYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurDayOfMonth",
                    Value = iRecurDayOfMonth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tOriginalStart",
                    Value = tOriginalStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bCompleted",
                    Value = bCompleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bExchangeServer",
                    Value = bExchangeServer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parametergAACalEventGUID,
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bForceUpdate",
                    Value = bForceUpdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "tLastUpdatedInExchange",
                    Value = tLastUpdatedInExchange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iExchangeDateOffsetFromSQLHours",
                    Value = iExchangeDateOffsetFromSQLHours ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbEventAlreadyExistsInAA,
                parameterbEventUpdatedInAA,
                parameterbEventAlreadyUpToDateInAA,
                parameterbEventNewerInAA,
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ExchangeSynchCalendarEventResult>("EXEC @returnValue = [dbo].[sp_ExchangeSynchCalendarEvent] @cEntryID = @cEntryID, @cStoreID = @cStoreID, @cOutlookFolderName = @cOutlookFolderName, @cOutlookFolderEntryID = @cOutlookFolderEntryID, @cStoreMachineName = @cStoreMachineName, @cStoreUserName = @cStoreUserName, @cStoreUserDomainName = @cStoreUserDomainName, @cOutlookEventType = @cOutlookEventType, @tEventStart = @tEventStart, @tEventEnd = @tEventEnd, @tEventDue = @tEventDue, @cEventDescription = @cEventDescription, @cEventLocation = @cEventLocation, @bAllDayEvent = @bAllDayEvent, @iImportance = @iImportance, @iNumberOfContactsForThisEvent = @iNumberOfContactsForThisEvent, @mEventNotes = @mEventNotes, @bRecurs = @bRecurs, @iRecurrenceType = @iRecurrenceType, @iDayOfWeekMask = @iDayOfWeekMask, @tRecurBeginDate = @tRecurBeginDate, @tRecurEndDate = @tRecurEndDate, @iRecurInterval = @iRecurInterval, @iRecurInstance = @iRecurInstance, @iRecurMonthOfYear = @iRecurMonthOfYear, @iRecurDayOfMonth = @iRecurDayOfMonth, @tOriginalStart = @tOriginalStart, @bCompleted = @bCompleted, @bExchangeServer = @bExchangeServer, @gAACalEventGUID = @gAACalEventGUID OUTPUT, @iKeyUser = @iKeyUser, @bForceUpdate = @bForceUpdate, @tLastUpdatedInExchange = @tLastUpdatedInExchange, @iExchangeDateOffsetFromSQLHours = @iExchangeDateOffsetFromSQLHours, @bEventAlreadyExistsInAA = @bEventAlreadyExistsInAA OUTPUT, @bEventUpdatedInAA = @bEventUpdatedInAA OUTPUT, @bEventAlreadyUpToDateInAA = @bEventAlreadyUpToDateInAA OUTPUT, @bEventNewerInAA = @bEventNewerInAA OUTPUT, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            gAACalEventGUID.SetValue(parametergAACalEventGUID.Value);
            bEventAlreadyExistsInAA.SetValue(parameterbEventAlreadyExistsInAA.Value);
            bEventUpdatedInAA.SetValue(parameterbEventUpdatedInAA.Value);
            bEventAlreadyUpToDateInAA.SetValue(parameterbEventAlreadyUpToDateInAA.Value);
            bEventNewerInAA.SetValue(parameterbEventNewerInAA.Value);
            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ExchangeSynchCalendarEvent_2Result>> sp_ExchangeSynchCalendarEvent_2Async(string cEntryID, string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, string cOutlookEventType, DateTime? tEventStart, DateTime? tEventEnd, DateTime? tEventDue, string cEventDescription, string cEventLocation, bool? bAllDayEvent, int? iImportance, int? iNumberOfContactsForThisEvent, string mEventNotes, bool? bRecurs, int? iRecurrenceType, int? iDayOfWeekMask, DateTime? tRecurBeginDate, DateTime? tRecurEndDate, int? iRecurInterval, int? iRecurInstance, int? iRecurMonthOfYear, int? iRecurDayOfMonth, DateTime? tOriginalStart, bool? bCompleted, int? iSynchType, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, string cDeleteCalendarEventContextMessage, string cProgramVersion, string cWithNameEmails_DoubleBarDelimited, int? iEventColor, OutputParameter<Guid?> gAACalEventGUID, OutputParameter<bool?> bEventAlreadyExistsInAA, OutputParameter<bool?> bEventUpdatedInAA, OutputParameter<bool?> bEventAlreadyUpToDateInAA, OutputParameter<bool?> bEventNewerInAA, OutputParameter<int?> iEventDetailsSet, OutputParameter<string> cWithNameEmailsNotFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergAACalEventGUID = new SqlParameter
            {
                ParameterName = "gAACalEventGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gAACalEventGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterbEventAlreadyExistsInAA = new SqlParameter
            {
                ParameterName = "bEventAlreadyExistsInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventAlreadyExistsInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventUpdatedInAA = new SqlParameter
            {
                ParameterName = "bEventUpdatedInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventUpdatedInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventAlreadyUpToDateInAA = new SqlParameter
            {
                ParameterName = "bEventAlreadyUpToDateInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventAlreadyUpToDateInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventNewerInAA = new SqlParameter
            {
                ParameterName = "bEventNewerInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventNewerInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercWithNameEmailsNotFound = new SqlParameter
            {
                ParameterName = "cWithNameEmailsNotFound",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cWithNameEmailsNotFound?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreID",
                    Size = -1,
                    Value = cStoreID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderName",
                    Size = 60,
                    Value = cOutlookFolderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderEntryID",
                    Size = 512,
                    Value = cOutlookFolderEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreMachineName",
                    Size = -1,
                    Value = cStoreMachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserName",
                    Size = -1,
                    Value = cStoreUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserDomainName",
                    Size = -1,
                    Value = cStoreUserDomainName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookEventType",
                    Size = 1,
                    Value = cOutlookEventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tEventStart",
                    Value = tEventStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tEventEnd",
                    Value = tEventEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tEventDue",
                    Value = tEventDue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cEventDescription",
                    Size = 50,
                    Value = cEventDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cEventLocation",
                    Size = 50,
                    Value = cEventLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bAllDayEvent",
                    Value = bAllDayEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iImportance",
                    Value = iImportance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iNumberOfContactsForThisEvent",
                    Value = iNumberOfContactsForThisEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mEventNotes",
                    Size = -1,
                    Value = mEventNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bRecurs",
                    Value = bRecurs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurrenceType",
                    Value = iRecurrenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iDayOfWeekMask",
                    Value = iDayOfWeekMask ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tRecurBeginDate",
                    Value = tRecurBeginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tRecurEndDate",
                    Value = tRecurEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurInterval",
                    Value = iRecurInterval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurInstance",
                    Value = iRecurInstance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurMonthOfYear",
                    Value = iRecurMonthOfYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurDayOfMonth",
                    Value = iRecurDayOfMonth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tOriginalStart",
                    Value = tOriginalStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bCompleted",
                    Value = bCompleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iSynchType",
                    Value = iSynchType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametergAACalEventGUID,
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bForceUpdate",
                    Value = bForceUpdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "tLastUpdatedInExchange",
                    Value = tLastUpdatedInExchange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iExchangeDateOffsetFromSQLHours",
                    Value = iExchangeDateOffsetFromSQLHours ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDeleteCalendarEventContextMessage",
                    Size = -1,
                    Value = cDeleteCalendarEventContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cProgramVersion",
                    Size = 100,
                    Value = cProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cWithNameEmails_DoubleBarDelimited",
                    Size = -1,
                    Value = cWithNameEmails_DoubleBarDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterbEventAlreadyExistsInAA,
                parameterbEventUpdatedInAA,
                parameterbEventAlreadyUpToDateInAA,
                parameterbEventNewerInAA,
                parameteriEventDetailsSet,
                parametercWithNameEmailsNotFound,
                new SqlParameter
                {
                    ParameterName = "iEventColor",
                    Value = iEventColor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ExchangeSynchCalendarEvent_2Result>("EXEC @returnValue = [dbo].[sp_ExchangeSynchCalendarEvent_2] @cEntryID = @cEntryID, @cStoreID = @cStoreID, @cOutlookFolderName = @cOutlookFolderName, @cOutlookFolderEntryID = @cOutlookFolderEntryID, @cStoreMachineName = @cStoreMachineName, @cStoreUserName = @cStoreUserName, @cStoreUserDomainName = @cStoreUserDomainName, @cOutlookEventType = @cOutlookEventType, @tEventStart = @tEventStart, @tEventEnd = @tEventEnd, @tEventDue = @tEventDue, @cEventDescription = @cEventDescription, @cEventLocation = @cEventLocation, @bAllDayEvent = @bAllDayEvent, @iImportance = @iImportance, @iNumberOfContactsForThisEvent = @iNumberOfContactsForThisEvent, @mEventNotes = @mEventNotes, @bRecurs = @bRecurs, @iRecurrenceType = @iRecurrenceType, @iDayOfWeekMask = @iDayOfWeekMask, @tRecurBeginDate = @tRecurBeginDate, @tRecurEndDate = @tRecurEndDate, @iRecurInterval = @iRecurInterval, @iRecurInstance = @iRecurInstance, @iRecurMonthOfYear = @iRecurMonthOfYear, @iRecurDayOfMonth = @iRecurDayOfMonth, @tOriginalStart = @tOriginalStart, @bCompleted = @bCompleted, @iSynchType = @iSynchType, @gAACalEventGUID = @gAACalEventGUID OUTPUT, @iKeyUser = @iKeyUser, @bForceUpdate = @bForceUpdate, @tLastUpdatedInExchange = @tLastUpdatedInExchange, @iExchangeDateOffsetFromSQLHours = @iExchangeDateOffsetFromSQLHours, @cDeleteCalendarEventContextMessage = @cDeleteCalendarEventContextMessage, @cProgramVersion = @cProgramVersion, @cWithNameEmails_DoubleBarDelimited = @cWithNameEmails_DoubleBarDelimited, @bEventAlreadyExistsInAA = @bEventAlreadyExistsInAA OUTPUT, @bEventUpdatedInAA = @bEventUpdatedInAA OUTPUT, @bEventAlreadyUpToDateInAA = @bEventAlreadyUpToDateInAA OUTPUT, @bEventNewerInAA = @bEventNewerInAA OUTPUT, @iEventDetailsSet = @iEventDetailsSet OUTPUT, @cWithNameEmailsNotFound = @cWithNameEmailsNotFound OUTPUT, @iEventColor = @iEventColor", sqlParameters, cancellationToken);

            gAACalEventGUID.SetValue(parametergAACalEventGUID.Value);
            bEventAlreadyExistsInAA.SetValue(parameterbEventAlreadyExistsInAA.Value);
            bEventUpdatedInAA.SetValue(parameterbEventUpdatedInAA.Value);
            bEventAlreadyUpToDateInAA.SetValue(parameterbEventAlreadyUpToDateInAA.Value);
            bEventNewerInAA.SetValue(parameterbEventNewerInAA.Value);
            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            cWithNameEmailsNotFound.SetValue(parametercWithNameEmailsNotFound.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ExchangeSynchCalendarEvent_3Result>> sp_ExchangeSynchCalendarEvent_3Async(string cEntryID, string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, string cOutlookEventType, DateTime? tEventStart, DateTime? tEventEnd, DateTime? tEventDue, string cEventDescription, string cEventLocation, bool? bAllDayEvent, int? iImportance, int? iNumberOfContactsForThisEvent, string mEventNotes, bool? bRecurs, int? iRecurrenceType, int? iDayOfWeekMask, DateTime? tRecurBeginDate, DateTime? tRecurEndDate, int? iRecurInterval, int? iRecurInstance, int? iRecurMonthOfYear, int? iRecurDayOfMonth, DateTime? tOriginalStart, bool? bCompleted, int? iSynchType, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, string cDeleteCalendarEventContextMessage, string cProgramVersion, string cWithNameEmails_DoubleBarDelimited, int? iEventColor, OutputParameter<Guid?> gAACalEventGUID, OutputParameter<bool?> bEventAlreadyExistsInAA, OutputParameter<bool?> bEventUpdatedInAA, OutputParameter<bool?> bEventAlreadyUpToDateInAA, OutputParameter<bool?> bEventNewerInAA, OutputParameter<int?> iEventDetailsSet, OutputParameter<string> cWithNameEmailsNotFound, OutputParameter<bool?> bEventDeletedInAA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergAACalEventGUID = new SqlParameter
            {
                ParameterName = "gAACalEventGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gAACalEventGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterbEventAlreadyExistsInAA = new SqlParameter
            {
                ParameterName = "bEventAlreadyExistsInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventAlreadyExistsInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventUpdatedInAA = new SqlParameter
            {
                ParameterName = "bEventUpdatedInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventUpdatedInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventAlreadyUpToDateInAA = new SqlParameter
            {
                ParameterName = "bEventAlreadyUpToDateInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventAlreadyUpToDateInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventNewerInAA = new SqlParameter
            {
                ParameterName = "bEventNewerInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventNewerInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercWithNameEmailsNotFound = new SqlParameter
            {
                ParameterName = "cWithNameEmailsNotFound",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cWithNameEmailsNotFound?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterbEventDeletedInAA = new SqlParameter
            {
                ParameterName = "bEventDeletedInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventDeletedInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreID",
                    Size = -1,
                    Value = cStoreID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderName",
                    Size = 60,
                    Value = cOutlookFolderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderEntryID",
                    Size = 512,
                    Value = cOutlookFolderEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreMachineName",
                    Size = -1,
                    Value = cStoreMachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserName",
                    Size = -1,
                    Value = cStoreUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserDomainName",
                    Size = -1,
                    Value = cStoreUserDomainName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookEventType",
                    Size = 1,
                    Value = cOutlookEventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tEventStart",
                    Value = tEventStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tEventEnd",
                    Value = tEventEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tEventDue",
                    Value = tEventDue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cEventDescription",
                    Size = 50,
                    Value = cEventDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cEventLocation",
                    Size = 50,
                    Value = cEventLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bAllDayEvent",
                    Value = bAllDayEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iImportance",
                    Value = iImportance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iNumberOfContactsForThisEvent",
                    Value = iNumberOfContactsForThisEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mEventNotes",
                    Size = -1,
                    Value = mEventNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bRecurs",
                    Value = bRecurs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurrenceType",
                    Value = iRecurrenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iDayOfWeekMask",
                    Value = iDayOfWeekMask ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tRecurBeginDate",
                    Value = tRecurBeginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tRecurEndDate",
                    Value = tRecurEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurInterval",
                    Value = iRecurInterval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurInstance",
                    Value = iRecurInstance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurMonthOfYear",
                    Value = iRecurMonthOfYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurDayOfMonth",
                    Value = iRecurDayOfMonth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tOriginalStart",
                    Value = tOriginalStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bCompleted",
                    Value = bCompleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iSynchType",
                    Value = iSynchType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametergAACalEventGUID,
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bForceUpdate",
                    Value = bForceUpdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "tLastUpdatedInExchange",
                    Value = tLastUpdatedInExchange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iExchangeDateOffsetFromSQLHours",
                    Value = iExchangeDateOffsetFromSQLHours ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDeleteCalendarEventContextMessage",
                    Size = -1,
                    Value = cDeleteCalendarEventContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cProgramVersion",
                    Size = 100,
                    Value = cProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cWithNameEmails_DoubleBarDelimited",
                    Size = -1,
                    Value = cWithNameEmails_DoubleBarDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterbEventAlreadyExistsInAA,
                parameterbEventUpdatedInAA,
                parameterbEventAlreadyUpToDateInAA,
                parameterbEventNewerInAA,
                parameteriEventDetailsSet,
                parametercWithNameEmailsNotFound,
                new SqlParameter
                {
                    ParameterName = "iEventColor",
                    Value = iEventColor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbEventDeletedInAA,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ExchangeSynchCalendarEvent_3Result>("EXEC @returnValue = [dbo].[sp_ExchangeSynchCalendarEvent_3] @cEntryID = @cEntryID, @cStoreID = @cStoreID, @cOutlookFolderName = @cOutlookFolderName, @cOutlookFolderEntryID = @cOutlookFolderEntryID, @cStoreMachineName = @cStoreMachineName, @cStoreUserName = @cStoreUserName, @cStoreUserDomainName = @cStoreUserDomainName, @cOutlookEventType = @cOutlookEventType, @tEventStart = @tEventStart, @tEventEnd = @tEventEnd, @tEventDue = @tEventDue, @cEventDescription = @cEventDescription, @cEventLocation = @cEventLocation, @bAllDayEvent = @bAllDayEvent, @iImportance = @iImportance, @iNumberOfContactsForThisEvent = @iNumberOfContactsForThisEvent, @mEventNotes = @mEventNotes, @bRecurs = @bRecurs, @iRecurrenceType = @iRecurrenceType, @iDayOfWeekMask = @iDayOfWeekMask, @tRecurBeginDate = @tRecurBeginDate, @tRecurEndDate = @tRecurEndDate, @iRecurInterval = @iRecurInterval, @iRecurInstance = @iRecurInstance, @iRecurMonthOfYear = @iRecurMonthOfYear, @iRecurDayOfMonth = @iRecurDayOfMonth, @tOriginalStart = @tOriginalStart, @bCompleted = @bCompleted, @iSynchType = @iSynchType, @gAACalEventGUID = @gAACalEventGUID OUTPUT, @iKeyUser = @iKeyUser, @bForceUpdate = @bForceUpdate, @tLastUpdatedInExchange = @tLastUpdatedInExchange, @iExchangeDateOffsetFromSQLHours = @iExchangeDateOffsetFromSQLHours, @cDeleteCalendarEventContextMessage = @cDeleteCalendarEventContextMessage, @cProgramVersion = @cProgramVersion, @cWithNameEmails_DoubleBarDelimited = @cWithNameEmails_DoubleBarDelimited, @bEventAlreadyExistsInAA = @bEventAlreadyExistsInAA OUTPUT, @bEventUpdatedInAA = @bEventUpdatedInAA OUTPUT, @bEventAlreadyUpToDateInAA = @bEventAlreadyUpToDateInAA OUTPUT, @bEventNewerInAA = @bEventNewerInAA OUTPUT, @iEventDetailsSet = @iEventDetailsSet OUTPUT, @cWithNameEmailsNotFound = @cWithNameEmailsNotFound OUTPUT, @iEventColor = @iEventColor, @bEventDeletedInAA = @bEventDeletedInAA OUTPUT", sqlParameters, cancellationToken);

            gAACalEventGUID.SetValue(parametergAACalEventGUID.Value);
            bEventAlreadyExistsInAA.SetValue(parameterbEventAlreadyExistsInAA.Value);
            bEventUpdatedInAA.SetValue(parameterbEventUpdatedInAA.Value);
            bEventAlreadyUpToDateInAA.SetValue(parameterbEventAlreadyUpToDateInAA.Value);
            bEventNewerInAA.SetValue(parameterbEventNewerInAA.Value);
            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            cWithNameEmailsNotFound.SetValue(parametercWithNameEmailsNotFound.Value);
            bEventDeletedInAA.SetValue(parameterbEventDeletedInAA.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ExchangeSynchCalendarEvent_4Result>> sp_ExchangeSynchCalendarEvent_4Async(string cEntryID, int? iStoreKeyID, string cOutlookEventType, DateTime? tEventStart, DateTime? tEventEnd, DateTime? tEventDue, string cEventDescription, string cEventLocation, bool? bAllDayEvent, int? iImportance, int? iNumberOfContactsForThisEvent, string mEventNotes, bool? bRecurs, int? iRecurrenceType, int? iDayOfWeekMask, DateTime? tRecurBeginDate, DateTime? tRecurEndDate, int? iRecurInterval, int? iRecurInstance, int? iRecurMonthOfYear, int? iRecurDayOfMonth, DateTime? tOriginalStart, bool? bCompleted, int? iSynchType, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, string cDeleteCalendarEventContextMessage, string cProgramVersion, string cWithNameEmails_DoubleBarDelimited, int? iEventColor, OutputParameter<Guid?> gAACalEventGUID, OutputParameter<bool?> bEventAlreadyExistsInAA, OutputParameter<bool?> bEventUpdatedInAA, OutputParameter<bool?> bEventAlreadyUpToDateInAA, OutputParameter<bool?> bEventNewerInAA, OutputParameter<int?> iEventDetailsSet, OutputParameter<string> cWithNameEmailsNotFound, OutputParameter<bool?> bEventDeletedInAA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergAACalEventGUID = new SqlParameter
            {
                ParameterName = "gAACalEventGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gAACalEventGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterbEventAlreadyExistsInAA = new SqlParameter
            {
                ParameterName = "bEventAlreadyExistsInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventAlreadyExistsInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventUpdatedInAA = new SqlParameter
            {
                ParameterName = "bEventUpdatedInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventUpdatedInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventAlreadyUpToDateInAA = new SqlParameter
            {
                ParameterName = "bEventAlreadyUpToDateInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventAlreadyUpToDateInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbEventNewerInAA = new SqlParameter
            {
                ParameterName = "bEventNewerInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventNewerInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercWithNameEmailsNotFound = new SqlParameter
            {
                ParameterName = "cWithNameEmailsNotFound",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cWithNameEmailsNotFound?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterbEventDeletedInAA = new SqlParameter
            {
                ParameterName = "bEventDeletedInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bEventDeletedInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookEventType",
                    Size = 1,
                    Value = cOutlookEventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tEventStart",
                    Value = tEventStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tEventEnd",
                    Value = tEventEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tEventDue",
                    Value = tEventDue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cEventDescription",
                    Size = 50,
                    Value = cEventDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cEventLocation",
                    Size = 50,
                    Value = cEventLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bAllDayEvent",
                    Value = bAllDayEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iImportance",
                    Value = iImportance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iNumberOfContactsForThisEvent",
                    Value = iNumberOfContactsForThisEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mEventNotes",
                    Size = -1,
                    Value = mEventNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bRecurs",
                    Value = bRecurs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurrenceType",
                    Value = iRecurrenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iDayOfWeekMask",
                    Value = iDayOfWeekMask ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tRecurBeginDate",
                    Value = tRecurBeginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tRecurEndDate",
                    Value = tRecurEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurInterval",
                    Value = iRecurInterval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurInstance",
                    Value = iRecurInstance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurMonthOfYear",
                    Value = iRecurMonthOfYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurDayOfMonth",
                    Value = iRecurDayOfMonth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tOriginalStart",
                    Value = tOriginalStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bCompleted",
                    Value = bCompleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iSynchType",
                    Value = iSynchType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametergAACalEventGUID,
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bForceUpdate",
                    Value = bForceUpdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "tLastUpdatedInExchange",
                    Value = tLastUpdatedInExchange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iExchangeDateOffsetFromSQLHours",
                    Value = iExchangeDateOffsetFromSQLHours ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDeleteCalendarEventContextMessage",
                    Size = -1,
                    Value = cDeleteCalendarEventContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cProgramVersion",
                    Size = 100,
                    Value = cProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cWithNameEmails_DoubleBarDelimited",
                    Size = -1,
                    Value = cWithNameEmails_DoubleBarDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterbEventAlreadyExistsInAA,
                parameterbEventUpdatedInAA,
                parameterbEventAlreadyUpToDateInAA,
                parameterbEventNewerInAA,
                parameteriEventDetailsSet,
                parametercWithNameEmailsNotFound,
                new SqlParameter
                {
                    ParameterName = "iEventColor",
                    Value = iEventColor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbEventDeletedInAA,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ExchangeSynchCalendarEvent_4Result>("EXEC @returnValue = [dbo].[sp_ExchangeSynchCalendarEvent_4] @cEntryID = @cEntryID, @iStoreKeyID = @iStoreKeyID, @cOutlookEventType = @cOutlookEventType, @tEventStart = @tEventStart, @tEventEnd = @tEventEnd, @tEventDue = @tEventDue, @cEventDescription = @cEventDescription, @cEventLocation = @cEventLocation, @bAllDayEvent = @bAllDayEvent, @iImportance = @iImportance, @iNumberOfContactsForThisEvent = @iNumberOfContactsForThisEvent, @mEventNotes = @mEventNotes, @bRecurs = @bRecurs, @iRecurrenceType = @iRecurrenceType, @iDayOfWeekMask = @iDayOfWeekMask, @tRecurBeginDate = @tRecurBeginDate, @tRecurEndDate = @tRecurEndDate, @iRecurInterval = @iRecurInterval, @iRecurInstance = @iRecurInstance, @iRecurMonthOfYear = @iRecurMonthOfYear, @iRecurDayOfMonth = @iRecurDayOfMonth, @tOriginalStart = @tOriginalStart, @bCompleted = @bCompleted, @iSynchType = @iSynchType, @gAACalEventGUID = @gAACalEventGUID OUTPUT, @iKeyUser = @iKeyUser, @bForceUpdate = @bForceUpdate, @tLastUpdatedInExchange = @tLastUpdatedInExchange, @iExchangeDateOffsetFromSQLHours = @iExchangeDateOffsetFromSQLHours, @cDeleteCalendarEventContextMessage = @cDeleteCalendarEventContextMessage, @cProgramVersion = @cProgramVersion, @cWithNameEmails_DoubleBarDelimited = @cWithNameEmails_DoubleBarDelimited, @bEventAlreadyExistsInAA = @bEventAlreadyExistsInAA OUTPUT, @bEventUpdatedInAA = @bEventUpdatedInAA OUTPUT, @bEventAlreadyUpToDateInAA = @bEventAlreadyUpToDateInAA OUTPUT, @bEventNewerInAA = @bEventNewerInAA OUTPUT, @iEventDetailsSet = @iEventDetailsSet OUTPUT, @cWithNameEmailsNotFound = @cWithNameEmailsNotFound OUTPUT, @iEventColor = @iEventColor, @bEventDeletedInAA = @bEventDeletedInAA OUTPUT", sqlParameters, cancellationToken);

            gAACalEventGUID.SetValue(parametergAACalEventGUID.Value);
            bEventAlreadyExistsInAA.SetValue(parameterbEventAlreadyExistsInAA.Value);
            bEventUpdatedInAA.SetValue(parameterbEventUpdatedInAA.Value);
            bEventAlreadyUpToDateInAA.SetValue(parameterbEventAlreadyUpToDateInAA.Value);
            bEventNewerInAA.SetValue(parameterbEventNewerInAA.Value);
            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            cWithNameEmailsNotFound.SetValue(parametercWithNameEmailsNotFound.Value);
            bEventDeletedInAA.SetValue(parameterbEventDeletedInAA.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ExchangeSynchCalendarEvent_CheckRecurExceptionResult>> sp_ExchangeSynchCalendarEvent_CheckRecurExceptionAsync(DateTime? tEventStart, DateTime? tEventEnd, DateTime? tEventDue, DateTime? tOriginalStart, bool? bCompleted, bool? bDeleted, string cUserInitials, int? iKeyUser, int? iRecurOption, bool? bGenerateDetails, string DeleteCalendarEventContextMessage, string ProgramVersion, OutputParameter<Guid?> gAACalEventGUID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergAACalEventGUID = new SqlParameter
            {
                ParameterName = "gAACalEventGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gAACalEventGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parametergAACalEventGUID,
                new SqlParameter
                {
                    ParameterName = "tEventStart",
                    Value = tEventStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tEventEnd",
                    Value = tEventEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tEventDue",
                    Value = tEventDue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tOriginalStart",
                    Value = tOriginalStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bCompleted",
                    Value = bCompleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bDeleted",
                    Value = bDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurOption",
                    Value = iRecurOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bGenerateDetails",
                    Value = bGenerateDetails ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteCalendarEventContextMessage",
                    Size = -1,
                    Value = DeleteCalendarEventContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramVersion",
                    Size = 100,
                    Value = ProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ExchangeSynchCalendarEvent_CheckRecurExceptionResult>("EXEC @returnValue = [dbo].[sp_ExchangeSynchCalendarEvent_CheckRecurException] @gAACalEventGUID = @gAACalEventGUID OUTPUT, @tEventStart = @tEventStart, @tEventEnd = @tEventEnd, @tEventDue = @tEventDue, @tOriginalStart = @tOriginalStart, @bCompleted = @bCompleted, @bDeleted = @bDeleted, @cUserInitials = @cUserInitials, @iKeyUser = @iKeyUser, @iRecurOption = @iRecurOption, @bGenerateDetails = @bGenerateDetails, @DeleteCalendarEventContextMessage = @DeleteCalendarEventContextMessage, @ProgramVersion = @ProgramVersion, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            gAACalEventGUID.SetValue(parametergAACalEventGUID.Value);
            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ExchangeSynchCalendarEvent_SetRecurResult>> sp_ExchangeSynchCalendarEvent_SetRecurAsync(Guid? gAACalEventGUID, int? iKeyEvent, int? iRecurOption, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gAACalEventGUID",
                    Value = gAACalEventGUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyEvent",
                    Value = iKeyEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iRecurOption",
                    Value = iRecurOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ExchangeSynchCalendarEvent_SetRecurResult>("EXEC @returnValue = [dbo].[sp_ExchangeSynchCalendarEvent_SetRecur] @gAACalEventGUID = @gAACalEventGUID, @iKeyEvent = @iKeyEvent, @iRecurOption = @iRecurOption, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ExchangeSynchContactAddressAsync(Guid? gAANameGUID, int? iCodeAddressLocation, bool? bPrimaryAddress, string cStreetLine, string cCity, string cState, string cZip, string cCountry, string cCompanyName, string cJobTitle, int? iSynchType, int? iKeyUser, OutputParameter<Guid?> gAAAddressGUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergAAAddressGUID = new SqlParameter
            {
                ParameterName = "gAAAddressGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gAAAddressGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gAANameGUID",
                    Value = gAANameGUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeAddressLocation",
                    Value = iCodeAddressLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bPrimaryAddress",
                    Value = bPrimaryAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cStreetLine",
                    Size = 50,
                    Value = cStreetLine ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCity",
                    Size = 30,
                    Value = cCity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cState",
                    Size = 5,
                    Value = cState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cZip",
                    Size = 10,
                    Value = cZip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCountry",
                    Size = 40,
                    Value = cCountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCompanyName",
                    Size = 50,
                    Value = cCompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cJobTitle",
                    Size = 50,
                    Value = cJobTitle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iSynchType",
                    Value = iSynchType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametergAAAddressGUID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ExchangeSynchContactAddress] @gAANameGUID = @gAANameGUID, @iCodeAddressLocation = @iCodeAddressLocation, @bPrimaryAddress = @bPrimaryAddress, @cStreetLine = @cStreetLine, @cCity = @cCity, @cState = @cState, @cZip = @cZip, @cCountry = @cCountry, @cCompanyName = @cCompanyName, @cJobTitle = @cJobTitle, @iSynchType = @iSynchType, @iKeyUser = @iKeyUser, @gAAAddressGUID = @gAAAddressGUID OUTPUT", sqlParameters, cancellationToken);

            gAAAddressGUID.SetValue(parametergAAAddressGUID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ExchangeSynchContactEmailAddressAsync(Guid? gAANameGUID, bool? bPrimaryAddress, string cEmailAddress, string cCompanyName, int? iSynchType, int? iKeyUser, OutputParameter<Guid?> gAAEmailGUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergAAEmailGUID = new SqlParameter
            {
                ParameterName = "gAAEmailGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gAAEmailGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gAANameGUID",
                    Value = gAANameGUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "bPrimaryAddress",
                    Value = bPrimaryAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cEmailAddress",
                    Size = 100,
                    Value = cEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCompanyName",
                    Size = 50,
                    Value = cCompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iSynchType",
                    Value = iSynchType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametergAAEmailGUID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ExchangeSynchContactEmailAddress] @gAANameGUID = @gAANameGUID, @bPrimaryAddress = @bPrimaryAddress, @cEmailAddress = @cEmailAddress, @cCompanyName = @cCompanyName, @iSynchType = @iSynchType, @iKeyUser = @iKeyUser, @gAAEmailGUID = @gAAEmailGUID OUTPUT", sqlParameters, cancellationToken);

            gAAEmailGUID.SetValue(parametergAAEmailGUID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ExchangeSynchContactNameResult>> sp_ExchangeSynchContactNameAsync(string cEntryID, string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, bool? bExchangeServer, string cFirstname, string cMiddlename, string cLastname, string cPrefix, string cSuffix, string cNickName, string cCompanyName, string cFileAs, DateTime? tDOB, DateTime? tAnniversary, int? iCodeGender, string cProfession, string cCategories, int? iKeyProducer, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, bool? bUpdateBirthdateAndAnniversary, OutputParameter<Guid?> gAANameGUID, OutputParameter<bool?> bNameAlreadyExistsInAA, OutputParameter<bool?> bNameUpdatedInAA, OutputParameter<bool?> bNameAlreadyUpToDateInAA, OutputParameter<bool?> bNameNewerInAA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergAANameGUID = new SqlParameter
            {
                ParameterName = "gAANameGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gAANameGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterbNameAlreadyExistsInAA = new SqlParameter
            {
                ParameterName = "bNameAlreadyExistsInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNameAlreadyExistsInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNameUpdatedInAA = new SqlParameter
            {
                ParameterName = "bNameUpdatedInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNameUpdatedInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNameAlreadyUpToDateInAA = new SqlParameter
            {
                ParameterName = "bNameAlreadyUpToDateInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNameAlreadyUpToDateInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNameNewerInAA = new SqlParameter
            {
                ParameterName = "bNameNewerInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNameNewerInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreID",
                    Size = -1,
                    Value = cStoreID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderName",
                    Size = 60,
                    Value = cOutlookFolderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderEntryID",
                    Size = 512,
                    Value = cOutlookFolderEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreMachineName",
                    Size = -1,
                    Value = cStoreMachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserName",
                    Size = -1,
                    Value = cStoreUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserDomainName",
                    Size = -1,
                    Value = cStoreUserDomainName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bExchangeServer",
                    Value = bExchangeServer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parametergAANameGUID,
                new SqlParameter
                {
                    ParameterName = "cFirstname",
                    Size = 30,
                    Value = cFirstname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cMiddlename",
                    Size = 20,
                    Value = cMiddlename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cLastname",
                    Size = 60,
                    Value = cLastname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cPrefix",
                    Size = 20,
                    Value = cPrefix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cSuffix",
                    Size = 20,
                    Value = cSuffix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNickName",
                    Size = 30,
                    Value = cNickName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCompanyName",
                    Size = 60,
                    Value = cCompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cFileAs",
                    Size = 60,
                    Value = cFileAs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tDOB",
                    Value = tDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tAnniversary",
                    Value = tAnniversary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeGender",
                    Value = iCodeGender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cProfession",
                    Size = 50,
                    Value = cProfession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCategories",
                    Size = -1,
                    Value = cCategories ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer",
                    Value = iKeyProducer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bForceUpdate",
                    Value = bForceUpdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "tLastUpdatedInExchange",
                    Value = tLastUpdatedInExchange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iExchangeDateOffsetFromSQLHours",
                    Value = iExchangeDateOffsetFromSQLHours ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bUpdateBirthdateAndAnniversary",
                    Value = bUpdateBirthdateAndAnniversary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbNameAlreadyExistsInAA,
                parameterbNameUpdatedInAA,
                parameterbNameAlreadyUpToDateInAA,
                parameterbNameNewerInAA,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ExchangeSynchContactNameResult>("EXEC @returnValue = [dbo].[sp_ExchangeSynchContactName] @cEntryID = @cEntryID, @cStoreID = @cStoreID, @cOutlookFolderName = @cOutlookFolderName, @cOutlookFolderEntryID = @cOutlookFolderEntryID, @cStoreMachineName = @cStoreMachineName, @cStoreUserName = @cStoreUserName, @cStoreUserDomainName = @cStoreUserDomainName, @bExchangeServer = @bExchangeServer, @gAANameGUID = @gAANameGUID OUTPUT, @cFirstname = @cFirstname, @cMiddlename = @cMiddlename, @cLastname = @cLastname, @cPrefix = @cPrefix, @cSuffix = @cSuffix, @cNickName = @cNickName, @cCompanyName = @cCompanyName, @cFileAs = @cFileAs, @tDOB = @tDOB, @tAnniversary = @tAnniversary, @iCodeGender = @iCodeGender, @cProfession = @cProfession, @cCategories = @cCategories, @iKeyProducer = @iKeyProducer, @iKeyUser = @iKeyUser, @bForceUpdate = @bForceUpdate, @tLastUpdatedInExchange = @tLastUpdatedInExchange, @iExchangeDateOffsetFromSQLHours = @iExchangeDateOffsetFromSQLHours, @bUpdateBirthdateAndAnniversary = @bUpdateBirthdateAndAnniversary, @bNameAlreadyExistsInAA = @bNameAlreadyExistsInAA OUTPUT, @bNameUpdatedInAA = @bNameUpdatedInAA OUTPUT, @bNameAlreadyUpToDateInAA = @bNameAlreadyUpToDateInAA OUTPUT, @bNameNewerInAA = @bNameNewerInAA OUTPUT", sqlParameters, cancellationToken);

            gAANameGUID.SetValue(parametergAANameGUID.Value);
            bNameAlreadyExistsInAA.SetValue(parameterbNameAlreadyExistsInAA.Value);
            bNameUpdatedInAA.SetValue(parameterbNameUpdatedInAA.Value);
            bNameAlreadyUpToDateInAA.SetValue(parameterbNameAlreadyUpToDateInAA.Value);
            bNameNewerInAA.SetValue(parameterbNameNewerInAA.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ExchangeSynchContactName2Result>> sp_ExchangeSynchContactName2Async(string cEntryID, string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, int? iSynchType, string cFirstname, string cMiddlename, string cLastname, string cPrefix, string cSuffix, string cNickName, string cCompanyName, string cFileAs, DateTime? tDOB, DateTime? tAnniversary, int? iCodeGender, string cProfession, string cCategories, int? iKeyProducer, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, bool? bUpdateBirthdateAndAnniversary, string cDefaultNametypeDescription, OutputParameter<Guid?> gAANameGUID, OutputParameter<bool?> bNameAlreadyExistsInAA, OutputParameter<bool?> bNameUpdatedInAA, OutputParameter<bool?> bNameAlreadyUpToDateInAA, OutputParameter<bool?> bNameNewerInAA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergAANameGUID = new SqlParameter
            {
                ParameterName = "gAANameGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gAANameGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterbNameAlreadyExistsInAA = new SqlParameter
            {
                ParameterName = "bNameAlreadyExistsInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNameAlreadyExistsInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNameUpdatedInAA = new SqlParameter
            {
                ParameterName = "bNameUpdatedInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNameUpdatedInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNameAlreadyUpToDateInAA = new SqlParameter
            {
                ParameterName = "bNameAlreadyUpToDateInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNameAlreadyUpToDateInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbNameNewerInAA = new SqlParameter
            {
                ParameterName = "bNameNewerInAA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bNameNewerInAA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreID",
                    Size = -1,
                    Value = cStoreID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderName",
                    Size = 60,
                    Value = cOutlookFolderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cOutlookFolderEntryID",
                    Size = 512,
                    Value = cOutlookFolderEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreMachineName",
                    Size = -1,
                    Value = cStoreMachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserName",
                    Size = -1,
                    Value = cStoreUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cStoreUserDomainName",
                    Size = -1,
                    Value = cStoreUserDomainName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iSynchType",
                    Value = iSynchType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametergAANameGUID,
                new SqlParameter
                {
                    ParameterName = "cFirstname",
                    Size = 30,
                    Value = cFirstname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cMiddlename",
                    Size = 20,
                    Value = cMiddlename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cLastname",
                    Size = 60,
                    Value = cLastname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cPrefix",
                    Size = 20,
                    Value = cPrefix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cSuffix",
                    Size = 20,
                    Value = cSuffix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNickName",
                    Size = 30,
                    Value = cNickName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCompanyName",
                    Size = 60,
                    Value = cCompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cFileAs",
                    Size = 60,
                    Value = cFileAs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tDOB",
                    Value = tDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tAnniversary",
                    Value = tAnniversary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeGender",
                    Value = iCodeGender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cProfession",
                    Size = 50,
                    Value = cProfession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCategories",
                    Size = -1,
                    Value = cCategories ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer",
                    Value = iKeyProducer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bForceUpdate",
                    Value = bForceUpdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "tLastUpdatedInExchange",
                    Value = tLastUpdatedInExchange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iExchangeDateOffsetFromSQLHours",
                    Value = iExchangeDateOffsetFromSQLHours ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bUpdateBirthdateAndAnniversary",
                    Value = bUpdateBirthdateAndAnniversary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbNameAlreadyExistsInAA,
                parameterbNameUpdatedInAA,
                parameterbNameAlreadyUpToDateInAA,
                parameterbNameNewerInAA,
                new SqlParameter
                {
                    ParameterName = "cDefaultNametypeDescription",
                    Size = 50,
                    Value = cDefaultNametypeDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ExchangeSynchContactName2Result>("EXEC @returnValue = [dbo].[sp_ExchangeSynchContactName2] @cEntryID = @cEntryID, @cStoreID = @cStoreID, @cOutlookFolderName = @cOutlookFolderName, @cOutlookFolderEntryID = @cOutlookFolderEntryID, @cStoreMachineName = @cStoreMachineName, @cStoreUserName = @cStoreUserName, @cStoreUserDomainName = @cStoreUserDomainName, @iSynchType = @iSynchType, @gAANameGUID = @gAANameGUID OUTPUT, @cFirstname = @cFirstname, @cMiddlename = @cMiddlename, @cLastname = @cLastname, @cPrefix = @cPrefix, @cSuffix = @cSuffix, @cNickName = @cNickName, @cCompanyName = @cCompanyName, @cFileAs = @cFileAs, @tDOB = @tDOB, @tAnniversary = @tAnniversary, @iCodeGender = @iCodeGender, @cProfession = @cProfession, @cCategories = @cCategories, @iKeyProducer = @iKeyProducer, @iKeyUser = @iKeyUser, @bForceUpdate = @bForceUpdate, @tLastUpdatedInExchange = @tLastUpdatedInExchange, @iExchangeDateOffsetFromSQLHours = @iExchangeDateOffsetFromSQLHours, @bUpdateBirthdateAndAnniversary = @bUpdateBirthdateAndAnniversary, @bNameAlreadyExistsInAA = @bNameAlreadyExistsInAA OUTPUT, @bNameUpdatedInAA = @bNameUpdatedInAA OUTPUT, @bNameAlreadyUpToDateInAA = @bNameAlreadyUpToDateInAA OUTPUT, @bNameNewerInAA = @bNameNewerInAA OUTPUT, @cDefaultNametypeDescription = @cDefaultNametypeDescription", sqlParameters, cancellationToken);

            gAANameGUID.SetValue(parametergAANameGUID.Value);
            bNameAlreadyExistsInAA.SetValue(parameterbNameAlreadyExistsInAA.Value);
            bNameUpdatedInAA.SetValue(parameterbNameUpdatedInAA.Value);
            bNameAlreadyUpToDateInAA.SetValue(parameterbNameAlreadyUpToDateInAA.Value);
            bNameNewerInAA.SetValue(parameterbNameNewerInAA.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ExchangeSynchContactNotesAsync(Guid? gAANameGUID, string cNotes, int? iSynchType, int? iKeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gAANameGUID",
                    Value = gAANameGUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cNotes",
                    Size = -1,
                    Value = cNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iSynchType",
                    Value = iSynchType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ExchangeSynchContactNotes] @gAANameGUID = @gAANameGUID, @cNotes = @cNotes, @iSynchType = @iSynchType, @iKeyUser = @iKeyUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ExchangeSynchContactPhoneAsync(Guid? gAANameGUID, int? iCodePhoneLocation, bool? bPrimaryPhone, string cFullPhone, int? iSynchType, int? iKeyUser, bool? bSkipParsingPhoneValuesInvalidFormat, OutputParameter<Guid?> gAAPhoneGUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergAAPhoneGUID = new SqlParameter
            {
                ParameterName = "gAAPhoneGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gAAPhoneGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gAANameGUID",
                    Value = gAANameGUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePhoneLocation",
                    Value = iCodePhoneLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bPrimaryPhone",
                    Value = bPrimaryPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cFullPhone",
                    Size = 100,
                    Value = cFullPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iSynchType",
                    Value = iSynchType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipParsingPhoneValuesInvalidFormat",
                    Value = bSkipParsingPhoneValuesInvalidFormat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parametergAAPhoneGUID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ExchangeSynchContactPhone] @gAANameGUID = @gAANameGUID, @iCodePhoneLocation = @iCodePhoneLocation, @bPrimaryPhone = @bPrimaryPhone, @cFullPhone = @cFullPhone, @iSynchType = @iSynchType, @iKeyUser = @iKeyUser, @bSkipParsingPhoneValuesInvalidFormat = @bSkipParsingPhoneValuesInvalidFormat, @gAAPhoneGUID = @gAAPhoneGUID OUTPUT", sqlParameters, cancellationToken);

            gAAPhoneGUID.SetValue(parametergAAPhoneGUID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ExchangeSynchContactWebAddressAsync(Guid? gAANameGUID, bool? bPrimaryAddress, string cWebAddress, string cCompanyName, int? iSynchType, int? iKeyUser, OutputParameter<Guid?> gAAWebGUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergAAWebGUID = new SqlParameter
            {
                ParameterName = "gAAWebGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = gAAWebGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gAANameGUID",
                    Value = gAANameGUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "bPrimaryAddress",
                    Value = bPrimaryAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cWebAddress",
                    Size = 100,
                    Value = cWebAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCompanyName",
                    Size = 50,
                    Value = cCompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iSynchType",
                    Value = iSynchType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametergAAWebGUID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ExchangeSynchContactWebAddress] @gAANameGUID = @gAANameGUID, @bPrimaryAddress = @bPrimaryAddress, @cWebAddress = @cWebAddress, @cCompanyName = @cCompanyName, @iSynchType = @iSynchType, @iKeyUser = @iKeyUser, @gAAWebGUID = @gAAWebGUID OUTPUT", sqlParameters, cancellationToken);

            gAAWebGUID.SetValue(parametergAAWebGUID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_FileHistoryLogRowCountByFileHistoryLogKeyResult>> sp_FileHistoryLogRowCountByFileHistoryLogKeyAsync(int? iFileHistorylogkeyid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iFileHistorylogkeyid",
                    Value = iFileHistorylogkeyid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_FileHistoryLogRowCountByFileHistoryLogKeyResult>("EXEC @returnValue = [dbo].[sp_FileHistoryLogRowCountByFileHistoryLogKey] @iFileHistorylogkeyid = @iFileHistorylogkeyid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_FinanceLogixExportByNameResult>> sp_FinanceLogixExportByNameAsync(int? ikeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyName",
                    Value = ikeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_FinanceLogixExportByNameResult>("EXEC @returnValue = [dbo].[sp_FinanceLogixExportByName] @ikeyName = @ikeyName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_FMGSuiteEmailContactsResult>> sp_FMGSuiteEmailContactsAsync(string NameKeyIDsDelimited, int? PhoneLocationCodeKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NameKeyIDsDelimited",
                    Size = -1,
                    Value = NameKeyIDsDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneLocationCodeKeyID",
                    Value = PhoneLocationCodeKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_FMGSuiteEmailContactsResult>("EXEC @returnValue = [dbo].[sp_FMGSuiteEmailContacts] @NameKeyIDsDelimited = @NameKeyIDsDelimited, @PhoneLocationCodeKeyID = @PhoneLocationCodeKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventEveryNDaysAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventEveryNDays] @iCalEventID = @iCalEventID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventEveryNDaysInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventEveryNDaysInternal] @iCalEventID = @iCalEventID, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventEveryNMonthAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventEveryNMonth] @iCalEventID = @iCalEventID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventEveryNMonthInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventEveryNMonthInternal] @iCalEventID = @iCalEventID, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventMonthlyAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventMonthly] @iCalEventID = @iCalEventID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventMonthlyInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventMonthlyInternal] @iCalEventID = @iCalEventID, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventMultiDaysAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventMultiDays] @iCalEventID = @iCalEventID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventMultiDaysInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventMultiDaysInternal] @iCalEventID = @iCalEventID, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventNotificationsAsync(int? iKeyEvent, DateTime? dCheckDate, int? iNumberOfMinuteAdvanceNotice, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyEvent",
                    Value = iKeyEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dCheckDate",
                    Value = dCheckDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iNumberOfMinuteAdvanceNotice",
                    Value = iNumberOfMinuteAdvanceNotice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventNotifications] @iKeyEvent = @iKeyEvent, @dCheckDate = @dCheckDate, @iNumberOfMinuteAdvanceNotice = @iNumberOfMinuteAdvanceNotice", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventNWeekdayNMonthlyAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventNWeekdayNMonthly] @iCalEventID = @iCalEventID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventNWeekdayNMonthlyInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventNWeekdayNMonthlyInternal] @iCalEventID = @iCalEventID, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventNWeekdayNMonthYearlyAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventNWeekdayNMonthYearly] @iCalEventID = @iCalEventID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventNWeekdayNMonthYearlyInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventNWeekdayNMonthYearlyInternal] @iCalEventID = @iCalEventID, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventOnceAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventOnce] @iCalEventID = @iCalEventID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventOnceEveryYearAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventOnceEveryYear] @iCalEventID = @iCalEventID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventOnceEveryYearInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventOnceEveryYearInternal] @iCalEventID = @iCalEventID, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GenerateEventsGenericResult>> sp_GenerateEventsGenericAsync(int? iCalEventID, DateTime? dCheckDate, int? iNumberOfMinuteAdvanceNotice, int? iOccurOption, bool? bGenerateEvents, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dCheckDate",
                    Value = dCheckDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iNumberOfMinuteAdvanceNotice",
                    Value = iNumberOfMinuteAdvanceNotice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iOccurOption",
                    Value = iOccurOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bGenerateEvents",
                    Value = bGenerateEvents ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GenerateEventsGenericResult>("EXEC @returnValue = [dbo].[sp_GenerateEventsGeneric] @iCalEventID = @iCalEventID, @dCheckDate = @dCheckDate, @iNumberOfMinuteAdvanceNotice = @iNumberOfMinuteAdvanceNotice, @iOccurOption = @iOccurOption, @bGenerateEvents = @bGenerateEvents", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventWeeklyAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventWeekly] @iCalEventID = @iCalEventID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventWeeklyEveryNWeekAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventWeeklyEveryNWeek] @iCalEventID = @iCalEventID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventWeeklyEveryNWeekInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventWeeklyEveryNWeekInternal] @iCalEventID = @iCalEventID, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventWeeklyInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventWeeklyInternal] @iCalEventID = @iCalEventID, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventYearlyAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventYearly] @iCalEventID = @iCalEventID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateEventYearlyInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsSet = new SqlParameter
            {
                ParameterName = "iEventDetailsSet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsSet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalEventID",
                    Value = iCalEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsSet,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateEventYearlyInternal] @iCalEventID = @iCalEventID, @iEventDetailsSet = @iEventDetailsSet OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsSet.SetValue(parameteriEventDetailsSet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateInsuranceRelationsAsync(int? iKeyPolicy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyPolicy",
                    Value = iKeyPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateInsuranceRelations] @iKeyPolicy = @iKeyPolicy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateInvestmentSplitTransactionsAsync(int? iSymbolKey, int? iGeneratedKey, int? iTransactionType, decimal? nRatio, DateTime? dTransaction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iSymbolKey",
                    Value = iSymbolKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iGeneratedKey",
                    Value = iGeneratedKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iTransactionType",
                    Value = iTransactionType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nRatio",
                    Precision = 9,
                    Scale = 4,
                    Value = nRatio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "dTransaction",
                    Value = dTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateInvestmentSplitTransactions] @iSymbolKey = @iSymbolKey, @iGeneratedKey = @iGeneratedKey, @iTransactionType = @iTransactionType, @nRatio = @nRatio, @dTransaction = @dTransaction", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GenerateUserNotificationsAsync(int? iKeyCalUser, DateTime? dCheckDate, int? iNumberOfMinuteAdvanceNotice, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyCalUser",
                    Value = iKeyCalUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dCheckDate",
                    Value = dCheckDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iNumberOfMinuteAdvanceNotice",
                    Value = iNumberOfMinuteAdvanceNotice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GenerateUserNotifications] @iKeyCalUser = @iKeyCalUser, @dCheckDate = @dCheckDate, @iNumberOfMinuteAdvanceNotice = @iNumberOfMinuteAdvanceNotice", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetActiveMessageCountResult>> sp_GetActiveMessageCountAsync(int? UserKeyID, string cComputerName, DateTime? dStationTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cComputerName",
                    Size = 50,
                    Value = cComputerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "dStationTime",
                    Value = dStationTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetActiveMessageCountResult>("EXEC @returnValue = [dbo].[sp_GetActiveMessageCount] @UserKeyID = @UserKeyID, @cComputerName = @cComputerName, @dStationTime = @dStationTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetAllCodeForeignKeysResult>> sp_GetAllCodeForeignKeysAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetAllCodeForeignKeysResult>("EXEC @returnValue = [dbo].[sp_GetAllCodeForeignKeys]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetApplicationInfoByClientIDResult>> sp_GetApplicationInfoByClientIDAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetApplicationInfoByClientIDResult>("EXEC @returnValue = [dbo].[sp_GetApplicationInfoByClientID] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetAppointmentDataSetResult>> sp_GetAppointmentDataSetAsync(int? CalUserKey, DateTime? BeginDate, DateTime? EndDate, bool? IncludeCalls, bool? IncludeTasks, bool? IncludeAppointments, bool? OneRecordPerDay, bool? LimitTo50Rows, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CalUserKey",
                    Value = CalUserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BeginDate",
                    Value = BeginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeCalls",
                    Value = IncludeCalls ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeTasks",
                    Value = IncludeTasks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeAppointments",
                    Value = IncludeAppointments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OneRecordPerDay",
                    Value = OneRecordPerDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LimitTo50Rows",
                    Value = LimitTo50Rows ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetAppointmentDataSetResult>("EXEC @returnValue = [dbo].[sp_GetAppointmentDataSet] @CalUserKey = @CalUserKey, @BeginDate = @BeginDate, @EndDate = @EndDate, @IncludeCalls = @IncludeCalls, @IncludeTasks = @IncludeTasks, @IncludeAppointments = @IncludeAppointments, @OneRecordPerDay = @OneRecordPerDay, @LimitTo50Rows = @LimitTo50Rows", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetAppointmentDataSet2Result>> sp_GetAppointmentDataSet2Async(int? CalUserKey, DateTime? BeginDate, DateTime? EndDate, bool? IncludeCalls, bool? IncludeTasks, bool? IncludeAppointments, bool? OneRecordPerDay, bool? LimitTo50Rows, bool? IncludeWorkflowEvents, bool? IncludeDepartmentEvents, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CalUserKey",
                    Value = CalUserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BeginDate",
                    Value = BeginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeCalls",
                    Value = IncludeCalls ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeTasks",
                    Value = IncludeTasks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeAppointments",
                    Value = IncludeAppointments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OneRecordPerDay",
                    Value = OneRecordPerDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LimitTo50Rows",
                    Value = LimitTo50Rows ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeWorkflowEvents",
                    Value = IncludeWorkflowEvents ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeDepartmentEvents",
                    Value = IncludeDepartmentEvents ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetAppointmentDataSet2Result>("EXEC @returnValue = [dbo].[sp_GetAppointmentDataSet2] @CalUserKey = @CalUserKey, @BeginDate = @BeginDate, @EndDate = @EndDate, @IncludeCalls = @IncludeCalls, @IncludeTasks = @IncludeTasks, @IncludeAppointments = @IncludeAppointments, @OneRecordPerDay = @OneRecordPerDay, @LimitTo50Rows = @LimitTo50Rows, @IncludeWorkflowEvents = @IncludeWorkflowEvents, @IncludeDepartmentEvents = @IncludeDepartmentEvents", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetCalendarUserLookupDataResult>> sp_GetCalendarUserLookupDataAsync(int? iKeySkipCalendarUserKey, int? iKeyAccessUserKey, bool? bShowDeactivated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySkipCalendarUserKey",
                    Value = iKeySkipCalendarUserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyAccessUserKey",
                    Value = iKeyAccessUserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bShowDeactivated",
                    Value = bShowDeactivated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetCalendarUserLookupDataResult>("EXEC @returnValue = [dbo].[sp_GetCalendarUserLookupData] @iKeySkipCalendarUserKey = @iKeySkipCalendarUserKey, @iKeyAccessUserKey = @iKeyAccessUserKey, @bShowDeactivated = @bShowDeactivated", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetCityStateCountyCountryFromZipResult>> sp_GetCityStateCountyCountryFromZipAsync(string cZip, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cZip",
                    Size = 10,
                    Value = cZip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetCityStateCountyCountryFromZipResult>("EXEC @returnValue = [dbo].[sp_GetCityStateCountyCountryFromZip] @cZip = @cZip", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetClientReportDataResult>> sp_GetClientReportDataAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetClientReportDataResult>("EXEC @returnValue = [dbo].[sp_GetClientReportData] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetCodeKeyAsync(string cCodeType, string cCode, string cDescription, bool? bAddIfNotFound, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKey = new SqlParameter
            {
                ParameterName = "iKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cCodeType",
                    Size = 12,
                    Value = cCodeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cCode",
                    Size = 12,
                    Value = cCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cDescription",
                    Size = 50,
                    Value = cDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bAddIfNotFound",
                    Value = bAddIfNotFound ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameteriKey,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetCodeKey] @cCodeType = @cCodeType, @cCode = @cCode, @cDescription = @cDescription, @bAddIfNotFound = @bAddIfNotFound, @iKey = @iKey OUTPUT", sqlParameters, cancellationToken);

            iKey.SetValue(parameteriKey.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetCostBasisAverageForNvstResult>> sp_GetCostBasisAverageForNvstAsync(int? iKeyNvst, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEndDate",
                    Value = dEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetCostBasisAverageForNvstResult>("EXEC @returnValue = [dbo].[sp_GetCostBasisAverageForNvst] @iKeyNvst = @iKeyNvst, @dEndDate = @dEndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetCostBasisLotAndGainsForNvstResult>> sp_GetCostBasisLotAndGainsForNvstAsync(int? iKeyNvst, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEndDate",
                    Value = dEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetCostBasisLotAndGainsForNvstResult>("EXEC @returnValue = [dbo].[sp_GetCostBasisLotAndGainsForNvst] @iKeyNvst = @iKeyNvst, @dEndDate = @dEndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetDataToProcessByModuleResult>> sp_GetDataToProcessByModuleAsync(int? iKeyModule, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetDataToProcessByModuleResult>("EXEC @returnValue = [dbo].[sp_GetDataToProcessByModule] @iKeyModule = @iKeyModule", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetDaysFromMaskAsync(int? iDayMask, OutputParameter<bool?> bMonday, OutputParameter<bool?> bTuesday, OutputParameter<bool?> bWednesday, OutputParameter<bool?> bThursday, OutputParameter<bool?> bFriday, OutputParameter<bool?> bSaturday, OutputParameter<bool?> bSunday, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbMonday = new SqlParameter
            {
                ParameterName = "bMonday",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bMonday?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbTuesday = new SqlParameter
            {
                ParameterName = "bTuesday",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bTuesday?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbWednesday = new SqlParameter
            {
                ParameterName = "bWednesday",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bWednesday?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbThursday = new SqlParameter
            {
                ParameterName = "bThursday",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bThursday?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbFriday = new SqlParameter
            {
                ParameterName = "bFriday",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFriday?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbSaturday = new SqlParameter
            {
                ParameterName = "bSaturday",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bSaturday?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbSunday = new SqlParameter
            {
                ParameterName = "bSunday",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bSunday?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iDayMask",
                    Value = iDayMask ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbMonday,
                parameterbTuesday,
                parameterbWednesday,
                parameterbThursday,
                parameterbFriday,
                parameterbSaturday,
                parameterbSunday,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetDaysFromMask] @iDayMask = @iDayMask, @bMonday = @bMonday OUTPUT, @bTuesday = @bTuesday OUTPUT, @bWednesday = @bWednesday OUTPUT, @bThursday = @bThursday OUTPUT, @bFriday = @bFriday OUTPUT, @bSaturday = @bSaturday OUTPUT, @bSunday = @bSunday OUTPUT", sqlParameters, cancellationToken);

            bMonday.SetValue(parameterbMonday.Value);
            bTuesday.SetValue(parameterbTuesday.Value);
            bWednesday.SetValue(parameterbWednesday.Value);
            bThursday.SetValue(parameterbThursday.Value);
            bFriday.SetValue(parameterbFriday.Value);
            bSaturday.SetValue(parameterbSaturday.Value);
            bSunday.SetValue(parameterbSunday.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetDistinctDayViewDatesResult>> sp_GetDistinctDayViewDatesAsync(int? iCalendarKeyID, DateTime? tCurrentDate, bool? bIncludeTasksAndCalls, int? iCodeAppointment, int? iCodeTask, int? iCodeCall, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalendarKeyID",
                    Value = iCalendarKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tCurrentDate",
                    Value = tCurrentDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bIncludeTasksAndCalls",
                    Value = bIncludeTasksAndCalls ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeAppointment",
                    Value = iCodeAppointment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeTask",
                    Value = iCodeTask ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeCall",
                    Value = iCodeCall ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetDistinctDayViewDatesResult>("EXEC @returnValue = [dbo].[sp_GetDistinctDayViewDates] @iCalendarKeyID = @iCalendarKeyID, @tCurrentDate = @tCurrentDate, @bIncludeTasksAndCalls = @bIncludeTasksAndCalls, @iCodeAppointment = @iCodeAppointment, @iCodeTask = @iCodeTask, @iCodeCall = @iCodeCall", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetDuplicateNamesResult>> sp_GetDuplicateNamesAsync(string cFirstname, string cMiddlename, string cLastname, string cSuffix, string cTaxIDEncrypted, bool? bFlagOrganization, int? iCodeGender, DateTime? tDOB, int? iKeyProducer, string cDownloadID, int? iCodeDownloadIDModule, bool? bValidateMatchesFoundByDownloadID, bool? bValidateMatchesFoundByTaxID, bool? bLimitSearchToNamesThatHaveNoProducerAssigned, bool? bMatchPopulatedSuffixCriteriaToEmptySuffixInAA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cFirstname",
                    Size = 30,
                    Value = cFirstname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cMiddlename",
                    Size = 20,
                    Value = cMiddlename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cLastname",
                    Size = 60,
                    Value = cLastname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cSuffix",
                    Size = 20,
                    Value = cSuffix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cTaxIDEncrypted",
                    Size = 100,
                    Value = cTaxIDEncrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bFlagOrganization",
                    Value = bFlagOrganization ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeGender",
                    Value = iCodeGender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tDOB",
                    Value = tDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer",
                    Value = iKeyProducer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDownloadID",
                    Size = 50,
                    Value = cDownloadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeDownloadIDModule",
                    Value = iCodeDownloadIDModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bValidateMatchesFoundByDownloadID",
                    Value = bValidateMatchesFoundByDownloadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bValidateMatchesFoundByTaxID",
                    Value = bValidateMatchesFoundByTaxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bLimitSearchToNamesThatHaveNoProducerAssigned",
                    Value = bLimitSearchToNamesThatHaveNoProducerAssigned ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bMatchPopulatedSuffixCriteriaToEmptySuffixInAA",
                    Value = bMatchPopulatedSuffixCriteriaToEmptySuffixInAA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetDuplicateNamesResult>("EXEC @returnValue = [dbo].[sp_GetDuplicateNames] @cFirstname = @cFirstname, @cMiddlename = @cMiddlename, @cLastname = @cLastname, @cSuffix = @cSuffix, @cTaxIDEncrypted = @cTaxIDEncrypted, @bFlagOrganization = @bFlagOrganization, @iCodeGender = @iCodeGender, @tDOB = @tDOB, @iKeyProducer = @iKeyProducer, @cDownloadID = @cDownloadID, @iCodeDownloadIDModule = @iCodeDownloadIDModule, @bValidateMatchesFoundByDownloadID = @bValidateMatchesFoundByDownloadID, @bValidateMatchesFoundByTaxID = @bValidateMatchesFoundByTaxID, @bLimitSearchToNamesThatHaveNoProducerAssigned = @bLimitSearchToNamesThatHaveNoProducerAssigned, @bMatchPopulatedSuffixCriteriaToEmptySuffixInAA = @bMatchPopulatedSuffixCriteriaToEmptySuffixInAA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetEmailExportDataResult>> sp_GetEmailExportDataAsync(int? iNameKeyid, int? iAddrType, int? iPhoneType, bool? bPrimaryEmailOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyid",
                    Value = iNameKeyid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iAddrType",
                    Value = iAddrType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPhoneType",
                    Value = iPhoneType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bPrimaryEmailOnly",
                    Value = bPrimaryEmailOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetEmailExportDataResult>("EXEC @returnValue = [dbo].[sp_GetEmailExportData] @iNameKeyid = @iNameKeyid, @iAddrType = @iAddrType, @iPhoneType = @iPhoneType, @bPrimaryEmailOnly = @bPrimaryEmailOnly", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetEventSummaryByCalendarResult>> sp_GetEventSummaryByCalendarAsync(int? iCalenderKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCalenderKeyID",
                    Value = iCalenderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetEventSummaryByCalendarResult>("EXEC @returnValue = [dbo].[sp_GetEventSummaryByCalendar] @iCalenderKeyID = @iCalenderKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetEventSummaryByDeptResult>> sp_GetEventSummaryByDeptAsync(int? iDeptID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iDeptID",
                    Value = iDeptID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetEventSummaryByDeptResult>("EXEC @returnValue = [dbo].[sp_GetEventSummaryByDept] @iDeptID = @iDeptID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetEventSummaryByUserResult>> sp_GetEventSummaryByUserAsync(int? iUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iUserKeyID",
                    Value = iUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetEventSummaryByUserResult>("EXEC @returnValue = [dbo].[sp_GetEventSummaryByUser] @iUserKeyID = @iUserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetForUserMessageNotificationLogFormResult>> sp_GetForUserMessageNotificationLogFormAsync(int? iKeyMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyMessage",
                    Value = iKeyMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetForUserMessageNotificationLogFormResult>("EXEC @returnValue = [dbo].[sp_GetForUserMessageNotificationLogForm] @iKeyMessage = @iKeyMessage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetGreetingsAndAddresseesByNameResult>> sp_GetGreetingsAndAddresseesByNameAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetGreetingsAndAddresseesByNameResult>("EXEC @returnValue = [dbo].[sp_GetGreetingsAndAddresseesByName] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetHouseholdInfoByClientIDResult>> sp_GetHouseholdInfoByClientIDAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetHouseholdInfoByClientIDResult>("EXEC @returnValue = [dbo].[sp_GetHouseholdInfoByClientID] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetInsuranceExportDataResult>> sp_GetInsuranceExportDataAsync(int? iCoverageKeyid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyid",
                    Value = iCoverageKeyid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetInsuranceExportDataResult>("EXEC @returnValue = [dbo].[sp_GetInsuranceExportData] @iCoverageKeyid = @iCoverageKeyid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetInvestmentExportDataResult>> sp_GetInvestmentExportDataAsync(int? iNvstKeyid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNvstKeyid",
                    Value = iNvstKeyid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetInvestmentExportDataResult>("EXEC @returnValue = [dbo].[sp_GetInvestmentExportData] @iNvstKeyid = @iNvstKeyid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetLatestNoteTopicKeyByClientResult>> sp_GetLatestNoteTopicKeyByClientAsync(int? iKeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyName",
                    Value = iKeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetLatestNoteTopicKeyByClientResult>("EXEC @returnValue = [dbo].[sp_GetLatestNoteTopicKeyByClient] @iKeyName = @iKeyName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetLotForEditScreenResult>> sp_GetLotForEditScreenAsync(int? iKeyNvst, int? iKeySell, DateTime? dtSell, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeySell",
                    Value = iKeySell ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dtSell",
                    Value = dtSell ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetLotForEditScreenResult>("EXEC @returnValue = [dbo].[sp_GetLotForEditScreen] @iKeyNvst = @iKeyNvst, @iKeySell = @iKeySell, @dtSell = @dtSell", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetMessagesByUserIDResult>> sp_GetMessagesByUserIDAsync(int? iKeyUser, bool? bArchivedRecord, string cSourceOrDestination, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bArchivedRecord",
                    Value = bArchivedRecord ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cSourceOrDestination",
                    Size = 15,
                    Value = cSourceOrDestination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetMessagesByUserIDResult>("EXEC @returnValue = [dbo].[sp_GetMessagesByUserID] @iKeyUser = @iKeyUser, @bArchivedRecord = @bArchivedRecord, @cSourceOrDestination = @cSourceOrDestination", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNameActivityResult>> sp_GetNameActivityAsync(int? NameKeyID, int? UserKeyID, bool? bUserCanSeePrivateNotes, bool? bUserHasInsuranceModuleAccess, bool? bUserHasInvestmentsModuleAccess, int? iMonthsBack, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NameKeyID",
                    Value = NameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bUserCanSeePrivateNotes",
                    Value = bUserCanSeePrivateNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bUserHasInsuranceModuleAccess",
                    Value = bUserHasInsuranceModuleAccess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bUserHasInvestmentsModuleAccess",
                    Value = bUserHasInvestmentsModuleAccess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iMonthsBack",
                    Value = iMonthsBack ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNameActivityResult>("EXEC @returnValue = [dbo].[sp_GetNameActivity] @NameKeyID = @NameKeyID, @UserKeyID = @UserKeyID, @bUserCanSeePrivateNotes = @bUserCanSeePrivateNotes, @bUserHasInsuranceModuleAccess = @bUserHasInsuranceModuleAccess, @bUserHasInvestmentsModuleAccess = @bUserHasInvestmentsModuleAccess, @iMonthsBack = @iMonthsBack", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNameExportDataByTypeResult>> sp_GetNameExportDataByTypeAsync(int? iKeyName, int? iCodeAddressLocation, int? iCodePhoneLocation, int? iKeyEmail, bool? bReturnAllClientColumns, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyName",
                    Value = iKeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeAddressLocation",
                    Value = iCodeAddressLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePhoneLocation",
                    Value = iCodePhoneLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyEmail",
                    Value = iKeyEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnAllClientColumns",
                    Value = bReturnAllClientColumns ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNameExportDataByTypeResult>("EXEC @returnValue = [dbo].[sp_GetNameExportDataByType] @iKeyName = @iKeyName, @iCodeAddressLocation = @iCodeAddressLocation, @iCodePhoneLocation = @iCodePhoneLocation, @iKeyEmail = @iKeyEmail, @bReturnAllClientColumns = @bReturnAllClientColumns", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNameLinksResult>> sp_GetNameLinksAsync(int? NameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NameKeyID",
                    Value = NameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNameLinksResult>("EXEC @returnValue = [dbo].[sp_GetNameLinks] @NameKeyID = @NameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNAVOnOrAfterResult>> sp_GetNAVOnOrAfterAsync(int? iKeySymbol, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySymbol",
                    Value = iKeySymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEndDate",
                    Value = dEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNAVOnOrAfterResult>("EXEC @returnValue = [dbo].[sp_GetNAVOnOrAfter] @iKeySymbol = @iKeySymbol, @dEndDate = @dEndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNAVOnOrBeforeResult>> sp_GetNAVOnOrBeforeAsync(int? iKeySymbol, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySymbol",
                    Value = iKeySymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEndDate",
                    Value = dEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNAVOnOrBeforeResult>("EXEC @returnValue = [dbo].[sp_GetNAVOnOrBefore] @iKeySymbol = @iKeySymbol, @dEndDate = @dEndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNextKeyIDResult>> sp_GetNextKeyIDAsync(int? iTable, int? iCurMaxID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iTable",
                    Value = iTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCurMaxID",
                    Value = iCurMaxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNextKeyIDResult>("EXEC @returnValue = [dbo].[sp_GetNextKeyID] @iTable = @iTable, @iCurMaxID = @iCurMaxID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetNextKeyIDForSetInternalByNameAsync(string cTable, int? iCurMaxID, int? iKeyCountNeeded, OutputParameter<int?> iReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriReturn = new SqlParameter
            {
                ParameterName = "iReturn",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iReturn?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 60,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iCurMaxID",
                    Value = iCurMaxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCountNeeded",
                    Value = iKeyCountNeeded ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriReturn,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetNextKeyIDForSetInternalByName] @cTable = @cTable, @iCurMaxID = @iCurMaxID, @iKeyCountNeeded = @iKeyCountNeeded, @iReturn = @iReturn OUTPUT", sqlParameters, cancellationToken);

            iReturn.SetValue(parameteriReturn.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetNextKeyIDInternalAsync(int? iTable, int? iCurMaxID, OutputParameter<int?> iReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriReturn = new SqlParameter
            {
                ParameterName = "iReturn",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iReturn?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iTable",
                    Value = iTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCurMaxID",
                    Value = iCurMaxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriReturn,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetNextKeyIDInternal] @iTable = @iTable, @iCurMaxID = @iCurMaxID, @iReturn = @iReturn OUTPUT", sqlParameters, cancellationToken);

            iReturn.SetValue(parameteriReturn.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetNextKeyIDInternalByNameAsync(string cTable, int? iCurMaxID, OutputParameter<int?> iReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriReturn = new SqlParameter
            {
                ParameterName = "iReturn",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iReturn?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cTable",
                    Size = 60,
                    Value = cTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iCurMaxID",
                    Value = iCurMaxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriReturn,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetNextKeyIDInternalByName] @cTable = @cTable, @iCurMaxID = @iCurMaxID, @iReturn = @iReturn OUTPUT", sqlParameters, cancellationToken);

            iReturn.SetValue(parameteriReturn.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNoteListFormListResult>> sp_GetNoteListFormListAsync(int? iClientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iClientID",
                    Value = iClientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNoteListFormListResult>("EXEC @returnValue = [dbo].[sp_GetNoteListFormList] @iClientID = @iClientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNoteListFormListMessagesResult>> sp_GetNoteListFormListMessagesAsync(int? iClientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iClientID",
                    Value = iClientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNoteListFormListMessagesResult>("EXEC @returnValue = [dbo].[sp_GetNoteListFormListMessages] @iClientID = @iClientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNoteListPagingResult>> sp_GetNoteListPagingAsync(int? LinkKeyID, int? StartIndex, int? NumberOfNotes, DateTime? StartDate, DateTime? EndDate, bool? DateSort, string FilterKeyword, bool? SkipKeyword, DateTime? FilterStartDate, bool? SkipStartDate, DateTime? FilterEndDate, bool? SkipEndDate, string FilterUserInitials, bool? SkipUserInitials, OutputParameter<int?> NoteCount, OutputParameter<int?> FullNoteCount, OutputParameter<DateTime?> FirstDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNoteCount = new SqlParameter
            {
                ParameterName = "NoteCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NoteCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterFullNoteCount = new SqlParameter
            {
                ParameterName = "FullNoteCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FullNoteCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterFirstDate = new SqlParameter
            {
                ParameterName = "FirstDate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FirstDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LinkKeyID",
                    Value = LinkKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartIndex",
                    Value = StartIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NumberOfNotes",
                    Value = NumberOfNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateSort",
                    Value = DateSort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterKeyword",
                    Size = -1,
                    Value = FilterKeyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SkipKeyword",
                    Value = SkipKeyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterStartDate",
                    Value = FilterStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SkipStartDate",
                    Value = SkipStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterEndDate",
                    Value = FilterEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SkipEndDate",
                    Value = SkipEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterUserInitials",
                    Size = 10,
                    Value = FilterUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SkipUserInitials",
                    Value = SkipUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterNoteCount,
                parameterFullNoteCount,
                parameterFirstDate,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNoteListPagingResult>("EXEC @returnValue = [dbo].[sp_GetNoteListPaging] @LinkKeyID = @LinkKeyID, @StartIndex = @StartIndex, @NumberOfNotes = @NumberOfNotes, @StartDate = @StartDate, @EndDate = @EndDate, @DateSort = @DateSort, @FilterKeyword = @FilterKeyword, @SkipKeyword = @SkipKeyword, @FilterStartDate = @FilterStartDate, @SkipStartDate = @SkipStartDate, @FilterEndDate = @FilterEndDate, @SkipEndDate = @SkipEndDate, @FilterUserInitials = @FilterUserInitials, @SkipUserInitials = @SkipUserInitials, @NoteCount = @NoteCount OUTPUT, @FullNoteCount = @FullNoteCount OUTPUT, @FirstDate = @FirstDate OUTPUT", sqlParameters, cancellationToken);

            NoteCount.SetValue(parameterNoteCount.Value);
            FullNoteCount.SetValue(parameterFullNoteCount.Value);
            FirstDate.SetValue(parameterFirstDate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNoteListPagingByAccountResult>> sp_GetNoteListPagingByAccountAsync(int? LinkKeyID, int? StartIndex, int? NumberOfNotes, DateTime? StartDate, DateTime? EndDate, bool? DateSort, string FilterKeyword, bool? SkipKeyword, DateTime? FilterStartDate, bool? SkipStartDate, DateTime? FilterEndDate, bool? SkipEndDate, string FilterUserInitials, bool? SkipUserInitials, OutputParameter<int?> NoteCount, OutputParameter<int?> FullNoteCount, OutputParameter<DateTime?> FirstDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNoteCount = new SqlParameter
            {
                ParameterName = "NoteCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NoteCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterFullNoteCount = new SqlParameter
            {
                ParameterName = "FullNoteCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FullNoteCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterFirstDate = new SqlParameter
            {
                ParameterName = "FirstDate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FirstDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LinkKeyID",
                    Value = LinkKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartIndex",
                    Value = StartIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NumberOfNotes",
                    Value = NumberOfNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateSort",
                    Value = DateSort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterKeyword",
                    Size = -1,
                    Value = FilterKeyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SkipKeyword",
                    Value = SkipKeyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterStartDate",
                    Value = FilterStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SkipStartDate",
                    Value = SkipStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterEndDate",
                    Value = FilterEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SkipEndDate",
                    Value = SkipEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterUserInitials",
                    Size = 10,
                    Value = FilterUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SkipUserInitials",
                    Value = SkipUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterNoteCount,
                parameterFullNoteCount,
                parameterFirstDate,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNoteListPagingByAccountResult>("EXEC @returnValue = [dbo].[sp_GetNoteListPagingByAccount] @LinkKeyID = @LinkKeyID, @StartIndex = @StartIndex, @NumberOfNotes = @NumberOfNotes, @StartDate = @StartDate, @EndDate = @EndDate, @DateSort = @DateSort, @FilterKeyword = @FilterKeyword, @SkipKeyword = @SkipKeyword, @FilterStartDate = @FilterStartDate, @SkipStartDate = @SkipStartDate, @FilterEndDate = @FilterEndDate, @SkipEndDate = @SkipEndDate, @FilterUserInitials = @FilterUserInitials, @SkipUserInitials = @SkipUserInitials, @NoteCount = @NoteCount OUTPUT, @FullNoteCount = @FullNoteCount OUTPUT, @FirstDate = @FirstDate OUTPUT", sqlParameters, cancellationToken);

            NoteCount.SetValue(parameterNoteCount.Value);
            FullNoteCount.SetValue(parameterFullNoteCount.Value);
            FirstDate.SetValue(parameterFirstDate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNoteListPagingByPolicyResult>> sp_GetNoteListPagingByPolicyAsync(int? LinkKeyID, int? StartIndex, int? NumberOfNotes, DateTime? StartDate, DateTime? EndDate, bool? DateSort, string FilterKeyword, bool? SkipKeyword, DateTime? FilterStartDate, bool? SkipStartDate, DateTime? FilterEndDate, bool? SkipEndDate, string FilterUserInitials, bool? SkipUserInitials, OutputParameter<int?> NoteCount, OutputParameter<int?> FullNoteCount, OutputParameter<DateTime?> FirstDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNoteCount = new SqlParameter
            {
                ParameterName = "NoteCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NoteCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterFullNoteCount = new SqlParameter
            {
                ParameterName = "FullNoteCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FullNoteCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterFirstDate = new SqlParameter
            {
                ParameterName = "FirstDate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FirstDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LinkKeyID",
                    Value = LinkKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartIndex",
                    Value = StartIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NumberOfNotes",
                    Value = NumberOfNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateSort",
                    Value = DateSort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterKeyword",
                    Size = -1,
                    Value = FilterKeyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SkipKeyword",
                    Value = SkipKeyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterStartDate",
                    Value = FilterStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SkipStartDate",
                    Value = SkipStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterEndDate",
                    Value = FilterEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SkipEndDate",
                    Value = SkipEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FilterUserInitials",
                    Size = 10,
                    Value = FilterUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SkipUserInitials",
                    Value = SkipUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterNoteCount,
                parameterFullNoteCount,
                parameterFirstDate,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNoteListPagingByPolicyResult>("EXEC @returnValue = [dbo].[sp_GetNoteListPagingByPolicy] @LinkKeyID = @LinkKeyID, @StartIndex = @StartIndex, @NumberOfNotes = @NumberOfNotes, @StartDate = @StartDate, @EndDate = @EndDate, @DateSort = @DateSort, @FilterKeyword = @FilterKeyword, @SkipKeyword = @SkipKeyword, @FilterStartDate = @FilterStartDate, @SkipStartDate = @SkipStartDate, @FilterEndDate = @FilterEndDate, @SkipEndDate = @SkipEndDate, @FilterUserInitials = @FilterUserInitials, @SkipUserInitials = @SkipUserInitials, @NoteCount = @NoteCount OUTPUT, @FullNoteCount = @FullNoteCount OUTPUT, @FirstDate = @FirstDate OUTPUT", sqlParameters, cancellationToken);

            NoteCount.SetValue(parameterNoteCount.Value);
            FullNoteCount.SetValue(parameterFullNoteCount.Value);
            FirstDate.SetValue(parameterFirstDate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNotesByClientForGridResult>> sp_GetNotesByClientForGridAsync(int? iLinkKeyID, bool? bUserCanSeePrivateNotes, int? ikeyViewingUser, string cLinkingTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iLinkKeyID",
                    Value = iLinkKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bUserCanSeePrivateNotes",
                    Value = bUserCanSeePrivateNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyViewingUser",
                    Value = ikeyViewingUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cLinkingTable",
                    Size = 50,
                    Value = cLinkingTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNotesByClientForGridResult>("EXEC @returnValue = [dbo].[sp_GetNotesByClientForGrid] @iLinkKeyID = @iLinkKeyID, @bUserCanSeePrivateNotes = @bUserCanSeePrivateNotes, @ikeyViewingUser = @ikeyViewingUser, @cLinkingTable = @cLinkingTable", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNotesByGroupsForGridResult>> sp_GetNotesByGroupsForGridAsync(int? iLinkKeyID, int? ikeyClient, bool? bUserCanSeePrivateNotes, int? ikeyViewingUser, string cSourceType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iLinkKeyID",
                    Value = iLinkKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyClient",
                    Value = ikeyClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bUserCanSeePrivateNotes",
                    Value = bUserCanSeePrivateNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyViewingUser",
                    Value = ikeyViewingUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cSourceType",
                    Size = 50,
                    Value = cSourceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNotesByGroupsForGridResult>("EXEC @returnValue = [dbo].[sp_GetNotesByGroupsForGrid] @iLinkKeyID = @iLinkKeyID, @ikeyClient = @ikeyClient, @bUserCanSeePrivateNotes = @bUserCanSeePrivateNotes, @ikeyViewingUser = @ikeyViewingUser, @cSourceType = @cSourceType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNotesListViewScreenAndReportResult>> sp_GetNotesListViewScreenAndReportAsync(int? iKeyClient, string cAccountOrPolicy, string cViewScreenOrForm, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyClient",
                    Value = iKeyClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cAccountOrPolicy",
                    Size = 10,
                    Value = cAccountOrPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cViewScreenOrForm",
                    Size = 10,
                    Value = cViewScreenOrForm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNotesListViewScreenAndReportResult>("EXEC @returnValue = [dbo].[sp_GetNotesListViewScreenAndReport] @iKeyClient = @iKeyClient, @cAccountOrPolicy = @cAccountOrPolicy, @cViewScreenOrForm = @cViewScreenOrForm", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNoteTopicListViewScreenMessagesResult>> sp_GetNoteTopicListViewScreenMessagesAsync(int? iClientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iClientID",
                    Value = iClientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNoteTopicListViewScreenMessagesResult>("EXEC @returnValue = [dbo].[sp_GetNoteTopicListViewScreenMessages] @iClientID = @iClientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNvstSalesAndTaxLotResult>> sp_GetNvstSalesAndTaxLotAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNvstSalesAndTaxLotResult>("EXEC @returnValue = [dbo].[sp_GetNvstSalesAndTaxLot] @iKeyNvst = @iKeyNvst", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNvstSharesOnOrAfterResult>> sp_GetNvstSharesOnOrAfterAsync(int? iKeyNvst, DateTime? dGet, bool? bNonZeroSharesOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dGet",
                    Value = dGet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bNonZeroSharesOnly",
                    Value = bNonZeroSharesOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNvstSharesOnOrAfterResult>("EXEC @returnValue = [dbo].[sp_GetNvstSharesOnOrAfter] @iKeyNvst = @iKeyNvst, @dGet = @dGet, @bNonZeroSharesOnly = @bNonZeroSharesOnly", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetNvstSharesOnOrBeforeResult>> sp_GetNvstSharesOnOrBeforeAsync(int? iKeyNvst, DateTime? dGet, bool? bNonZeroSharesOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dGet",
                    Value = dGet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bNonZeroSharesOnly",
                    Value = bNonZeroSharesOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetNvstSharesOnOrBeforeResult>("EXEC @returnValue = [dbo].[sp_GetNvstSharesOnOrBefore] @iKeyNvst = @iKeyNvst, @dGet = @dGet, @bNonZeroSharesOnly = @bNonZeroSharesOnly", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetOutlookEntryIDCalendarRowByEntryIDAndStoreKeyIDResult>> sp_GetOutlookEntryIDCalendarRowByEntryIDAndStoreKeyIDAsync(int? iStoreKeyID, string cEntryID, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = -1,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetOutlookEntryIDCalendarRowByEntryIDAndStoreKeyIDResult>("EXEC @returnValue = [dbo].[sp_GetOutlookEntryIDCalendarRowByEntryIDAndStoreKeyID] @iStoreKeyID = @iStoreKeyID, @cEntryID = @cEntryID, @cUserInitials = @cUserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetOutlookEntryIDCalendarRowByKeyAALinkAndStoreKeyIDResult>> sp_GetOutlookEntryIDCalendarRowByKeyAALinkAndStoreKeyIDAsync(int? iStoreKeyID, int? iKeyLink, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyLink",
                    Value = iKeyLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetOutlookEntryIDCalendarRowByKeyAALinkAndStoreKeyIDResult>("EXEC @returnValue = [dbo].[sp_GetOutlookEntryIDCalendarRowByKeyAALinkAndStoreKeyID] @iStoreKeyID = @iStoreKeyID, @iKeyLink = @iKeyLink, @cUserInitials = @cUserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetOutlookEntryIDNameRowByEntryIDAndStoreKeyIDResult>> sp_GetOutlookEntryIDNameRowByEntryIDAndStoreKeyIDAsync(int? iStoreKeyID, string cEntryID, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = -1,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetOutlookEntryIDNameRowByEntryIDAndStoreKeyIDResult>("EXEC @returnValue = [dbo].[sp_GetOutlookEntryIDNameRowByEntryIDAndStoreKeyID] @iStoreKeyID = @iStoreKeyID, @cEntryID = @cEntryID, @cUserInitials = @cUserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetOutlookEntryIDNameRowByKeyAALinkAndStoreKeyIDResult>> sp_GetOutlookEntryIDNameRowByKeyAALinkAndStoreKeyIDAsync(int? iStoreKeyID, int? iKeyLink, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iStoreKeyID",
                    Value = iStoreKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyLink",
                    Value = iKeyLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetOutlookEntryIDNameRowByKeyAALinkAndStoreKeyIDResult>("EXEC @returnValue = [dbo].[sp_GetOutlookEntryIDNameRowByKeyAALinkAndStoreKeyID] @iStoreKeyID = @iStoreKeyID, @iKeyLink = @iKeyLink, @cUserInitials = @cUserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetPartnerListForAccountResult>> sp_GetPartnerListForAccountAsync(int? ikeyAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyAccount",
                    Value = ikeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetPartnerListForAccountResult>("EXEC @returnValue = [dbo].[sp_GetPartnerListForAccount] @ikeyAccount = @ikeyAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetPartnerListForClientResult>> sp_GetPartnerListForClientAsync(int? ikeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyName",
                    Value = ikeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetPartnerListForClientResult>("EXEC @returnValue = [dbo].[sp_GetPartnerListForClient] @ikeyName = @ikeyName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetPhoneValuesFromOutlookPhoneStringAsync(string cFullPhone, OutputParameter<string> cCountry, OutputParameter<string> cAreaCode, OutputParameter<string> cPhoneNum, OutputParameter<string> cPhoneExt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercCountry = new SqlParameter
            {
                ParameterName = "cCountry",
                Size = 5,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cCountry?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parametercAreaCode = new SqlParameter
            {
                ParameterName = "cAreaCode",
                Size = 5,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cAreaCode?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parametercPhoneNum = new SqlParameter
            {
                ParameterName = "cPhoneNum",
                Size = 10,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cPhoneNum?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parametercPhoneExt = new SqlParameter
            {
                ParameterName = "cPhoneExt",
                Size = 10,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cPhoneExt?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cFullPhone",
                    Size = 100,
                    Value = cFullPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parametercCountry,
                parametercAreaCode,
                parametercPhoneNum,
                parametercPhoneExt,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetPhoneValuesFromOutlookPhoneString] @cFullPhone = @cFullPhone, @cCountry = @cCountry OUTPUT, @cAreaCode = @cAreaCode OUTPUT, @cPhoneNum = @cPhoneNum OUTPUT, @cPhoneExt = @cPhoneExt OUTPUT", sqlParameters, cancellationToken);

            cCountry.SetValue(parametercCountry.Value);
            cAreaCode.SetValue(parametercAreaCode.Value);
            cPhoneNum.SetValue(parametercPhoneNum.Value);
            cPhoneExt.SetValue(parametercPhoneExt.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetRORNavDataSetResult>> sp_GetRORNavDataSetAsync(DateTime? dFrom, DateTime? dTo, int? iKeyClient, int? ikeyAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dFrom",
                    Value = dFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dTo",
                    Value = dTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyClient",
                    Value = iKeyClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyAccount",
                    Value = ikeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetRORNavDataSetResult>("EXEC @returnValue = [dbo].[sp_GetRORNavDataSet] @dFrom = @dFrom, @dTo = @dTo, @iKeyClient = @iKeyClient, @ikeyAccount = @ikeyAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetScheduleDataSetAsync(string CalUserList, string BeginDate, string EndDate, string IncludeCalls, string IncludeTasks, string IncludeAppointments, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CalUserList",
                    Size = 5000,
                    Value = CalUserList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BeginDate",
                    Size = 12,
                    Value = BeginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 12,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeCalls",
                    Size = 1,
                    Value = IncludeCalls ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeTasks",
                    Size = 1,
                    Value = IncludeTasks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeAppointments",
                    Size = 1,
                    Value = IncludeAppointments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetScheduleDataSet] @CalUserList = @CalUserList, @BeginDate = @BeginDate, @EndDate = @EndDate, @IncludeCalls = @IncludeCalls, @IncludeTasks = @IncludeTasks, @IncludeAppointments = @IncludeAppointments", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetSecurityTasksByUserResult>> sp_GetSecurityTasksByUserAsync(int? iUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iUserKeyID",
                    Value = iUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetSecurityTasksByUserResult>("EXEC @returnValue = [dbo].[sp_GetSecurityTasksByUser] @iUserKeyID = @iUserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetServerDateTimeOffsetFromUTCAsync(OutputParameter<int?> iReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriReturn = new SqlParameter
            {
                ParameterName = "iReturn",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iReturn?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameteriReturn,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetServerDateTimeOffsetFromUTC] @iReturn = @iReturn OUTPUT", sqlParameters, cancellationToken);

            iReturn.SetValue(parameteriReturn.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetStartAndEndNvstSharesAndNavResult>> sp_GetStartAndEndNvstSharesAndNavAsync(int? iKeyNvst, int? iKeySymbol, DateTime? dStart, DateTime? dEnd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeySymbol",
                    Value = iKeySymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dStart",
                    Value = dStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dEnd",
                    Value = dEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetStartAndEndNvstSharesAndNavResult>("EXEC @returnValue = [dbo].[sp_GetStartAndEndNvstSharesAndNav] @iKeyNvst = @iKeyNvst, @iKeySymbol = @iKeySymbol, @dStart = @dStart, @dEnd = @dEnd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetStartAndEndNvstSharesAndNavBulkResult>> sp_GetStartAndEndNvstSharesAndNavBulkAsync(string cUser, string cIDTempRecordIdentity, bool? bResetTempTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cUser",
                    Size = 12,
                    Value = cUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cIDTempRecordIdentity",
                    Size = 12,
                    Value = cIDTempRecordIdentity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bResetTempTable",
                    Value = bResetTempTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetStartAndEndNvstSharesAndNavBulkResult>("EXEC @returnValue = [dbo].[sp_GetStartAndEndNvstSharesAndNavBulk] @cUser = @cUser, @cIDTempRecordIdentity = @cIDTempRecordIdentity, @bResetTempTable = @bResetTempTable", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetSummedNvstValuesResult>> sp_GetSummedNvstValuesAsync(int? iNvstKeyID, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNvstKeyID",
                    Value = iNvstKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEndDate",
                    Value = dEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetSummedNvstValuesResult>("EXEC @returnValue = [dbo].[sp_GetSummedNvstValues] @iNvstKeyID = @iNvstKeyID, @dEndDate = @dEndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetSuperViewKeyResult>> sp_GetSuperViewKeyAsync(int? UserKey, OutputParameter<int?> SuperViewKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterSuperViewKey = new SqlParameter
            {
                ParameterName = "SuperViewKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = SuperViewKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterSuperViewKey,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetSuperViewKeyResult>("EXEC @returnValue = [dbo].[sp_GetSuperViewKey] @UserKey = @UserKey, @SuperViewKey = @SuperViewKey OUTPUT", sqlParameters, cancellationToken);

            SuperViewKey.SetValue(parameterSuperViewKey.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetSystemInfoResult>> sp_GetSystemInfoAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetSystemInfoResult>("EXEC @returnValue = [dbo].[sp_GetSystemInfo]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetTaskAndCallDataSetResult>> sp_GetTaskAndCallDataSetAsync(int? CalUserKey, DateTime? BeginDate, DateTime? EndDate, bool? IncludeWorkflow, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CalUserKey",
                    Value = CalUserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BeginDate",
                    Value = BeginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeWorkflow",
                    Value = IncludeWorkflow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetTaskAndCallDataSetResult>("EXEC @returnValue = [dbo].[sp_GetTaskAndCallDataSet] @CalUserKey = @CalUserKey, @BeginDate = @BeginDate, @EndDate = @EndDate, @IncludeWorkflow = @IncludeWorkflow", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetTaskAndCallDataSet2Result>> sp_GetTaskAndCallDataSet2Async(int? CalUserKey, DateTime? BeginDate, DateTime? EndDate, bool? IncludeWorkflowEvents, bool? IncludeDepartmentEvents, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CalUserKey",
                    Value = CalUserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BeginDate",
                    Value = BeginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeWorkflowEvents",
                    Value = IncludeWorkflowEvents ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeDepartmentEvents",
                    Value = IncludeDepartmentEvents ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetTaskAndCallDataSet2Result>("EXEC @returnValue = [dbo].[sp_GetTaskAndCallDataSet2] @CalUserKey = @CalUserKey, @BeginDate = @BeginDate, @EndDate = @EndDate, @IncludeWorkflowEvents = @IncludeWorkflowEvents, @IncludeDepartmentEvents = @IncludeDepartmentEvents", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetTasksAndOverridesResult>> sp_GetTasksAndOverridesAsync(int? iKeyRoleType, int? iKeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyRoleType",
                    Value = iKeyRoleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetTasksAndOverridesResult>("EXEC @returnValue = [dbo].[sp_GetTasksAndOverrides] @iKeyRoleType = @iKeyRoleType, @iKeyUser = @iKeyUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetUniqueCodeAbbreviationResult>> sp_GetUniqueCodeAbbreviationAsync(string cAbbreviation, int? iCodeType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cAbbreviation",
                    Size = 10,
                    Value = cAbbreviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeType",
                    Value = iCodeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetUniqueCodeAbbreviationResult>("EXEC @returnValue = [dbo].[sp_GetUniqueCodeAbbreviation] @cAbbreviation = @cAbbreviation, @iCodeType = @iCodeType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetUserGroupLookupDataResult>> sp_GetUserGroupLookupDataAsync(bool? bIncludeInactive, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "bIncludeInactive",
                    Value = bIncludeInactive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetUserGroupLookupDataResult>("EXEC @returnValue = [dbo].[sp_GetUserGroupLookupData] @bIncludeInactive = @bIncludeInactive", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetUsersByTaskResult>> sp_GetUsersByTaskAsync(int? iTaskID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iTaskID",
                    Value = iTaskID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetUsersByTaskResult>("EXEC @returnValue = [dbo].[sp_GetUsersByTask] @iTaskID = @iTaskID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetUserSyncOptionsByCalendarManyResult>> sp_GetUserSyncOptionsByCalendarManyAsync(string CalendarKeyIDsDelimited, bool? IsRealTimeExportQuery, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CalendarKeyIDsDelimited",
                    Size = -1,
                    Value = CalendarKeyIDsDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsRealTimeExportQuery",
                    Value = IsRealTimeExportQuery ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetUserSyncOptionsByCalendarManyResult>("EXEC @returnValue = [dbo].[sp_GetUserSyncOptionsByCalendarMany] @CalendarKeyIDsDelimited = @CalendarKeyIDsDelimited, @IsRealTimeExportQuery = @IsRealTimeExportQuery", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetValuationsForRorCalculationsResult>> sp_GetValuationsForRorCalculationsAsync(int? iKeyInvestment, DateTime? dStart, DateTime? dEnd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyInvestment",
                    Value = iKeyInvestment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dStart",
                    Value = dStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dEnd",
                    Value = dEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetValuationsForRorCalculationsResult>("EXEC @returnValue = [dbo].[sp_GetValuationsForRorCalculations] @iKeyInvestment = @iKeyInvestment, @dStart = @dStart, @dEnd = @dEnd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetValuationsForRorCalculationsBulkResult>> sp_GetValuationsForRorCalculationsBulkAsync(string cUser, string cIDTempRecordIdentity, bool? bResetTempTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cUser",
                    Size = 12,
                    Value = cUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cIDTempRecordIdentity",
                    Size = 12,
                    Value = cIDTempRecordIdentity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bResetTempTable",
                    Value = bResetTempTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetValuationsForRorCalculationsBulkResult>("EXEC @returnValue = [dbo].[sp_GetValuationsForRorCalculationsBulk] @cUser = @cUser, @cIDTempRecordIdentity = @cIDTempRecordIdentity, @bResetTempTable = @bResetTempTable", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewAccountDataResult>> sp_GetViewAccountDataAsync(int? iAccountKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iAccountKeyID",
                    Value = iAccountKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewAccountDataResult>("EXEC @returnValue = [dbo].[sp_GetViewAccountData] @iAccountKeyID = @iAccountKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewAccountDataCountResult>> sp_GetViewAccountDataCountAsync(int? iAccountKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iAccountKeyID",
                    Value = iAccountKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewAccountDataCountResult>("EXEC @returnValue = [dbo].[sp_GetViewAccountDataCount] @iAccountKeyID = @iAccountKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewClientAddressesResult>> sp_GetViewClientAddressesAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewClientAddressesResult>("EXEC @returnValue = [dbo].[sp_GetViewClientAddresses] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewClientDataCountResult>> sp_GetViewClientDataCountAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewClientDataCountResult>("EXEC @returnValue = [dbo].[sp_GetViewClientDataCount] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewClientEmailsResult>> sp_GetViewClientEmailsAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewClientEmailsResult>("EXEC @returnValue = [dbo].[sp_GetViewClientEmails] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewClientNameTypesResult>> sp_GetViewClientNameTypesAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewClientNameTypesResult>("EXEC @returnValue = [dbo].[sp_GetViewClientNameTypes] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewClientURLsResult>> sp_GetViewClientURLsAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewClientURLsResult>("EXEC @returnValue = [dbo].[sp_GetViewClientURLs] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewClientWithNotesClientPerspectiveListResult>> sp_GetViewClientWithNotesClientPerspectiveListAsync(int? iKeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyName",
                    Value = iKeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewClientWithNotesClientPerspectiveListResult>("EXEC @returnValue = [dbo].[sp_GetViewClientWithNotesClientPerspectiveList] @iKeyName = @iKeyName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewInvestmentDataResult>> sp_GetViewInvestmentDataAsync(int? iInvestmentKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iInvestmentKeyID",
                    Value = iInvestmentKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewInvestmentDataResult>("EXEC @returnValue = [dbo].[sp_GetViewInvestmentData] @iInvestmentKeyID = @iInvestmentKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewInvestmentDataCountResult>> sp_GetViewInvestmentDataCountAsync(int? iInvestmentKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iInvestmentKeyID",
                    Value = iInvestmentKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewInvestmentDataCountResult>("EXEC @returnValue = [dbo].[sp_GetViewInvestmentDataCount] @iInvestmentKeyID = @iInvestmentKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewPolicyDataCountResult>> sp_GetViewPolicyDataCountAsync(int? iPolicyKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iPolicyKeyID",
                    Value = iPolicyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewPolicyDataCountResult>("EXEC @returnValue = [dbo].[sp_GetViewPolicyDataCount] @iPolicyKeyID = @iPolicyKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewPolicyDataCoverageResult>> sp_GetViewPolicyDataCoverageAsync(int? iCoverageKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKey",
                    Value = iCoverageKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewPolicyDataCoverageResult>("EXEC @returnValue = [dbo].[sp_GetViewPolicyDataCoverage] @iCoverageKey = @iCoverageKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetViewPolicyDataPolicyResult>> sp_GetViewPolicyDataPolicyAsync(int? iPolicyKeyID, int? iCodeGroupWith, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iPolicyKeyID",
                    Value = iPolicyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeGroupWith",
                    Value = iCodeGroupWith ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetViewPolicyDataPolicyResult>("EXEC @returnValue = [dbo].[sp_GetViewPolicyDataPolicy] @iPolicyKeyID = @iPolicyKeyID, @iCodeGroupWith = @iCodeGroupWith", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetWorkflowSummaryByUserResult>> sp_GetWorkflowSummaryByUserAsync(int? iUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iUserKeyID",
                    Value = iUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetWorkflowSummaryByUserResult>("EXEC @returnValue = [dbo].[sp_GetWorkflowSummaryByUser] @iUserKeyID = @iUserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetWorkflowSummaryByUserGroupResult>> sp_GetWorkflowSummaryByUserGroupAsync(int? iUserGroupKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iUserGroupKey",
                    Value = iUserGroupKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetWorkflowSummaryByUserGroupResult>("EXEC @returnValue = [dbo].[sp_GetWorkflowSummaryByUserGroup] @iUserGroupKey = @iUserGroupKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Google_FixSyncOptionsRefactorAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Google_FixSyncOptionsRefactor]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GuidTryParseAsync(string ParseThisValue, OutputParameter<Guid?> ParsedGUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterParsedGUID = new SqlParameter
            {
                ParameterName = "ParsedGUID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ParsedGUID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ParseThisValue",
                    Size = -1,
                    Value = ParseThisValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterParsedGUID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GuidTryParse] @ParseThisValue = @ParseThisValue, @ParsedGUID = @ParsedGUID OUTPUT", sqlParameters, cancellationToken);

            ParsedGUID.SetValue(parameterParsedGUID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ImportAddressAsync(int? iKeyName, string cDataStamp, int? iCodeRecordCreationSource, int? iCodeAddressLocation, int? iCodeDefaultAddressLocation, string cgreet, string caddressee, string ctitle, string cBusinessName, string cstreet1, string cstreet2, string cstreet3, string ccity, string cstate, string ccountry, string cCounty, string czip, string cAddressAbbreviation, string cAddressDescription, bool? bPrimary, string cAddressPoint, string cRoute, OutputParameter<int?> iKeyAddress, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyAddress = new SqlParameter
            {
                ParameterName = "iKeyAddress",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyAddress?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyName",
                    Value = iKeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriKeyAddress,
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRecordCreationSource",
                    Value = iCodeRecordCreationSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeAddressLocation",
                    Value = iCodeAddressLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeDefaultAddressLocation",
                    Value = iCodeDefaultAddressLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cgreet",
                    Size = 40,
                    Value = cgreet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "caddressee",
                    Size = 50,
                    Value = caddressee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ctitle",
                    Size = 50,
                    Value = ctitle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cBusinessName",
                    Size = 60,
                    Value = cBusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cstreet1",
                    Size = 50,
                    Value = cstreet1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cstreet2",
                    Size = 50,
                    Value = cstreet2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cstreet3",
                    Size = 50,
                    Value = cstreet3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ccity",
                    Size = 30,
                    Value = ccity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cstate",
                    Size = 5,
                    Value = cstate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ccountry",
                    Size = 40,
                    Value = ccountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCounty",
                    Size = 40,
                    Value = cCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "czip",
                    Size = 10,
                    Value = czip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAddressAbbreviation",
                    Size = 10,
                    Value = cAddressAbbreviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAddressDescription",
                    Size = 50,
                    Value = cAddressDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bPrimary",
                    Value = bPrimary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cAddressPoint",
                    Size = 2,
                    Value = cAddressPoint ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cRoute",
                    Size = 12,
                    Value = cRoute ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ImportAddress] @iKeyName = @iKeyName, @iKeyAddress = @iKeyAddress OUTPUT, @cDataStamp = @cDataStamp, @iCodeRecordCreationSource = @iCodeRecordCreationSource, @iCodeAddressLocation = @iCodeAddressLocation, @iCodeDefaultAddressLocation = @iCodeDefaultAddressLocation, @cgreet = @cgreet, @caddressee = @caddressee, @ctitle = @ctitle, @cBusinessName = @cBusinessName, @cstreet1 = @cstreet1, @cstreet2 = @cstreet2, @cstreet3 = @cstreet3, @ccity = @ccity, @cstate = @cstate, @ccountry = @ccountry, @cCounty = @cCounty, @czip = @czip, @cAddressAbbreviation = @cAddressAbbreviation, @cAddressDescription = @cAddressDescription, @bPrimary = @bPrimary, @cAddressPoint = @cAddressPoint, @cRoute = @cRoute", sqlParameters, cancellationToken);

            iKeyAddress.SetValue(parameteriKeyAddress.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ImportPhoneAsync(int? iKeyName, string cDataStamp, int? iCodeRecordCreationSource, int? iCodePhoneLocation, int? iCodeDefaultPhoneLocation, string cContact, string cCountry, string cAreaCode, string cPhoneNumber, string cPhoneExt, string cPhoneAbbreviation, string cPhoneDescription, string cFullPhone, bool? bPrimary, OutputParameter<int?> iKeyPhone, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyPhone = new SqlParameter
            {
                ParameterName = "iKeyPhone",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyPhone?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyName",
                    Value = iKeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriKeyPhone,
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeRecordCreationSource",
                    Value = iCodeRecordCreationSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodePhoneLocation",
                    Value = iCodePhoneLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeDefaultPhoneLocation",
                    Value = iCodeDefaultPhoneLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cContact",
                    Size = 100,
                    Value = cContact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cCountry",
                    Size = 5,
                    Value = cCountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cAreaCode",
                    Size = 5,
                    Value = cAreaCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cPhoneNumber",
                    Size = 10,
                    Value = cPhoneNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cPhoneExt",
                    Size = 10,
                    Value = cPhoneExt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cPhoneAbbreviation",
                    Size = 10,
                    Value = cPhoneAbbreviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cPhoneDescription",
                    Size = 50,
                    Value = cPhoneDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cFullPhone",
                    Size = 20,
                    Value = cFullPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bPrimary",
                    Value = bPrimary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ImportPhone] @iKeyName = @iKeyName, @iKeyPhone = @iKeyPhone OUTPUT, @cDataStamp = @cDataStamp, @iCodeRecordCreationSource = @iCodeRecordCreationSource, @iCodePhoneLocation = @iCodePhoneLocation, @iCodeDefaultPhoneLocation = @iCodeDefaultPhoneLocation, @cContact = @cContact, @cCountry = @cCountry, @cAreaCode = @cAreaCode, @cPhoneNumber = @cPhoneNumber, @cPhoneExt = @cPhoneExt, @cPhoneAbbreviation = @cPhoneAbbreviation, @cPhoneDescription = @cPhoneDescription, @cFullPhone = @cFullPhone, @bPrimary = @bPrimary", sqlParameters, cancellationToken);

            iKeyPhone.SetValue(parameteriKeyPhone.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Infinet4ToAA_InsertIntoAAResult>> sp_Infinet4ToAA_InsertIntoAAAsync(OutputParameter<bool?> bComplete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbComplete = new SqlParameter
            {
                ParameterName = "bComplete",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bComplete?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterbComplete,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Infinet4ToAA_InsertIntoAAResult>("EXEC @returnValue = [dbo].[sp_Infinet4ToAA_InsertIntoAA] @bComplete = @bComplete OUTPUT", sqlParameters, cancellationToken);

            bComplete.SetValue(parameterbComplete.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Infinet4ToAA_ValidateGroupMembersResult>> sp_Infinet4ToAA_ValidateGroupMembersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Infinet4ToAA_ValidateGroupMembersResult>("EXEC @returnValue = [dbo].[sp_Infinet4ToAA_ValidateGroupMembers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Infinet4ToAA_ValidateGroupsResult>> sp_Infinet4ToAA_ValidateGroupsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Infinet4ToAA_ValidateGroupsResult>("EXEC @returnValue = [dbo].[sp_Infinet4ToAA_ValidateGroups]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Infinet4ToAA_ValidateRelationsResult>> sp_Infinet4ToAA_ValidateRelationsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Infinet4ToAA_ValidateRelationsResult>("EXEC @returnValue = [dbo].[sp_Infinet4ToAA_ValidateRelations]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Infinet4ToAAConnectNRAsFromIOLToAAResult>> sp_Infinet4ToAAConnectNRAsFromIOLToAAAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Infinet4ToAAConnectNRAsFromIOLToAAResult>("EXEC @returnValue = [dbo].[sp_Infinet4ToAAConnectNRAsFromIOLToAA]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Infinet4ToAAConnectWithTaxidsFromIOLToAAResult>> sp_Infinet4ToAAConnectWithTaxidsFromIOLToAAAsync(OutputParameter<bool?> bComplete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbComplete = new SqlParameter
            {
                ParameterName = "bComplete",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bComplete?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterbComplete,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Infinet4ToAAConnectWithTaxidsFromIOLToAAResult>("EXEC @returnValue = [dbo].[sp_Infinet4ToAAConnectWithTaxidsFromIOLToAA] @bComplete = @bComplete OUTPUT", sqlParameters, cancellationToken);

            bComplete.SetValue(parameterbComplete.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Infinet4ToAAPopulateNewIOL4ContactsResult>> sp_Infinet4ToAAPopulateNewIOL4ContactsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Infinet4ToAAPopulateNewIOL4ContactsResult>("EXEC @returnValue = [dbo].[sp_Infinet4ToAAPopulateNewIOL4Contacts]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Infinet4ToAAValidateIOLLinkKeysResult>> sp_Infinet4ToAAValidateIOLLinkKeysAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Infinet4ToAAValidateIOLLinkKeysResult>("EXEC @returnValue = [dbo].[sp_Infinet4ToAAValidateIOLLinkKeys]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Infinex4ToAAProducerValidationResult>> sp_Infinex4ToAAProducerValidationAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Infinex4ToAAProducerValidationResult>("EXEC @returnValue = [dbo].[sp_Infinex4ToAAProducerValidation]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_InitializeFileHistoryLogAsync(int? iCodeProcess, string cDescription, DateTime? dWhenProcessed, string cFilePath, Guid? gFileLink, string cDatabaseVersion, string cProgramVersion, string cUserName, string cUserInitials, OutputParameter<int?> iReturnKeyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriReturnKeyId = new SqlParameter
            {
                ParameterName = "iReturnKeyId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iReturnKeyId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCodeProcess",
                    Value = iCodeProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDescription",
                    Size = 200,
                    Value = cDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dWhenProcessed",
                    Value = dWhenProcessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cFilePath",
                    Size = -1,
                    Value = cFilePath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "gFileLink",
                    Value = gFileLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "cDatabaseVersion",
                    Size = 20,
                    Value = cDatabaseVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cProgramVersion",
                    Size = 20,
                    Value = cProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserName",
                    Size = 50,
                    Value = cUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriReturnKeyId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_InitializeFileHistoryLog] @iCodeProcess = @iCodeProcess, @cDescription = @cDescription, @dWhenProcessed = @dWhenProcessed, @cFilePath = @cFilePath, @gFileLink = @gFileLink, @cDatabaseVersion = @cDatabaseVersion, @cProgramVersion = @cProgramVersion, @cUserName = @cUserName, @cUserInitials = @cUserInitials, @iReturnKeyId = @iReturnKeyId OUTPUT", sqlParameters, cancellationToken);

            iReturnKeyId.SetValue(parameteriReturnKeyId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_InsertInitTransactionRecordAsync(int? iKeyNvst, int? iKeyTransType, DateTime? dTransaction, decimal? nShares, decimal? yTotal, decimal? yBasisIn, bool? bFreezeBasis, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTransType",
                    Value = iKeyTransType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dTransaction",
                    Value = dTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "nShares",
                    Precision = 16,
                    Scale = 6,
                    Value = nShares ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "yTotal",
                    Precision = 19,
                    Scale = 4,
                    Value = yTotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yBasisIn",
                    Precision = 19,
                    Scale = 4,
                    Value = yBasisIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "bFreezeBasis",
                    Value = bFreezeBasis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_InsertInitTransactionRecord] @iKeyNvst = @iKeyNvst, @iKeyTransType = @iKeyTransType, @dTransaction = @dTransaction, @nShares = @nShares, @yTotal = @yTotal, @yBasisIn = @yBasisIn, @bFreezeBasis = @bFreezeBasis", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_InsertReconcileRecordAsync(int? iKeyNvst, int? iKeyTransTable, int? iKeyTransType, DateTime? dTransaction, decimal? nShares, bool? bValues, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTransTable",
                    Value = iKeyTransTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTransType",
                    Value = iKeyTransType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dTransaction",
                    Value = dTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "nShares",
                    Precision = 16,
                    Scale = 6,
                    Value = nShares ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bValues",
                    Value = bValues ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_InsertReconcileRecord] @iKeyNvst = @iKeyNvst, @iKeyTransTable = @iKeyTransTable, @iKeyTransType = @iKeyTransType, @dTransaction = @dTransaction, @nShares = @nShares, @bValues = @bValues", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_InsertTaxLotRecordAsync(int? iKeyTrans, int? iKeyTaxTable, decimal? nShares, decimal? nShareBasis, bool? bFlagPrimary, bool? bFreeze, DateTime? dTransaction, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKey = new SqlParameter
            {
                ParameterName = "iKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyTrans",
                    Value = iKeyTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTaxTable",
                    Value = iKeyTaxTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nShares",
                    Precision = 16,
                    Scale = 6,
                    Value = nShares ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nShareBasis",
                    Precision = 16,
                    Scale = 6,
                    Value = nShareBasis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bFlagPrimary",
                    Value = bFlagPrimary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bFreeze",
                    Value = bFreeze ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "dTransaction",
                    Value = dTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameteriKey,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_InsertTaxLotRecord] @iKeyTrans = @iKeyTrans, @iKeyTaxTable = @iKeyTaxTable, @nShares = @nShares, @nShareBasis = @nShareBasis, @bFlagPrimary = @bFlagPrimary, @bFreeze = @bFreeze, @dTransaction = @dTransaction, @iKey = @iKey OUTPUT", sqlParameters, cancellationToken);

            iKey.SetValue(parameteriKey.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_InsertUserViewAccessRecordAsync(int? iKeyView, int? iKeyUser, string cUserID, bool? bDeleteFirst, bool? bPrimary, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cUserID",
                    Size = 10,
                    Value = cUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bDeleteFirst",
                    Value = bDeleteFirst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bPrimary",
                    Value = bPrimary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_InsertUserViewAccessRecord] @iKeyView = @iKeyView, @iKeyUser = @iKeyUser, @cUserID = @cUserID, @bDeleteFirst = @bDeleteFirst, @bPrimary = @bPrimary", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_InsertUserViewProducerRecordAsync(int? iKeyView, int? iKeyPdcr, bool? bDeleteFirst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyPdcr",
                    Value = iKeyPdcr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bDeleteFirst",
                    Value = bDeleteFirst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_InsertUserViewProducerRecord] @iKeyView = @iKeyView, @iKeyPdcr = @iKeyPdcr, @bDeleteFirst = @bDeleteFirst", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_LinksGetForDiagramByContactResult>> sp_LinksGetForDiagramByContactAsync(int? iNameKeyID, int? iDegrees, string Relationships, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iDegrees",
                    Value = iDegrees ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Relationships",
                    Size = -1,
                    Value = Relationships ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_LinksGetForDiagramByContactResult>("EXEC @returnValue = [dbo].[sp_LinksGetForDiagramByContact] @iNameKeyID = @iNameKeyID, @iDegrees = @iDegrees, @Relationships = @Relationships", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_LiquidateInvestmentResult>> sp_LiquidateInvestmentAsync(int? iKeyNvst, DateTime? dLiquidate, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dLiquidate",
                    Value = dLiquidate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_LiquidateInvestmentResult>("EXEC @returnValue = [dbo].[sp_LiquidateInvestment] @iKeyNvst = @iKeyNvst, @dLiquidate = @dLiquidate, @cDataStamp = @cDataStamp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_LiquidateZeroValueInvestmentsForAccountAsync(int? iKeyAccount, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyAccount",
                    Value = iKeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_LiquidateZeroValueInvestmentsForAccount] @iKeyAccount = @iKeyAccount, @cDataStamp = @cDataStamp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_LogCalendarEventNotificationAsync(int? iKeyEvent, int? iKeyUser, DateTime? tEvent, DateTime? tNotified, DateTime? tAcknowledged, int? iPassedInNotificationType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyEvent",
                    Value = iKeyEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tEvent",
                    Value = tEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tNotified",
                    Value = tNotified ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tAcknowledged",
                    Value = tAcknowledged ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iPassedInNotificationType",
                    Value = iPassedInNotificationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_LogCalendarEventNotification] @iKeyEvent = @iKeyEvent, @iKeyUser = @iKeyUser, @tEvent = @tEvent, @tNotified = @tNotified, @tAcknowledged = @tAcknowledged, @iPassedInNotificationType = @iPassedInNotificationType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_LogCalendarEventNotificationsAsync(string cEventDetailKeyValues, int? iKeyUser, DateTime? tNotified, DateTime? tAcknowledged, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEventDetailKeyValues",
                    Size = 8000,
                    Value = cEventDetailKeyValues ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tNotified",
                    Value = tNotified ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tAcknowledged",
                    Value = tAcknowledged ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_LogCalendarEventNotifications] @cEventDetailKeyValues = @cEventDetailKeyValues, @iKeyUser = @iKeyUser, @tNotified = @tNotified, @tAcknowledged = @tAcknowledged", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_LogUserMessageNotificationAsync(int? iKeyMessage, int? iKeyUser, DateTime? tMessage, DateTime? tNotified, DateTime? tAcknowledged, int? iPassedInNotificationType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyMessage",
                    Value = iKeyMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tMessage",
                    Value = tMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tNotified",
                    Value = tNotified ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tAcknowledged",
                    Value = tAcknowledged ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iPassedInNotificationType",
                    Value = iPassedInNotificationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_LogUserMessageNotification] @iKeyMessage = @iKeyMessage, @iKeyUser = @iKeyUser, @tMessage = @tMessage, @tNotified = @tNotified, @tAcknowledged = @tAcknowledged, @iPassedInNotificationType = @iPassedInNotificationType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_LogUserMessageNotificationCurrentViewAsync(int? iKeyUser, DateTime? tNotified, DateTime? tAcknowledged, int? iPassedInNotificationType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tNotified",
                    Value = tNotified ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tAcknowledged",
                    Value = tAcknowledged ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iPassedInNotificationType",
                    Value = iPassedInNotificationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_LogUserMessageNotificationCurrentView] @iKeyUser = @iKeyUser, @tNotified = @tNotified, @tAcknowledged = @tAcknowledged, @iPassedInNotificationType = @iPassedInNotificationType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ManageUserRecentNameListResult>> sp_ManageUserRecentNameListAsync(int? UniqueNameID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ManageUserRecentNameListResult>("EXEC @returnValue = [dbo].[sp_ManageUserRecentNameList] @UniqueNameID = @UniqueNameID, @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MergeAndDeleteCodesAsync(string cCodeType, int? iKeyOldCode, int? iKeyNewCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cCodeType",
                    Size = 12,
                    Value = cCodeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyOldCode",
                    Value = iKeyOldCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNewCode",
                    Value = iKeyNewCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MergeAndDeleteCodes] @cCodeType = @cCodeType, @iKeyOldCode = @iKeyOldCode, @iKeyNewCode = @iKeyNewCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MergeAndDeleteProducersAsync(int? iKeySource, int? iKeyTarget, string cProducerReferenceOption, int? iKeyProducerReference, int? iProcessLogKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySource",
                    Value = iKeySource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTarget",
                    Value = iKeyTarget ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cProducerReferenceOption",
                    Size = 1,
                    Value = cProducerReferenceOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducerReference",
                    Value = iKeyProducerReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iProcessLogKey",
                    Value = iProcessLogKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MergeAndDeleteProducers] @iKeySource = @iKeySource, @iKeyTarget = @iKeyTarget, @cProducerReferenceOption = @cProducerReferenceOption, @iKeyProducerReference = @iKeyProducerReference, @iProcessLogKey = @iProcessLogKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MergeAndDeleteSymbolsAsync(int? iKeySource, int? iKeyTarget, bool? bDeleteAfterward, string cActionOnHoldings, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySource",
                    Value = iKeySource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTarget",
                    Value = iKeyTarget ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bDeleteAfterward",
                    Value = bDeleteAfterward ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cActionOnHoldings",
                    Size = 12,
                    Value = cActionOnHoldings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MergeAndDeleteSymbols] @iKeySource = @iKeySource, @iKeyTarget = @iKeyTarget, @bDeleteAfterward = @bDeleteAfterward, @cActionOnHoldings = @cActionOnHoldings", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MergeOldInvestmentsIntoNewOnesResult>> sp_MergeOldInvestmentsIntoNewOnesAsync(int? ikeyOldSecurity, int? ikeyNewSecurity, bool? bReCalculate, string cDataStatmp, int? ikeyProcessLog, string cProcLogDetailLine1, OutputParameter<int?> iNumberOfHoldingsMerged, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriNumberOfHoldingsMerged = new SqlParameter
            {
                ParameterName = "iNumberOfHoldingsMerged",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iNumberOfHoldingsMerged?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyOldSecurity",
                    Value = ikeyOldSecurity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyNewSecurity",
                    Value = ikeyNewSecurity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bReCalculate",
                    Value = bReCalculate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStatmp",
                    Size = 12,
                    Value = cDataStatmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyProcessLog",
                    Value = ikeyProcessLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cProcLogDetailLine1",
                    Size = 100,
                    Value = cProcLogDetailLine1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameteriNumberOfHoldingsMerged,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MergeOldInvestmentsIntoNewOnesResult>("EXEC @returnValue = [dbo].[sp_MergeOldInvestmentsIntoNewOnes] @ikeyOldSecurity = @ikeyOldSecurity, @ikeyNewSecurity = @ikeyNewSecurity, @bReCalculate = @bReCalculate, @cDataStatmp = @cDataStatmp, @ikeyProcessLog = @ikeyProcessLog, @cProcLogDetailLine1 = @cProcLogDetailLine1, @iNumberOfHoldingsMerged = @iNumberOfHoldingsMerged OUTPUT", sqlParameters, cancellationToken);

            iNumberOfHoldingsMerged.SetValue(parameteriNumberOfHoldingsMerged.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2AddressGreetingsAndAddresseesByNameResult>> sp_Mobile2AddressGreetingsAndAddresseesByNameAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2AddressGreetingsAndAddresseesByNameResult>("EXEC @returnValue = [dbo].[sp_Mobile2AddressGreetingsAndAddresseesByName] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2ChangePasswordAsync(string Username, string NewPassword, string PreviousPasswordsXML, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Username",
                    Size = 20,
                    Value = Username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NewPassword",
                    Size = 50,
                    Value = NewPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PreviousPasswordsXML",
                    Size = -1,
                    Value = PreviousPasswordsXML ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2ChangePassword] @Username = @Username, @NewPassword = @NewPassword, @PreviousPasswordsXML = @PreviousPasswordsXML", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2CheckUserTaskResult>> sp_Mobile2CheckUserTaskAsync(int? UserKey, int? UserTaskTypeKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserTaskTypeKey",
                    Value = UserTaskTypeKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2CheckUserTaskResult>("EXEC @returnValue = [dbo].[sp_Mobile2CheckUserTask] @UserKey = @UserKey, @UserTaskTypeKey = @UserTaskTypeKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2CompleteCalendarEventResult>> sp_Mobile2CompleteCalendarEventAsync(int? DetailKey, bool? Completed, int? UserKeyID, string ProgramVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DetailKey",
                    Value = DetailKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Completed",
                    Value = Completed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramVersion",
                    Size = 100,
                    Value = ProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2CompleteCalendarEventResult>("EXEC @returnValue = [dbo].[sp_Mobile2CompleteCalendarEvent] @DetailKey = @DetailKey, @Completed = @Completed, @UserKeyID = @UserKeyID, @ProgramVersion = @ProgramVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2CreateAccountNewBizResult>> sp_Mobile2CreateAccountNewBizAsync(int? AccountKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccountKey",
                    Value = AccountKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ActionCode",
                    Value = ActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Action",
                    Size = 50,
                    Value = Action ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VendorKey",
                    Value = VendorKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PriorityCode",
                    Value = PriorityCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Amount",
                    Precision = 19,
                    Scale = 4,
                    Value = Amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "InitialDate",
                    Value = InitialDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CompletedDate",
                    Value = CompletedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FollowupDate",
                    Value = FollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NotePage",
                    Value = NotePage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2CreateAccountNewBizResult>("EXEC @returnValue = [dbo].[sp_Mobile2CreateAccountNewBiz] @AccountKey = @AccountKey, @ActionCode = @ActionCode, @Action = @Action, @VendorKey = @VendorKey, @PriorityCode = @PriorityCode, @Amount = @Amount, @InitialDate = @InitialDate, @CompletedDate = @CompletedDate, @FollowupDate = @FollowupDate, @NotePage = @NotePage, @MobileVersion = @MobileVersion, @UserKeyID = @UserKeyID, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2CreateAddressResult>> sp_Mobile2CreateAddressAsync(int? ClientKey, bool? Primary, string Greeting, string Addressee, string Title, string BusinessName, string Street1, string Street2, string Street3, string City, string State, string Zip, string County, string Country, int? AddressType, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Greeting",
                    Size = 40,
                    Value = Greeting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Addressee",
                    Size = 50,
                    Value = Addressee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 50,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 50,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Street1",
                    Size = 50,
                    Value = Street1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Street2",
                    Size = 50,
                    Value = Street2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Street3",
                    Size = 50,
                    Value = Street3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 30,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 5,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "County",
                    Size = 40,
                    Value = County ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Country",
                    Size = 40,
                    Value = Country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AddressType",
                    Value = AddressType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2CreateAddressResult>("EXEC @returnValue = [dbo].[sp_Mobile2CreateAddress] @ClientKey = @ClientKey, @Primary = @Primary, @Greeting = @Greeting, @Addressee = @Addressee, @Title = @Title, @BusinessName = @BusinessName, @Street1 = @Street1, @Street2 = @Street2, @Street3 = @Street3, @City = @City, @State = @State, @Zip = @Zip, @County = @County, @Country = @Country, @AddressType = @AddressType, @Comment = @Comment, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2CreateCoverageNewBizResult>> sp_Mobile2CreateCoverageNewBizAsync(int? CoverageKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CoverageKey",
                    Value = CoverageKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ActionCode",
                    Value = ActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Action",
                    Size = 50,
                    Value = Action ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VendorKey",
                    Value = VendorKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PriorityCode",
                    Value = PriorityCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Amount",
                    Precision = 19,
                    Scale = 4,
                    Value = Amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "InitialDate",
                    Value = InitialDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CompletedDate",
                    Value = CompletedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FollowupDate",
                    Value = FollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NotePage",
                    Value = NotePage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2CreateCoverageNewBizResult>("EXEC @returnValue = [dbo].[sp_Mobile2CreateCoverageNewBiz] @CoverageKey = @CoverageKey, @ActionCode = @ActionCode, @Action = @Action, @VendorKey = @VendorKey, @PriorityCode = @PriorityCode, @Amount = @Amount, @InitialDate = @InitialDate, @CompletedDate = @CompletedDate, @FollowupDate = @FollowupDate, @NotePage = @NotePage, @MobileVersion = @MobileVersion, @UserKeyID = @UserKeyID, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2CreateEmailResult>> sp_Mobile2CreateEmailAsync(int? ClientKey, bool? Primary, string Contact, string EmailAddress, string BusinessName, string Title, string Greeting, bool? SkipArchive, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 30,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 100,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 50,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 50,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Greeting",
                    Size = 50,
                    Value = Greeting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SkipArchive",
                    Value = SkipArchive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2CreateEmailResult>("EXEC @returnValue = [dbo].[sp_Mobile2CreateEmail] @ClientKey = @ClientKey, @Primary = @Primary, @Contact = @Contact, @EmailAddress = @EmailAddress, @BusinessName = @BusinessName, @Title = @Title, @Greeting = @Greeting, @SkipArchive = @SkipArchive, @Comment = @Comment, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2CreateLinkResult>> sp_Mobile2CreateLinkAsync(int? ClientKey, int? LinkClientKey, int? LinkType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LinkClientKey",
                    Value = LinkClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LinkType",
                    Value = LinkType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2CreateLinkResult>("EXEC @returnValue = [dbo].[sp_Mobile2CreateLink] @ClientKey = @ClientKey, @LinkClientKey = @LinkClientKey, @LinkType = @LinkType, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2CreateNameResult>> sp_Mobile2CreateNameAsync(string Firstname, string Middlename, string Lastname, string Prefix, string Suffix, string Nickname, string Dob, string NameType, string Status, string Producer, string Gender, string Anniversary, int? Dependents, string DependentStatus, decimal? EarnedIncome, decimal? TotalIncome, string Industry, decimal? NetWorth, string Occupation, string UserInitials, bool? IsOrganization, string TaxIDEncrypted, string TaxIDEncryptedLookup, string MaritalStatus, string Tobacco, decimal? TaxBracket, string MedicareNumberEncrypted, string SpouseFirstname, string SpouseMiddlename, string SpouseLastname, string SpouseDob, string SpouseGender, string SpouseOccupation, int? SpouseKey, bool? NoSpouse, string AlertNoteText, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Firstname",
                    Size = 30,
                    Value = Firstname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Middlename",
                    Size = 20,
                    Value = Middlename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Lastname",
                    Size = 60,
                    Value = Lastname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Prefix",
                    Size = 20,
                    Value = Prefix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Suffix",
                    Size = 20,
                    Value = Suffix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Nickname",
                    Size = 30,
                    Value = Nickname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Dob",
                    Size = 10,
                    Value = Dob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NameType",
                    Size = 10,
                    Value = NameType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 10,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Producer",
                    Size = 10,
                    Value = Producer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 10,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Anniversary",
                    Size = 10,
                    Value = Anniversary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Dependents",
                    Value = Dependents ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DependentStatus",
                    Size = 30,
                    Value = DependentStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EarnedIncome",
                    Precision = 19,
                    Scale = 4,
                    Value = EarnedIncome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIncome",
                    Precision = 19,
                    Scale = 4,
                    Value = TotalIncome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Industry",
                    Size = 10,
                    Value = Industry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NetWorth",
                    Precision = 19,
                    Scale = 4,
                    Value = NetWorth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Occupation",
                    Size = 10,
                    Value = Occupation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "IsOrganization",
                    Value = IsOrganization ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TaxIDEncrypted",
                    Size = 100,
                    Value = TaxIDEncrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TaxIDEncryptedLookup",
                    Size = 100,
                    Value = TaxIDEncryptedLookup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaritalStatus",
                    Size = 10,
                    Value = MaritalStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Tobacco",
                    Size = 10,
                    Value = Tobacco ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TaxBracket",
                    Precision = 7,
                    Scale = 3,
                    Value = TaxBracket ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "MedicareNumberEncrypted",
                    Size = 100,
                    Value = MedicareNumberEncrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseFirstname",
                    Size = 30,
                    Value = SpouseFirstname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseMiddlename",
                    Size = 20,
                    Value = SpouseMiddlename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseLastname",
                    Size = 60,
                    Value = SpouseLastname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseDob",
                    Size = 10,
                    Value = SpouseDob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseGender",
                    Size = 10,
                    Value = SpouseGender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseOccupation",
                    Size = 10,
                    Value = SpouseOccupation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseKey",
                    Value = SpouseKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NoSpouse",
                    Value = NoSpouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "AlertNoteText",
                    Size = -1,
                    Value = AlertNoteText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2CreateNameResult>("EXEC @returnValue = [dbo].[sp_Mobile2CreateName] @Firstname = @Firstname, @Middlename = @Middlename, @Lastname = @Lastname, @Prefix = @Prefix, @Suffix = @Suffix, @Nickname = @Nickname, @Dob = @Dob, @NameType = @NameType, @Status = @Status, @Producer = @Producer, @Gender = @Gender, @Anniversary = @Anniversary, @Dependents = @Dependents, @DependentStatus = @DependentStatus, @EarnedIncome = @EarnedIncome, @TotalIncome = @TotalIncome, @Industry = @Industry, @NetWorth = @NetWorth, @Occupation = @Occupation, @UserInitials = @UserInitials, @IsOrganization = @IsOrganization, @TaxIDEncrypted = @TaxIDEncrypted, @TaxIDEncryptedLookup = @TaxIDEncryptedLookup, @MaritalStatus = @MaritalStatus, @Tobacco = @Tobacco, @TaxBracket = @TaxBracket, @MedicareNumberEncrypted = @MedicareNumberEncrypted, @SpouseFirstname = @SpouseFirstname, @SpouseMiddlename = @SpouseMiddlename, @SpouseLastname = @SpouseLastname, @SpouseDob = @SpouseDob, @SpouseGender = @SpouseGender, @SpouseOccupation = @SpouseOccupation, @SpouseKey = @SpouseKey, @NoSpouse = @NoSpouse, @AlertNoteText = @AlertNoteText", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2CreateNameNewBizResult>> sp_Mobile2CreateNameNewBizAsync(int? ClientKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ActionCode",
                    Value = ActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Action",
                    Size = 50,
                    Value = Action ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VendorKey",
                    Value = VendorKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PriorityCode",
                    Value = PriorityCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Amount",
                    Precision = 19,
                    Scale = 4,
                    Value = Amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "InitialDate",
                    Value = InitialDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CompletedDate",
                    Value = CompletedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FollowupDate",
                    Value = FollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NotePage",
                    Value = NotePage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2CreateNameNewBizResult>("EXEC @returnValue = [dbo].[sp_Mobile2CreateNameNewBiz] @ClientKey = @ClientKey, @ActionCode = @ActionCode, @Action = @Action, @VendorKey = @VendorKey, @PriorityCode = @PriorityCode, @Amount = @Amount, @InitialDate = @InitialDate, @CompletedDate = @CompletedDate, @FollowupDate = @FollowupDate, @NotePage = @NotePage, @MobileVersion = @MobileVersion, @UserKeyID = @UserKeyID, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2CreatePhoneResult>> sp_Mobile2CreatePhoneAsync(int? ClientKey, bool? Primary, string Areacode, string Phonenum, string Extension, string CountryCode, string Contact, int? PhoneType, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Areacode",
                    Size = 10,
                    Value = Areacode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Phonenum",
                    Size = 20,
                    Value = Phonenum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Extension",
                    Size = 10,
                    Value = Extension ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CountryCode",
                    Size = 10,
                    Value = CountryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 60,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneType",
                    Value = PhoneType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2CreatePhoneResult>("EXEC @returnValue = [dbo].[sp_Mobile2CreatePhone] @ClientKey = @ClientKey, @Primary = @Primary, @Areacode = @Areacode, @Phonenum = @Phonenum, @Extension = @Extension, @CountryCode = @CountryCode, @Contact = @Contact, @PhoneType = @PhoneType, @Comment = @Comment, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2CreateSavedQueryAsync(int? iKeySavedSet, string cUniqueConditionName, string cOperator, string cValue, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySavedSet",
                    Value = iKeySavedSet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cUniqueConditionName",
                    Size = 200,
                    Value = cUniqueConditionName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOperator",
                    Size = 200,
                    Value = cOperator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cValue",
                    Size = 200,
                    Value = cValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2CreateSavedQuery] @iKeySavedSet = @iKeySavedSet, @cUniqueConditionName = @cUniqueConditionName, @cOperator = @cOperator, @cValue = @cValue, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2CreateWebResult>> sp_Mobile2CreateWebAsync(int? ClientKey, string Contact, string BusinessName, bool? Primary, string WebAddress, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 30,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 30,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "WebAddress",
                    Size = 100,
                    Value = WebAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2CreateWebResult>("EXEC @returnValue = [dbo].[sp_Mobile2CreateWeb] @ClientKey = @ClientKey, @Contact = @Contact, @BusinessName = @BusinessName, @Primary = @Primary, @WebAddress = @WebAddress, @Comment = @Comment, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2DeleteAddressAsync(int? AddressKey, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<bool?> Deleted, OutputParameter<string> DeleteMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterDeleted = new SqlParameter
            {
                ParameterName = "Deleted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Deleted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterDeleteMessage = new SqlParameter
            {
                ParameterName = "DeleteMessage",
                Size = 500,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DeleteMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AddressKey",
                    Value = AddressKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterDeleted,
                parameterDeleteMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2DeleteAddress] @AddressKey = @AddressKey, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate, @Deleted = @Deleted OUTPUT, @DeleteMessage = @DeleteMessage OUTPUT", sqlParameters, cancellationToken);

            Deleted.SetValue(parameterDeleted.Value);
            DeleteMessage.SetValue(parameterDeleteMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2DeleteEmailAsync(int? EmailKey, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<bool?> Deleted, OutputParameter<string> DeleteMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterDeleted = new SqlParameter
            {
                ParameterName = "Deleted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Deleted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterDeleteMessage = new SqlParameter
            {
                ParameterName = "DeleteMessage",
                Size = 500,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DeleteMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmailKey",
                    Value = EmailKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterDeleted,
                parameterDeleteMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2DeleteEmail] @EmailKey = @EmailKey, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate, @Deleted = @Deleted OUTPUT, @DeleteMessage = @DeleteMessage OUTPUT", sqlParameters, cancellationToken);

            Deleted.SetValue(parameterDeleted.Value);
            DeleteMessage.SetValue(parameterDeleteMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2DeleteEventAsync(int? DetailEventKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DetailEventKey",
                    Value = DetailEventKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2DeleteEvent] @DetailEventKey = @DetailEventKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2DeleteImageAsync(int? ClientKey, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2DeleteImage] @ClientKey = @ClientKey, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2DeleteLinkAsync(int? LinkKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LinkKey",
                    Value = LinkKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2DeleteLink] @LinkKey = @LinkKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2DeleteMarketAsync(int? MarketKey, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MarketKey",
                    Value = MarketKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2DeleteMarket] @MarketKey = @MarketKey, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2DeleteNameResult>> sp_Mobile2DeleteNameAsync(int? UniqueNameID, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2DeleteNameResult>("EXEC @returnValue = [dbo].[sp_Mobile2DeleteName] @UniqueNameID = @UniqueNameID, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2DeleteNewBizAsync(int? NewBizKey, int? UserKey, string Source, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NewBizKey",
                    Value = NewBizKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Source",
                    Size = 1,
                    Value = Source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2DeleteNewBiz] @NewBizKey = @NewBizKey, @UserKey = @UserKey, @Source = @Source, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2DeleteNoteAsync(int? NoteKey, int? UserKey, bool? DeleteFollowup, string NoteSource, string MobileVersion, DateTime? ProcessDate, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NoteKey",
                    Value = NoteKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteFollowup",
                    Value = DeleteFollowup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "NoteSource",
                    Size = 1,
                    Value = NoteSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2DeleteNote] @NoteKey = @NoteKey, @UserKey = @UserKey, @DeleteFollowup = @DeleteFollowup, @NoteSource = @NoteSource, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2DeletePhoneAsync(int? PhoneKey, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<bool?> Deleted, OutputParameter<string> DeleteMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterDeleted = new SqlParameter
            {
                ParameterName = "Deleted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Deleted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterDeleteMessage = new SqlParameter
            {
                ParameterName = "DeleteMessage",
                Size = 500,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DeleteMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PhoneKey",
                    Value = PhoneKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterDeleted,
                parameterDeleteMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2DeletePhone] @PhoneKey = @PhoneKey, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate, @Deleted = @Deleted OUTPUT, @DeleteMessage = @DeleteMessage OUTPUT", sqlParameters, cancellationToken);

            Deleted.SetValue(parameterDeleted.Value);
            DeleteMessage.SetValue(parameterDeleteMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2DeleteQuerySetAsync(int? QSKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QSKey",
                    Value = QSKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2DeleteQuerySet] @QSKey = @QSKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2DeleteWebAsync(int? WebKey, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<bool?> Deleted, OutputParameter<string> DeleteMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterDeleted = new SqlParameter
            {
                ParameterName = "Deleted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Deleted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterDeleteMessage = new SqlParameter
            {
                ParameterName = "DeleteMessage",
                Size = 500,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DeleteMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WebKey",
                    Value = WebKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterDeleted,
                parameterDeleteMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2DeleteWeb] @WebKey = @WebKey, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate, @Deleted = @Deleted OUTPUT, @DeleteMessage = @DeleteMessage OUTPUT", sqlParameters, cancellationToken);

            Deleted.SetValue(parameterDeleted.Value);
            DeleteMessage.SetValue(parameterDeleteMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2EditAccountNewBizAsync(int? NewBizKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NewBizKey",
                    Value = NewBizKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ActionCode",
                    Value = ActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Action",
                    Size = 50,
                    Value = Action ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VendorKey",
                    Value = VendorKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PriorityCode",
                    Value = PriorityCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Amount",
                    Precision = 19,
                    Scale = 4,
                    Value = Amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "InitialDate",
                    Value = InitialDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CompletedDate",
                    Value = CompletedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FollowupDate",
                    Value = FollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NotePage",
                    Value = NotePage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2EditAccountNewBiz] @NewBizKey = @NewBizKey, @ActionCode = @ActionCode, @Action = @Action, @VendorKey = @VendorKey, @PriorityCode = @PriorityCode, @Amount = @Amount, @InitialDate = @InitialDate, @CompletedDate = @CompletedDate, @FollowupDate = @FollowupDate, @NotePage = @NotePage, @MobileVersion = @MobileVersion, @UserKeyID = @UserKeyID, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2EditAddressResult>> sp_Mobile2EditAddressAsync(int? AddressKey, bool? Primary, string Greeting, string Addressee, string Title, string BusinessName, string Street1, string Street2, string Street3, string City, string State, string Zip, string County, string Country, int? AddressType, string Comment, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AddressKey",
                    Value = AddressKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Greeting",
                    Size = 40,
                    Value = Greeting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Addressee",
                    Size = 50,
                    Value = Addressee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 50,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 50,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Street1",
                    Size = 50,
                    Value = Street1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Street2",
                    Size = 50,
                    Value = Street2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Street3",
                    Size = 50,
                    Value = Street3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 30,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 5,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "County",
                    Size = 40,
                    Value = County ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Country",
                    Size = 40,
                    Value = Country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AddressType",
                    Value = AddressType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2EditAddressResult>("EXEC @returnValue = [dbo].[sp_Mobile2EditAddress] @AddressKey = @AddressKey, @Primary = @Primary, @Greeting = @Greeting, @Addressee = @Addressee, @Title = @Title, @BusinessName = @BusinessName, @Street1 = @Street1, @Street2 = @Street2, @Street3 = @Street3, @City = @City, @State = @State, @Zip = @Zip, @County = @County, @Country = @Country, @AddressType = @AddressType, @Comment = @Comment, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2EditCoverageNewBizAsync(int? NewBizKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NewBizKey",
                    Value = NewBizKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ActionCode",
                    Value = ActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Action",
                    Size = 50,
                    Value = Action ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VendorKey",
                    Value = VendorKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PriorityCode",
                    Value = PriorityCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Amount",
                    Precision = 19,
                    Scale = 4,
                    Value = Amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "InitialDate",
                    Value = InitialDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CompletedDate",
                    Value = CompletedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FollowupDate",
                    Value = FollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NotePage",
                    Value = NotePage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2EditCoverageNewBiz] @NewBizKey = @NewBizKey, @ActionCode = @ActionCode, @Action = @Action, @VendorKey = @VendorKey, @PriorityCode = @PriorityCode, @Amount = @Amount, @InitialDate = @InitialDate, @CompletedDate = @CompletedDate, @FollowupDate = @FollowupDate, @NotePage = @NotePage, @MobileVersion = @MobileVersion, @UserKeyID = @UserKeyID, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2EditEmailAsync(int? EmailKey, int? ClientKey, bool? Primary, string Contact, string EmailAddress, string BusinessName, string Title, string Greeting, bool? SkipArchive, string Comment, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmailKey",
                    Value = EmailKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 30,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 100,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 50,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 50,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Greeting",
                    Size = 50,
                    Value = Greeting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SkipArchive",
                    Value = SkipArchive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2EditEmail] @EmailKey = @EmailKey, @ClientKey = @ClientKey, @Primary = @Primary, @Contact = @Contact, @EmailAddress = @EmailAddress, @BusinessName = @BusinessName, @Title = @Title, @Greeting = @Greeting, @SkipArchive = @SkipArchive, @Comment = @Comment, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2EditEventResult>> sp_Mobile2EditEventAsync(int? DetailEventKey, string ClientKeys, int? PrimaryCalendarKey, string CalendarKeys, int? EventType, int? EventSubType, bool? Rollover, int? Priority, string Description, DateTime? Begin, DateTime? End, string Location, string UserInitials, int? Color, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DetailEventKey",
                    Value = DetailEventKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKeys",
                    Size = -1,
                    Value = ClientKeys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryCalendarKey",
                    Value = PrimaryCalendarKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CalendarKeys",
                    Size = -1,
                    Value = CalendarKeys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventType",
                    Value = EventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventSubType",
                    Value = EventSubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Rollover",
                    Value = Rollover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Priority",
                    Value = Priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 100,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Begin",
                    Value = Begin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "End",
                    Value = End ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Location",
                    Size = 200,
                    Value = Location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Color",
                    Value = Color ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2EditEventResult>("EXEC @returnValue = [dbo].[sp_Mobile2EditEvent] @DetailEventKey = @DetailEventKey, @ClientKeys = @ClientKeys, @PrimaryCalendarKey = @PrimaryCalendarKey, @CalendarKeys = @CalendarKeys, @EventType = @EventType, @EventSubType = @EventSubType, @Rollover = @Rollover, @Priority = @Priority, @Description = @Description, @Begin = @Begin, @End = @End, @Location = @Location, @UserInitials = @UserInitials, @Color = @Color", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2EditNameAsync(int? ClientKey, string Firstname, string Middlename, string Lastname, string Prefix, string Suffix, string Nickname, string Dob, string NameType, string status, string Producer, int? ProducerRef, string Gender, string Anniversary, int? Dependents, string DependentStatus, decimal? EarnedIncome, decimal? TotalIncome, string Industry, decimal? NetWorth, string Occupation, string UserInitials, bool? IsOrganization, string TaxIDEncrypted, string TaxIDEncryptedLookup, string MaritalStatus, string Tobacco, decimal? TaxBracket, string MedicareNumberEncrypted, string SpouseFirstname, string SpouseMiddlename, string SpouseLastname, string SpouseDob, string SpouseGender, string SpouseOccupation, int? SpouseKey, bool? NoSpouse, string AlertNoteText, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Firstname",
                    Size = 30,
                    Value = Firstname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Middlename",
                    Size = 20,
                    Value = Middlename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Lastname",
                    Size = 60,
                    Value = Lastname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Prefix",
                    Size = 20,
                    Value = Prefix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Suffix",
                    Size = 20,
                    Value = Suffix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Nickname",
                    Size = 30,
                    Value = Nickname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Dob",
                    Size = 10,
                    Value = Dob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NameType",
                    Size = 10,
                    Value = NameType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Producer",
                    Size = 10,
                    Value = Producer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ProducerRef",
                    Value = ProducerRef ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 10,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Anniversary",
                    Size = 10,
                    Value = Anniversary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Dependents",
                    Value = Dependents ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DependentStatus",
                    Size = 30,
                    Value = DependentStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EarnedIncome",
                    Precision = 19,
                    Scale = 4,
                    Value = EarnedIncome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIncome",
                    Precision = 19,
                    Scale = 4,
                    Value = TotalIncome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Industry",
                    Size = 10,
                    Value = Industry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NetWorth",
                    Precision = 19,
                    Scale = 4,
                    Value = NetWorth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Occupation",
                    Size = 10,
                    Value = Occupation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "IsOrganization",
                    Value = IsOrganization ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TaxIDEncrypted",
                    Size = 100,
                    Value = TaxIDEncrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TaxIDEncryptedLookup",
                    Size = 100,
                    Value = TaxIDEncryptedLookup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaritalStatus",
                    Size = 10,
                    Value = MaritalStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Tobacco",
                    Size = 10,
                    Value = Tobacco ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TaxBracket",
                    Precision = 7,
                    Scale = 3,
                    Value = TaxBracket ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "MedicareNumberEncrypted",
                    Size = 100,
                    Value = MedicareNumberEncrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseFirstname",
                    Size = 30,
                    Value = SpouseFirstname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseMiddlename",
                    Size = 20,
                    Value = SpouseMiddlename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseLastname",
                    Size = 60,
                    Value = SpouseLastname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseDob",
                    Size = 10,
                    Value = SpouseDob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseGender",
                    Size = 10,
                    Value = SpouseGender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseOccupation",
                    Size = 10,
                    Value = SpouseOccupation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SpouseKey",
                    Value = SpouseKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NoSpouse",
                    Value = NoSpouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "AlertNoteText",
                    Size = -1,
                    Value = AlertNoteText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2EditName] @ClientKey = @ClientKey, @Firstname = @Firstname, @Middlename = @Middlename, @Lastname = @Lastname, @Prefix = @Prefix, @Suffix = @Suffix, @Nickname = @Nickname, @Dob = @Dob, @NameType = @NameType, @status = @status, @Producer = @Producer, @ProducerRef = @ProducerRef, @Gender = @Gender, @Anniversary = @Anniversary, @Dependents = @Dependents, @DependentStatus = @DependentStatus, @EarnedIncome = @EarnedIncome, @TotalIncome = @TotalIncome, @Industry = @Industry, @NetWorth = @NetWorth, @Occupation = @Occupation, @UserInitials = @UserInitials, @IsOrganization = @IsOrganization, @TaxIDEncrypted = @TaxIDEncrypted, @TaxIDEncryptedLookup = @TaxIDEncryptedLookup, @MaritalStatus = @MaritalStatus, @Tobacco = @Tobacco, @TaxBracket = @TaxBracket, @MedicareNumberEncrypted = @MedicareNumberEncrypted, @SpouseFirstname = @SpouseFirstname, @SpouseMiddlename = @SpouseMiddlename, @SpouseLastname = @SpouseLastname, @SpouseDob = @SpouseDob, @SpouseGender = @SpouseGender, @SpouseOccupation = @SpouseOccupation, @SpouseKey = @SpouseKey, @NoSpouse = @NoSpouse, @AlertNoteText = @AlertNoteText", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2EditNameAdditionalAsync(int? ClientKey, bool? CanCall, bool? CanMail, bool? CanEmail, DateTime? RetirementDate, int? TimeHorizonUniqueID, int? RiskToleranceUniqueID, int? PrimaryObjectiveUniqueID, int? SecondaryObjectiveUniqueID, string FacebookName, string LinkedInName, string TwitterName, string GooglePlusName, int? EmployerUniqueID, string AdditionalNameTypeKeysDelimited, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CanCall",
                    Value = CanCall ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CanMail",
                    Value = CanMail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CanEmail",
                    Value = CanEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "RetirementDate",
                    Value = RetirementDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TimeHorizonUniqueID",
                    Value = TimeHorizonUniqueID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RiskToleranceUniqueID",
                    Value = RiskToleranceUniqueID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryObjectiveUniqueID",
                    Value = PrimaryObjectiveUniqueID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SecondaryObjectiveUniqueID",
                    Value = SecondaryObjectiveUniqueID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FacebookName",
                    Size = 100,
                    Value = FacebookName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LinkedInName",
                    Size = 100,
                    Value = LinkedInName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TwitterName",
                    Size = 100,
                    Value = TwitterName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GooglePlusName",
                    Size = 100,
                    Value = GooglePlusName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerUniqueID",
                    Value = EmployerUniqueID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AdditionalNameTypeKeysDelimited",
                    Size = -1,
                    Value = AdditionalNameTypeKeysDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2EditNameAdditional] @ClientKey = @ClientKey, @CanCall = @CanCall, @CanMail = @CanMail, @CanEmail = @CanEmail, @RetirementDate = @RetirementDate, @TimeHorizonUniqueID = @TimeHorizonUniqueID, @RiskToleranceUniqueID = @RiskToleranceUniqueID, @PrimaryObjectiveUniqueID = @PrimaryObjectiveUniqueID, @SecondaryObjectiveUniqueID = @SecondaryObjectiveUniqueID, @FacebookName = @FacebookName, @LinkedInName = @LinkedInName, @TwitterName = @TwitterName, @GooglePlusName = @GooglePlusName, @EmployerUniqueID = @EmployerUniqueID, @AdditionalNameTypeKeysDelimited = @AdditionalNameTypeKeysDelimited, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2EditNameFlexFieldsAsync(int? FlexKeyID, decimal? Field01, decimal? Field02, decimal? Field03, decimal? Field04, decimal? Field05, decimal? Field06, int? Field07, int? Field08, string Field09, string Field10, string Field11, string Field12, DateTime? Field13, DateTime? Field14, DateTime? Field15, DateTime? Field16, string Field17, string Field18, string Field19, string Field20, DateTime? Field21, DateTime? Field22, string Field23, string Field24, string Field25, string Field26, string Field27, string Field28, string Field29, string Field30, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FlexKeyID",
                    Value = FlexKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Field01",
                    Precision = 13,
                    Scale = 2,
                    Value = Field01 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Field02",
                    Precision = 13,
                    Scale = 2,
                    Value = Field02 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Field03",
                    Precision = 13,
                    Scale = 2,
                    Value = Field03 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Field04",
                    Precision = 13,
                    Scale = 2,
                    Value = Field04 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Field05",
                    Precision = 16,
                    Scale = 6,
                    Value = Field05 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Field06",
                    Precision = 16,
                    Scale = 6,
                    Value = Field06 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Field07",
                    Value = Field07 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Field08",
                    Value = Field08 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Field09",
                    Size = 30,
                    Value = Field09 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field10",
                    Size = 30,
                    Value = Field10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field11",
                    Size = 30,
                    Value = Field11 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field12",
                    Size = 30,
                    Value = Field12 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field13",
                    Value = Field13 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Field14",
                    Value = Field14 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Field15",
                    Value = Field15 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Field16",
                    Value = Field16 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Field17",
                    Size = 30,
                    Value = Field17 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field18",
                    Size = 30,
                    Value = Field18 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field19",
                    Size = 30,
                    Value = Field19 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field20",
                    Size = 30,
                    Value = Field20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field21",
                    Value = Field21 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Field22",
                    Value = Field22 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Field23",
                    Size = 30,
                    Value = Field23 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field24",
                    Size = 30,
                    Value = Field24 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field25",
                    Size = 30,
                    Value = Field25 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field26",
                    Size = 30,
                    Value = Field26 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field27",
                    Size = 30,
                    Value = Field27 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field28",
                    Size = 30,
                    Value = Field28 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field29",
                    Size = 30,
                    Value = Field29 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Field30",
                    Size = 30,
                    Value = Field30 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2EditNameFlexFields] @FlexKeyID = @FlexKeyID, @Field01 = @Field01, @Field02 = @Field02, @Field03 = @Field03, @Field04 = @Field04, @Field05 = @Field05, @Field06 = @Field06, @Field07 = @Field07, @Field08 = @Field08, @Field09 = @Field09, @Field10 = @Field10, @Field11 = @Field11, @Field12 = @Field12, @Field13 = @Field13, @Field14 = @Field14, @Field15 = @Field15, @Field16 = @Field16, @Field17 = @Field17, @Field18 = @Field18, @Field19 = @Field19, @Field20 = @Field20, @Field21 = @Field21, @Field22 = @Field22, @Field23 = @Field23, @Field24 = @Field24, @Field25 = @Field25, @Field26 = @Field26, @Field27 = @Field27, @Field28 = @Field28, @Field29 = @Field29, @Field30 = @Field30", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2EditNameNewBizAsync(int? NewBizKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NewBizKey",
                    Value = NewBizKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ActionCode",
                    Value = ActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Action",
                    Size = 50,
                    Value = Action ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VendorKey",
                    Value = VendorKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PriorityCode",
                    Value = PriorityCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Amount",
                    Precision = 19,
                    Scale = 4,
                    Value = Amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "InitialDate",
                    Value = InitialDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CompletedDate",
                    Value = CompletedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FollowupDate",
                    Value = FollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NotePage",
                    Value = NotePage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2EditNameNewBiz] @NewBizKey = @NewBizKey, @ActionCode = @ActionCode, @Action = @Action, @VendorKey = @VendorKey, @PriorityCode = @PriorityCode, @Amount = @Amount, @InitialDate = @InitialDate, @CompletedDate = @CompletedDate, @FollowupDate = @FollowupDate, @NotePage = @NotePage, @MobileVersion = @MobileVersion, @UserKeyID = @UserKeyID, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2EditNamePersonalIdentificationAsync(int? ClientKey, string DriversLicenseEncrypted, int? DLIssueStateUniqueID, DateTime? DLIssueDate, DateTime? DLExpirationDate, string PassportNumberEncrypted, string CitizenshipNation, DateTime? PassportIssueDate, DateTime? PassportExpirationDate, string NonCitizenIDNumberEncrypted, int? ResidencyStatusUniqueID, DateTime? NonCitizenIDIssueDate, DateTime? NonCitizenIDExpirationDate, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DriversLicenseEncrypted",
                    Size = 100,
                    Value = DriversLicenseEncrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DLIssueStateUniqueID",
                    Value = DLIssueStateUniqueID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DLIssueDate",
                    Value = DLIssueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DLExpirationDate",
                    Value = DLExpirationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PassportNumberEncrypted",
                    Size = 100,
                    Value = PassportNumberEncrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CitizenshipNation",
                    Size = 20,
                    Value = CitizenshipNation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PassportIssueDate",
                    Value = PassportIssueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PassportExpirationDate",
                    Value = PassportExpirationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NonCitizenIDNumberEncrypted",
                    Size = 100,
                    Value = NonCitizenIDNumberEncrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ResidencyStatusUniqueID",
                    Value = ResidencyStatusUniqueID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NonCitizenIDIssueDate",
                    Value = NonCitizenIDIssueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NonCitizenIDExpirationDate",
                    Value = NonCitizenIDExpirationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2EditNamePersonalIdentification] @ClientKey = @ClientKey, @DriversLicenseEncrypted = @DriversLicenseEncrypted, @DLIssueStateUniqueID = @DLIssueStateUniqueID, @DLIssueDate = @DLIssueDate, @DLExpirationDate = @DLExpirationDate, @PassportNumberEncrypted = @PassportNumberEncrypted, @CitizenshipNation = @CitizenshipNation, @PassportIssueDate = @PassportIssueDate, @PassportExpirationDate = @PassportExpirationDate, @NonCitizenIDNumberEncrypted = @NonCitizenIDNumberEncrypted, @ResidencyStatusUniqueID = @ResidencyStatusUniqueID, @NonCitizenIDIssueDate = @NonCitizenIDIssueDate, @NonCitizenIDExpirationDate = @NonCitizenIDExpirationDate, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2EditNoteTopicResult>> sp_Mobile2EditNoteTopicAsync(int? TopicKey, int? ClientKey, string Topic, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopicKey",
                    Value = TopicKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Topic",
                    Size = 100,
                    Value = Topic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2EditNoteTopicResult>("EXEC @returnValue = [dbo].[sp_Mobile2EditNoteTopic] @TopicKey = @TopicKey, @ClientKey = @ClientKey, @Topic = @Topic, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2EditPhoneResult>> sp_Mobile2EditPhoneAsync(int? PhoneKey, bool? Primary, string Areacode, string Phonenum, string Extension, string CountryCode, string Contact, string Comment, int? PhoneType, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PhoneKey",
                    Value = PhoneKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Areacode",
                    Size = 10,
                    Value = Areacode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Phonenum",
                    Size = 20,
                    Value = Phonenum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Extension",
                    Size = 10,
                    Value = Extension ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CountryCode",
                    Size = 10,
                    Value = CountryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 60,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneType",
                    Value = PhoneType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2EditPhoneResult>("EXEC @returnValue = [dbo].[sp_Mobile2EditPhone] @PhoneKey = @PhoneKey, @Primary = @Primary, @Areacode = @Areacode, @Phonenum = @Phonenum, @Extension = @Extension, @CountryCode = @CountryCode, @Contact = @Contact, @Comment = @Comment, @PhoneType = @PhoneType, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2EditWebAsync(int? WebKey, int? ClientKey, string BusinessName, string Contact, bool? Primary, string WebAddress, string Comment, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WebKey",
                    Value = WebKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 30,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 30,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "WebAddress",
                    Size = 100,
                    Value = WebAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2EditWeb] @WebKey = @WebKey, @ClientKey = @ClientKey, @BusinessName = @BusinessName, @Contact = @Contact, @Primary = @Primary, @WebAddress = @WebAddress, @Comment = @Comment, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetAccountDataResult>> sp_Mobile2GetAccountDataAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueAccountID",
                    Value = UniqueAccountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetAccountDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetAccountData] @UniqueAccountID = @UniqueAccountID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetAccountInvestmentListResult>> sp_Mobile2GetAccountInvestmentListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueAccountID",
                    Value = UniqueAccountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetAccountInvestmentListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetAccountInvestmentList] @UniqueAccountID = @UniqueAccountID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetAccountListResult>> sp_Mobile2GetAccountListAsync(int? UniqueNameID, bool? ShowLiquidated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ShowLiquidated",
                    Value = ShowLiquidated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetAccountListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetAccountList] @UniqueNameID = @UniqueNameID, @ShowLiquidated = @ShowLiquidated", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetAccountNewBizDataResult>> sp_Mobile2GetAccountNewBizDataAsync(int? UniqueNewBizID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNewBizID",
                    Value = UniqueNewBizID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetAccountNewBizDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetAccountNewBizData] @UniqueNewBizID = @UniqueNewBizID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetAccountNewBizListResult>> sp_Mobile2GetAccountNewBizListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueAccountID",
                    Value = UniqueAccountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetAccountNewBizListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetAccountNewBizList] @UniqueAccountID = @UniqueAccountID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetAccountRelationListResult>> sp_Mobile2GetAccountRelationListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueAccountID",
                    Value = UniqueAccountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetAccountRelationListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetAccountRelationList] @UniqueAccountID = @UniqueAccountID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetAddressDataResult>> sp_Mobile2GetAddressDataAsync(int? UniqueNameID, int? UniqueAddressID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UniqueAddressID",
                    Value = UniqueAddressID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetAddressDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetAddressData] @UniqueNameID = @UniqueNameID, @UniqueAddressID = @UniqueAddressID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetAlbridgeApplinkDataResult>> sp_Mobile2GetAlbridgeApplinkDataAsync(int? UniqueNameID, int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UniqueAccountID",
                    Value = UniqueAccountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetAlbridgeApplinkDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetAlbridgeApplinkData] @UniqueNameID = @UniqueNameID, @UniqueAccountID = @UniqueAccountID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetAnnuitiesResult>> sp_Mobile2GetAnnuitiesAsync(int? PolicyKeyID, int? AccountKeyID, int? NameKeyID, bool? ShowTerminated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyKeyID",
                    Value = PolicyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AccountKeyID",
                    Value = AccountKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NameKeyID",
                    Value = NameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ShowTerminated",
                    Value = ShowTerminated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetAnnuitiesResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetAnnuities] @PolicyKeyID = @PolicyKeyID, @AccountKeyID = @AccountKeyID, @NameKeyID = @NameKeyID, @ShowTerminated = @ShowTerminated", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetApplicationInfoByClientIDResult>> sp_Mobile2GetApplicationInfoByClientIDAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetApplicationInfoByClientIDResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetApplicationInfoByClientID] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetCalendarResult>> sp_Mobile2GetCalendarAsync(int? UserKeyID, int? CalKeyID, DateTime? StartDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CalKeyID",
                    Value = CalKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetCalendarResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetCalendar] @UserKeyID = @UserKeyID, @CalKeyID = @CalKeyID, @StartDate = @StartDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetCalendarDayResult>> sp_Mobile2GetCalendarDayAsync(int? UserKeyID, int? CalKeyID, DateTime? CalDate, int? EventType, string EventStatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CalKeyID",
                    Value = CalKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CalDate",
                    Value = CalDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EventType",
                    Value = EventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventStatus",
                    Size = 10,
                    Value = EventStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetCalendarDayResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetCalendarDay] @UserKeyID = @UserKeyID, @CalKeyID = @CalKeyID, @CalDate = @CalDate, @EventType = @EventType, @EventStatus = @EventStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetCalendarItemResult>> sp_Mobile2GetCalendarItemAsync(int? DetailKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DetailKey",
                    Value = DetailKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetCalendarItemResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetCalendarItem] @DetailKey = @DetailKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetCalendarUserResult>> sp_Mobile2GetCalendarUserAsync(int? CalendarKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CalendarKey",
                    Value = CalendarKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetCalendarUserResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetCalendarUser] @CalendarKey = @CalendarKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetCityStateFromZipResult>> sp_Mobile2GetCityStateFromZipAsync(string ZipCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZipCode",
                    Size = 5,
                    Value = ZipCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetCityStateFromZipResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetCityStateFromZip] @ZipCode = @ZipCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetCoverageDataResult>> sp_Mobile2GetCoverageDataAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueCoverageID",
                    Value = UniqueCoverageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetCoverageDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetCoverageData] @UniqueCoverageID = @UniqueCoverageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetCoverageNewBizDataResult>> sp_Mobile2GetCoverageNewBizDataAsync(int? UniqueNewBizID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNewBizID",
                    Value = UniqueNewBizID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetCoverageNewBizDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetCoverageNewBizData] @UniqueNewBizID = @UniqueNewBizID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetCoverageNewBizListResult>> sp_Mobile2GetCoverageNewBizListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueCoverageID",
                    Value = UniqueCoverageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetCoverageNewBizListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetCoverageNewBizList] @UniqueCoverageID = @UniqueCoverageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetCoverageRelationListResult>> sp_Mobile2GetCoverageRelationListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueCoverageID",
                    Value = UniqueCoverageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetCoverageRelationListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetCoverageRelationList] @UniqueCoverageID = @UniqueCoverageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetCoverageRiderListResult>> sp_Mobile2GetCoverageRiderListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueCoverageID",
                    Value = UniqueCoverageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetCoverageRiderListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetCoverageRiderList] @UniqueCoverageID = @UniqueCoverageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetEmailDataResult>> sp_Mobile2GetEmailDataAsync(int? EmailKey, int? ClientKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmailKey",
                    Value = EmailKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetEmailDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetEmailData] @EmailKey = @EmailKey, @ClientKey = @ClientKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetEventDataResult>> sp_Mobile2GetEventDataAsync(int? UniqueNameID, int? UniqueEventDetailID, bool? IncludeAppointments, bool? IncludeTasks, bool? IncludeCalls, bool? IncludeWorkflow, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UniqueEventDetailID",
                    Value = UniqueEventDetailID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeAppointments",
                    Value = IncludeAppointments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeTasks",
                    Value = IncludeTasks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeCalls",
                    Value = IncludeCalls ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeWorkflow",
                    Value = IncludeWorkflow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetEventDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetEventData] @UniqueNameID = @UniqueNameID, @UniqueEventDetailID = @UniqueEventDetailID, @IncludeAppointments = @IncludeAppointments, @IncludeTasks = @IncludeTasks, @IncludeCalls = @IncludeCalls, @IncludeWorkflow = @IncludeWorkflow", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetFileDataResult>> sp_Mobile2GetFileDataAsync(int? UniqueNameID, int? UniqueFileID, string ReferenceType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UniqueFileID",
                    Value = UniqueFileID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceType",
                    Size = 1,
                    Value = ReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetFileDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetFileData] @UniqueNameID = @UniqueNameID, @UniqueFileID = @UniqueFileID, @ReferenceType = @ReferenceType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2GetFirstNameAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2GetFirstName] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetFlexLabelsResult>> sp_Mobile2GetFlexLabelsAsync(int? NameKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NameKey",
                    Value = NameKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetFlexLabelsResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetFlexLabels] @NameKey = @NameKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetFlexNameFieldsResult>> sp_Mobile2GetFlexNameFieldsAsync(int? NameKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NameKey",
                    Value = NameKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetFlexNameFieldsResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetFlexNameFields] @NameKey = @NameKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetImageDataResult>> sp_Mobile2GetImageDataAsync(int? ImageKey, int? ClientKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ImageKey",
                    Value = ImageKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetImageDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetImageData] @ImageKey = @ImageKey, @ClientKey = @ClientKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetInvestmentDataResult>> sp_Mobile2GetInvestmentDataAsync(int? UniqueInvestmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueInvestmentID",
                    Value = UniqueInvestmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetInvestmentDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetInvestmentData] @UniqueInvestmentID = @UniqueInvestmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetInvestmentTransactionsResult>> sp_Mobile2GetInvestmentTransactionsAsync(int? InvestmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InvestmentID",
                    Value = InvestmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetInvestmentTransactionsResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetInvestmentTransactions] @InvestmentID = @InvestmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetNameDataResult>> sp_Mobile2GetNameDataAsync(int? UniqueNameID, int? UserKeyID, bool? SetRecent, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SetRecent",
                    Value = SetRecent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetNameDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetNameData] @UniqueNameID = @UniqueNameID, @UserKeyID = @UserKeyID, @SetRecent = @SetRecent", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetNameDataAdditionalResult>> sp_Mobile2GetNameDataAdditionalAsync(int? UniqueNameID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetNameDataAdditionalResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetNameDataAdditional] @UniqueNameID = @UniqueNameID, @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2GetNameListAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2GetNameList] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetNameListByInitialResult>> sp_Mobile2GetNameListByInitialAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetNameListByInitialResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetNameListByInitial] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetNameNewBizDataResult>> sp_Mobile2GetNameNewBizDataAsync(int? UniqueNewBizID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNewBizID",
                    Value = UniqueNewBizID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetNameNewBizDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetNameNewBizData] @UniqueNewBizID = @UniqueNewBizID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetNameNewBizListResult>> sp_Mobile2GetNameNewBizListAsync(int? UniqueNameID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetNameNewBizListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetNameNewBizList] @UniqueNameID = @UniqueNameID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetNamePersonalIdentificationResult>> sp_Mobile2GetNamePersonalIdentificationAsync(int? UniqueNameID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetNamePersonalIdentificationResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetNamePersonalIdentification] @UniqueNameID = @UniqueNameID, @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetNoteResult>> sp_Mobile2GetNoteAsync(int? TopicKeyID, string Source, int? NumberOfNotes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopicKeyID",
                    Value = TopicKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Source",
                    Size = 1,
                    Value = Source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NumberOfNotes",
                    Value = NumberOfNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetNoteResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetNote] @TopicKeyID = @TopicKeyID, @Source = @Source, @NumberOfNotes = @NumberOfNotes", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetNotePagingResult>> sp_Mobile2GetNotePagingAsync(int? TopicKeyID, string Source, int? StartIndex, int? NumberOfNotes, DateTime? StartDate, DateTime? EndDate, bool? DateSort, string Keyword, OutputParameter<int?> NoteCount, OutputParameter<int?> FullNoteCount, OutputParameter<DateTime?> FirstDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNoteCount = new SqlParameter
            {
                ParameterName = "NoteCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NoteCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterFullNoteCount = new SqlParameter
            {
                ParameterName = "FullNoteCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FullNoteCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterFirstDate = new SqlParameter
            {
                ParameterName = "FirstDate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FirstDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopicKeyID",
                    Value = TopicKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Source",
                    Size = 1,
                    Value = Source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "StartIndex",
                    Value = StartIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NumberOfNotes",
                    Value = NumberOfNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateSort",
                    Value = DateSort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Keyword",
                    Size = -1,
                    Value = Keyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterNoteCount,
                parameterFullNoteCount,
                parameterFirstDate,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetNotePagingResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetNotePaging] @TopicKeyID = @TopicKeyID, @Source = @Source, @StartIndex = @StartIndex, @NumberOfNotes = @NumberOfNotes, @StartDate = @StartDate, @EndDate = @EndDate, @DateSort = @DateSort, @Keyword = @Keyword, @NoteCount = @NoteCount OUTPUT, @FullNoteCount = @FullNoteCount OUTPUT, @FirstDate = @FirstDate OUTPUT", sqlParameters, cancellationToken);

            NoteCount.SetValue(parameterNoteCount.Value);
            FullNoteCount.SetValue(parameterFullNoteCount.Value);
            FirstDate.SetValue(parameterFirstDate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2GetPartialNameListAsync(int? UserKeyID, string Group, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 5,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2GetPartialNameList] @UserKeyID = @UserKeyID, @Group = @Group", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetPhoneDataResult>> sp_Mobile2GetPhoneDataAsync(int? UniqueNameID, int? UniquePhoneID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UniquePhoneID",
                    Value = UniquePhoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetPhoneDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetPhoneData] @UniqueNameID = @UniqueNameID, @UniquePhoneID = @UniquePhoneID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetPolicyDataResult>> sp_Mobile2GetPolicyDataAsync(int? UniquePolicyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniquePolicyID",
                    Value = UniquePolicyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetPolicyDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetPolicyData] @UniquePolicyID = @UniquePolicyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetPolicyListResult>> sp_Mobile2GetPolicyListAsync(int? UniqueNameID, bool? ShowTerminated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ShowTerminated",
                    Value = ShowTerminated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetPolicyListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetPolicyList] @UniqueNameID = @UniqueNameID, @ShowTerminated = @ShowTerminated", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetProducerIDListResult>> sp_Mobile2GetProducerIDListAsync(int? UniqueProdID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueProdID",
                    Value = UniqueProdID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetProducerIDListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetProducerIDList] @UniqueProdID = @UniqueProdID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetReadyDocLoginResult>> sp_Mobile2GetReadyDocLoginAsync(int? UserKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetReadyDocLoginResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetReadyDocLogin] @UserKey = @UserKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetRecentNameListResult>> sp_Mobile2GetRecentNameListAsync(int? UserKeyID, bool? IncludeContactData, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeContactData",
                    Value = IncludeContactData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetRecentNameListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetRecentNameList] @UserKeyID = @UserKeyID, @IncludeContactData = @IncludeContactData", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetReportListResult>> sp_Mobile2GetReportListAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetReportListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetReportList] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetSavedQueryListResult>> sp_Mobile2GetSavedQueryListAsync(int? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetSavedQueryListResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetSavedQueryList] @UserID = @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetSavedQuerySetResult>> sp_Mobile2GetSavedQuerySetAsync(int? SetID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SetID",
                    Value = SetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetSavedQuerySetResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetSavedQuerySet] @SetID = @SetID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetTaskStackResult>> sp_Mobile2GetTaskStackAsync(int? UserGroupKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserGroupKeyID",
                    Value = UserGroupKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetTaskStackResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetTaskStack] @UserGroupKeyID = @UserGroupKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetViewableCalendarsResult>> sp_Mobile2GetViewableCalendarsAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetViewableCalendarsResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetViewableCalendars] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetViewableCalendarsForGroupResult>> sp_Mobile2GetViewableCalendarsForGroupAsync(int? UserGroupKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserGroupKeyID",
                    Value = UserGroupKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetViewableCalendarsForGroupResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetViewableCalendarsForGroup] @UserGroupKeyID = @UserGroupKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetViewClientDataCountResult>> sp_Mobile2GetViewClientDataCountAsync(int? iKeyClient, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyClient",
                    Value = iKeyClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetViewClientDataCountResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetViewClientDataCount] @iKeyClient = @iKeyClient", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2GetWebDataResult>> sp_Mobile2GetWebDataAsync(int? WebKey, int? ClientKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WebKey",
                    Value = WebKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2GetWebDataResult>("EXEC @returnValue = [dbo].[sp_Mobile2GetWebData] @WebKey = @WebKey, @ClientKey = @ClientKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2InsertNoteResult>> sp_Mobile2InsertNoteAsync(int? TopicKey, string NotePage, DateTime? FollowupDate, string UserName, int? UserKeyID, string NoteSource, string MobileVersion, bool? PersonalContact, int? PrivateUserKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopicKey",
                    Value = TopicKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NotePage",
                    Size = -1,
                    Value = NotePage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FollowupDate",
                    Value = FollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 10,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NoteSource",
                    Size = 1,
                    Value = NoteSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalContact",
                    Value = PersonalContact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PrivateUserKey",
                    Value = PrivateUserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2InsertNoteResult>("EXEC @returnValue = [dbo].[sp_Mobile2InsertNote] @TopicKey = @TopicKey, @NotePage = @NotePage, @FollowupDate = @FollowupDate, @UserName = @UserName, @UserKeyID = @UserKeyID, @NoteSource = @NoteSource, @MobileVersion = @MobileVersion, @PersonalContact = @PersonalContact, @PrivateUserKey = @PrivateUserKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2LoginResult>> sp_Mobile2LoginAsync(string Username, string Password, Guid? LicenseID, string RawPassword, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Username",
                    Size = 20,
                    Value = Username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 100,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "LicenseID",
                    Value = LicenseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "RawPassword",
                    Size = 20,
                    Value = RawPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2LoginResult>("EXEC @returnValue = [dbo].[sp_Mobile2Login] @Username = @Username, @Password = @Password, @LicenseID = @LicenseID, @RawPassword = @RawPassword", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2LoginSSOResult>> sp_Mobile2LoginSSOAsync(string SSOToken, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SSOToken",
                    Size = 40,
                    Value = SSOToken ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2LoginSSOResult>("EXEC @returnValue = [dbo].[sp_Mobile2LoginSSO] @SSOToken = @SSOToken", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2MoneyGuidProByNameResult>> sp_Mobile2MoneyGuidProByNameAsync(int? iKeyName, bool? bEnforceHousehold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyName",
                    Value = iKeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bEnforceHousehold",
                    Value = bEnforceHousehold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2MoneyGuidProByNameResult>("EXEC @returnValue = [dbo].[sp_Mobile2MoneyGuidProByName] @iKeyName = @iKeyName, @bEnforceHousehold = @bEnforceHousehold", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2ProcessLogUpdateAsync(int? UserKey, int? ProcessLogTypeCodeKey, int? ProcessLogDetailTypeCodeKey, string ProcessLogDescription, string ProcessLogDetailDescription1, string ProcessLogDetailDescription2, DateTime? ProcessDate, string MobileVersion, OutputParameter<int?> ProcessLogKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterProcessLogKey = new SqlParameter
            {
                ParameterName = "ProcessLogKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ProcessLogKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessLogTypeCodeKey",
                    Value = ProcessLogTypeCodeKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessLogDetailTypeCodeKey",
                    Value = ProcessLogDetailTypeCodeKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterProcessLogKey,
                new SqlParameter
                {
                    ParameterName = "ProcessLogDescription",
                    Size = 200,
                    Value = ProcessLogDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessLogDetailDescription1",
                    Size = -1,
                    Value = ProcessLogDetailDescription1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessLogDetailDescription2",
                    Size = -1,
                    Value = ProcessLogDetailDescription2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2ProcessLogUpdate] @UserKey = @UserKey, @ProcessLogTypeCodeKey = @ProcessLogTypeCodeKey, @ProcessLogDetailTypeCodeKey = @ProcessLogDetailTypeCodeKey, @ProcessLogKey = @ProcessLogKey OUTPUT, @ProcessLogDescription = @ProcessLogDescription, @ProcessLogDetailDescription1 = @ProcessLogDetailDescription1, @ProcessLogDetailDescription2 = @ProcessLogDetailDescription2, @ProcessDate = @ProcessDate, @MobileVersion = @MobileVersion", sqlParameters, cancellationToken);

            ProcessLogKey.SetValue(parameterProcessLogKey.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2ProcessMarketValuesForAccountResult>> sp_Mobile2ProcessMarketValuesForAccountAsync(int? iKeyAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyAccount",
                    Value = iKeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2ProcessMarketValuesForAccountResult>("EXEC @returnValue = [dbo].[sp_Mobile2ProcessMarketValuesForAccount] @iKeyAccount = @iKeyAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2SaveImageAsync(int? ClientKey, byte[] FullImage, byte[] Thumbnail, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FullImage",
                    Size = -1,
                    Value = FullImage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "Thumbnail",
                    Size = -1,
                    Value = Thumbnail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2SaveImage] @ClientKey = @ClientKey, @FullImage = @FullImage, @Thumbnail = @Thumbnail, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2SetTaskStackOrderAsync(int? EventKeyID, int? CalendarKeyID, int? Ordinal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EventKeyID",
                    Value = EventKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CalendarKeyID",
                    Value = CalendarKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ordinal",
                    Value = Ordinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2SetTaskStackOrder] @EventKeyID = @EventKeyID, @CalendarKeyID = @CalendarKeyID, @Ordinal = @Ordinal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2UpdateFileAsync(string ReferenceType, int? FileKey, string Description, int? CategoryCode, DateTime? FileDate, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReferenceType",
                    Size = 1,
                    Value = ReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FileKey",
                    Value = FileKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 100,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryCode",
                    Value = CategoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FileDate",
                    Value = FileDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2UpdateFile] @ReferenceType = @ReferenceType, @FileKey = @FileKey, @Description = @Description, @CategoryCode = @CategoryCode, @FileDate = @FileDate, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2UpdateLinkResult>> sp_Mobile2UpdateLinkAsync(int? LinkKey, int? ClientKey, int? LinkClientKey, int? LinkType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LinkKey",
                    Value = LinkKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LinkClientKey",
                    Value = LinkClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LinkType",
                    Value = LinkType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2UpdateLinkResult>("EXEC @returnValue = [dbo].[sp_Mobile2UpdateLink] @LinkKey = @LinkKey, @ClientKey = @ClientKey, @LinkClientKey = @LinkClientKey, @LinkType = @LinkType, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2UpdateLoginActivityResult>> sp_Mobile2UpdateLoginActivityAsync(string SubscriberID, string Username, bool? ValidSubscriberID, bool? LoginSuccessful, int? HostingUserID, int? NameKeyID, int? UserKeyID, string ErrorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SubscriberID",
                    Size = 20,
                    Value = SubscriberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Username",
                    Size = 100,
                    Value = Username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ValidSubscriberID",
                    Value = ValidSubscriberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LoginSuccessful",
                    Value = LoginSuccessful ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "HostingUserID",
                    Value = HostingUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NameKeyID",
                    Value = NameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ErrorMessage",
                    Size = -1,
                    Value = ErrorMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2UpdateLoginActivityResult>("EXEC @returnValue = [dbo].[sp_Mobile2UpdateLoginActivity] @SubscriberID = @SubscriberID, @Username = @Username, @ValidSubscriberID = @ValidSubscriberID, @LoginSuccessful = @LoginSuccessful, @HostingUserID = @HostingUserID, @NameKeyID = @NameKeyID, @UserKeyID = @UserKeyID, @ErrorMessage = @ErrorMessage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2UpdateMarketResult>> sp_Mobile2UpdateMarketAsync(int? MarketKey, int? ClientKey, int? MarketCode, int? UserKeyID, DateTime? FollowupDate, string MobileVersion, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MarketKey",
                    Value = MarketKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MarketCode",
                    Value = MarketCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FollowupDate",
                    Value = FollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2UpdateMarketResult>("EXEC @returnValue = [dbo].[sp_Mobile2UpdateMarket] @MarketKey = @MarketKey, @ClientKey = @ClientKey, @MarketCode = @MarketCode, @UserKeyID = @UserKeyID, @FollowupDate = @FollowupDate, @MobileVersion = @MobileVersion, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2UpdateMarketFollowupAsync(int? iKeyMarket, DateTime? tFollowupDate, int? iKeyCalendar, int? iKeyName, string cWhoChange, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int?> FollowupKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterFollowupKey = new SqlParameter
            {
                ParameterName = "FollowupKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FollowupKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyMarket",
                    Value = iKeyMarket ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tFollowupDate",
                    Value = tFollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCalendar",
                    Value = iKeyCalendar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyName",
                    Value = iKeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cWhoChange",
                    Size = 5,
                    Value = cWhoChange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterFollowupKey,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2UpdateMarketFollowup] @iKeyMarket = @iKeyMarket, @tFollowupDate = @tFollowupDate, @iKeyCalendar = @iKeyCalendar, @iKeyName = @iKeyName, @cWhoChange = @cWhoChange, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate, @FollowupKey = @FollowupKey OUTPUT", sqlParameters, cancellationToken);

            FollowupKey.SetValue(parameterFollowupKey.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2UpdateNewBizFollowupAsync(int? iKeyNewBiz, int? iKeyNote, DateTime? tFollowupDate, int? iKeyCalendar, int? iSourceType, string cWhoChange, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNewBiz",
                    Value = iKeyNewBiz ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNote",
                    Value = iKeyNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tFollowupDate",
                    Value = tFollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCalendar",
                    Value = iKeyCalendar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iSourceType",
                    Value = iSourceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cWhoChange",
                    Size = 5,
                    Value = cWhoChange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2UpdateNewBizFollowup] @iKeyNewBiz = @iKeyNewBiz, @iKeyNote = @iKeyNote, @tFollowupDate = @tFollowupDate, @iKeyCalendar = @iKeyCalendar, @iSourceType = @iSourceType, @cWhoChange = @cWhoChange, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2UpdateNoteAsync(int? NoteKeyID, DateTime? FollowupDate, string NotePage, string WhoChange, int? UserKeyID, string NoteSource, string MobileVersion, bool? PersonalContact, int? PrivateUserKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NoteKeyID",
                    Value = NoteKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FollowupDate",
                    Value = FollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NotePage",
                    Size = -1,
                    Value = NotePage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WhoChange",
                    Size = 10,
                    Value = WhoChange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NoteSource",
                    Size = 1,
                    Value = NoteSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalContact",
                    Value = PersonalContact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PrivateUserKey",
                    Value = PrivateUserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2UpdateNote] @NoteKeyID = @NoteKeyID, @FollowupDate = @FollowupDate, @NotePage = @NotePage, @WhoChange = @WhoChange, @UserKeyID = @UserKeyID, @NoteSource = @NoteSource, @MobileVersion = @MobileVersion, @PersonalContact = @PersonalContact, @PrivateUserKey = @PrivateUserKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2UpdateNoteFollowupAsync(int? iKeyNote, DateTime? tFollowupDate, int? iKeyCalendar, string cNoteSource, string cWhoChange, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNote",
                    Value = iKeyNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tFollowupDate",
                    Value = tFollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCalendar",
                    Value = iKeyCalendar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cNoteSource",
                    Size = 1,
                    Value = cNoteSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cWhoChange",
                    Size = 5,
                    Value = cWhoChange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2UpdateNoteFollowup] @iKeyNote = @iKeyNote, @tFollowupDate = @tFollowupDate, @iKeyCalendar = @iKeyCalendar, @cNoteSource = @cNoteSource, @cWhoChange = @cWhoChange, @UserKey = @UserKey, @MobileVersion = @MobileVersion, @ProcessDate = @ProcessDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_Mobile2UpdateReadyDocLoginAsync(int? UserKey, string ClientID, string UserName, string Password, string ServiceURL, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientID",
                    Size = 50,
                    Value = ClientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 100,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceURL",
                    Size = 200,
                    Value = ServiceURL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Mobile2UpdateReadyDocLogin] @UserKey = @UserKey, @ClientID = @ClientID, @UserName = @UserName, @Password = @Password, @ServiceURL = @ServiceURL, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2UpdateSavedQuerySetResult>> sp_Mobile2UpdateSavedQuerySetAsync(int? iKeyId, int? iKeyOwningUser, string cName, bool? bFlagPrevious, bool? bFlagInsuranceExcludeUnrelatedNames, bool? bFlagInvestmentsExcludeUnrelatedNames, bool? bFlagInsuranceSelectAll, bool? bFlagInvestmentsSelectAll, int? iInsuranceNamesRelationship, int? iInvestmentsNamesRelationship, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyId",
                    Value = iKeyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyOwningUser",
                    Value = iKeyOwningUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cName",
                    Size = 200,
                    Value = cName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bFlagPrevious",
                    Value = bFlagPrevious ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bFlagInsuranceExcludeUnrelatedNames",
                    Value = bFlagInsuranceExcludeUnrelatedNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bFlagInvestmentsExcludeUnrelatedNames",
                    Value = bFlagInvestmentsExcludeUnrelatedNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bFlagInsuranceSelectAll",
                    Value = bFlagInsuranceSelectAll ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bFlagInvestmentsSelectAll",
                    Value = bFlagInvestmentsSelectAll ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iInsuranceNamesRelationship",
                    Value = iInsuranceNamesRelationship ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iInvestmentsNamesRelationship",
                    Value = iInvestmentsNamesRelationship ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2UpdateSavedQuerySetResult>("EXEC @returnValue = [dbo].[sp_Mobile2UpdateSavedQuerySet] @iKeyId = @iKeyId, @iKeyOwningUser = @iKeyOwningUser, @cName = @cName, @bFlagPrevious = @bFlagPrevious, @bFlagInsuranceExcludeUnrelatedNames = @bFlagInsuranceExcludeUnrelatedNames, @bFlagInvestmentsExcludeUnrelatedNames = @bFlagInvestmentsExcludeUnrelatedNames, @bFlagInsuranceSelectAll = @bFlagInsuranceSelectAll, @bFlagInvestmentsSelectAll = @bFlagInvestmentsSelectAll, @iInsuranceNamesRelationship = @iInsuranceNamesRelationship, @iInvestmentsNamesRelationship = @iInvestmentsNamesRelationship, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Mobile2ValidateUserEmailAddressResult>> sp_Mobile2ValidateUserEmailAddressAsync(string email, OutputParameter<bool?> preventPasswordChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpreventPasswordChange = new SqlParameter
            {
                ParameterName = "preventPasswordChange",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = preventPasswordChange?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 100,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterpreventPasswordChange,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Mobile2ValidateUserEmailAddressResult>("EXEC @returnValue = [dbo].[sp_Mobile2ValidateUserEmailAddress] @email = @email, @preventPasswordChange = @preventPasswordChange OUTPUT", sqlParameters, cancellationToken);

            preventPasswordChange.SetValue(parameterpreventPasswordChange.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileAddressGreetingsAndAddresseesByNameResult>> sp_MobileAddressGreetingsAndAddresseesByNameAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileAddressGreetingsAndAddresseesByNameResult>("EXEC @returnValue = [dbo].[sp_MobileAddressGreetingsAndAddresseesByName] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileCheckUserTaskResult>> sp_MobileCheckUserTaskAsync(int? UserKey, int? UserTaskTypeKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserTaskTypeKey",
                    Value = UserTaskTypeKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileCheckUserTaskResult>("EXEC @returnValue = [dbo].[sp_MobileCheckUserTask] @UserKey = @UserKey, @UserTaskTypeKey = @UserTaskTypeKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileCompleteCalendarEventAsync(int? DetailKey, bool? Completed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DetailKey",
                    Value = DetailKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Completed",
                    Value = Completed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileCompleteCalendarEvent] @DetailKey = @DetailKey, @Completed = @Completed", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileCreateAddressResult>> sp_MobileCreateAddressAsync(int? ClientKey, bool? Primary, string Greeting, string Addressee, string Title, string BusinessName, string Street1, string Street2, string City, string State, string Zip, string Country, int? AddressType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Greeting",
                    Size = 40,
                    Value = Greeting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Addressee",
                    Size = 50,
                    Value = Addressee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 50,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 50,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Street1",
                    Size = 50,
                    Value = Street1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Street2",
                    Size = 50,
                    Value = Street2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 30,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 5,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Country",
                    Size = 40,
                    Value = Country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AddressType",
                    Value = AddressType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileCreateAddressResult>("EXEC @returnValue = [dbo].[sp_MobileCreateAddress] @ClientKey = @ClientKey, @Primary = @Primary, @Greeting = @Greeting, @Addressee = @Addressee, @Title = @Title, @BusinessName = @BusinessName, @Street1 = @Street1, @Street2 = @Street2, @City = @City, @State = @State, @Zip = @Zip, @Country = @Country, @AddressType = @AddressType, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileCreateEmailResult>> sp_MobileCreateEmailAsync(int? ClientKey, bool? Primary, string Contact, string EmailAddress, string BusinessName, string Title, string Greeting, bool? SkipArchive, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 30,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 100,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 50,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 50,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Greeting",
                    Size = 50,
                    Value = Greeting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SkipArchive",
                    Value = SkipArchive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileCreateEmailResult>("EXEC @returnValue = [dbo].[sp_MobileCreateEmail] @ClientKey = @ClientKey, @Primary = @Primary, @Contact = @Contact, @EmailAddress = @EmailAddress, @BusinessName = @BusinessName, @Title = @Title, @Greeting = @Greeting, @SkipArchive = @SkipArchive, @Comment = @Comment, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileCreateLinkResult>> sp_MobileCreateLinkAsync(int? ClientKey, int? LinkClientKey, int? LinkType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LinkClientKey",
                    Value = LinkClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LinkType",
                    Value = LinkType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileCreateLinkResult>("EXEC @returnValue = [dbo].[sp_MobileCreateLink] @ClientKey = @ClientKey, @LinkClientKey = @LinkClientKey, @LinkType = @LinkType, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileCreateNameResult>> sp_MobileCreateNameAsync(string Firstname, string Middlename, string Lastname, string Dob, string NameType, string status, string Producer, string Gender, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Firstname",
                    Size = 30,
                    Value = Firstname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Middlename",
                    Size = 20,
                    Value = Middlename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Lastname",
                    Size = 60,
                    Value = Lastname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Dob",
                    Size = 10,
                    Value = Dob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NameType",
                    Size = 10,
                    Value = NameType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Producer",
                    Size = 10,
                    Value = Producer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 10,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileCreateNameResult>("EXEC @returnValue = [dbo].[sp_MobileCreateName] @Firstname = @Firstname, @Middlename = @Middlename, @Lastname = @Lastname, @Dob = @Dob, @NameType = @NameType, @status = @status, @Producer = @Producer, @Gender = @Gender, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileCreatePhoneResult>> sp_MobileCreatePhoneAsync(int? ClientKey, bool? Primary, string Areacode, string Phonenum, string Extension, string CountryCode, string Contact, int? PhoneType, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Areacode",
                    Size = 10,
                    Value = Areacode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Phonenum",
                    Size = 20,
                    Value = Phonenum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Extension",
                    Size = 10,
                    Value = Extension ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CountryCode",
                    Size = 10,
                    Value = CountryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 60,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneType",
                    Value = PhoneType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileCreatePhoneResult>("EXEC @returnValue = [dbo].[sp_MobileCreatePhone] @ClientKey = @ClientKey, @Primary = @Primary, @Areacode = @Areacode, @Phonenum = @Phonenum, @Extension = @Extension, @CountryCode = @CountryCode, @Contact = @Contact, @PhoneType = @PhoneType, @Comment = @Comment, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileCreateWebResult>> sp_MobileCreateWebAsync(int? ClientKey, string Contact, string BusinessName, bool? Primary, string WebAddress, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 30,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 30,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "WebAddress",
                    Size = 100,
                    Value = WebAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileCreateWebResult>("EXEC @returnValue = [dbo].[sp_MobileCreateWeb] @ClientKey = @ClientKey, @Contact = @Contact, @BusinessName = @BusinessName, @Primary = @Primary, @WebAddress = @WebAddress, @Comment = @Comment, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileCurrentViewNameResult>> sp_MobileCurrentViewNameAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileCurrentViewNameResult>("EXEC @returnValue = [dbo].[sp_MobileCurrentViewName] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileDeleteEventAsync(int? DetailEventKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DetailEventKey",
                    Value = DetailEventKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileDeleteEvent] @DetailEventKey = @DetailEventKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileDeleteLinkAsync(int? LinkKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LinkKey",
                    Value = LinkKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileDeleteLink] @LinkKey = @LinkKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileDeleteMarketAsync(int? MarketKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MarketKey",
                    Value = MarketKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileDeleteMarket] @MarketKey = @MarketKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileDeleteNameResult>> sp_MobileDeleteNameAsync(int? UniqueNameID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileDeleteNameResult>("EXEC @returnValue = [dbo].[sp_MobileDeleteName] @UniqueNameID = @UniqueNameID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileDeleteNoteAsync(int? NoteKey, string NoteSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NoteKey",
                    Value = NoteKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NoteSource",
                    Size = 1,
                    Value = NoteSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileDeleteNote] @NoteKey = @NoteKey, @NoteSource = @NoteSource", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileEditAddressAsync(int? AddressKey, int? ClientKey, bool? Primary, string Greeting, string Addressee, string Title, string BusinessName, string Street1, string Street2, string City, string State, string Zip, string Country, int? AddressType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AddressKey",
                    Value = AddressKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Greeting",
                    Size = 40,
                    Value = Greeting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Addressee",
                    Size = 50,
                    Value = Addressee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 50,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 50,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Street1",
                    Size = 50,
                    Value = Street1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Street2",
                    Size = 50,
                    Value = Street2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 30,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 5,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Country",
                    Size = 40,
                    Value = Country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AddressType",
                    Value = AddressType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileEditAddress] @AddressKey = @AddressKey, @ClientKey = @ClientKey, @Primary = @Primary, @Greeting = @Greeting, @Addressee = @Addressee, @Title = @Title, @BusinessName = @BusinessName, @Street1 = @Street1, @Street2 = @Street2, @City = @City, @State = @State, @Zip = @Zip, @Country = @Country, @AddressType = @AddressType, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileEditEmailResult>> sp_MobileEditEmailAsync(int? EmailKey, int? ClientKey, bool? Primary, string Contact, string EmailAddress, string BusinessName, string Title, string Greeting, bool? SkipArchive, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmailKey",
                    Value = EmailKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 30,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EmailAddress",
                    Size = 100,
                    Value = EmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 50,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 50,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Greeting",
                    Size = 50,
                    Value = Greeting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SkipArchive",
                    Value = SkipArchive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileEditEmailResult>("EXEC @returnValue = [dbo].[sp_MobileEditEmail] @EmailKey = @EmailKey, @ClientKey = @ClientKey, @Primary = @Primary, @Contact = @Contact, @EmailAddress = @EmailAddress, @BusinessName = @BusinessName, @Title = @Title, @Greeting = @Greeting, @SkipArchive = @SkipArchive, @Comment = @Comment, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileEditEventResult>> sp_MobileEditEventAsync(int? DetailEventKey, int? ClientKey, int? CalendarKey, int? EventType, int? EventSubType, int? Priority, string Description, DateTime? Begin, DateTime? End, string Location, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DetailEventKey",
                    Value = DetailEventKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CalendarKey",
                    Value = CalendarKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventType",
                    Value = EventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventSubType",
                    Value = EventSubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Priority",
                    Value = Priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 100,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Begin",
                    Value = Begin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "End",
                    Value = End ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Location",
                    Size = 200,
                    Value = Location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileEditEventResult>("EXEC @returnValue = [dbo].[sp_MobileEditEvent] @DetailEventKey = @DetailEventKey, @ClientKey = @ClientKey, @CalendarKey = @CalendarKey, @EventType = @EventType, @EventSubType = @EventSubType, @Priority = @Priority, @Description = @Description, @Begin = @Begin, @End = @End, @Location = @Location, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileEditMarketResult>> sp_MobileEditMarketAsync(int? MarketKey, int? MarketCode, int? UserKeyID, DateTime? FollowupDate, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MarketKey",
                    Value = MarketKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MarketCode",
                    Value = MarketCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FollowupDate",
                    Value = FollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileEditMarketResult>("EXEC @returnValue = [dbo].[sp_MobileEditMarket] @MarketKey = @MarketKey, @MarketCode = @MarketCode, @UserKeyID = @UserKeyID, @FollowupDate = @FollowupDate, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileEditNameAsync(int? ClientKey, string Firstname, string Middlename, string Lastname, string Dob, string NameType, string status, string Producer, string Gender, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Firstname",
                    Size = 30,
                    Value = Firstname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Middlename",
                    Size = 20,
                    Value = Middlename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Lastname",
                    Size = 60,
                    Value = Lastname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Dob",
                    Size = 10,
                    Value = Dob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NameType",
                    Size = 10,
                    Value = NameType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Producer",
                    Size = 10,
                    Value = Producer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 10,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileEditName] @ClientKey = @ClientKey, @Firstname = @Firstname, @Middlename = @Middlename, @Lastname = @Lastname, @Dob = @Dob, @NameType = @NameType, @status = @status, @Producer = @Producer, @Gender = @Gender, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileEditNoteTopicResult>> sp_MobileEditNoteTopicAsync(int? TopicKey, int? ClientKey, string Topic, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopicKey",
                    Value = TopicKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Topic",
                    Size = 100,
                    Value = Topic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileEditNoteTopicResult>("EXEC @returnValue = [dbo].[sp_MobileEditNoteTopic] @TopicKey = @TopicKey, @ClientKey = @ClientKey, @Topic = @Topic, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileEditPhoneAsync(int? PhoneKey, int? ClientKey, bool? Primary, string Areacode, string Phonenum, string Extension, string CountryCode, string Contact, int? PhoneType, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PhoneKey",
                    Value = PhoneKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Areacode",
                    Size = 10,
                    Value = Areacode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Phonenum",
                    Size = 20,
                    Value = Phonenum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Extension",
                    Size = 10,
                    Value = Extension ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CountryCode",
                    Size = 10,
                    Value = CountryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 60,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneType",
                    Value = PhoneType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileEditPhone] @PhoneKey = @PhoneKey, @ClientKey = @ClientKey, @Primary = @Primary, @Areacode = @Areacode, @Phonenum = @Phonenum, @Extension = @Extension, @CountryCode = @CountryCode, @Contact = @Contact, @PhoneType = @PhoneType, @Comment = @Comment, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileEditWebResult>> sp_MobileEditWebAsync(int? WebKey, int? ClientKey, string BusinessName, string Contact, bool? Primary, string WebAddress, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WebKey",
                    Value = WebKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BusinessName",
                    Size = 30,
                    Value = BusinessName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Contact",
                    Size = 30,
                    Value = Contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Primary",
                    Value = Primary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "WebAddress",
                    Size = 100,
                    Value = WebAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Size = -1,
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileEditWebResult>("EXEC @returnValue = [dbo].[sp_MobileEditWeb] @WebKey = @WebKey, @ClientKey = @ClientKey, @BusinessName = @BusinessName, @Contact = @Contact, @Primary = @Primary, @WebAddress = @WebAddress, @Comment = @Comment, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetAccountDataResult>> sp_MobileGetAccountDataAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueAccountID",
                    Value = UniqueAccountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetAccountDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetAccountData] @UniqueAccountID = @UniqueAccountID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetAccountInvestmentListResult>> sp_MobileGetAccountInvestmentListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueAccountID",
                    Value = UniqueAccountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetAccountInvestmentListResult>("EXEC @returnValue = [dbo].[sp_MobileGetAccountInvestmentList] @UniqueAccountID = @UniqueAccountID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetAccountListResult>> sp_MobileGetAccountListAsync(int? UniqueNameID, bool? ShowLiquidated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ShowLiquidated",
                    Value = ShowLiquidated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetAccountListResult>("EXEC @returnValue = [dbo].[sp_MobileGetAccountList] @UniqueNameID = @UniqueNameID, @ShowLiquidated = @ShowLiquidated", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetAccountNewBizListResult>> sp_MobileGetAccountNewBizListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueAccountID",
                    Value = UniqueAccountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetAccountNewBizListResult>("EXEC @returnValue = [dbo].[sp_MobileGetAccountNewBizList] @UniqueAccountID = @UniqueAccountID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetAccountRelationListResult>> sp_MobileGetAccountRelationListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueAccountID",
                    Value = UniqueAccountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetAccountRelationListResult>("EXEC @returnValue = [dbo].[sp_MobileGetAccountRelationList] @UniqueAccountID = @UniqueAccountID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetAddressDataResult>> sp_MobileGetAddressDataAsync(int? UniqueNameID, int? UniqueAddressID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UniqueAddressID",
                    Value = UniqueAddressID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetAddressDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetAddressData] @UniqueNameID = @UniqueNameID, @UniqueAddressID = @UniqueAddressID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetAlbridgeApplinkDataResult>> sp_MobileGetAlbridgeApplinkDataAsync(int? UniqueNameID, int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UniqueAccountID",
                    Value = UniqueAccountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetAlbridgeApplinkDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetAlbridgeApplinkData] @UniqueNameID = @UniqueNameID, @UniqueAccountID = @UniqueAccountID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetCalendarResult>> sp_MobileGetCalendarAsync(int? UserKeyID, int? CalKeyID, DateTime? StartDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CalKeyID",
                    Value = CalKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetCalendarResult>("EXEC @returnValue = [dbo].[sp_MobileGetCalendar] @UserKeyID = @UserKeyID, @CalKeyID = @CalKeyID, @StartDate = @StartDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetCalendarDayResult>> sp_MobileGetCalendarDayAsync(int? UserKeyID, int? CalKeyID, DateTime? CalDate, int? EventType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CalKeyID",
                    Value = CalKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CalDate",
                    Value = CalDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EventType",
                    Value = EventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetCalendarDayResult>("EXEC @returnValue = [dbo].[sp_MobileGetCalendarDay] @UserKeyID = @UserKeyID, @CalKeyID = @CalKeyID, @CalDate = @CalDate, @EventType = @EventType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetCalendarItemResult>> sp_MobileGetCalendarItemAsync(int? DetailKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DetailKey",
                    Value = DetailKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetCalendarItemResult>("EXEC @returnValue = [dbo].[sp_MobileGetCalendarItem] @DetailKey = @DetailKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetCoverageDataResult>> sp_MobileGetCoverageDataAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueCoverageID",
                    Value = UniqueCoverageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetCoverageDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetCoverageData] @UniqueCoverageID = @UniqueCoverageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetCoverageNewBizDataResult>> sp_MobileGetCoverageNewBizDataAsync(int? UniqueNewBizID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNewBizID",
                    Value = UniqueNewBizID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetCoverageNewBizDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetCoverageNewBizData] @UniqueNewBizID = @UniqueNewBizID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetCoverageNewBizListResult>> sp_MobileGetCoverageNewBizListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueCoverageID",
                    Value = UniqueCoverageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetCoverageNewBizListResult>("EXEC @returnValue = [dbo].[sp_MobileGetCoverageNewBizList] @UniqueCoverageID = @UniqueCoverageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetCoverageRelationListResult>> sp_MobileGetCoverageRelationListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueCoverageID",
                    Value = UniqueCoverageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetCoverageRelationListResult>("EXEC @returnValue = [dbo].[sp_MobileGetCoverageRelationList] @UniqueCoverageID = @UniqueCoverageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetCoverageRiderListResult>> sp_MobileGetCoverageRiderListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueCoverageID",
                    Value = UniqueCoverageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetCoverageRiderListResult>("EXEC @returnValue = [dbo].[sp_MobileGetCoverageRiderList] @UniqueCoverageID = @UniqueCoverageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetEmailDataResult>> sp_MobileGetEmailDataAsync(int? EmailKey, int? ClientKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmailKey",
                    Value = EmailKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetEmailDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetEmailData] @EmailKey = @EmailKey, @ClientKey = @ClientKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetEventDataResult>> sp_MobileGetEventDataAsync(int? UniqueNameID, int? UniqueEventID, int? EventType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UniqueEventID",
                    Value = UniqueEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventType",
                    Value = EventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetEventDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetEventData] @UniqueNameID = @UniqueNameID, @UniqueEventID = @UniqueEventID, @EventType = @EventType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetHouseholdDataResult>> sp_MobileGetHouseholdDataAsync(int? UniqueNameID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetHouseholdDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetHouseholdData] @UniqueNameID = @UniqueNameID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetInvestmentDataResult>> sp_MobileGetInvestmentDataAsync(int? UniqueInvestmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueInvestmentID",
                    Value = UniqueInvestmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetInvestmentDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetInvestmentData] @UniqueInvestmentID = @UniqueInvestmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetNameDataResult>> sp_MobileGetNameDataAsync(int? UniqueNameID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetNameDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetNameData] @UniqueNameID = @UniqueNameID, @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileGetNameListAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileGetNameList] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetNameListByInitialResult>> sp_MobileGetNameListByInitialAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetNameListByInitialResult>("EXEC @returnValue = [dbo].[sp_MobileGetNameListByInitial] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetNoteResult>> sp_MobileGetNoteAsync(int? TopicKeyID, string Source, int? NumberOfNotes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopicKeyID",
                    Value = TopicKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Source",
                    Size = 1,
                    Value = Source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NumberOfNotes",
                    Value = NumberOfNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetNoteResult>("EXEC @returnValue = [dbo].[sp_MobileGetNote] @TopicKeyID = @TopicKeyID, @Source = @Source, @NumberOfNotes = @NumberOfNotes", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetNotePagingResult>> sp_MobileGetNotePagingAsync(int? TopicKeyID, string Source, int? StartIndex, int? NumberOfNotes, OutputParameter<int?> NoteCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNoteCount = new SqlParameter
            {
                ParameterName = "NoteCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NoteCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopicKeyID",
                    Value = TopicKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Source",
                    Size = 1,
                    Value = Source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "StartIndex",
                    Value = StartIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NumberOfNotes",
                    Value = NumberOfNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterNoteCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetNotePagingResult>("EXEC @returnValue = [dbo].[sp_MobileGetNotePaging] @TopicKeyID = @TopicKeyID, @Source = @Source, @StartIndex = @StartIndex, @NumberOfNotes = @NumberOfNotes, @NoteCount = @NoteCount OUTPUT", sqlParameters, cancellationToken);

            NoteCount.SetValue(parameterNoteCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileGetPartialNameListAsync(int? UserKeyID, string Group, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 5,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileGetPartialNameList] @UserKeyID = @UserKeyID, @Group = @Group", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetPhoneDataResult>> sp_MobileGetPhoneDataAsync(int? UniqueNameID, int? UniquePhoneID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UniquePhoneID",
                    Value = UniquePhoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetPhoneDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetPhoneData] @UniqueNameID = @UniqueNameID, @UniquePhoneID = @UniquePhoneID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetPolicyDataResult>> sp_MobileGetPolicyDataAsync(int? UniquePolicyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniquePolicyID",
                    Value = UniquePolicyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetPolicyDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetPolicyData] @UniquePolicyID = @UniquePolicyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetPolicyListResult>> sp_MobileGetPolicyListAsync(int? UniqueNameID, bool? ShowTerminated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueNameID",
                    Value = UniqueNameID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ShowTerminated",
                    Value = ShowTerminated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetPolicyListResult>("EXEC @returnValue = [dbo].[sp_MobileGetPolicyList] @UniqueNameID = @UniqueNameID, @ShowTerminated = @ShowTerminated", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetPolicyRelationResult>> sp_MobileGetPolicyRelationAsync(int? UniquePolicyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniquePolicyID",
                    Value = UniquePolicyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetPolicyRelationResult>("EXEC @returnValue = [dbo].[sp_MobileGetPolicyRelation] @UniquePolicyID = @UniquePolicyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetRecentNameListResult>> sp_MobileGetRecentNameListAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetRecentNameListResult>("EXEC @returnValue = [dbo].[sp_MobileGetRecentNameList] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetRiderDataResult>> sp_MobileGetRiderDataAsync(int? UniqueRiderID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UniqueRiderID",
                    Value = UniqueRiderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetRiderDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetRiderData] @UniqueRiderID = @UniqueRiderID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetViewableCalendarsResult>> sp_MobileGetViewableCalendarsAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetViewableCalendarsResult>("EXEC @returnValue = [dbo].[sp_MobileGetViewableCalendars] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileGetWebDataResult>> sp_MobileGetWebDataAsync(int? WebKey, int? ClientKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WebKey",
                    Value = WebKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileGetWebDataResult>("EXEC @returnValue = [dbo].[sp_MobileGetWebData] @WebKey = @WebKey, @ClientKey = @ClientKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileInsertNoteResult>> sp_MobileInsertNoteAsync(int? TopicKey, string NotePage, string UserName, string NoteSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopicKey",
                    Value = TopicKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NotePage",
                    Size = -1,
                    Value = NotePage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 10,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NoteSource",
                    Size = 1,
                    Value = NoteSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileInsertNoteResult>("EXEC @returnValue = [dbo].[sp_MobileInsertNote] @TopicKey = @TopicKey, @NotePage = @NotePage, @UserName = @UserName, @NoteSource = @NoteSource", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileLoginResult>> sp_MobileLoginAsync(string Username, string Password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Username",
                    Size = 20,
                    Value = Username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 100,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileLoginResult>("EXEC @returnValue = [dbo].[sp_MobileLogin] @Username = @Username, @Password = @Password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileLoginSSOResult>> sp_MobileLoginSSOAsync(string SSOToken, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SSOToken",
                    Size = 40,
                    Value = SSOToken ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileLoginSSOResult>("EXEC @returnValue = [dbo].[sp_MobileLoginSSO] @SSOToken = @SSOToken", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileProcessLogUpdateAsync(int? UserKey, int? ProcessLogTypeCodeKey, int? ProcessLogDetailTypeCodeKey, string ProcessLogDescription, string ProcessLogDetailDescription1, string ProcessLogDetailDescription2, DateTime? ProcessDate, string MobileVersion, OutputParameter<int?> ProcessLogKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterProcessLogKey = new SqlParameter
            {
                ParameterName = "ProcessLogKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ProcessLogKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessLogTypeCodeKey",
                    Value = ProcessLogTypeCodeKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessLogDetailTypeCodeKey",
                    Value = ProcessLogDetailTypeCodeKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterProcessLogKey,
                new SqlParameter
                {
                    ParameterName = "ProcessLogDescription",
                    Size = 200,
                    Value = ProcessLogDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessLogDetailDescription1",
                    Size = -1,
                    Value = ProcessLogDetailDescription1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessLogDetailDescription2",
                    Size = -1,
                    Value = ProcessLogDetailDescription2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessDate",
                    Value = ProcessDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MobileVersion",
                    Size = 50,
                    Value = MobileVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileProcessLogUpdate] @UserKey = @UserKey, @ProcessLogTypeCodeKey = @ProcessLogTypeCodeKey, @ProcessLogDetailTypeCodeKey = @ProcessLogDetailTypeCodeKey, @ProcessLogKey = @ProcessLogKey OUTPUT, @ProcessLogDescription = @ProcessLogDescription, @ProcessLogDetailDescription1 = @ProcessLogDetailDescription1, @ProcessLogDetailDescription2 = @ProcessLogDetailDescription2, @ProcessDate = @ProcessDate, @MobileVersion = @MobileVersion", sqlParameters, cancellationToken);

            ProcessLogKey.SetValue(parameterProcessLogKey.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileProcessMarketValuesForAccountResult>> sp_MobileProcessMarketValuesForAccountAsync(int? iKeyAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyAccount",
                    Value = iKeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileProcessMarketValuesForAccountResult>("EXEC @returnValue = [dbo].[sp_MobileProcessMarketValuesForAccount] @iKeyAccount = @iKeyAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileRolloverAllCalendarResult>> sp_MobileRolloverAllCalendarAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileRolloverAllCalendarResult>("EXEC @returnValue = [dbo].[sp_MobileRolloverAllCalendar]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileUpdateLinkResult>> sp_MobileUpdateLinkAsync(int? LinkKey, int? ClientKey, int? LinkClientKey, int? LinkType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LinkKey",
                    Value = LinkKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LinkClientKey",
                    Value = LinkClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LinkType",
                    Value = LinkType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileUpdateLinkResult>("EXEC @returnValue = [dbo].[sp_MobileUpdateLink] @LinkKey = @LinkKey, @ClientKey = @ClientKey, @LinkClientKey = @LinkClientKey, @LinkType = @LinkType, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MobileUpdateMarketResult>> sp_MobileUpdateMarketAsync(int? MarketKey, int? ClientKey, int? MarketCode, int? UserKeyID, DateTime? FollowupDate, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MarketKey",
                    Value = MarketKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClientKey",
                    Value = ClientKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MarketCode",
                    Value = MarketCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FollowupDate",
                    Value = FollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MobileUpdateMarketResult>("EXEC @returnValue = [dbo].[sp_MobileUpdateMarket] @MarketKey = @MarketKey, @ClientKey = @ClientKey, @MarketCode = @MarketCode, @UserKeyID = @UserKeyID, @FollowupDate = @FollowupDate, @UserInitials = @UserInitials", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileUpdateMarketFollowupAsync(int? iKeyMarket, DateTime? tFollowupDate, int? iKeyCalendar, int? iKeyName, string cWhoChange, OutputParameter<int?> FollowupKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterFollowupKey = new SqlParameter
            {
                ParameterName = "FollowupKey",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FollowupKey?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyMarket",
                    Value = iKeyMarket ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tFollowupDate",
                    Value = tFollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCalendar",
                    Value = iKeyCalendar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyName",
                    Value = iKeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cWhoChange",
                    Size = 5,
                    Value = cWhoChange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterFollowupKey,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileUpdateMarketFollowup] @iKeyMarket = @iKeyMarket, @tFollowupDate = @tFollowupDate, @iKeyCalendar = @iKeyCalendar, @iKeyName = @iKeyName, @cWhoChange = @cWhoChange, @FollowupKey = @FollowupKey OUTPUT", sqlParameters, cancellationToken);

            FollowupKey.SetValue(parameterFollowupKey.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileUpdateNoteAsync(int? NoteKeyID, string WhoChange, string NotePage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NoteKeyID",
                    Value = NoteKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WhoChange",
                    Size = 10,
                    Value = WhoChange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NotePage",
                    Size = -1,
                    Value = NotePage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileUpdateNote] @NoteKeyID = @NoteKeyID, @WhoChange = @WhoChange, @NotePage = @NotePage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_MobileUpdateNoteFollowupAsync(int? iKeyNote, DateTime? tFollowupDate, int? iKeyCalendar, string cNoteSource, string cFollowupDescription, string cWhoChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNote",
                    Value = iKeyNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tFollowupDate",
                    Value = tFollowupDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCalendar",
                    Value = iKeyCalendar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cNoteSource",
                    Size = 1,
                    Value = cNoteSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cFollowupDescription",
                    Size = 50,
                    Value = cFollowupDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cWhoChange",
                    Size = 5,
                    Value = cWhoChange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_MobileUpdateNoteFollowup] @iKeyNote = @iKeyNote, @tFollowupDate = @tFollowupDate, @iKeyCalendar = @iKeyCalendar, @cNoteSource = @cNoteSource, @cFollowupDescription = @cFollowupDescription, @cWhoChange = @cWhoChange", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_MoneyGuideProExportByNameResult>> sp_MoneyGuideProExportByNameAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_MoneyGuideProExportByNameResult>("EXEC @returnValue = [dbo].[sp_MoneyGuideProExportByName] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_NameGetLastActivityAsync(int? NameKeyID, OutputParameter<DateTime?> LatestDate, OutputParameter<string> LatestActionDesc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterLatestDate = new SqlParameter
            {
                ParameterName = "LatestDate",
                Scale = 7,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = LatestDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime2,
            };
            var parameterLatestActionDesc = new SqlParameter
            {
                ParameterName = "LatestActionDesc",
                Size = 200,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = LatestActionDesc?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NameKeyID",
                    Value = NameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterLatestDate,
                parameterLatestActionDesc,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_NameGetLastActivity] @NameKeyID = @NameKeyID, @LatestDate = @LatestDate OUTPUT, @LatestActionDesc = @LatestActionDesc OUTPUT", sqlParameters, cancellationToken);

            LatestDate.SetValue(parameterLatestDate.Value);
            LatestActionDesc.SetValue(parameterLatestActionDesc.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameGetLastActivityAndVisibilityManyResult>> sp_NameGetLastActivityAndVisibilityManyAsync(string NameKeyIDsDelimited, int? UserKeyID, int? CurrentViewKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NameKeyIDsDelimited",
                    Size = -1,
                    Value = NameKeyIDsDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentViewKeyID",
                    Value = CurrentViewKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameGetLastActivityAndVisibilityManyResult>("EXEC @returnValue = [dbo].[sp_NameGetLastActivityAndVisibilityMany] @NameKeyIDsDelimited = @NameKeyIDsDelimited, @UserKeyID = @UserKeyID, @CurrentViewKeyID = @CurrentViewKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameGetLastActivityManyResult>> sp_NameGetLastActivityManyAsync(string NameKeyIDsDelimited, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NameKeyIDsDelimited",
                    Size = -1,
                    Value = NameKeyIDsDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameGetLastActivityManyResult>("EXEC @returnValue = [dbo].[sp_NameGetLastActivityMany] @NameKeyIDsDelimited = @NameKeyIDsDelimited", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupByAllResult>> sp_NameLookupByAllAsync(int? iKeyView, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupByAllResult>("EXEC @returnValue = [dbo].[sp_NameLookupByAll] @iKeyView = @iKeyView, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupByCityResult>> sp_NameLookupByCityAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PartialString",
                    Size = 100,
                    Value = PartialString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupByCityResult>("EXEC @returnValue = [dbo].[sp_NameLookupByCity] @iKeyView = @iKeyView, @PartialString = @PartialString, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupByFirstNameResult>> sp_NameLookupByFirstNameAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PartialString",
                    Size = 100,
                    Value = PartialString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupByFirstNameResult>("EXEC @returnValue = [dbo].[sp_NameLookupByFirstName] @iKeyView = @iKeyView, @PartialString = @PartialString, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupByLastNameResult>> sp_NameLookupByLastNameAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PartialString",
                    Size = 100,
                    Value = PartialString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupByLastNameResult>("EXEC @returnValue = [dbo].[sp_NameLookupByLastName] @iKeyView = @iKeyView, @PartialString = @PartialString, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupByNameTypeResult>> sp_NameLookupByNameTypeAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PartialString",
                    Size = 100,
                    Value = PartialString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupByNameTypeResult>("EXEC @returnValue = [dbo].[sp_NameLookupByNameType] @iKeyView = @iKeyView, @PartialString = @PartialString, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupByNickNameResult>> sp_NameLookupByNickNameAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PartialString",
                    Size = 100,
                    Value = PartialString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupByNickNameResult>("EXEC @returnValue = [dbo].[sp_NameLookupByNickName] @iKeyView = @iKeyView, @PartialString = @PartialString, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupByProducerResult>> sp_NameLookupByProducerAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PartialString",
                    Size = 100,
                    Value = PartialString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupByProducerResult>("EXEC @returnValue = [dbo].[sp_NameLookupByProducer] @iKeyView = @iKeyView, @PartialString = @PartialString, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupByStateResult>> sp_NameLookupByStateAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PartialString",
                    Size = 100,
                    Value = PartialString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupByStateResult>("EXEC @returnValue = [dbo].[sp_NameLookupByState] @iKeyView = @iKeyView, @PartialString = @PartialString, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupByStreetResult>> sp_NameLookupByStreetAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PartialString",
                    Size = 100,
                    Value = PartialString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupByStreetResult>("EXEC @returnValue = [dbo].[sp_NameLookupByStreet] @iKeyView = @iKeyView, @PartialString = @PartialString, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupBySuffixResult>> sp_NameLookupBySuffixAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PartialString",
                    Size = 100,
                    Value = PartialString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupBySuffixResult>("EXEC @returnValue = [dbo].[sp_NameLookupBySuffix] @iKeyView = @iKeyView, @PartialString = @PartialString, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupByTitleResult>> sp_NameLookupByTitleAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PartialString",
                    Size = 100,
                    Value = PartialString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupByTitleResult>("EXEC @returnValue = [dbo].[sp_NameLookupByTitle] @iKeyView = @iKeyView, @PartialString = @PartialString, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupByZipResult>> sp_NameLookupByZipAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PartialString",
                    Size = 100,
                    Value = PartialString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnFullCount",
                    Value = bReturnFullCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupByZipResult>("EXEC @returnValue = [dbo].[sp_NameLookupByZip] @iKeyView = @iKeyView, @PartialString = @PartialString, @bReturnFullCount = @bReturnFullCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameLookupGetProducerKeysForViewResult>> sp_NameLookupGetProducerKeysForViewAsync(int? iKeyView, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyView",
                    Value = iKeyView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameLookupGetProducerKeysForViewResult>("EXEC @returnValue = [dbo].[sp_NameLookupGetProducerKeysForView] @iKeyView = @iKeyView", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_NameVisibilityAsync(int? NameKeyID, int? UserKeyID, int? CurrentViewKeyID, OutputParameter<bool?> Visible, OutputParameter<string> Message, OutputParameter<int?> SwitchViewKeyID, OutputParameter<string> SwitchViewLabel, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterVisible = new SqlParameter
            {
                ParameterName = "Visible",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Visible?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterMessage = new SqlParameter
            {
                ParameterName = "Message",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Message?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterSwitchViewKeyID = new SqlParameter
            {
                ParameterName = "SwitchViewKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = SwitchViewKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterSwitchViewLabel = new SqlParameter
            {
                ParameterName = "SwitchViewLabel",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = SwitchViewLabel?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NameKeyID",
                    Value = NameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentViewKeyID",
                    Value = CurrentViewKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterVisible,
                parameterMessage,
                parameterSwitchViewKeyID,
                parameterSwitchViewLabel,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_NameVisibility] @NameKeyID = @NameKeyID, @UserKeyID = @UserKeyID, @CurrentViewKeyID = @CurrentViewKeyID, @Visible = @Visible OUTPUT, @Message = @Message OUTPUT, @SwitchViewKeyID = @SwitchViewKeyID OUTPUT, @SwitchViewLabel = @SwitchViewLabel OUTPUT", sqlParameters, cancellationToken);

            Visible.SetValue(parameterVisible.Value);
            Message.SetValue(parameterMessage.Value);
            SwitchViewKeyID.SetValue(parameterSwitchViewKeyID.Value);
            SwitchViewLabel.SetValue(parameterSwitchViewLabel.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NameVisibilityManyResult>> sp_NameVisibilityManyAsync(string NameKeyIDsDelimited, int? UserKeyID, int? CurrentViewKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NameKeyIDsDelimited",
                    Size = -1,
                    Value = NameKeyIDsDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentViewKeyID",
                    Value = CurrentViewKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NameVisibilityManyResult>("EXEC @returnValue = [dbo].[sp_NameVisibilityMany] @NameKeyIDsDelimited = @NameKeyIDsDelimited, @UserKeyID = @UserKeyID, @CurrentViewKeyID = @CurrentViewKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_NAVDeleteByTempKeyTableAsync(string UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Size = -1,
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_NAVDeleteByTempKeyTable] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_NewCodeRowAsync(string sCodeID, string sDesc, int? iCodeType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sCodeID",
                    Size = 10,
                    Value = sCodeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sDesc",
                    Size = 50,
                    Value = sDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeType",
                    Value = iCodeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_NewCodeRow] @sCodeID = @sCodeID, @sDesc = @sDesc, @iCodeType = @iCodeType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_NoteCatalogDropAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_NoteCatalogDrop]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NoteCatalogValidateResult>> sp_NoteCatalogValidateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NoteCatalogValidateResult>("EXEC @returnValue = [dbo].[sp_NoteCatalogValidate]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_NotesExportResult>> sp_NotesExportAsync(int? NameKeyID, bool? UserCanSeePrivateNotes, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NameKeyID",
                    Value = NameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserCanSeePrivateNotes",
                    Value = UserCanSeePrivateNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_NotesExportResult>("EXEC @returnValue = [dbo].[sp_NotesExport] @NameKeyID = @NameKeyID, @UserCanSeePrivateNotes = @UserCanSeePrivateNotes, @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_NotesMoveTopicAsync(int? moveFromTopicKeyID, int? moveToTopicKeyID, int? noteKeyID, bool? copyFlag, string cUserStamp, string cProgramVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "moveFromTopicKeyID",
                    Value = moveFromTopicKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moveToTopicKeyID",
                    Value = moveToTopicKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "noteKeyID",
                    Value = noteKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "copyFlag",
                    Value = copyFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cUserStamp",
                    Size = 12,
                    Value = cUserStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cProgramVersion",
                    Size = 20,
                    Value = cProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_NotesMoveTopic] @moveFromTopicKeyID = @moveFromTopicKeyID, @moveToTopicKeyID = @moveToTopicKeyID, @noteKeyID = @noteKeyID, @copyFlag = @copyFlag, @cUserStamp = @cUserStamp, @cProgramVersion = @cProgramVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_OutlookEntryCalendarDeleteByEntryIDAndStoreKeyIDAsync(string cEntryID, int? iKeyStore, Guid? gAAID, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbFoundAndDeleted = new SqlParameter
            {
                ParameterName = "bFoundAndDeleted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFoundAndDeleted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyStore",
                    Value = iKeyStore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gAAID",
                    Value = gAAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterbFoundAndDeleted,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_OutlookEntryCalendarDeleteByEntryIDAndStoreKeyID] @cEntryID = @cEntryID, @iKeyStore = @iKeyStore, @gAAID = @gAAID, @bFoundAndDeleted = @bFoundAndDeleted OUTPUT", sqlParameters, cancellationToken);

            bFoundAndDeleted.SetValue(parameterbFoundAndDeleted.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_OutlookEntryCalendarDeleteByEntryIDAndStoreKeyID_2Async(string cEntryID, int? iKeyStore, Guid? gAAID, string UserInitials, int? UserKeyID, string ContextMessage, string ProgramVersion, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbFoundAndDeleted = new SqlParameter
            {
                ParameterName = "bFoundAndDeleted",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bFoundAndDeleted?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cEntryID",
                    Size = 512,
                    Value = cEntryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyStore",
                    Value = iKeyStore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gAAID",
                    Value = gAAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ContextMessage",
                    Size = -1,
                    Value = ContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramVersion",
                    Size = 100,
                    Value = ProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterbFoundAndDeleted,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_OutlookEntryCalendarDeleteByEntryIDAndStoreKeyID_2] @cEntryID = @cEntryID, @iKeyStore = @iKeyStore, @gAAID = @gAAID, @UserInitials = @UserInitials, @UserKeyID = @UserKeyID, @ContextMessage = @ContextMessage, @ProgramVersion = @ProgramVersion, @bFoundAndDeleted = @bFoundAndDeleted OUTPUT", sqlParameters, cancellationToken);

            bFoundAndDeleted.SetValue(parameterbFoundAndDeleted.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_OverwriteProducerReferenceAsync(int? ikeyName, int? iKeyProducerFrom, int? iKeyProducerto, string cDataStamp, bool? bUpdatePrimary, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyName",
                    Value = ikeyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducerFrom",
                    Value = iKeyProducerFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducerto",
                    Value = iKeyProducerto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bUpdatePrimary",
                    Value = bUpdatePrimary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_OverwriteProducerReference] @ikeyName = @ikeyName, @iKeyProducerFrom = @iKeyProducerFrom, @iKeyProducerto = @iKeyProducerto, @cDataStamp = @cDataStamp, @bUpdatePrimary = @bUpdatePrimary", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_PlanningExportByNameResult>> sp_PlanningExportByNameAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_PlanningExportByNameResult>("EXEC @returnValue = [dbo].[sp_PlanningExportByName] @iNameKeyID = @iNameKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_PositionRemovalAsync(int? iKeyNvst, int? iKeyModule, DateTime? dLatestPosition, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dLatestPosition",
                    Value = dLatestPosition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_PositionRemoval] @iKeyNvst = @iKeyNvst, @iKeyModule = @iKeyModule, @dLatestPosition = @dLatestPosition", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_PrecheckValuationKeysAsync(int? iKeyNvst, bool? bFlagTradeDateCalculations, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bFlagTradeDateCalculations",
                    Value = bFlagTradeDateCalculations ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_PrecheckValuationKeys] @iKeyNvst = @iKeyNvst, @bFlagTradeDateCalculations = @bFlagTradeDateCalculations", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ProcessEventExceptionsResult>> sp_ProcessEventExceptionsAsync(int? iKeyEvent, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyEvent",
                    Value = iKeyEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ProcessEventExceptionsResult>("EXEC @returnValue = [dbo].[sp_ProcessEventExceptions] @iKeyEvent = @iKeyEvent", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ProcessEventExceptionsInternalResult>> sp_ProcessEventExceptionsInternalAsync(int? iKeyEvent, OutputParameter<int?> iEventDetailsRemoved, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriEventDetailsRemoved = new SqlParameter
            {
                ParameterName = "iEventDetailsRemoved",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iEventDetailsRemoved?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyEvent",
                    Value = iKeyEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriEventDetailsRemoved,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ProcessEventExceptionsInternalResult>("EXEC @returnValue = [dbo].[sp_ProcessEventExceptionsInternal] @iKeyEvent = @iKeyEvent, @iEventDetailsRemoved = @iEventDetailsRemoved OUTPUT", sqlParameters, cancellationToken);

            iEventDetailsRemoved.SetValue(parameteriEventDetailsRemoved.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ProcessLogAddDetailAsync(int? iKeyProcessLog, int? iCodeDetailType, string cDetail1, string cDetail2, string cDetail3, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcessLog",
                    Value = iKeyProcessLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeDetailType",
                    Value = iCodeDetailType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDetail1",
                    Size = -1,
                    Value = cDetail1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cDetail2",
                    Size = -1,
                    Value = cDetail2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cDetail3",
                    Size = -1,
                    Value = cDetail3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ProcessLogAddDetail] @iKeyProcessLog = @iKeyProcessLog, @iCodeDetailType = @iCodeDetailType, @cDetail1 = @cDetail1, @cDetail2 = @cDetail2, @cDetail3 = @cDetail3", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ProcessLogInsertAsync(int? icodeProcess, string cprocessDescription, DateTime? dprocessed, string mnotes, string cuserInitials, OutputParameter<int?> iReturnKeyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriReturnKeyId = new SqlParameter
            {
                ParameterName = "iReturnKeyId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iReturnKeyId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "icodeProcess",
                    Value = icodeProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cprocessDescription",
                    Size = 100,
                    Value = cprocessDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dprocessed",
                    Value = dprocessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "mnotes",
                    Value = mnotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "cuserInitials",
                    Size = 10,
                    Value = cuserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameteriReturnKeyId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ProcessLogInsert] @icodeProcess = @icodeProcess, @cprocessDescription = @cprocessDescription, @dprocessed = @dprocessed, @mnotes = @mnotes, @cuserInitials = @cuserInitials, @iReturnKeyId = @iReturnKeyId OUTPUT", sqlParameters, cancellationToken);

            iReturnKeyId.SetValue(parameteriReturnKeyId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ProcessLogRowCountByProcessLogKeyResult>> sp_ProcessLogRowCountByProcessLogKeyAsync(int? iprocesslogkeyid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iprocesslogkeyid",
                    Value = iprocesslogkeyid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ProcessLogRowCountByProcessLogKeyResult>("EXEC @returnValue = [dbo].[sp_ProcessLogRowCountByProcessLogKey] @iprocesslogkeyid = @iprocesslogkeyid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ProcessMarketValuesDeleteSetAsync(int? iKeyProcess, string cResults, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyProcess",
                    Value = iKeyProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cResults",
                    Size = 100,
                    Value = cResults ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ProcessMarketValuesDeleteSet] @iKeyProcess = @iKeyProcess, @cResults = @cResults", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ProcessMarketValuesForAccountResult>> sp_ProcessMarketValuesForAccountAsync(int? iKeyAccount, DateTime? dStartPeriod, DateTime? dEndPeriod, bool? bForced, bool? bCalculateBasis, bool? bResetTaxLot, bool? bValidatePeriodicRecords, bool? bUpdateAccount, string cPeriod, bool? bForceValuesToBeSummed, bool? bProcessAllMarketValues, bool? bResetPeriodicRecords, OutputParameter<bool?> bProcessed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbProcessed = new SqlParameter
            {
                ParameterName = "bProcessed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bProcessed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyAccount",
                    Value = iKeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dStartPeriod",
                    Value = dStartPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dEndPeriod",
                    Value = dEndPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bForced",
                    Value = bForced ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bCalculateBasis",
                    Value = bCalculateBasis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bResetTaxLot",
                    Value = bResetTaxLot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bValidatePeriodicRecords",
                    Value = bValidatePeriodicRecords ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bUpdateAccount",
                    Value = bUpdateAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cPeriod",
                    Size = 12,
                    Value = cPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bForceValuesToBeSummed",
                    Value = bForceValuesToBeSummed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bProcessAllMarketValues",
                    Value = bProcessAllMarketValues ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bResetPeriodicRecords",
                    Value = bResetPeriodicRecords ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbProcessed,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ProcessMarketValuesForAccountResult>("EXEC @returnValue = [dbo].[sp_ProcessMarketValuesForAccount] @iKeyAccount = @iKeyAccount, @dStartPeriod = @dStartPeriod, @dEndPeriod = @dEndPeriod, @bForced = @bForced, @bCalculateBasis = @bCalculateBasis, @bResetTaxLot = @bResetTaxLot, @bValidatePeriodicRecords = @bValidatePeriodicRecords, @bUpdateAccount = @bUpdateAccount, @cPeriod = @cPeriod, @bForceValuesToBeSummed = @bForceValuesToBeSummed, @bProcessAllMarketValues = @bProcessAllMarketValues, @bResetPeriodicRecords = @bResetPeriodicRecords, @bProcessed = @bProcessed OUTPUT", sqlParameters, cancellationToken);

            bProcessed.SetValue(parameterbProcessed.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ProcessMarketValuesForInvestmentResult>> sp_ProcessMarketValuesForInvestmentAsync(int? iKeyNvst, DateTime? dStartPeriod, DateTime? dEndPeriod, bool? bForced, bool? bCalculateBasis, bool? bResetTaxLot, bool? bValidatePeriodicRecords, string cPeriod, bool? bForceValuesToBeSummed, bool? bProcessAllMarketValues, bool? bResetPeriodicRecords, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dStartPeriod",
                    Value = dStartPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dEndPeriod",
                    Value = dEndPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bForced",
                    Value = bForced ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bCalculateBasis",
                    Value = bCalculateBasis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bResetTaxLot",
                    Value = bResetTaxLot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bValidatePeriodicRecords",
                    Value = bValidatePeriodicRecords ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cPeriod",
                    Size = 12,
                    Value = cPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bForceValuesToBeSummed",
                    Value = bForceValuesToBeSummed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bProcessAllMarketValues",
                    Value = bProcessAllMarketValues ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bResetPeriodicRecords",
                    Value = bResetPeriodicRecords ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ProcessMarketValuesForInvestmentResult>("EXEC @returnValue = [dbo].[sp_ProcessMarketValuesForInvestment] @iKeyNvst = @iKeyNvst, @dStartPeriod = @dStartPeriod, @dEndPeriod = @dEndPeriod, @bForced = @bForced, @bCalculateBasis = @bCalculateBasis, @bResetTaxLot = @bResetTaxLot, @bValidatePeriodicRecords = @bValidatePeriodicRecords, @cPeriod = @cPeriod, @bForceValuesToBeSummed = @bForceValuesToBeSummed, @bProcessAllMarketValues = @bProcessAllMarketValues, @bResetPeriodicRecords = @bResetPeriodicRecords", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_QueryConditionCopyAsync(int? SavedCriteriaSetKeyID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SavedCriteriaSetKeyID",
                    Value = SavedCriteriaSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_QueryConditionCopy] @SavedCriteriaSetKeyID = @SavedCriteriaSetKeyID, @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_QueryConditionPopulateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_QueryConditionPopulate]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_QueryConditionPopulateAccountsAsync(int? iColumnSqlType_char, int? iColumnSqlType_datetime, int? iColumnSqlType_int, int? iColumnSqlType_bit, int? iColumnSqlType_decimal, int? iColumnSqlType_money, string cBlankLine, int? iBatch_Names, int? iBatch_Investments, int? iBatch_Insurance, int? iReportKeyTable_Names, int? iReportKeyTable_NameNewBiz, int? iReportKeyTable_InvestmentsAndAccounts, int? iReportKeyTable_InvestmentTransactions, int? iReportKeyTable_InvestmentNewBiz, int? iReportKeyTable_PoliciesAndCoverages, int? iReportKeyTable_InsuranceNewBiz, OutputParameter<int?> iNewKey_AAQueryCondition, OutputParameter<int?> iSortOrder_AAQueryCondition, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriNewKey_AAQueryCondition = new SqlParameter
            {
                ParameterName = "iNewKey_AAQueryCondition",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iNewKey_AAQueryCondition?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriSortOrder_AAQueryCondition = new SqlParameter
            {
                ParameterName = "iSortOrder_AAQueryCondition",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iSortOrder_AAQueryCondition?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_char",
                    Value = iColumnSqlType_char ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_datetime",
                    Value = iColumnSqlType_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_int",
                    Value = iColumnSqlType_int ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_bit",
                    Value = iColumnSqlType_bit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_decimal",
                    Value = iColumnSqlType_decimal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_money",
                    Value = iColumnSqlType_money ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cBlankLine",
                    Size = 20,
                    Value = cBlankLine ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iBatch_Names",
                    Value = iBatch_Names ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iBatch_Investments",
                    Value = iBatch_Investments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iBatch_Insurance",
                    Value = iBatch_Insurance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_Names",
                    Value = iReportKeyTable_Names ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_NameNewBiz",
                    Value = iReportKeyTable_NameNewBiz ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InvestmentsAndAccounts",
                    Value = iReportKeyTable_InvestmentsAndAccounts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InvestmentTransactions",
                    Value = iReportKeyTable_InvestmentTransactions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InvestmentNewBiz",
                    Value = iReportKeyTable_InvestmentNewBiz ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_PoliciesAndCoverages",
                    Value = iReportKeyTable_PoliciesAndCoverages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InsuranceNewBiz",
                    Value = iReportKeyTable_InsuranceNewBiz ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriNewKey_AAQueryCondition,
                parameteriSortOrder_AAQueryCondition,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_QueryConditionPopulateAccounts] @iColumnSqlType_char = @iColumnSqlType_char, @iColumnSqlType_datetime = @iColumnSqlType_datetime, @iColumnSqlType_int = @iColumnSqlType_int, @iColumnSqlType_bit = @iColumnSqlType_bit, @iColumnSqlType_decimal = @iColumnSqlType_decimal, @iColumnSqlType_money = @iColumnSqlType_money, @cBlankLine = @cBlankLine, @iBatch_Names = @iBatch_Names, @iBatch_Investments = @iBatch_Investments, @iBatch_Insurance = @iBatch_Insurance, @iReportKeyTable_Names = @iReportKeyTable_Names, @iReportKeyTable_NameNewBiz = @iReportKeyTable_NameNewBiz, @iReportKeyTable_InvestmentsAndAccounts = @iReportKeyTable_InvestmentsAndAccounts, @iReportKeyTable_InvestmentTransactions = @iReportKeyTable_InvestmentTransactions, @iReportKeyTable_InvestmentNewBiz = @iReportKeyTable_InvestmentNewBiz, @iReportKeyTable_PoliciesAndCoverages = @iReportKeyTable_PoliciesAndCoverages, @iReportKeyTable_InsuranceNewBiz = @iReportKeyTable_InsuranceNewBiz, @iNewKey_AAQueryCondition = @iNewKey_AAQueryCondition OUTPUT, @iSortOrder_AAQueryCondition = @iSortOrder_AAQueryCondition OUTPUT", sqlParameters, cancellationToken);

            iNewKey_AAQueryCondition.SetValue(parameteriNewKey_AAQueryCondition.Value);
            iSortOrder_AAQueryCondition.SetValue(parameteriSortOrder_AAQueryCondition.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_QueryConditionPopulateCheckAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_QueryConditionPopulateCheck]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_QueryConditionPopulateInsuranceAsync(int? iColumnSqlType_char, int? iColumnSqlType_datetime, int? iColumnSqlType_int, int? iColumnSqlType_bit, int? iColumnSqlType_decimal, int? iColumnSqlType_money, string cBlankLine, int? iBatch_Names, int? iBatch_Investments, int? iBatch_Insurance, int? iReportKeyTable_Names, int? iReportKeyTable_NameNewBiz, int? iReportKeyTable_InvestmentsAndAccounts, int? iReportKeyTable_InvestmentTransactions, int? iReportKeyTable_InvestmentNewBiz, int? iReportKeyTable_PoliciesAndCoverages, int? iReportKeyTable_InsuranceNewBiz, OutputParameter<int?> iNewKey_AAQueryCondition, OutputParameter<int?> iSortOrder_AAQueryCondition, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriNewKey_AAQueryCondition = new SqlParameter
            {
                ParameterName = "iNewKey_AAQueryCondition",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iNewKey_AAQueryCondition?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriSortOrder_AAQueryCondition = new SqlParameter
            {
                ParameterName = "iSortOrder_AAQueryCondition",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iSortOrder_AAQueryCondition?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_char",
                    Value = iColumnSqlType_char ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_datetime",
                    Value = iColumnSqlType_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_int",
                    Value = iColumnSqlType_int ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_bit",
                    Value = iColumnSqlType_bit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_decimal",
                    Value = iColumnSqlType_decimal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_money",
                    Value = iColumnSqlType_money ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cBlankLine",
                    Size = 20,
                    Value = cBlankLine ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iBatch_Names",
                    Value = iBatch_Names ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iBatch_Investments",
                    Value = iBatch_Investments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iBatch_Insurance",
                    Value = iBatch_Insurance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_Names",
                    Value = iReportKeyTable_Names ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_NameNewBiz",
                    Value = iReportKeyTable_NameNewBiz ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InvestmentsAndAccounts",
                    Value = iReportKeyTable_InvestmentsAndAccounts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InvestmentTransactions",
                    Value = iReportKeyTable_InvestmentTransactions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InvestmentNewBiz",
                    Value = iReportKeyTable_InvestmentNewBiz ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_PoliciesAndCoverages",
                    Value = iReportKeyTable_PoliciesAndCoverages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InsuranceNewBiz",
                    Value = iReportKeyTable_InsuranceNewBiz ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriNewKey_AAQueryCondition,
                parameteriSortOrder_AAQueryCondition,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_QueryConditionPopulateInsurance] @iColumnSqlType_char = @iColumnSqlType_char, @iColumnSqlType_datetime = @iColumnSqlType_datetime, @iColumnSqlType_int = @iColumnSqlType_int, @iColumnSqlType_bit = @iColumnSqlType_bit, @iColumnSqlType_decimal = @iColumnSqlType_decimal, @iColumnSqlType_money = @iColumnSqlType_money, @cBlankLine = @cBlankLine, @iBatch_Names = @iBatch_Names, @iBatch_Investments = @iBatch_Investments, @iBatch_Insurance = @iBatch_Insurance, @iReportKeyTable_Names = @iReportKeyTable_Names, @iReportKeyTable_NameNewBiz = @iReportKeyTable_NameNewBiz, @iReportKeyTable_InvestmentsAndAccounts = @iReportKeyTable_InvestmentsAndAccounts, @iReportKeyTable_InvestmentTransactions = @iReportKeyTable_InvestmentTransactions, @iReportKeyTable_InvestmentNewBiz = @iReportKeyTable_InvestmentNewBiz, @iReportKeyTable_PoliciesAndCoverages = @iReportKeyTable_PoliciesAndCoverages, @iReportKeyTable_InsuranceNewBiz = @iReportKeyTable_InsuranceNewBiz, @iNewKey_AAQueryCondition = @iNewKey_AAQueryCondition OUTPUT, @iSortOrder_AAQueryCondition = @iSortOrder_AAQueryCondition OUTPUT", sqlParameters, cancellationToken);

            iNewKey_AAQueryCondition.SetValue(parameteriNewKey_AAQueryCondition.Value);
            iSortOrder_AAQueryCondition.SetValue(parameteriSortOrder_AAQueryCondition.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_QueryConditionPopulateNamesAsync(int? iColumnSqlType_char, int? iColumnSqlType_datetime, int? iColumnSqlType_int, int? iColumnSqlType_bit, int? iColumnSqlType_decimal, int? iColumnSqlType_money, string cBlankLine, int? iBatch_Names, int? iBatch_Investments, int? iBatch_Insurance, int? iReportKeyTable_Names, int? iReportKeyTable_NameNewBiz, int? iReportKeyTable_InvestmentsAndAccounts, int? iReportKeyTable_InvestmentTransactions, int? iReportKeyTable_InvestmentNewBiz, int? iReportKeyTable_PoliciesAndCoverages, int? iReportKeyTable_InsuranceNewBiz, OutputParameter<int?> iNewKey_AAQueryCondition, OutputParameter<int?> iSortOrder_AAQueryCondition, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriNewKey_AAQueryCondition = new SqlParameter
            {
                ParameterName = "iNewKey_AAQueryCondition",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iNewKey_AAQueryCondition?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriSortOrder_AAQueryCondition = new SqlParameter
            {
                ParameterName = "iSortOrder_AAQueryCondition",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iSortOrder_AAQueryCondition?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_char",
                    Value = iColumnSqlType_char ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_datetime",
                    Value = iColumnSqlType_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_int",
                    Value = iColumnSqlType_int ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_bit",
                    Value = iColumnSqlType_bit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_decimal",
                    Value = iColumnSqlType_decimal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iColumnSqlType_money",
                    Value = iColumnSqlType_money ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cBlankLine",
                    Size = 20,
                    Value = cBlankLine ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iBatch_Names",
                    Value = iBatch_Names ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iBatch_Investments",
                    Value = iBatch_Investments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iBatch_Insurance",
                    Value = iBatch_Insurance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_Names",
                    Value = iReportKeyTable_Names ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_NameNewBiz",
                    Value = iReportKeyTable_NameNewBiz ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InvestmentsAndAccounts",
                    Value = iReportKeyTable_InvestmentsAndAccounts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InvestmentTransactions",
                    Value = iReportKeyTable_InvestmentTransactions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InvestmentNewBiz",
                    Value = iReportKeyTable_InvestmentNewBiz ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_PoliciesAndCoverages",
                    Value = iReportKeyTable_PoliciesAndCoverages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iReportKeyTable_InsuranceNewBiz",
                    Value = iReportKeyTable_InsuranceNewBiz ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriNewKey_AAQueryCondition,
                parameteriSortOrder_AAQueryCondition,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_QueryConditionPopulateNames] @iColumnSqlType_char = @iColumnSqlType_char, @iColumnSqlType_datetime = @iColumnSqlType_datetime, @iColumnSqlType_int = @iColumnSqlType_int, @iColumnSqlType_bit = @iColumnSqlType_bit, @iColumnSqlType_decimal = @iColumnSqlType_decimal, @iColumnSqlType_money = @iColumnSqlType_money, @cBlankLine = @cBlankLine, @iBatch_Names = @iBatch_Names, @iBatch_Investments = @iBatch_Investments, @iBatch_Insurance = @iBatch_Insurance, @iReportKeyTable_Names = @iReportKeyTable_Names, @iReportKeyTable_NameNewBiz = @iReportKeyTable_NameNewBiz, @iReportKeyTable_InvestmentsAndAccounts = @iReportKeyTable_InvestmentsAndAccounts, @iReportKeyTable_InvestmentTransactions = @iReportKeyTable_InvestmentTransactions, @iReportKeyTable_InvestmentNewBiz = @iReportKeyTable_InvestmentNewBiz, @iReportKeyTable_PoliciesAndCoverages = @iReportKeyTable_PoliciesAndCoverages, @iReportKeyTable_InsuranceNewBiz = @iReportKeyTable_InsuranceNewBiz, @iNewKey_AAQueryCondition = @iNewKey_AAQueryCondition OUTPUT, @iSortOrder_AAQueryCondition = @iSortOrder_AAQueryCondition OUTPUT", sqlParameters, cancellationToken);

            iNewKey_AAQueryCondition.SetValue(parameteriNewKey_AAQueryCondition.Value);
            iSortOrder_AAQueryCondition.SetValue(parameteriSortOrder_AAQueryCondition.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_QueryConditionShareAsync(int? SavedCriteriaSetKeyID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SavedCriteriaSetKeyID",
                    Value = SavedCriteriaSetKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_QueryConditionShare] @SavedCriteriaSetKeyID = @SavedCriteriaSetKeyID, @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ReconcileCoverageAndPolicyGroupsAsync(int? iKeyCov1, int? iKeyCov2, int? iKeyCov3, int? iKeyCov4, int? iKeyCov5, int? iKeyCov6, int? iKeyCov7, int? iKeyCov8, int? iKeyCov9, int? iKeyCov10, DateTime? dPositionsTo, int? ikeyDefaultAgency, bool? bRecalculateCoverageValues, bool? bCheckPrimaryInsuredRelationship, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyCov1",
                    Value = iKeyCov1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCov2",
                    Value = iKeyCov2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCov3",
                    Value = iKeyCov3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCov4",
                    Value = iKeyCov4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCov5",
                    Value = iKeyCov5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCov6",
                    Value = iKeyCov6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCov7",
                    Value = iKeyCov7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCov8",
                    Value = iKeyCov8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCov9",
                    Value = iKeyCov9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCov10",
                    Value = iKeyCov10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPositionsTo",
                    Value = dPositionsTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyDefaultAgency",
                    Value = ikeyDefaultAgency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bRecalculateCoverageValues",
                    Value = bRecalculateCoverageValues ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bCheckPrimaryInsuredRelationship",
                    Value = bCheckPrimaryInsuredRelationship ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ReconcileCoverageAndPolicyGroups] @iKeyCov1 = @iKeyCov1, @iKeyCov2 = @iKeyCov2, @iKeyCov3 = @iKeyCov3, @iKeyCov4 = @iKeyCov4, @iKeyCov5 = @iKeyCov5, @iKeyCov6 = @iKeyCov6, @iKeyCov7 = @iKeyCov7, @iKeyCov8 = @iKeyCov8, @iKeyCov9 = @iKeyCov9, @iKeyCov10 = @iKeyCov10, @dPositionsTo = @dPositionsTo, @ikeyDefaultAgency = @ikeyDefaultAgency, @bRecalculateCoverageValues = @bRecalculateCoverageValues, @bCheckPrimaryInsuredRelationship = @bCheckPrimaryInsuredRelationship", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ReconcileCoverageToPositionAsync(int? iCoverageKeyID, int? iPositionKeyID, bool? bRecalculateCoverageValues, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPositionKeyID",
                    Value = iPositionKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bRecalculateCoverageValues",
                    Value = bRecalculateCoverageValues ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ReconcileCoverageToPosition] @iCoverageKeyID = @iCoverageKeyID, @iPositionKeyID = @iPositionKeyID, @bRecalculateCoverageValues = @bRecalculateCoverageValues", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ReconcileCoverageToPositionByDateAsync(int? iCoverageKeyID, DateTime? dPositionDate, bool? bRecalculateCoverageValues, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPositionDate",
                    Value = dPositionDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bRecalculateCoverageValues",
                    Value = bRecalculateCoverageValues ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ReconcileCoverageToPositionByDate] @iCoverageKeyID = @iCoverageKeyID, @dPositionDate = @dPositionDate, @bRecalculateCoverageValues = @bRecalculateCoverageValues", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ReconcileInvestmentAsync(int? iKeyNvst, DateTime? dPositionsFrom, DateTime? dPositionsTo, OutputParameter<bool?> bOutOfBalance, OutputParameter<decimal?> nReconcile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbOutOfBalance = new SqlParameter
            {
                ParameterName = "bOutOfBalance",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bOutOfBalance?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameternReconcile = new SqlParameter
            {
                ParameterName = "nReconcile",
                Precision = 16,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nReconcile?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPositionsFrom",
                    Value = dPositionsFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dPositionsTo",
                    Value = dPositionsTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterbOutOfBalance,
                parameternReconcile,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ReconcileInvestment] @iKeyNvst = @iKeyNvst, @dPositionsFrom = @dPositionsFrom, @dPositionsTo = @dPositionsTo, @bOutOfBalance = @bOutOfBalance OUTPUT, @nReconcile = @nReconcile OUTPUT", sqlParameters, cancellationToken);

            bOutOfBalance.SetValue(parameterbOutOfBalance.Value);
            nReconcile.SetValue(parameternReconcile.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ReconcileInvestmentAndCleanupPositionsAsync(int? iKeyNvst, DateTime? dPositionsFrom, DateTime? dPositionsTo, bool? bCleanupPositions, OutputParameter<bool?> bOutOfBalance, OutputParameter<decimal?> nReconcile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbOutOfBalance = new SqlParameter
            {
                ParameterName = "bOutOfBalance",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bOutOfBalance?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameternReconcile = new SqlParameter
            {
                ParameterName = "nReconcile",
                Precision = 16,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nReconcile?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPositionsFrom",
                    Value = dPositionsFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dPositionsTo",
                    Value = dPositionsTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bCleanupPositions",
                    Value = bCleanupPositions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterbOutOfBalance,
                parameternReconcile,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ReconcileInvestmentAndCleanupPositions] @iKeyNvst = @iKeyNvst, @dPositionsFrom = @dPositionsFrom, @dPositionsTo = @dPositionsTo, @bCleanupPositions = @bCleanupPositions, @bOutOfBalance = @bOutOfBalance OUTPUT, @nReconcile = @nReconcile OUTPUT", sqlParameters, cancellationToken);

            bOutOfBalance.SetValue(parameterbOutOfBalance.Value);
            nReconcile.SetValue(parameternReconcile.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ReconcileInvestmentGroupsAsync(int? iKeyNvst1, int? iKeyNvst2, int? iKeyNvst3, int? iKeyNvst4, int? iKeyNvst5, int? iKeyNvst6, int? iKeyNvst7, int? iKeyNvst8, int? iKeyNvst9, int? iKeyNvst10, DateTime? dPositionsFrom, DateTime? dPositionsTo, bool? bCleanupPositions, OutputParameter<int?> iOutOfBalance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriOutOfBalance = new SqlParameter
            {
                ParameterName = "iOutOfBalance",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iOutOfBalance?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst1",
                    Value = iKeyNvst1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNvst2",
                    Value = iKeyNvst2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNvst3",
                    Value = iKeyNvst3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNvst4",
                    Value = iKeyNvst4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNvst5",
                    Value = iKeyNvst5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNvst6",
                    Value = iKeyNvst6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNvst7",
                    Value = iKeyNvst7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNvst8",
                    Value = iKeyNvst8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNvst9",
                    Value = iKeyNvst9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNvst10",
                    Value = iKeyNvst10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPositionsFrom",
                    Value = dPositionsFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dPositionsTo",
                    Value = dPositionsTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bCleanupPositions",
                    Value = bCleanupPositions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameteriOutOfBalance,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ReconcileInvestmentGroups] @iKeyNvst1 = @iKeyNvst1, @iKeyNvst2 = @iKeyNvst2, @iKeyNvst3 = @iKeyNvst3, @iKeyNvst4 = @iKeyNvst4, @iKeyNvst5 = @iKeyNvst5, @iKeyNvst6 = @iKeyNvst6, @iKeyNvst7 = @iKeyNvst7, @iKeyNvst8 = @iKeyNvst8, @iKeyNvst9 = @iKeyNvst9, @iKeyNvst10 = @iKeyNvst10, @dPositionsFrom = @dPositionsFrom, @dPositionsTo = @dPositionsTo, @bCleanupPositions = @bCleanupPositions, @iOutOfBalance = @iOutOfBalance OUTPUT", sqlParameters, cancellationToken);

            iOutOfBalance.SetValue(parameteriOutOfBalance.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ReconcilePolicyToPositionAsync(int? iPolicyKeyID, int? iPositionKeyID, int? iDefaultAgencyKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iPolicyKeyID",
                    Value = iPolicyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPositionKeyID",
                    Value = iPositionKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iDefaultAgencyKeyID",
                    Value = iDefaultAgencyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ReconcilePolicyToPosition] @iPolicyKeyID = @iPolicyKeyID, @iPositionKeyID = @iPositionKeyID, @iDefaultAgencyKeyID = @iDefaultAgencyKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ReconcilePolicyToPositionByDateAsync(int? iPolicyKeyID, DateTime? dPositionDate, int? iDefaultAgencyKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iPolicyKeyID",
                    Value = iPolicyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dPositionDate",
                    Value = dPositionDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iDefaultAgencyKeyID",
                    Value = iDefaultAgencyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ReconcilePolicyToPositionByDate] @iPolicyKeyID = @iPolicyKeyID, @dPositionDate = @dPositionDate, @iDefaultAgencyKeyID = @iDefaultAgencyKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_RecordProcessLogDeleteCommissionTransactionAsync(int? iKeyTransaction, int? iKeyProcessLog, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyTransaction",
                    Value = iKeyTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProcessLog",
                    Value = iKeyProcessLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_RecordProcessLogDeleteCommissionTransaction] @iKeyTransaction = @iKeyTransaction, @iKeyProcessLog = @iKeyProcessLog", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_RecordProcessLogDeletePolicyCoverageAsync(int? iKeyCoverage, int? iKeyProcessLog, bool? bLogPolicyLevelDetails, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyCoverage",
                    Value = iKeyCoverage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProcessLog",
                    Value = iKeyProcessLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bLogPolicyLevelDetails",
                    Value = bLogPolicyLevelDetails ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_RecordProcessLogDeletePolicyCoverage] @iKeyCoverage = @iKeyCoverage, @iKeyProcessLog = @iKeyProcessLog, @bLogPolicyLevelDetails = @bLogPolicyLevelDetails", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_RecordServerUtilitiesActionAsync(string cBackupFileName, string cUserName, string cMachineName, string cServerName, string cDatabaseName, string cServerUtilitiesVersion, string cComment, DateTime? dDate, string cAction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cBackupFileName",
                    Size = 1000,
                    Value = cBackupFileName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cUserName",
                    Size = 1000,
                    Value = cUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cMachineName",
                    Size = 1000,
                    Value = cMachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cServerName",
                    Size = 1000,
                    Value = cServerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cDatabaseName",
                    Size = 1000,
                    Value = cDatabaseName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cServerUtilitiesVersion",
                    Size = 1000,
                    Value = cServerUtilitiesVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cComment",
                    Size = -1,
                    Value = cComment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dDate",
                    Value = dDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cAction",
                    Size = 1,
                    Value = cAction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_RecordServerUtilitiesAction] @cBackupFileName = @cBackupFileName, @cUserName = @cUserName, @cMachineName = @cMachineName, @cServerName = @cServerName, @cDatabaseName = @cDatabaseName, @cServerUtilitiesVersion = @cServerUtilitiesVersion, @cComment = @cComment, @dDate = @dDate, @cAction = @cAction", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ReCreateTaxLotForInvestmentResult>> sp_ReCreateTaxLotForInvestmentAsync(int? iKeyNvst, DateTime? dStart, int? ikeyBasisType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dStart",
                    Value = dStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyBasisType",
                    Value = ikeyBasisType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ReCreateTaxLotForInvestmentResult>("EXEC @returnValue = [dbo].[sp_ReCreateTaxLotForInvestment] @iKeyNvst = @iKeyNvst, @dStart = @dStart, @ikeyBasisType = @ikeyBasisType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_RelocateFileAssociationAsync(string cSourceType, string cTargetType, int? iSourceKeyID, int? iTargetLinkKeyID, bool? bKeepOriginal, string cDatabaseVersion, string cProgramVersion, string cUserName, string cUserInit, OutputParameter<bool?> bSuccess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbSuccess = new SqlParameter
            {
                ParameterName = "bSuccess",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bSuccess?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cSourceType",
                    Size = 10,
                    Value = cSourceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cTargetType",
                    Size = 10,
                    Value = cTargetType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iSourceKeyID",
                    Value = iSourceKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iTargetLinkKeyID",
                    Value = iTargetLinkKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bKeepOriginal",
                    Value = bKeepOriginal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cDatabaseVersion",
                    Size = 20,
                    Value = cDatabaseVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cProgramVersion",
                    Size = 20,
                    Value = cProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserName",
                    Size = 50,
                    Value = cUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInit",
                    Size = 10,
                    Value = cUserInit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterbSuccess,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_RelocateFileAssociation] @cSourceType = @cSourceType, @cTargetType = @cTargetType, @iSourceKeyID = @iSourceKeyID, @iTargetLinkKeyID = @iTargetLinkKeyID, @bKeepOriginal = @bKeepOriginal, @cDatabaseVersion = @cDatabaseVersion, @cProgramVersion = @cProgramVersion, @cUserName = @cUserName, @cUserInit = @cUserInit, @bSuccess = @bSuccess OUTPUT", sqlParameters, cancellationToken);

            bSuccess.SetValue(parameterbSuccess.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_RelocateFileDetailCodeAsync(string cSourceType, string cTargetType, OutputParameter<int?> iCodeDetail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCodeDetail = new SqlParameter
            {
                ParameterName = "iCodeDetail",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCodeDetail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cSourceType",
                    Size = 10,
                    Value = cSourceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cTargetType",
                    Size = 10,
                    Value = cTargetType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriCodeDetail,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_RelocateFileDetailCode] @cSourceType = @cSourceType, @cTargetType = @cTargetType, @iCodeDetail = @iCodeDetail OUTPUT", sqlParameters, cancellationToken);

            iCodeDetail.SetValue(parameteriCodeDetail.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_RemoveAddressFromHouseholdResult>> sp_RemoveAddressFromHouseholdAsync(int? iKeyHousehold, int? iKeyProcessLog, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyHousehold",
                    Value = iKeyHousehold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProcessLog",
                    Value = iKeyProcessLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_RemoveAddressFromHouseholdResult>("EXEC @returnValue = [dbo].[sp_RemoveAddressFromHousehold] @iKeyHousehold = @iKeyHousehold, @iKeyProcessLog = @iKeyProcessLog", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_RemoveAdminTaskOverridesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_RemoveAdminTaskOverrides]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_RemoveCoverageFromGroupAsync(int? iCoverageKeyID, string cWhoChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cWhoChange",
                    Size = 10,
                    Value = cWhoChange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_RemoveCoverageFromGroup] @iCoverageKeyID = @iCoverageKeyID, @cWhoChange = @cWhoChange", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_RemoveDuplicateMembersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_RemoveDuplicateMembers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_RemoveExpiredOptionsAsync(DateTime? dEnd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dEnd",
                    Value = dEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_RemoveExpiredOptions] @dEnd = @dEnd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_RemovePhoneFromHouseholdResult>> sp_RemovePhoneFromHouseholdAsync(int? iKeyHousehold, int? iKeyProcessLog, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyHousehold",
                    Value = iKeyHousehold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProcessLog",
                    Value = iKeyProcessLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_RemovePhoneFromHouseholdResult>("EXEC @returnValue = [dbo].[sp_RemovePhoneFromHousehold] @iKeyHousehold = @iKeyHousehold, @iKeyProcessLog = @iKeyProcessLog", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ReportPrefIncrementTimesRunAsync(int? iReportKeyId, string cUserInitials, DateTime? tDateTimeLastRun, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iReportKeyId",
                    Value = iReportKeyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tDateTimeLastRun",
                    Value = tDateTimeLastRun ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ReportPrefIncrementTimesRun] @iReportKeyId = @iReportKeyId, @cUserInitials = @cUserInitials, @tDateTimeLastRun = @tDateTimeLastRun", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ResetAATempDataForRORResult>> sp_ResetAATempDataForRORAsync(string cUser, string cIDTempRecordIdentity, bool? bReturnValue, int? iKeysNeeded, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cUser",
                    Size = 12,
                    Value = cUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cIDTempRecordIdentity",
                    Size = 12,
                    Value = cIDTempRecordIdentity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bReturnValue",
                    Value = bReturnValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iKeysNeeded",
                    Value = iKeysNeeded ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ResetAATempDataForRORResult>("EXEC @returnValue = [dbo].[sp_ResetAATempDataForROR] @cUser = @cUser, @cIDTempRecordIdentity = @cIDTempRecordIdentity, @bReturnValue = @bReturnValue, @iKeysNeeded = @iKeysNeeded", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ResetAllUsersToViewAllNamesAsync(int? iDefaultUserViewKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iDefaultUserViewKey",
                    Value = iDefaultUserViewKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ResetAllUsersToViewAllNames] @iDefaultUserViewKey = @iDefaultUserViewKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ResetBasisAdjustmentTransactionAsync(int? iKeyTransaction, string cUserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyTransaction",
                    Value = iKeyTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cUserID",
                    Size = 16,
                    Value = cUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ResetBasisAdjustmentTransaction] @iKeyTransaction = @iKeyTransaction, @cUserID = @cUserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ResetTaxLotRecordsAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ResetTaxLotRecords] @iKeyNvst = @iKeyNvst", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_SchlegelGroupWithSummaryReportResult>> sp_SchlegelGroupWithSummaryReportAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_SchlegelGroupWithSummaryReportResult>("EXEC @returnValue = [dbo].[sp_SchlegelGroupWithSummaryReport]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ServiceDLFActiveModulesResult>> sp_ServiceDLFActiveModulesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ServiceDLFActiveModulesResult>("EXEC @returnValue = [dbo].[sp_ServiceDLFActiveModules]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ServiceDLFRemoveRetrievedFilesAsync(int? iKeyModule, int? iKeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ServiceDLFRemoveRetrievedFiles] @iKeyModule = @iKeyModule, @iKeyUser = @iKeyUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ServiceDLFUpdateStatusAsync(int? iKeyModule, string cStatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyModule",
                    Value = iKeyModule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cStatus",
                    Size = 10,
                    Value = cStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ServiceDLFUpdateStatus] @iKeyModule = @iKeyModule, @cStatus = @cStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetCoverageNetCashValueAsync(int? iKeyCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyCoverage",
                    Value = iKeyCoverage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetCoverageNetCashValue] @iKeyCoverage = @iKeyCoverage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetHouseholdAddressPrimaryAsync(int? iKeyHousehold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyHousehold",
                    Value = iKeyHousehold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetHouseholdAddressPrimary] @iKeyHousehold = @iKeyHousehold", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetHouseholdNameTypePrimaryAsync(int? iKeyHousehold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyHousehold",
                    Value = iKeyHousehold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetHouseholdNameTypePrimary] @iKeyHousehold = @iKeyHousehold", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetHouseholdPhonePrimaryAsync(int? iKeyHousehold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyHousehold",
                    Value = iKeyHousehold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetHouseholdPhonePrimary] @iKeyHousehold = @iKeyHousehold", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetInvestmentCashFlowToReconcilesAsync(int? iKeyNvst, int? ikeySymbol, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeySymbol",
                    Value = ikeySymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetInvestmentCashFlowToReconciles] @iKeyNvst = @iKeyNvst, @ikeySymbol = @ikeySymbol", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetNameFaxAsync(int? iNameKeyID, int? iPhoneKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPhoneKeyID",
                    Value = iPhoneKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetNameFax] @iNameKeyID = @iNameKeyID, @iPhoneKeyID = @iPhoneKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_SetNavForSecurityResult>> sp_SetNavForSecurityAsync(decimal? nNewNav, int? iSecurityId, DateTime? dValueDate, string cUpdateSourceName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nNewNav",
                    Precision = 16,
                    Scale = 6,
                    Value = nNewNav ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "iSecurityId",
                    Value = iSecurityId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dValueDate",
                    Value = dValueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cUpdateSourceName",
                    Size = 10,
                    Value = cUpdateSourceName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_SetNavForSecurityResult>("EXEC @returnValue = [dbo].[sp_SetNavForSecurity] @nNewNav = @nNewNav, @iSecurityId = @iSecurityId, @dValueDate = @dValueDate, @cUpdateSourceName = @cUpdateSourceName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetPagesSystemPreferenceAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetPagesSystemPreference]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetPrimaryAddressAsync(int? iNameKeyID, int? iAddressKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iAddressKeyID",
                    Value = iAddressKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetPrimaryAddress] @iNameKeyID = @iNameKeyID, @iAddressKeyID = @iAddressKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetPrimaryEmailAsync(int? iNameKeyID, int? iEmailKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iEmailKeyID",
                    Value = iEmailKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetPrimaryEmail] @iNameKeyID = @iNameKeyID, @iEmailKeyID = @iEmailKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetPrimaryPhoneAsync(int? iNameKeyID, int? iPhoneKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iPhoneKeyID",
                    Value = iPhoneKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetPrimaryPhone] @iNameKeyID = @iNameKeyID, @iPhoneKeyID = @iPhoneKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetPrimaryURLAsync(int? iNameKeyID, int? iURLKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iURLKeyID",
                    Value = iURLKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetPrimaryURL] @iNameKeyID = @iNameKeyID, @iURLKeyID = @iURLKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SetTodayEventNotifiedAsync(bool? bFlagAcknowledged, bool? bFlagNotified, int? iKeyEvent, int? iKeyCalUser, string cNextNotifyFrom, string cNextNotifyTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "bFlagAcknowledged",
                    Value = bFlagAcknowledged ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bFlagNotified",
                    Value = bFlagNotified ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyEvent",
                    Value = iKeyEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyCalUser",
                    Value = iKeyCalUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cNextNotifyFrom",
                    Size = 10,
                    Value = cNextNotifyFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNextNotifyTo",
                    Size = 10,
                    Value = cNextNotifyTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SetTodayEventNotified] @bFlagAcknowledged = @bFlagAcknowledged, @bFlagNotified = @bFlagNotified, @iKeyEvent = @iKeyEvent, @iKeyCalUser = @iKeyCalUser, @cNextNotifyFrom = @cNextNotifyFrom, @cNextNotifyTo = @cNextNotifyTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_SubReportGetTaxLotForNvstResult>> sp_SubReportGetTaxLotForNvstAsync(int? iKeyNvst, DateTime? dStartDate, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dStartDate",
                    Value = dStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dEndDate",
                    Value = dEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_SubReportGetTaxLotForNvstResult>("EXEC @returnValue = [dbo].[sp_SubReportGetTaxLotForNvst] @iKeyNvst = @iKeyNvst, @dStartDate = @dStartDate, @dEndDate = @dEndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_SubReportGetTaxLotTotalsForNvstResult>> sp_SubReportGetTaxLotTotalsForNvstAsync(int? iKeyNvst, DateTime? dStartDate, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dStartDate",
                    Value = dStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dEndDate",
                    Value = dEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_SubReportGetTaxLotTotalsForNvstResult>("EXEC @returnValue = [dbo].[sp_SubReportGetTaxLotTotalsForNvst] @iKeyNvst = @iKeyNvst, @dStartDate = @dStartDate, @dEndDate = @dEndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SyncGetLatestNameDetailsChangeDateAsync(int? iNameKeyID, OutputParameter<DateTime?> dLatestChangedDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterdLatestChangedDate = new SqlParameter
            {
                ParameterName = "dLatestChangedDate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = dLatestChangedDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNameKeyID",
                    Value = iNameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterdLatestChangedDate,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SyncGetLatestNameDetailsChangeDate] @iNameKeyID = @iNameKeyID, @dLatestChangedDate = @dLatestChangedDate OUTPUT", sqlParameters, cancellationToken);

            dLatestChangedDate.SetValue(parameterdLatestChangedDate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_SyncGetNameKeysByEmailAddressesResult>> sp_SyncGetNameKeysByEmailAddressesAsync(string cWithNameEmails_DoubleBarDelimited, OutputParameter<string> cWithNameEmailsNotFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercWithNameEmailsNotFound = new SqlParameter
            {
                ParameterName = "cWithNameEmailsNotFound",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cWithNameEmailsNotFound?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cWithNameEmails_DoubleBarDelimited",
                    Size = -1,
                    Value = cWithNameEmails_DoubleBarDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametercWithNameEmailsNotFound,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_SyncGetNameKeysByEmailAddressesResult>("EXEC @returnValue = [dbo].[sp_SyncGetNameKeysByEmailAddresses] @cWithNameEmails_DoubleBarDelimited = @cWithNameEmails_DoubleBarDelimited, @cWithNameEmailsNotFound = @cWithNameEmailsNotFound OUTPUT", sqlParameters, cancellationToken);

            cWithNameEmailsNotFound.SetValue(parametercWithNameEmailsNotFound.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_TempKeysResetAllAsync(int? iKeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyUser",
                    Value = iKeyUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_TempKeysResetAll] @iKeyUser = @iKeyUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_TrailerCommUpdateBeginDateOnNvstBySymbolKeyAsync(int? iKeySymbol, int? iAddMonthsToAcquiredDate, string cDataStamp, OutputParameter<int?> iUpdatedCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriUpdatedCount = new SqlParameter
            {
                ParameterName = "iUpdatedCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iUpdatedCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySymbol",
                    Value = iKeySymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iAddMonthsToAcquiredDate",
                    Value = iAddMonthsToAcquiredDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriUpdatedCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_TrailerCommUpdateBeginDateOnNvstBySymbolKey] @iKeySymbol = @iKeySymbol, @iAddMonthsToAcquiredDate = @iAddMonthsToAcquiredDate, @cDataStamp = @cDataStamp, @iUpdatedCount = @iUpdatedCount OUTPUT", sqlParameters, cancellationToken);

            iUpdatedCount.SetValue(parameteriUpdatedCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_TransactionRegistrationExportResult>> sp_TransactionRegistrationExportAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_TransactionRegistrationExportResult>("EXEC @returnValue = [dbo].[sp_TransactionRegistrationExport] @UserKeyID = @UserKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_TransferAllCalEventsAsync(int? iTransferFromCalenderKeyID, int? iTransferToCalenderKeyID, bool? bTransferCompletedEvents, int? iKeyIDToTransferFrom, int? iNumberOfEventsToTransfer, OutputParameter<int?> iLowestRemainingKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriLowestRemainingKeyID = new SqlParameter
            {
                ParameterName = "iLowestRemainingKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iLowestRemainingKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iTransferFromCalenderKeyID",
                    Value = iTransferFromCalenderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iTransferToCalenderKeyID",
                    Value = iTransferToCalenderKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bTransferCompletedEvents",
                    Value = bTransferCompletedEvents ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyIDToTransferFrom",
                    Value = iKeyIDToTransferFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iNumberOfEventsToTransfer",
                    Value = iNumberOfEventsToTransfer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriLowestRemainingKeyID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_TransferAllCalEvents] @iTransferFromCalenderKeyID = @iTransferFromCalenderKeyID, @iTransferToCalenderKeyID = @iTransferToCalenderKeyID, @bTransferCompletedEvents = @bTransferCompletedEvents, @iKeyIDToTransferFrom = @iKeyIDToTransferFrom, @iNumberOfEventsToTransfer = @iNumberOfEventsToTransfer, @iLowestRemainingKeyID = @iLowestRemainingKeyID OUTPUT", sqlParameters, cancellationToken);

            iLowestRemainingKeyID.SetValue(parameteriLowestRemainingKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_UpdateAreaCodeByPrefixResult>> sp_UpdateAreaCodeByPrefixAsync(string cOldAreaCode, string cNewAreaCode, string cPrefix, string cUserName, DateTime? dProcessed, string cDatabaseVersion, string cProgramVersion, string cUserInitials, OutputParameter<int?> iKeyProcessLog, OutputParameter<int?> iPhonesUpdated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriKeyProcessLog = new SqlParameter
            {
                ParameterName = "iKeyProcessLog",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyProcessLog?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriPhonesUpdated = new SqlParameter
            {
                ParameterName = "iPhonesUpdated",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iPhonesUpdated?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cOldAreaCode",
                    Size = 5,
                    Value = cOldAreaCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cNewAreaCode",
                    Size = 5,
                    Value = cNewAreaCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cPrefix",
                    Size = 20,
                    Value = cPrefix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cUserName",
                    Size = 50,
                    Value = cUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "dProcessed",
                    Value = dProcessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cDatabaseVersion",
                    Size = 20,
                    Value = cDatabaseVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cProgramVersion",
                    Size = 20,
                    Value = cProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriKeyProcessLog,
                parameteriPhonesUpdated,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_UpdateAreaCodeByPrefixResult>("EXEC @returnValue = [dbo].[sp_UpdateAreaCodeByPrefix] @cOldAreaCode = @cOldAreaCode, @cNewAreaCode = @cNewAreaCode, @cPrefix = @cPrefix, @cUserName = @cUserName, @dProcessed = @dProcessed, @cDatabaseVersion = @cDatabaseVersion, @cProgramVersion = @cProgramVersion, @cUserInitials = @cUserInitials, @iKeyProcessLog = @iKeyProcessLog OUTPUT, @iPhonesUpdated = @iPhonesUpdated OUTPUT", sqlParameters, cancellationToken);

            iKeyProcessLog.SetValue(parameteriKeyProcessLog.Value);
            iPhonesUpdated.SetValue(parameteriPhonesUpdated.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateAverageBasisAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateAverageBasis] @iKeyNvst = @iKeyNvst", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_UpdateBasisNoLotResult>> sp_UpdateBasisNoLotAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_UpdateBasisNoLotResult>("EXEC @returnValue = [dbo].[sp_UpdateBasisNoLot] @iKeyNvst = @iKeyNvst", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateCoverageValuesAsync(int? iCoverageKeyID, bool? bCheckRelationships, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCoverageKeyID",
                    Value = iCoverageKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCheckRelationships",
                    Value = bCheckRelationships ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateCoverageValues] @iCoverageKeyID = @iCoverageKeyID, @bCheckRelationships = @bCheckRelationships", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateLifoFifoBasisAsync(int? iKeyNvst, string sFIFOLIFO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sFIFOLIFO",
                    Size = 4,
                    Value = sFIFOLIFO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateLifoFifoBasis] @iKeyNvst = @iKeyNvst, @sFIFOLIFO = @sFIFOLIFO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateLoggedInFlagAsync(int? iUserKeyID, bool? bLoggedIn, bool? bUpdateFlagOnly, string cComputerName, DateTime? dStationTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iUserKeyID",
                    Value = iUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bLoggedIn",
                    Value = bLoggedIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bUpdateFlagOnly",
                    Value = bUpdateFlagOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "cComputerName",
                    Size = 50,
                    Value = cComputerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "dStationTime",
                    Value = dStationTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateLoggedInFlag] @iUserKeyID = @iUserKeyID, @bLoggedIn = @bLoggedIn, @bUpdateFlagOnly = @bUpdateFlagOnly, @cComputerName = @cComputerName, @dStationTime = @dStationTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateLoggedInFlagValidationAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateLoggedInFlagValidation]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateLotBasisRatioAsync(int? iKeyLot, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyLot",
                    Value = iKeyLot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateLotBasisRatio] @iKeyLot = @iKeyLot", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateNvstMarketValuationAsync(int? iNvstKeyID, DateTime? dEndDate, bool? bfixedVal, int? iKeySymbol, decimal? yFaceValue, bool? bAccrueInterest, decimal? nAIRate, int? iKeyVal, bool? bProcessAll, DateTime? dLastTransaction, DateTime? dProcessFrom, DateTime? dLastValuation, bool? bPoolFactor, DateTime? dInitialized, bool? bOption, int? ikeyUnderLyingSecurity, decimal? nShareFactor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNvstKeyID",
                    Value = iNvstKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEndDate",
                    Value = dEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bfixedVal",
                    Value = bfixedVal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iKeySymbol",
                    Value = iKeySymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yFaceValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yFaceValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "bAccrueInterest",
                    Value = bAccrueInterest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "nAIRate",
                    Precision = 9,
                    Scale = 4,
                    Value = nAIRate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyVal",
                    Value = iKeyVal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bProcessAll",
                    Value = bProcessAll ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "dLastTransaction",
                    Value = dLastTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dProcessFrom",
                    Value = dProcessFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dLastValuation",
                    Value = dLastValuation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bPoolFactor",
                    Value = bPoolFactor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "dInitialized",
                    Value = dInitialized ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bOption",
                    Value = bOption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyUnderLyingSecurity",
                    Value = ikeyUnderLyingSecurity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nShareFactor",
                    Precision = 12,
                    Scale = 6,
                    Value = nShareFactor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateNvstMarketValuation] @iNvstKeyID = @iNvstKeyID, @dEndDate = @dEndDate, @bfixedVal = @bfixedVal, @iKeySymbol = @iKeySymbol, @yFaceValue = @yFaceValue, @bAccrueInterest = @bAccrueInterest, @nAIRate = @nAIRate, @iKeyVal = @iKeyVal, @bProcessAll = @bProcessAll, @dLastTransaction = @dLastTransaction, @dProcessFrom = @dProcessFrom, @dLastValuation = @dLastValuation, @bPoolFactor = @bPoolFactor, @dInitialized = @dInitialized, @bOption = @bOption, @ikeyUnderLyingSecurity = @ikeyUnderLyingSecurity, @nShareFactor = @nShareFactor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateNvstRorValuesAsync(int? iKeyNvst, int? iKeyVal, decimal? yAnnualTwr, decimal? yAnnualDwr, decimal? yAnnualBasic, DateTime? dAsOf, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyVal",
                    Value = iKeyVal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "yAnnualTwr",
                    Precision = 14,
                    Scale = 6,
                    Value = yAnnualTwr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "yAnnualDwr",
                    Precision = 14,
                    Scale = 6,
                    Value = yAnnualDwr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "yAnnualBasic",
                    Precision = 14,
                    Scale = 6,
                    Value = yAnnualBasic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "dAsOf",
                    Value = dAsOf ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateNvstRorValues] @iKeyNvst = @iKeyNvst, @iKeyVal = @iKeyVal, @yAnnualTwr = @yAnnualTwr, @yAnnualDwr = @yAnnualDwr, @yAnnualBasic = @yAnnualBasic, @dAsOf = @dAsOf", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_UpdateNvstRORValuesBulkResult>> sp_UpdateNvstRORValuesBulkAsync(string cUser, string cIDTempRecordIdentity, bool? bResetTempTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cUser",
                    Size = 12,
                    Value = cUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cIDTempRecordIdentity",
                    Size = 12,
                    Value = cIDTempRecordIdentity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bResetTempTable",
                    Value = bResetTempTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_UpdateNvstRORValuesBulkResult>("EXEC @returnValue = [dbo].[sp_UpdateNvstRORValuesBulk] @cUser = @cUser, @cIDTempRecordIdentity = @cIDTempRecordIdentity, @bResetTempTable = @bResetTempTable", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateNvstWithTrailersBySecurityKeyAsync(int? iKeySymbol, bool? bFlagTrailerComms, int? iTimesYear, decimal? nTrailerCommPct, decimal? nTrailerCommBasisPoints, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySymbol",
                    Value = iKeySymbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bFlagTrailerComms",
                    Value = bFlagTrailerComms ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iTimesYear",
                    Value = iTimesYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nTrailerCommPct",
                    Precision = 18,
                    Value = nTrailerCommPct ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nTrailerCommBasisPoints",
                    Precision = 18,
                    Value = nTrailerCommBasisPoints ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateNvstWithTrailersBySecurityKey] @iKeySymbol = @iKeySymbol, @bFlagTrailerComms = @bFlagTrailerComms, @iTimesYear = @iTimesYear, @nTrailerCommPct = @nTrailerCommPct, @nTrailerCommBasisPoints = @nTrailerCommBasisPoints", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdatePolicyValuesAsync(int? iPolicyKeyID, int? iDefaultAgencyKeyID, bool? bCheckPrimaryInsuredRelationship, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iPolicyKeyID",
                    Value = iPolicyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iDefaultAgencyKeyID",
                    Value = iDefaultAgencyKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bCheckPrimaryInsuredRelationship",
                    Value = bCheckPrimaryInsuredRelationship ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdatePolicyValues] @iPolicyKeyID = @iPolicyKeyID, @iDefaultAgencyKeyID = @iDefaultAgencyKeyID, @bCheckPrimaryInsuredRelationship = @bCheckPrimaryInsuredRelationship", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateReconcileTransactionAsync(int? iKeyTrans, int? iKeyNvst, int? iKeyTransType, DateTime? dTrans, decimal? yBasisIn, decimal? yBasisOut, string cWhoChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyTrans",
                    Value = iKeyTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTransType",
                    Value = iKeyTransType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dTrans",
                    Value = dTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "yBasisIn",
                    Precision = 19,
                    Scale = 4,
                    Value = yBasisIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "yBasisOut",
                    Precision = 19,
                    Scale = 4,
                    Value = yBasisOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "cWhoChange",
                    Size = 10,
                    Value = cWhoChange ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateReconcileTransaction] @iKeyTrans = @iKeyTrans, @iKeyNvst = @iKeyNvst, @iKeyTransType = @iKeyTransType, @dTrans = @dTrans, @yBasisIn = @yBasisIn, @yBasisOut = @yBasisOut, @cWhoChange = @cWhoChange", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateSummedHHIncomeForClientAsync(int? iKeyClient, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyClient",
                    Value = iKeyClient ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateSummedHHIncomeForClient] @iKeyClient = @iKeyClient", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateSummedHouseHoldIncomeAsync(int? iKeyHouseHold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyHouseHold",
                    Value = iKeyHouseHold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateSummedHouseHoldIncome] @iKeyHouseHold = @iKeyHouseHold", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateTransactionBasisValuesAsync(int? iKeyTrans, bool? bBasisIn, decimal? yBasisPerShare, int? iKeyLinkedTrans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyTrans",
                    Value = iKeyTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bBasisIn",
                    Value = bBasisIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "yBasisPerShare",
                    Precision = 16,
                    Scale = 6,
                    Value = yBasisPerShare ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyLinkedTrans",
                    Value = iKeyLinkedTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateTransactionBasisValues] @iKeyTrans = @iKeyTrans, @bBasisIn = @bBasisIn, @yBasisPerShare = @yBasisPerShare, @iKeyLinkedTrans = @iKeyLinkedTrans", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_UpdateTransactionBasisValuesNoTriggerResult>> sp_UpdateTransactionBasisValuesNoTriggerAsync(int? iKeyTrans, bool? bBasisIn, decimal? yBasisPerShare, int? iKeyLinkedTrans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyTrans",
                    Value = iKeyTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bBasisIn",
                    Value = bBasisIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "yBasisPerShare",
                    Precision = 16,
                    Scale = 6,
                    Value = yBasisPerShare ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyLinkedTrans",
                    Value = iKeyLinkedTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_UpdateTransactionBasisValuesNoTriggerResult>("EXEC @returnValue = [dbo].[sp_UpdateTransactionBasisValuesNoTrigger] @iKeyTrans = @iKeyTrans, @bBasisIn = @bBasisIn, @yBasisPerShare = @yBasisPerShare, @iKeyLinkedTrans = @iKeyLinkedTrans", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateTransactionProcessAndLastTransactionDatesAsync(int? iKeyNvst, DateTime? dProcessFrom, bool? bUpdateLastTransaction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dProcessFrom",
                    Value = dProcessFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bUpdateLastTransaction",
                    Value = bUpdateLastTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateTransactionProcessAndLastTransactionDates] @iKeyNvst = @iKeyNvst, @dProcessFrom = @dProcessFrom, @bUpdateLastTransaction = @bUpdateLastTransaction", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateTransactionSummedValuesAsync(int? iNvstKeyID, DateTime? dEndDate, bool? bfixedVal, bool? bAccrueInterest, decimal? nAnnualRate, decimal? yFaceValue, bool? bForceValuesToBeSummed, bool? bProcessAllMarketValues, bool? bPoolFactor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNvstKeyID",
                    Value = iNvstKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEndDate",
                    Value = dEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bfixedVal",
                    Value = bfixedVal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bAccrueInterest",
                    Value = bAccrueInterest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "nAnnualRate",
                    Precision = 12,
                    Scale = 6,
                    Value = nAnnualRate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "yFaceValue",
                    Precision = 19,
                    Scale = 4,
                    Value = yFaceValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "bForceValuesToBeSummed",
                    Value = bForceValuesToBeSummed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bProcessAllMarketValues",
                    Value = bProcessAllMarketValues ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bPoolFactor",
                    Value = bPoolFactor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateTransactionSummedValues] @iNvstKeyID = @iNvstKeyID, @dEndDate = @dEndDate, @bfixedVal = @bfixedVal, @bAccrueInterest = @bAccrueInterest, @nAnnualRate = @nAnnualRate, @yFaceValue = @yFaceValue, @bForceValuesToBeSummed = @bForceValuesToBeSummed, @bProcessAllMarketValues = @bProcessAllMarketValues, @bPoolFactor = @bPoolFactor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateTransactionSummedValuesWithoutAIAsync(int? iNvstKeyID, DateTime? dEndDate, bool? bfixedVal, bool? bForceValuesToBeSummed, bool? bProcessAllMarketValues, bool? bPoolFactor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iNvstKeyID",
                    Value = iNvstKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dEndDate",
                    Value = dEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bfixedVal",
                    Value = bfixedVal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bForceValuesToBeSummed",
                    Value = bForceValuesToBeSummed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bProcessAllMarketValues",
                    Value = bProcessAllMarketValues ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bPoolFactor",
                    Value = bPoolFactor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateTransactionSummedValuesWithoutAI] @iNvstKeyID = @iNvstKeyID, @dEndDate = @dEndDate, @bfixedVal = @bfixedVal, @bForceValuesToBeSummed = @bForceValuesToBeSummed, @bProcessAllMarketValues = @bProcessAllMarketValues, @bPoolFactor = @bPoolFactor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdtAccountMktValAsync(int? iKeyAccount, DateTime? dValued, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyAccount",
                    Value = iKeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dValued",
                    Value = dValued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdtAccountMktVal] @iKeyAccount = @iKeyAccount, @dValued = @dValued", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UserProducerValidateAsync(int? userKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userKeyID",
                    Value = userKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UserProducerValidate] @userKeyID = @userKeyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UserTaskTypeSplitAsync(int? iKeyOldTask, int? iKeyNewTask, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyOldTask",
                    Value = iKeyOldTask ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNewTask",
                    Value = iKeyNewTask ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UserTaskTypeSplit] @iKeyOldTask = @iKeyOldTask, @iKeyNewTask = @iKeyNewTask", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateAccountProducersAsync(int? iKeyAccount, int? iKeyProducer1, int? iKeyProducer2, int? iKeyProducer3, int? iKeyProducer4, int? iKeyManager1, int? iKeyManager2, int? iKeyManager3, int? iKeyManager4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyAccount",
                    Value = iKeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer1",
                    Value = iKeyProducer1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer2",
                    Value = iKeyProducer2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer3",
                    Value = iKeyProducer3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer4",
                    Value = iKeyProducer4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyManager1",
                    Value = iKeyManager1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyManager2",
                    Value = iKeyManager2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyManager3",
                    Value = iKeyManager3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyManager4",
                    Value = iKeyManager4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateAccountProducers] @iKeyAccount = @iKeyAccount, @iKeyProducer1 = @iKeyProducer1, @iKeyProducer2 = @iKeyProducer2, @iKeyProducer3 = @iKeyProducer3, @iKeyProducer4 = @iKeyProducer4, @iKeyManager1 = @iKeyManager1, @iKeyManager2 = @iKeyManager2, @iKeyManager3 = @iKeyManager3, @iKeyManager4 = @iKeyManager4", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateBasisAdjustmentsResult>> sp_ValidateBasisAdjustmentsAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateBasisAdjustmentsResult>("EXEC @returnValue = [dbo].[sp_ValidateBasisAdjustments] @iKeyNvst = @iKeyNvst", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateChangedInvestmentTransValuationKeyAsync(int? iKeyTrans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyTrans",
                    Value = iKeyTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateChangedInvestmentTransValuationKey] @iKeyTrans = @iKeyTrans", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateCodeForeignKeysAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateCodeForeignKeys]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateCoverageFlexKeysAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateCoverageFlexKeys]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateCusipChangedAssetsResult>> sp_ValidateCusipChangedAssetsAsync(string cOldCusip, string cOldFundCode, string cNewCusip, string cNewfundCode, string cDataStamp, int? iKeyProcessLog, OutputParameter<int?> iNumberOfAssetsMerged, OutputParameter<int?> iKeyOldSecurity, OutputParameter<int?> ikeyNewSecurity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriNumberOfAssetsMerged = new SqlParameter
            {
                ParameterName = "iNumberOfAssetsMerged",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iNumberOfAssetsMerged?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriKeyOldSecurity = new SqlParameter
            {
                ParameterName = "iKeyOldSecurity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iKeyOldSecurity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterikeyNewSecurity = new SqlParameter
            {
                ParameterName = "ikeyNewSecurity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ikeyNewSecurity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cOldCusip",
                    Size = 30,
                    Value = cOldCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cOldFundCode",
                    Size = 15,
                    Value = cOldFundCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cNewCusip",
                    Size = 30,
                    Value = cNewCusip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cNewfundCode",
                    Size = 15,
                    Value = cNewfundCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 12,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProcessLog",
                    Value = iKeyProcessLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteriNumberOfAssetsMerged,
                parameteriKeyOldSecurity,
                parameterikeyNewSecurity,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateCusipChangedAssetsResult>("EXEC @returnValue = [dbo].[sp_ValidateCusipChangedAssets] @cOldCusip = @cOldCusip, @cOldFundCode = @cOldFundCode, @cNewCusip = @cNewCusip, @cNewfundCode = @cNewfundCode, @cDataStamp = @cDataStamp, @iKeyProcessLog = @iKeyProcessLog, @iNumberOfAssetsMerged = @iNumberOfAssetsMerged OUTPUT, @iKeyOldSecurity = @iKeyOldSecurity OUTPUT, @ikeyNewSecurity = @ikeyNewSecurity OUTPUT", sqlParameters, cancellationToken);

            iNumberOfAssetsMerged.SetValue(parameteriNumberOfAssetsMerged.Value);
            iKeyOldSecurity.SetValue(parameteriKeyOldSecurity.Value);
            ikeyNewSecurity.SetValue(parameterikeyNewSecurity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateFlowToCashBalanceAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateFlowToCashBalance] @iKeyNvst = @iKeyNvst", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateInvestmentBasisResult>> sp_ValidateInvestmentBasisAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateInvestmentBasisResult>("EXEC @returnValue = [dbo].[sp_ValidateInvestmentBasis] @iKeyNvst = @iKeyNvst", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateLotAndSplitLinksAsync(int? iKeyTrans, int? iKeySplit, bool? bDelete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyTrans",
                    Value = iKeyTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeySplit",
                    Value = iKeySplit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bDelete",
                    Value = bDelete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateLotAndSplitLinks] @iKeyTrans = @iKeyTrans, @iKeySplit = @iKeySplit, @bDelete = @bDelete", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateOneNvstTransactionValuationKeyAsync(int? iKeyNvst, int? iKeyTrans, int? iKeyTransType, DateTime? dTransaction, DateTime? dSettle, bool? bTransactionDateCalculations, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTrans",
                    Value = iKeyTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTransType",
                    Value = iKeyTransType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dTransaction",
                    Value = dTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dSettle",
                    Value = dSettle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "bTransactionDateCalculations",
                    Value = bTransactionDateCalculations ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateOneNvstTransactionValuationKey] @iKeyNvst = @iKeyNvst, @iKeyTrans = @iKeyTrans, @iKeyTransType = @iKeyTransType, @dTransaction = @dTransaction, @dSettle = @dSettle, @bTransactionDateCalculations = @bTransactionDateCalculations", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidatePeriodicValuationRecordsAsync(int? iKeyNvst, DateTime? dStartDate, DateTime? dEndDate, string cPeriod, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dStartDate",
                    Value = dStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dEndDate",
                    Value = dEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cPeriod",
                    Size = 12,
                    Value = cPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidatePeriodicValuationRecords] @iKeyNvst = @iKeyNvst, @dStartDate = @dStartDate, @dEndDate = @dEndDate, @cPeriod = @cPeriod", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidatePolicyProducersAsync(int? iKeyPolicy, int? iKeyProducer1, int? iKeyProducer2, int? iKeyProducer3, int? iKeyProducer4, int? iKeyManager1, int? iKeyManager2, int? iKeyManager3, int? iKeyManager4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyPolicy",
                    Value = iKeyPolicy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer1",
                    Value = iKeyProducer1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer2",
                    Value = iKeyProducer2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer3",
                    Value = iKeyProducer3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyProducer4",
                    Value = iKeyProducer4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyManager1",
                    Value = iKeyManager1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyManager2",
                    Value = iKeyManager2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyManager3",
                    Value = iKeyManager3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyManager4",
                    Value = iKeyManager4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidatePolicyProducers] @iKeyPolicy = @iKeyPolicy, @iKeyProducer1 = @iKeyProducer1, @iKeyProducer2 = @iKeyProducer2, @iKeyProducer3 = @iKeyProducer3, @iKeyProducer4 = @iKeyProducer4, @iKeyManager1 = @iKeyManager1, @iKeyManager2 = @iKeyManager2, @iKeyManager3 = @iKeyManager3, @iKeyManager4 = @iKeyManager4", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateProducersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateProducers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateSSOResult>> sp_ValidateSSOAsync(Guid? gToken, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gToken",
                    Value = gToken ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateSSOResult>("EXEC @returnValue = [dbo].[sp_ValidateSSO] @gToken = @gToken", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateStockSplitLinkResult>> sp_ValidateStockSplitLinkAsync(int? iKeyTrans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyTrans",
                    Value = iKeyTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateStockSplitLinkResult>("EXEC @returnValue = [dbo].[sp_ValidateStockSplitLink] @iKeyTrans = @iKeyTrans", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateTableKeyIdsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateTableKeyIds]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateTaxLotBasisForInvestmentResult>> sp_ValidateTaxLotBasisForInvestmentAsync(int? iKeyNvst, DateTime? dStart, int? iKeyBasisType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dStart",
                    Value = dStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBasisType",
                    Value = iKeyBasisType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateTaxLotBasisForInvestmentResult>("EXEC @returnValue = [dbo].[sp_ValidateTaxLotBasisForInvestment] @iKeyNvst = @iKeyNvst, @dStart = @dStart, @iKeyBasisType = @iKeyBasisType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateTaxLotBasisForSellResult>> sp_ValidateTaxLotBasisForSellAsync(int? iKeySellTransaction, int? ikeyBasisType, bool? bBasisAdjust, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeySellTransaction",
                    Value = iKeySellTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyBasisType",
                    Value = ikeyBasisType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bBasisAdjust",
                    Value = bBasisAdjust ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateTaxLotBasisForSellResult>("EXEC @returnValue = [dbo].[sp_ValidateTaxLotBasisForSell] @iKeySellTransaction = @iKeySellTransaction, @ikeyBasisType = @ikeyBasisType, @bBasisAdjust = @bBasisAdjust", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateTaxLotBasisForSplitResult>> sp_ValidateTaxLotBasisForSplitAsync(int? ikeyTrans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyTrans",
                    Value = ikeyTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateTaxLotBasisForSplitResult>("EXEC @returnValue = [dbo].[sp_ValidateTaxLotBasisForSplit] @ikeyTrans = @ikeyTrans", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateTaxlotForNvstSplitsAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateTaxlotForNvstSplits] @iKeyNvst = @iKeyNvst", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateTaxLotForSellAsync(int? ikeyTransaction, int? iKeyBasisType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ikeyTransaction",
                    Value = ikeyTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyBasisType",
                    Value = iKeyBasisType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateTaxLotForSell] @ikeyTransaction = @ikeyTransaction, @iKeyBasisType = @iKeyBasisType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ValidateTaxLotForSplitRecordAsync(int? iKeyNvst, int? iKeyTrans, int? ikeysplit, bool? bFreeze, DateTime? dTransaction, decimal? nTransactionShares, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyNvst",
                    Value = iKeyNvst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTrans",
                    Value = iKeyTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeysplit",
                    Value = ikeysplit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bFreeze",
                    Value = bFreeze ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "dTransaction",
                    Value = dTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "nTransactionShares",
                    Precision = 18,
                    Scale = 6,
                    Value = nTransactionShares ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ValidateTaxLotForSplitRecord] @iKeyNvst = @iKeyNvst, @iKeyTrans = @iKeyTrans, @ikeysplit = @ikeysplit, @bFreeze = @bFreeze, @dTransaction = @dTransaction, @nTransactionShares = @nTransactionShares", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateTaxLotModelResult>> sp_ValidateTaxLotModelAsync(int? iKeyTrans, int? iKeyTransType, decimal? nShares, decimal? nBasisIn, decimal? nAI, decimal? nTotal, bool? bFreeze, DateTime? dTransaction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyTrans",
                    Value = iKeyTrans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyTransType",
                    Value = iKeyTransType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nShares",
                    Precision = 16,
                    Scale = 6,
                    Value = nShares ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nBasisIn",
                    Precision = 19,
                    Scale = 4,
                    Value = nBasisIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nAI",
                    Precision = 19,
                    Scale = 4,
                    Value = nAI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nTotal",
                    Precision = 19,
                    Scale = 4,
                    Value = nTotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "bFreeze",
                    Value = bFreeze ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "dTransaction",
                    Value = dTransaction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateTaxLotModelResult>("EXEC @returnValue = [dbo].[sp_ValidateTaxLotModel] @iKeyTrans = @iKeyTrans, @iKeyTransType = @iKeyTransType, @nShares = @nShares, @nBasisIn = @nBasisIn, @nAI = @nAI, @nTotal = @nTotal, @bFreeze = @bFreeze, @dTransaction = @dTransaction", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateTransactionCashFlowResult>> sp_ValidateTransactionCashFlowAsync(int? iKeyAccount, int? ikeyCashBalance, bool? bSkipBalancing, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyAccount",
                    Value = iKeyAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyCashBalance",
                    Value = ikeyCashBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bSkipBalancing",
                    Value = bSkipBalancing ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateTransactionCashFlowResult>("EXEC @returnValue = [dbo].[sp_ValidateTransactionCashFlow] @iKeyAccount = @iKeyAccount, @ikeyCashBalance = @ikeyCashBalance, @bSkipBalancing = @bSkipBalancing", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateUsernamePasswordResult>> sp_ValidateUsernamePasswordAsync(string sUserName, string sPassword, string sEncryptPassword, int? iLoginAttempts, bool? bStrongPassword, int? iMustChangePWDays, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sUserName",
                    Size = 20,
                    Value = sUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sPassword",
                    Size = 20,
                    Value = sPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sEncryptPassword",
                    Size = 50,
                    Value = sEncryptPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iLoginAttempts",
                    Value = iLoginAttempts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bStrongPassword",
                    Value = bStrongPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iMustChangePWDays",
                    Value = iMustChangePWDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateUsernamePasswordResult>("EXEC @returnValue = [dbo].[sp_ValidateUsernamePassword] @sUserName = @sUserName, @sPassword = @sPassword, @sEncryptPassword = @sEncryptPassword, @iLoginAttempts = @iLoginAttempts, @bStrongPassword = @bStrongPassword, @iMustChangePWDays = @iMustChangePWDays", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateUsernamePassword2Result>> sp_ValidateUsernamePassword2Async(string sUserName, string sPassword, string sEncryptPassword, int? iLoginAttempts, bool? bStrongPassword, int? iMustChangePWDays, OutputParameter<bool?> bUserDisabledForTooManyLoginAttempts, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbUserDisabledForTooManyLoginAttempts = new SqlParameter
            {
                ParameterName = "bUserDisabledForTooManyLoginAttempts",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = bUserDisabledForTooManyLoginAttempts?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sUserName",
                    Size = 20,
                    Value = sUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sPassword",
                    Size = 20,
                    Value = sPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sEncryptPassword",
                    Size = 50,
                    Value = sEncryptPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "iLoginAttempts",
                    Value = iLoginAttempts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bStrongPassword",
                    Value = bStrongPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "iMustChangePWDays",
                    Value = iMustChangePWDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterbUserDisabledForTooManyLoginAttempts,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateUsernamePassword2Result>("EXEC @returnValue = [dbo].[sp_ValidateUsernamePassword2] @sUserName = @sUserName, @sPassword = @sPassword, @sEncryptPassword = @sEncryptPassword, @iLoginAttempts = @iLoginAttempts, @bStrongPassword = @bStrongPassword, @iMustChangePWDays = @iMustChangePWDays, @bUserDisabledForTooManyLoginAttempts = @bUserDisabledForTooManyLoginAttempts OUTPUT", sqlParameters, cancellationToken);

            bUserDisabledForTooManyLoginAttempts.SetValue(parameterbUserDisabledForTooManyLoginAttempts.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ValidateZeroRecordsResult>> sp_ValidateZeroRecordsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ValidateZeroRecordsResult>("EXEC @returnValue = [dbo].[sp_ValidateZeroRecords]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_WorkflowAssignmentUpdateAsync(int? iKeyOldUserAssignment, int? iKeyOldUserGroupAssignment, int? iKeyNewUserAssignment, int? ikeyNewUserGroupAssignment, string cDataStamp, OutputParameter<int?> iCountEvents, OutputParameter<int?> iCountMasters, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriCountEvents = new SqlParameter
            {
                ParameterName = "iCountEvents",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCountEvents?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteriCountMasters = new SqlParameter
            {
                ParameterName = "iCountMasters",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iCountMasters?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iKeyOldUserAssignment",
                    Value = iKeyOldUserAssignment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyOldUserGroupAssignment",
                    Value = iKeyOldUserGroupAssignment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iKeyNewUserAssignment",
                    Value = iKeyNewUserAssignment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ikeyNewUserGroupAssignment",
                    Value = ikeyNewUserGroupAssignment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDataStamp",
                    Size = 10,
                    Value = cDataStamp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameteriCountEvents,
                parameteriCountMasters,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_WorkflowAssignmentUpdate] @iKeyOldUserAssignment = @iKeyOldUserAssignment, @iKeyOldUserGroupAssignment = @iKeyOldUserGroupAssignment, @iKeyNewUserAssignment = @iKeyNewUserAssignment, @ikeyNewUserGroupAssignment = @ikeyNewUserGroupAssignment, @cDataStamp = @cDataStamp, @iCountEvents = @iCountEvents OUTPUT, @iCountMasters = @iCountMasters OUTPUT", sqlParameters, cancellationToken);

            iCountEvents.SetValue(parameteriCountEvents.Value);
            iCountMasters.SetValue(parameteriCountMasters.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_WorkflowCalEventCanCompleteAsync(int? CalEventKey, OutputParameter<bool?> IsWorkflow, OutputParameter<bool?> CanComplete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIsWorkflow = new SqlParameter
            {
                ParameterName = "IsWorkflow",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IsWorkflow?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterCanComplete = new SqlParameter
            {
                ParameterName = "CanComplete",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CanComplete?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CalEventKey",
                    Value = CalEventKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterIsWorkflow,
                parameterCanComplete,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_WorkflowCalEventCanComplete] @CalEventKey = @CalEventKey, @IsWorkflow = @IsWorkflow OUTPUT, @CanComplete = @CanComplete OUTPUT", sqlParameters, cancellationToken);

            IsWorkflow.SetValue(parameterIsWorkflow.Value);
            CanComplete.SetValue(parameterCanComplete.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WorkflowCalEventCanCompleteManyResult>> sp_WorkflowCalEventCanCompleteManyAsync(string CalEventKeyIDsDelimited, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CalEventKeyIDsDelimited",
                    Size = -1,
                    Value = CalEventKeyIDsDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WorkflowCalEventCanCompleteManyResult>("EXEC @returnValue = [dbo].[sp_WorkflowCalEventCanCompleteMany] @CalEventKeyIDsDelimited = @CalEventKeyIDsDelimited", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WorkflowCompleteEventResult>> sp_WorkflowCompleteEventAsync(int? CalEventKeyID, int? CompleteUserKeyID, DateTime? CompleteDate, string DeleteCalendarEventContextMessage, string ProgramVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CalEventKeyID",
                    Value = CalEventKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompleteUserKeyID",
                    Value = CompleteUserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompleteDate",
                    Value = CompleteDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteCalendarEventContextMessage",
                    Size = -1,
                    Value = DeleteCalendarEventContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramVersion",
                    Size = 100,
                    Value = ProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WorkflowCompleteEventResult>("EXEC @returnValue = [dbo].[sp_WorkflowCompleteEvent] @CalEventKeyID = @CalEventKeyID, @CompleteUserKeyID = @CompleteUserKeyID, @CompleteDate = @CompleteDate, @DeleteCalendarEventContextMessage = @DeleteCalendarEventContextMessage, @ProgramVersion = @ProgramVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WorkflowCreateResult>> sp_WorkflowCreateAsync(int? masterKey, int? userKey, int? userGroupKey, int? priority, string beginDate, int? tasktime, int? policyKey, int? accountKey, int? nameKey, int? taskColorCode, int? currentUserKey, string currentUserInit, OutputParameter<int?> workflowKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterworkflowKeyID = new SqlParameter
            {
                ParameterName = "workflowKeyID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = workflowKeyID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "masterKey",
                    Value = masterKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userKey",
                    Value = userKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userGroupKey",
                    Value = userGroupKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "priority",
                    Value = priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Size = 10,
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tasktime",
                    Value = tasktime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "policyKey",
                    Value = policyKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "accountKey",
                    Value = accountKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nameKey",
                    Value = nameKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "taskColorCode",
                    Value = taskColorCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "currentUserKey",
                    Value = currentUserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "currentUserInit",
                    Size = 10,
                    Value = currentUserInit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterworkflowKeyID,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WorkflowCreateResult>("EXEC @returnValue = [dbo].[sp_WorkflowCreate] @masterKey = @masterKey, @userKey = @userKey, @userGroupKey = @userGroupKey, @priority = @priority, @beginDate = @beginDate, @tasktime = @tasktime, @policyKey = @policyKey, @accountKey = @accountKey, @nameKey = @nameKey, @taskColorCode = @taskColorCode, @currentUserKey = @currentUserKey, @currentUserInit = @currentUserInit, @workflowKeyID = @workflowKeyID OUTPUT", sqlParameters, cancellationToken);

            workflowKeyID.SetValue(parameterworkflowKeyID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WorkFlowCreateStepResult>> sp_WorkFlowCreateStepAsync(int? WorkflowKeyID, int? WorkflowMasterKeyID, int? WorkflowEventMasterKeyID, int? NameKeyID, int? Sequence, int? Priority, string Description, int? Duration, int? WaitDay, DateTime? WorkflowBegin, DateTime? Begin, DateTime? Due, DateTime? CalEventBegin, DateTime? CalEventDue, int? Color, int? WorkflowEventType, int? UserKey, int? UserGroupKey, int? NoteTopicKeyID, bool? RevenueFlag, bool? Dependency, string CurrentUserInit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkflowKeyID",
                    Value = WorkflowKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkflowMasterKeyID",
                    Value = WorkflowMasterKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkflowEventMasterKeyID",
                    Value = WorkflowEventMasterKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NameKeyID",
                    Value = NameKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Sequence",
                    Value = Sequence ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Priority",
                    Value = Priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 100,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Duration",
                    Value = Duration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WaitDay",
                    Value = WaitDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkflowBegin",
                    Value = WorkflowBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Begin",
                    Value = Begin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Due",
                    Value = Due ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CalEventBegin",
                    Value = CalEventBegin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CalEventDue",
                    Value = CalEventDue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Color",
                    Value = Color ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkflowEventType",
                    Value = WorkflowEventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserKey",
                    Value = UserKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserGroupKey",
                    Value = UserGroupKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NoteTopicKeyID",
                    Value = NoteTopicKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RevenueFlag",
                    Value = RevenueFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Dependency",
                    Value = Dependency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentUserInit",
                    Size = 10,
                    Value = CurrentUserInit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WorkFlowCreateStepResult>("EXEC @returnValue = [dbo].[sp_WorkFlowCreateStep] @WorkflowKeyID = @WorkflowKeyID, @WorkflowMasterKeyID = @WorkflowMasterKeyID, @WorkflowEventMasterKeyID = @WorkflowEventMasterKeyID, @NameKeyID = @NameKeyID, @Sequence = @Sequence, @Priority = @Priority, @Description = @Description, @Duration = @Duration, @WaitDay = @WaitDay, @WorkflowBegin = @WorkflowBegin, @Begin = @Begin, @Due = @Due, @CalEventBegin = @CalEventBegin, @CalEventDue = @CalEventDue, @Color = @Color, @WorkflowEventType = @WorkflowEventType, @UserKey = @UserKey, @UserGroupKey = @UserGroupKey, @NoteTopicKeyID = @NoteTopicKeyID, @RevenueFlag = @RevenueFlag, @Dependency = @Dependency, @CurrentUserInit = @CurrentUserInit", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WorkflowDataFixForSupportOnlyResult>> sp_WorkflowDataFixForSupportOnlyAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WorkflowDataFixForSupportOnlyResult>("EXEC @returnValue = [dbo].[sp_WorkflowDataFixForSupportOnly] @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WorkflowDataFixForSupportOnlyByDaysResult>> sp_WorkflowDataFixForSupportOnlyByDaysAsync(int? NumberOfDaysToFix, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NumberOfDaysToFix",
                    Value = NumberOfDaysToFix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WorkflowDataFixForSupportOnlyByDaysResult>("EXEC @returnValue = [dbo].[sp_WorkflowDataFixForSupportOnlyByDays] @NumberOfDaysToFix = @NumberOfDaysToFix", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WorkFlowGetLastActivityResult>> sp_WorkFlowGetLastActivityAsync(string WorkflowKeyIDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkflowKeyIDs",
                    Size = -1,
                    Value = WorkflowKeyIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WorkFlowGetLastActivityResult>("EXEC @returnValue = [dbo].[sp_WorkFlowGetLastActivity] @WorkflowKeyIDs = @WorkflowKeyIDs", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WorkflowRecalStatusResult>> sp_WorkflowRecalStatusAsync(int? WorkflowKey, bool? UpdateCalEvents, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkflowKey",
                    Value = WorkflowKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdateCalEvents",
                    Value = UpdateCalEvents ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WorkflowRecalStatusResult>("EXEC @returnValue = [dbo].[sp_WorkflowRecalStatus] @WorkflowKey = @WorkflowKey, @UpdateCalEvents = @UpdateCalEvents", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WorkflowRecalStatusAllResult>> sp_WorkflowRecalStatusAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WorkflowRecalStatusAllResult>("EXEC @returnValue = [dbo].[sp_WorkflowRecalStatusAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WorkflowRecalStatusManyResult>> sp_WorkflowRecalStatusManyAsync(string WorkflowKeyIDsDelimited, bool? UpdateCalEvents, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkflowKeyIDsDelimited",
                    Size = -1,
                    Value = WorkflowKeyIDsDelimited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UpdateCalEvents",
                    Value = UpdateCalEvents ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WorkflowRecalStatusManyResult>("EXEC @returnValue = [dbo].[sp_WorkflowRecalStatusMany] @WorkflowKeyIDsDelimited = @WorkflowKeyIDsDelimited, @UpdateCalEvents = @UpdateCalEvents", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_WorkFlowTerminateAsync(int? WorkFlowKey, string UserInitials, int? UserKeyID, string ProgramVersion, string DeleteCalendarEventContextMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowKey",
                    Value = WorkFlowKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserInitials",
                    Size = 10,
                    Value = UserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramVersion",
                    Size = 100,
                    Value = ProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteCalendarEventContextMessage",
                    Size = -1,
                    Value = DeleteCalendarEventContextMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_WorkFlowTerminate] @WorkFlowKey = @WorkFlowKey, @UserInitials = @UserInitials, @UserKeyID = @UserKeyID, @ProgramVersion = @ProgramVersion, @DeleteCalendarEventContextMessage = @DeleteCalendarEventContextMessage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WorkflowUpdateCalEventResult>> sp_WorkflowUpdateCalEventAsync(int? CalEventKey, DateTime? Begin, DateTime? Due, string Desc, int? UserKeyID, int? UserGroupKeyID, int? Priority, int? EventType, bool? SkipDupCheck, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CalEventKey",
                    Value = CalEventKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Begin",
                    Value = Begin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Due",
                    Value = Due ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Desc",
                    Size = 50,
                    Value = Desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserKeyID",
                    Value = UserKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserGroupKeyID",
                    Value = UserGroupKeyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Priority",
                    Value = Priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventType",
                    Value = EventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SkipDupCheck",
                    Value = SkipDupCheck ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WorkflowUpdateCalEventResult>("EXEC @returnValue = [dbo].[sp_WorkflowUpdateCalEvent] @CalEventKey = @CalEventKey, @Begin = @Begin, @Due = @Due, @Desc = @Desc, @UserKeyID = @UserKeyID, @UserGroupKeyID = @UserGroupKeyID, @Priority = @Priority, @EventType = @EventType, @SkipDupCheck = @SkipDupCheck", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_WriteToFileHistoryLogAsync(int? iCodeProcess, string cDescription, DateTime? dWhenProcessed, string cFilePath, Guid? gFileLink, DateTime? dfiledate, int? iCodeDetail, string cDatabaseVersion, string cProgramVersion, string cContact, string cHolding, string cUserName, string cUserInitials, OutputParameter<int?> iReturnKeyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteriReturnKeyId = new SqlParameter
            {
                ParameterName = "iReturnKeyId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iReturnKeyId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iCodeProcess",
                    Value = iCodeProcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDescription",
                    Size = 200,
                    Value = cDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dWhenProcessed",
                    Value = dWhenProcessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cFilePath",
                    Size = -1,
                    Value = cFilePath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "gFileLink",
                    Value = gFileLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "dfiledate",
                    Value = dfiledate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "iCodeDetail",
                    Value = iCodeDetail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cDatabaseVersion",
                    Size = 20,
                    Value = cDatabaseVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cProgramVersion",
                    Size = 20,
                    Value = cProgramVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cContact",
                    Size = -1,
                    Value = cContact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cHolding",
                    Size = -1,
                    Value = cHolding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cUserName",
                    Size = 50,
                    Value = cUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cUserInitials",
                    Size = 10,
                    Value = cUserInitials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteriReturnKeyId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_WriteToFileHistoryLog] @iCodeProcess = @iCodeProcess, @cDescription = @cDescription, @dWhenProcessed = @dWhenProcessed, @cFilePath = @cFilePath, @gFileLink = @gFileLink, @dfiledate = @dfiledate, @iCodeDetail = @iCodeDetail, @cDatabaseVersion = @cDatabaseVersion, @cProgramVersion = @cProgramVersion, @cContact = @cContact, @cHolding = @cHolding, @cUserName = @cUserName, @cUserInitials = @cUserInitials, @iReturnKeyId = @iReturnKeyId OUTPUT", sqlParameters, cancellationToken);

            iReturnKeyId.SetValue(parameteriReturnKeyId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WSAddSessionResult>> sp_WSAddSessionAsync(Guid? session, DateTime? startTime, string macAddress, string IPAddress, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "session",
                    Value = session ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "startTime",
                    Value = startTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "macAddress",
                    Size = 20,
                    Value = macAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "IPAddress",
                    Size = 15,
                    Value = IPAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WSAddSessionResult>("EXEC @returnValue = [dbo].[sp_WSAddSession] @session = @session, @startTime = @startTime, @macAddress = @macAddress, @IPAddress = @IPAddress", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WSValidateSessionResult>> sp_WSValidateSessionAsync(Guid? session, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "session",
                    Value = session ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WSValidateSessionResult>("EXEC @returnValue = [dbo].[sp_WSValidateSession] @session = @session", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
