// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Rhyous.DataMigration.AdvisorsAssistant.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Rhyous.DataMigration.AdvisorsAssistant.Models
{
    public partial interface IAdvisorsAssistantContextProcedures
    {
        Task<List<sp_AACalEventDataGetByCriteriaResult>> sp_AACalEventDataGetByCriteriaAsync(int? iKeyUser, string sReturnOption, DateTime? dDateRangeStart, DateTime? dDateRangeEnd, bool? bSearchAllCalendars, bool? bSearchAllTypes, bool? bSearchAllSubTypes, bool? bSearchSpecifiedWithName, bool? bNoWorkFlows, bool? bHasWithName, bool? bDoesNotHaveAWithName, int? iPriority, string sKeyWord, bool? bExcludeRecurringTasks, int? iRecurOption, string cStatus, bool? bNoOldappointments, DateTime? dChangeRangeBegin, DateTime? dchangeRangeEnd, DateTime? dDueRangeBegin, DateTime? dDueRangeEnd, bool? bOnlyWorkFlows, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_AACalEventDataGetByCriteriaSubCallsResult>> sp_AACalEventDataGetByCriteriaSubCallsAsync(int? iKeyUser, string cCall, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_AACalEventDataGetByCriteriaWithNameResult>> sp_AACalEventDataGetByCriteriaWithNameAsync(int? iKeyUser, string sReturnOption, DateTime? dDateRangeStart, DateTime? dDateRangeEnd, bool? bSearchAllCalendars, bool? bSearchAllTypes, bool? bSearchAllSubTypes, bool? bSearchSpecifiedWithName, bool? bNoWorkFlows, bool? bHasWithName, bool? bDoesNotHaveAWithName, int? iPriority, string sKeyWord, bool? bExcludeRecurringTasks, int? iRecurOption, string cStatus, bool? bNoOldappointments, DateTime? dChangeRangeBegin, DateTime? dchangeRangeEnd, DateTime? dDueRangeBegin, DateTime? dDueRangeEnd, bool? bOnlyWorkFlows, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_AACalEventPopulateEventTempKeysAsync(int? iKeyUser, bool? bAllCalendarKeys, bool? bAllTypes, bool? bAllSubTypes, int? iKeyWithName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ActiveDLFServiceModulesResult>> sp_ActiveDLFServiceModulesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_AddFileHistoryDetailAsync(int? iKeyLog, string cContact, string cHolding, DateTime? dFileDate, int? iCodeDetail, string cUserName, string cUserInitials, OutputParameter<int?> iReturnKeyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_AddIndexPriceAsync(int? indexkey, decimal? close, decimal? high, decimal? low, DateTime? date, int? module, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_AddIndexPrice2Async(int? indexkey, decimal? close, decimal? high, decimal? low, DateTime? date, string cDataStamp, bool? overwrite, OutputParameter<bool?> priceInserted, OutputParameter<bool?> priceOverwritten, OutputParameter<bool?> priceFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_AddNameToHouseholdResult>> sp_AddNameToHouseholdAsync(int? iHouseholdKeyID, int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_AddNavAsync(int? symbolkey, decimal? close, decimal? high, decimal? low, int? volume, DateTime? date, int? module, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_AddNav2Async(int? symbolkey, decimal? close, decimal? high, decimal? low, int? volume, DateTime? date, int? module, string cDataStamp, bool? overwrite, OutputParameter<bool?> priceInserted, OutputParameter<bool?> priceOverwritten, OutputParameter<bool?> priceFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_AddNavAndIndexFromTempNavTableAsync(string cUserInit, bool? bDeleteAfterProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_AddNavWithPoolAsync(int? symbolkey, decimal? close, decimal? high, decimal? low, int? volume, DateTime? date, int? module, decimal? nPoolFactor, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_AddNavWithPoolAndFileAsync(int? symbolkey, decimal? close, decimal? high, decimal? low, int? volume, DateTime? date, int? module, decimal? nPoolFactor, string cDataStamp, int? iKeyFile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_AddOutlookEntryIDCalendarRowResult>> sp_AddOutlookEntryIDCalendarRowAsync(int? iStoreKeyID, int? iKeyLink, string cEntryID, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_AddOutlookEntryIDNameRowResult>> sp_AddOutlookEntryIDNameRowAsync(int? iStoreKeyID, int? iKeyLink, string cEntryID, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_AddRemoveSecondaryProducerOnNameAsync(int? iKeyName, int? iKeyProducer, string cDataStamp, bool? bRemove, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_AllCatalogDropResult>> sp_AllCatalogDropAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_AnalyzeInvestmentDataResult>> sp_AnalyzeInvestmentDataAsync(int? iKeyInvestment, bool? bCheckLotUnitsVsInvestmentUnits, bool? bCheckInvestmentLiquidatedNonZeroUnits, bool? bCheckTransactionsBeforeInit, bool? bCheckFirstTransactionNotAPurchase, bool? bCheckFirstTransactionNotAPurchaseCash, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_API_CalculateInvestmentValueAsync(int? InvestmentKey, DateTime? ValueDate, int? SymbolKey, OutputParameter<decimal?> InvestmentValue, OutputParameter<decimal?> InvestmentUnits, OutputParameter<decimal?> InvestmentUnitPrice, OutputParameter<DateTime?> InvestmentPriceDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_API_CheckNamePrimariesAsync(Guid? gName, Guid? gPrimaryAddress, Guid? gPrimaryPhone, Guid? gPrimaryEmailAddress, Guid? gPrimaryWebAddress, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_API_GetInvestmentDataResult>> sp_API_GetInvestmentDataAsync(string AccountKeyList, bool? IncludeLiquidatedInvestments, bool? IncludeZeroUnitsInvestments, bool? IncludeTransactions, DateTime? TransactionOnOrAfter, DateTime? TransactionOnOrBefore, DateTime? ValueHistoryOnOrAfter, DateTime? ValueHistoryOnOrBefore, bool? CalculateMissingValueHistory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ArchiveAttachmentAsync(string cArchivedFileName, string cUserInitials, int? iFileSourceCode, int? iFileCategory, DateTime? tEmail, int? iFileSize, string cSubject, int? iNoteKeyID, int? iContactKeyID, string cUserName, string cClientVersion, string cDatabaseVersion, OutputParameter<bool?> bArchivedSuccessfully, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ArchiveEmailAsync(string cEmailAddress, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, int? iCommit, OutputParameter<int?> iArchiveResult, OutputParameter<string> cArchivedClientNames, OutputParameter<string> cNameList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ArchiveEmail6Async(string cEmailAddress, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, OutputParameter<bool?> bArchivedSuccessfully, OutputParameter<string> cArchivedClientNames, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ArchiveEmail7Async(string cEmailAddress, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, int? iCommit, OutputParameter<int?> iArchiveResult, OutputParameter<string> cArchivedClientNames, OutputParameter<string> cNameList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ArchiveEmail7CommitUpdatesAsync(string cEmailAddress, int? iEmailAddressKeyID, int? iNameKeyID, int? iCheckKey, int? iTopicKeyID, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, string cFullName, string cPathName, int? iCommit, OutputParameter<int?> iArchiveResult, OutputParameter<string> cArchivedClientNames, OutputParameter<string> cNameList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ArchiveEmail7ToInputNameIDAsync(int? iNameKeyID, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, int? iCommit, OutputParameter<int?> iArchiveResult, OutputParameter<string> cArchivedClientNames, OutputParameter<string> cNameList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ArchiveEmailDictationAsync(string cPhone, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, string cInputFirstName, string cInputLastName, int? iCodeNoteTopic, string cTopicDescription, OutputParameter<bool?> bArchivedSuccessfully, OutputParameter<string> cArchivedClientNames, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ArchiveEmailMobileAssistAsync(string cPhone, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, string cMobileAssistFirstName, string cMobileAssistLastName, OutputParameter<bool?> bArchivedSuccessfully, OutputParameter<string> cArchivedClientNames, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ArchiveEmailMyCopyTalkAsync(string cPhone, string cViewName, string cUserInitials, string cNoteText, int? iStoreKeyID, string cEntryID, int? iActionCode, DateTime? tSent, DateTime? tLastSynch, string cSubject, string cInputFirstName, string cInputLastName, OutputParameter<bool?> bArchivedSuccessfully, OutputParameter<string> cArchivedClientNames, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_BackupAllDatabasesResult>> sp_BackupAllDatabasesAsync(string Path, string Type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_BenchMarkReportDatasetAccountLevelResult>> sp_BenchMarkReportDatasetAccountLevelAsync(int? iKeyReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_BenchMarkReportDatasetNvstAndAcctLevelResult>> sp_BenchMarkReportDatasetNvstAndAcctLevelAsync(int? iKeyReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_BenchMarkReportDatasetNvstLevelResult>> sp_BenchMarkReportDatasetNvstLevelAsync(int? iKeyReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_BenchMarkReportDatasetTopLevelResult>> sp_BenchMarkReportDatasetTopLevelAsync(int? iKeyReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_BenchMarkReportDatasetTopValuationResult>> sp_BenchMarkReportDatasetTopValuationAsync(int? iKeyReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_BenchMarkReportRetrievalResult>> sp_BenchMarkReportRetrievalAsync(DateTime? dSart, DateTime? dEnd, int? iKeyTopAccount, int? ikeyTopName, int? iKeytopHousehold, int? iKeyTopSector, int? iKeytopAdvisor, int? ikeyIndex1, int? iKeyIndex2, string cPeriod, bool? bIncludeFees, bool? bIncludeExpenses, decimal? yStartingValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_BlankZeroValueRecordsResult>> sp_BlankZeroValueRecordsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CalculateAndUpdateMarketIndexByDateRangeAsync(int? iKeyIndex, DateTime? dFrom, DateTime? dTo, string cWhoChangeStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CalculateAndUpdateMarketIndexReturnsAsync(int? iKeyIndexPrice, string cDatastamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CalculateCoverageNetBenefitAsync(int? iFundingOption, int? iBenefitOption, decimal? nCoverageBaseBenefit, decimal? nCoverageLoans, decimal? nNetCashValue, decimal? nTotalPremiumsToDate, int? iCoverageClass, decimal? yCashValue, int? iDividendOption, OutputParameter<decimal?> nReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CalculateCoverageNetCashValueResult>> sp_CalculateCoverageNetCashValueAsync(int? iFundingOption, decimal? nPolicyBaseCashValue, decimal? yFundingAccountMarketValue, decimal? nPolicyOtherValue, decimal? nPolicyLoans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CalculateCoverageNetCashValueInternalAsync(int? iFundingOption, decimal? nCoverageBaseCashValue, decimal? yFundingAccountMarketValue, decimal? nCoverageOtherValue, decimal? nCoverageLoans, OutputParameter<decimal?> nNetCashValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CalculateMarketIndexReturnInternalAsync(int? iKeyIndex, DateTime? dEndPeriod, DateTime? dStartPeriod, OutputParameter<decimal?> nReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CalculatePolicyNetCashValueResult>> sp_CalculatePolicyNetCashValueAsync(int? iFundingOption, decimal? nPolicyBaseCashValue, decimal? yFundingAccountMarketValue, decimal? nPolicyOtherValue, decimal? nPolicyLoans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CalculatePolicyNetCashValueInternalAsync(int? iFundingOption, decimal? nPolicyBaseCashValue, decimal? yFundingAccountMarketValue, decimal? nPolicyOtherValue, decimal? nPolicyLoans, OutputParameter<decimal?> nNetCashValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CalculatePremiumDueDatesResult>> sp_CalculatePremiumDueDatesAsync(DateTime? dBase, DateTime? dStart, DateTime? dEnd, int? iTimesPerYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CalculatePremiumDueDatesWithBlackoutsResult>> sp_CalculatePremiumDueDatesWithBlackoutsAsync(DateTime? dBase, DateTime? dStart, DateTime? dEnd, int? iTimesPerYear, int? iRateTableKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CalculateSecurityReturnResult>> sp_CalculateSecurityReturnAsync(int? iKeySecurity, DateTime? dEndPeriod, DateTime? dStartPeriod, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CalculateSecurityReturnInternalAsync(int? iKeySecurity, DateTime? dEndPeriod, DateTime? dStartPeriod, OutputParameter<decimal?> nReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CalEventGetActiveEventListResult>> sp_CalEventGetActiveEventListAsync(int? iCalUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CalEventGetActiveEventNameListResult>> sp_CalEventGetActiveEventNameListAsync(int? iCalUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CalEventLogDeleteAsync(int? NewTempDataKeyID, OutputParameter<int?> ProcessLogKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CalEventPreLogDeleteAsync(int? EventKeyID, int? Instance, string UserInitials, int? UserKeyID, string ContextMessage, string ProgramVersion, OutputParameter<int?> NewTempDataKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CalEventsGetEarlierEventsResult>> sp_CalEventsGetEarlierEventsAsync(int? iCalUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CalEventsRolloverResult>> sp_CalEventsRolloverAsync(int? iCalUserKeyID, int? iDaysToRollover, Guid? GUID, OutputParameter<int?> iEventRolloverCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CalEventsRolloverByWorkflowResult>> sp_CalEventsRolloverByWorkflowAsync(int? iWorkflowKeyID, int? iDaysToRollover, Guid? GUID, OutputParameter<int?> iEventRolloverCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CAMImportKeyAsync(Guid? gCamID, string cLastName, string cfirstName, string cInvType, DateTime? dDob, string cStreet, int? iKeyProducer, string cDataStamp, OutputParameter<int?> iKeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CAMRetrieveInfoForCaseResult>> sp_CAMRetrieveInfoForCaseAsync(int? iKeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CAMSetupEmployerAsync(int? iKeyClient, string cName, string cURL, string cStreet, string cCity, string cState, string czip, int? ikeyProducer, OutputParameter<int?> iKeyEmployer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CheckAACALEVENTZeroRecordAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CheckCalendarEventResult>> sp_CheckCalendarEventAsync(int? iCalUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CheckCalendarEventCountResult>> sp_CheckCalendarEventCountAsync(int? iCalUserKeyID, DateTime? dCurrentDateTime, int? iNumberOfMinutesToCheckInAdvance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CheckCLIMARKUserResult>> sp_CheckCLIMARKUserAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CheckLinkReciprocalAsync(int? iSourceNameKeyID, int? iTargetNameKeyID, int? iRelationCodeKeyID, string sCurrentUserInit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CheckLinkReciprocal2Async(int? iSourceNameKeyID, int? iTargetNameKeyID, int? iNewRelationCodeKeyID, int? iOldRelationCodeKeyID, string sCurrentUserInit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CheckMessageAndEventCountResult>> sp_CheckMessageAndEventCountAsync(int? iUserKeyID, int? iCalUserKeyID, DateTime? dCurrentDateTime, int? iNumberOfMinutesToCheckInAdvance, string cComputerName, DateTime? dStationTime, OutputParameter<int?> iMessageCount, OutputParameter<int?> iEventCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CheckNameFaxAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CheckNamePrimaryAddressAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CheckNamePrimaryEmailAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CheckNamePrimaryPhoneAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CheckNamePrimaryWebsiteAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CheckZipCodeAsync(string cZip, string cCity, string cState, string cCounty, string cCountry, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CombineAccountAsync(int? iKeySurvivingAccount, int? iKeyCombiningAccount, string cUserStamp, string cProgramVersion, bool? bMatchingUnassignedAccountToExistingAccount, OutputParameter<string> cReturnMessage, OutputParameter<bool?> bSuccess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CombineAccountCombineRelationsAsync(int? iKeySurvivingAccount, int? iKeyCombiningAccount, int? iKeyLog, string cUserStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CombineAccountProducerInfoAsync(int? iKeySource, int? iKeyTarget, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CommCalcForCoverageResult>> sp_CommCalcForCoverageAsync(int? iCoverageKeyID, DateTime? dPeriodBegin, DateTime? dPeriodEnd, bool? bIgnoreCommissionPaidThruDates, Guid? gTempGuid, string cUserInitials, bool? bReportCalculationErrorReason_CoverageSetToNotCalculate, bool? bReportCalculationErrorReason_CommissionsBeginAfterCalculationPeriod, bool? bReportCalculationErrorReason_CommissionsEndBeforeCalculationPeriod, bool? bReportCalculationErrorReason_CommissionsPaidThruCalculationPeriod, bool? bReportCalculationErrorReason_NoPremiumDueDates, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcForFixedAmountAgencyLevelAsync(DateTime? dPeriodBegin, DateTime? dPeriodEnd, int? iCoverageKeyID, int? iRateTableSetKeyID, int? iAgencyKeyID, int? iCodePolicyPaymentMode, int? iCodePostingOption, DateTime? dEffective, int? iPremiumDueDay, DateTime? dRenewalBegin, DateTime? dTermination, DateTime? dExpiration, DateTime? dCommissionsBegin, DateTime? dCommissionsEnd, DateTime? dCommissionsPaidThru, bool? bIgnoreCommissionPaidThruDates, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bFixedAmountTransactionsAddedOrFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcForFixedAmountManagerLevelAsync(DateTime? dPeriodBegin, DateTime? dPeriodEnd, int? iCoverageKeyID, int? iRateTableSetKeyID, int? iCodePolicyPaymentMode, int? iCodePostingOption, int? iManagerKeyID, bool? bDirectPayFromPolicy, int? iCodeCommissionLevel, DateTime? dEffective, int? iPremiumDueDay, DateTime? dRenewalBegin, DateTime? dTermination, DateTime? dExpiration, DateTime? dCommissionsBegin, DateTime? dCommissionsEnd, DateTime? dCommissionsPaidThru, bool? bIgnoreCommissionPaidThruDates, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bFixedAmountTransactionsAddedOrFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcForFixedAmountOneLevelAsync(int? iFixedAmountKeyID, int? iTimesPerYear, int? iAdvanceMonths, DateTime? dPeriodBegin, DateTime? dPeriodEnd, int? iCoverageKeyID, int? iRateTableSetKeyID, int? iPayeeKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPayFromPolicy, int? iProducerSlot, DateTime? dEffective, int? iPremiumDueDay, DateTime? dRenewalBegin, DateTime? dTermination, DateTime? dExpiration, DateTime? dCommissionsBegin, DateTime? dCommissionsEnd, DateTime? dCommissionsPaidThru, bool? bIgnoreCommissionPaidThruDates, int? iCodeCommissionLevel, int? iCodeFixedAmountMode, int? iCodePostingOption, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bFixedAmountTransactionsAddedOrFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcForFixedAmountProducerLevelAsync(DateTime? dPeriodBegin, DateTime? dPeriodEnd, int? iCoverageKeyID, int? iRateTableSetKeyID, int? iCodePolicyPaymentMode, int? iCodePostingOption, int? iProducerKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPayFromPolicy, int? iProducerSlot, DateTime? dEffective, int? iPremiumDueDay, DateTime? dRenewalBegin, DateTime? dTermination, DateTime? dExpiration, DateTime? dCommissionsBegin, DateTime? dCommissionsEnd, DateTime? dCommissionsPaidThru, bool? bIgnoreCommissionPaidThruDates, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bFixedAmountTransactionsAddedOrFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CommCalcForParticipantAgencyLevelResult>> sp_CommCalcForParticipantAgencyLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iAgencyKeyID, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, Guid? gTempGuid, string cUserInitials, int? iParticipants, int? iCodePremiumPaymentMode, int? iCodeRateTablePostingOption_Participant, int? iCodeRateTablePostingOption_Rider, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CommCalcForParticipantManagerLevelResult>> sp_CommCalcForParticipantManagerLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iCodeCommissionLevel, int? iManagerKeyID, bool? bDirectPayFromPolicy, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, Guid? gTempGuid, string cUserInitials, int? iParticipants, int? iCodePremiumPaymentMode, int? iCodeRateTablePostingOption_Participant, int? iCodeRateTablePostingOption_Rider, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CommCalcForParticipantOneLevelResult>> sp_CommCalcForParticipantOneLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iPayeeKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPay, bool? bDirectPayDeductFromAgencyNet, int? iProducerSlot, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, int? iPremiumYear, int? iCodeCommissionLevel, int? iCodeCommissionParticipantRateApplyTo, Guid? gTempGuid, string cUserInitials, int? iParticipants, int? iCodePremiumPaymentMode, decimal? yRatePerParticipant, decimal? nRatePctOfAgencyCommission, int? iCodeRateTablePostingOption_Participant, int? iCodeRateTablePostingOption_Rider, bool? bPrintDebugMessages, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CommCalcForParticipantProducerLevelResult>> sp_CommCalcForParticipantProducerLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iProducerKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPayFromPolicy, int? iProducerSlot, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, Guid? gTempGuid, string cUserInitials, int? iParticipants, int? iCodePremiumPaymentMode, int? iCodeRateTablePostingOption_Participant, int? iCodeRateTablePostingOption_Rider, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcForPremiumAgencyLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, decimal? yModalPremiumBase, decimal? yModalPremiumExcess1, decimal? yModalPremiumExcess2, int? iCodePremiumPaymentMode, int? iRateTableSetKeyID, int? iCodeRateTablePostingOption_Override1, int? iCodeRateTablePostingOption_Override2, int? iCodeRateTablePostingOption_Excess1, int? iCodeRateTablePostingOption_Excess2, int? iCodeRateTablePostingOption_Rider, int? iAgencyKeyID, DateTime? dPremiumPaymentDate, int? iCoverageYearForCurrentDueDate, DateTime? dEffective, DateTime? dRenewalBegin, Guid? gTempGuid, string cUserInitials, string cTransactionComment, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<decimal?> yTotalDue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcForPremiumManagerLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, decimal? yModalPremiumBase, decimal? yModalPremiumExcess1, decimal? yModalPremiumExcess2, int? iCodePremiumPaymentMode, int? iRateTableSetKeyID, int? iCodeCommissionLevel, int? iCodeRateTablePostingOption_Override1, int? iCodeRateTablePostingOption_Override2, int? iCodeRateTablePostingOption_Excess1, int? iCodeRateTablePostingOption_Excess2, int? iCodeRateTablePostingOption_Rider, int? iManagerKeyID, bool? bDirectPayFromPolicy, int? iProducer1KeyID, int? iProducer2KeyID, int? iProducer3KeyID, int? iProducer4KeyID, DateTime? dPremiumPaymentDate, int? iCoverageYearForCurrentDueDate, DateTime? dEffective, DateTime? dRenewalBegin, Guid? gTempGuid, string cUserInitials, string cTransactionComment, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<decimal?> yTotalDue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcForPremiumOneLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iPayeeKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPay, bool? bDirectPayDeductFromAgencyNet, int? iProducerSlot, DateTime? dPremiumPaymentDate, DateTime? dAdvancePeriodEnd, int? iCoverageYearForCurrentDueDate, int? iPremiumYear, int? iCodeCommissionLevel, int? iCodeCommissionPremiumRateApplyTo, int? iPremiumRateApplyToSpecificProducerKeyID, int? iCodePremiumPaymentMode, Guid? gTempGuid, string cUserInitials, decimal? yModalPremiumBase, decimal? yModalPremiumExcess1, decimal? yModalPremiumExcess2, decimal? nRatePremiumBase, decimal? nRatePremiumExcess1, decimal? nRatePremiumExcess2, decimal? nRatePremiumBaseOverride1, decimal? nRatePremiumExcess1Override1, decimal? nRatePremiumExcess2Override1, decimal? nRatePremiumBaseOverride2, decimal? nRatePremiumExcess1Override2, decimal? nRatePremiumExcess2Override2, int? iCodeRateTablePostingOption_Override1, int? iCodeRateTablePostingOption_Override2, int? iCodeRateTablePostingOption_Excess1, int? iCodeRateTablePostingOption_Excess2, int? iCodeRateTablePostingOption_Rider, string cTransactionComment, bool? bPrintDebugMessages, OutputParameter<decimal?> yTotalDue, OutputParameter<int?> iHighestDueKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcForPremiumOneLevelOneTypeAsync(int? iCoverageKeyID, int? iRiderKeyID, int? iRateTableSetKeyID, int? iPayeeKeyID, decimal? nSplitFactor, bool? bDirectPay, bool? bDirectPayDeductFromAgencyNet, int? iProducerSlot, DateTime? dPremiumPaymentDate, DateTime? dAdvancePeriodEnd, int? iCoverageYearForCurrentDueDate, int? iPremiumYear, int? iCodeCommissionLevel, int? iCodeCommissionType, string cCommissionTypeDescription, int? iCodeOverride, string cOverrideDescription, int? iCodeCommissionPremiumRateApplyTo, int? iPremiumRateApplyToSpecificProducerKeyID, int? iCodePremiumPaymentMode, Guid? gTempGuid, string cUserInitials, decimal? yModalPremium, decimal? nRatePremium, int? iCodeRateTablePostingOption_Override1, int? iCodeRateTablePostingOption_Override2, int? iCodeRateTablePostingOption_Excess1, int? iCodeRateTablePostingOption_Excess2, int? iCodeRateTablePostingOption_Rider, string cTransactionComment, bool? bPrintDebugMessages, OutputParameter<decimal?> yDue, OutputParameter<int?> iDueKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcForPremiumProducerLevelAsync(int? iCoverageKeyID, int? iRiderKeyID, decimal? yModalPremiumBase, decimal? yModalPremiumExcess1, decimal? yModalPremiumExcess2, int? iCodePremiumPaymentMode, int? iRateTableSetKeyID, int? iCodeRateTablePostingOption_Override1, int? iCodeRateTablePostingOption_Override2, int? iCodeRateTablePostingOption_Excess1, int? iCodeRateTablePostingOption_Excess2, int? iCodeRateTablePostingOption_Rider, int? iProducerKeyID, int? iProducerSlot, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPayFromPolicy, DateTime? dPremiumPaymentDate, int? iCoverageYearForCurrentDueDate, DateTime? dEffective, DateTime? dRenewalBegin, Guid? gTempGuid, string cUserInitials, string cTransactionComment, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<decimal?> yTotalDue, OutputParameter<int?> iHighestDueKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CommCalcForTrailerAgencyLevelResult>> sp_CommCalcForTrailerAgencyLevelAsync(int? iCoverageKeyID, int? iRateTableSetKeyID, int? iAgencyKeyID, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, decimal? yCashValue, int? iCodePostingOption_Trailer, int? iRateTablePostingOption_Rider, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CommCalcForTrailerManagerLevelResult>> sp_CommCalcForTrailerManagerLevelAsync(int? iCoverageKeyID, int? iRateTableSetKeyID, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, decimal? yCashValue, int? iCodePostingOption_Trailer, int? iRateTablePostingOption_Rider, int? iCodeCommissionLevel, int? iManagerKeyID, bool? bDirectPayFromPolicy, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CommCalcForTrailerOneLevelResult>> sp_CommCalcForTrailerOneLevelAsync(int? iCoverageKeyID, int? iRateTableSetKeyID, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, int? iPremiumYear, decimal? yCashValue, decimal? nTrailerRate, int? iCodeTrailerMode, int? iCodePostingOption_Trailer, int? iRateTablePostingOption_Rider, int? iPayeeKeyID, decimal? nProducerSplitFirstYear, decimal? nProducerSplitRenewal, bool? bDirectPayFromPolicy, bool? bDirectPayDeductFromAgencyNet, int? iProducerSlot, int? iCodeCommissionLevel, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CommCalcForTrailerProducerLevelResult>> sp_CommCalcForTrailerProducerLevelAsync(int? iCoverageKeyID, int? iRateTableSetKeyID, DateTime? dDueDate, int? iCoverageYearForCurrentDueDate, decimal? yCashValue, int? iCodePostingOption_Trailer, int? iRateTablePostingOption_Rider, int? iProducerKeyID, decimal? nSplitFirstYear, decimal? nSplitRenewal, bool? bDirectPayFromPolicy, int? iProducerSlot, Guid? gTempGuid, string cUserInitials, bool? bPrintDebugMessages, OutputParameter<bool?> bAttemptedToFindRateOfSomeKind, OutputParameter<bool?> bNonZeroRateOfSomeKindFoundForThisCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcNetDueAsync(int? iKeyTransaction, bool? bPrintDebugMessages, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcTransactionTotalsAsync(int? iTransactionKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommCalcTransactionTotalsOutputAsync(int? iTransactionKeyID, DateTime? dDueRangeBegin, DateTime? dDueRangeEnd, DateTime? dPaidRangeBegin, DateTime? dPaidRangeEnd, OutputParameter<decimal?> yAgencyGrossDue, OutputParameter<decimal?> yAgencyGrossPaid, OutputParameter<decimal?> yAgencyDistributionsDue, OutputParameter<decimal?> yAgencyDistributionsPaid, OutputParameter<decimal?> yAgencyNetDue, OutputParameter<decimal?> yAgencyNetPaid, OutputParameter<decimal?> yProducerGrossDue, OutputParameter<decimal?> yProducerGrossPaid, OutputParameter<decimal?> yProducerDirectDue, OutputParameter<decimal?> yProducerDirectPaid, OutputParameter<decimal?> yManagerGrossDue, OutputParameter<decimal?> yManagerGrossPaid, OutputParameter<decimal?> yManagerDirectDue, OutputParameter<decimal?> yManagerDirectPaid, OutputParameter<decimal?> yCompanyNetDue, OutputParameter<decimal?> yCompanyNetPaid, OutputParameter<decimal?> yAdjustmentDue, OutputParameter<decimal?> yAdjustmentPaid, OutputParameter<DateTime?> dPaidDateMinimum, OutputParameter<DateTime?> dPaidDateMaximum, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommGetAdvancedFixedAmountAsync(DateTime? dDueDate, DateTime? dEffective, DateTime? dRenewalBegin, int? iCodeFixedAmountMode, int? iAdvanceMonths, int? iCodeCommissionLevel, bool? bPrintDebugMessages, OutputParameter<decimal?> yFixedAmount, OutputParameter<string> cTransactionComment, OutputParameter<DateTime?> dAdvancePeriodEnd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CommGetAdvancedPremiumAsync(DateTime? dDueDate, DateTime? dEffective, DateTime? dRenewalBegin, int? iCodePremiumPaymentMode, int? iPremiumAdvanceMonths, int? iCoverageKeyID, string cCommentLevel, bool? bPrintDebugMessages, OutputParameter<decimal?> yModalPremiumBase, OutputParameter<decimal?> yModalPremiumExcess1, OutputParameter<decimal?> yModalPremiumExcess2, OutputParameter<string> cTransactionComment, OutputParameter<DateTime?> dAdvancePeriodEnd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ConversionRefactorGNMAAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CopyAddressToHouseholdResult>> sp_CopyAddressToHouseholdAsync(int? iKeyHousehold, int? iKeyAddress, int? iKeyProcessLog, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CopyNameTypeToHouseholdAsync(int? iKeyHousehold, int? iCodeNameType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CopyPhoneToHouseholdResult>> sp_CopyPhoneToHouseholdAsync(int? iKeyHousehold, int? iKeyPhone, int? iKeyProcessLog, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CopySecuityPricesAsync(int? iKeySourceSymbol, int? iKeyTargetSymbol, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CountCodeUsageAsync(string cCodeType, int? iKeyCode, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CountProducerGroupUsageAsync(int? iKeyProducerGroup, OutputParameter<int?> iWorkflowCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CountProducerReferencesAsync(int? iKeyPdcr, bool? bCheckProducersName, OutputParameter<int?> iNames, OutputParameter<int?> iPolicies, OutputParameter<int?> iAccounts, OutputParameter<int?> iCommissionTransactions, OutputParameter<int?> iCommissionRateTables, OutputParameter<bool?> bHasPlaceholder, OutputParameter<bool?> bProducerIsDefaultManager, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CreateLetterLogFromTempDataAsync(int? iClientID, int? iTempID, int? iLetterLogNoteTopicKeyID, string sWhoChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CreateNameFilterAsync(int? UserKey, string NameKeyList, string ViewCommand, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CreatePersonalContactCalendarEventFromTempDataResult>> sp_CreatePersonalContactCalendarEventFromTempDataAsync(int? iClientID, int? iTempID, string sWhoChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_CreateSSOTokenAsync(string cUserID, OutputParameter<Guid?> gToken, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_CreateSSOTokenToNameResult>> sp_CreateSSOTokenToNameAsync(string cUserID, int? ContactID, OutputParameter<Guid?> gToken, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DatabaseGetStatisticsResult>> sp_DatabaseGetStatisticsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DatabaseReindexAllTablesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DatabaseReindexDLFTablesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DatabaseReindexOneTableAsync(string cTable, string cIndex, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DatabaseShrinkAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DatabaseTruncateTransactionLogAsync(bool? bShrinkLogCompletely, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DatabaseUpgradeInitResult>> sp_DatabaseUpgradeInitAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DatabaseUpgradeResetResult>> sp_DatabaseUpgradeResetAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DBUGetTemplateBackupsResult>> sp_DBUGetTemplateBackupsAsync(string cPath, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DeceasedCodeGetAsync(int? codeKeyID, OutputParameter<bool?> deceased, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DeceasedCodeSetAsync(int? codeKeyID, bool? deceased, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarIDAsync(string cEntryID, int? iKeyStore, int? iKeyCalendar, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarID_2Async(string cEntryID, int? iKeyStore, int? iKeyCalendar, string UserInitials, int? UserKeyID, string ContextMessage, string ProgramVersion, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarIDAndGuIDsAsync(string cEntryID, int? iKeyStore, int? iKeyCalendar, string guidEvent, string guidEventCheck, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DeleteCalendarEventByOutlookEntryIDAndStoreKeyIDAndCalendarIDAndGuIDs_2Async(string cEntryID, int? iKeyStore, int? iKeyCalendar, string guidEvent, string guidEventCheck, string UserInitials, int? UserKeyID, string ContextMessage, string ProgramVersion, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DeleteCalEventsByUserResult>> sp_DeleteCalEventsByUserAsync(int? iCalenderKeyID, bool? bDeleteCompletedEvents, int? iKeyIDToDeleteFrom, string UserInitials, int? UserKeyID, string DeleteCalendarEventContextMessage, string ProgramVersion, OutputParameter<int?> iLowestRemainingKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DeleteNameFilterAsync(int? UserKey, string ViewCommand, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DeleteOldPolicyPositionsAsync(int? iCoverageKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DeleteProducerReferencesByProducerAsync(int? iKeyPdcr, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DeleteWorkFlowAsync(int? iKeyWorkflow, bool? bDeleteNotes, string UserInitials, int? UserKeyID, string ProgramVersion, string DeleteCalendarEventContextMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFAccountAddToNameAsync(int? iNameKeyID, string cAccountnum, string cInvestorTaxID, DateTime? dInvestorDOB, int? iKeyModule, int? iKeyRep, string cDataStamp, string cRegistration, string cTable, DateTime? dRecord, int? iCodeStatus, int? iCodeBasisType, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, int? iKeyFile, OutputParameter<int?> iKeyAccount, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFAccountAddToPlaceholderAsync(string cAccountnum, string cInvestorTaxID, DateTime? dInvestorDOB, int? iKeyModule, int? iKeyRep, string cDataStamp, string cRegistration, string cTable, DateTime? dRecord, int? iCodeStatus, int? iCodeBasisType, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, int? iKeyFile, OutputParameter<int?> iKeyAccount, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFAccountUpdateAsync(int? iKeyModule, Guid? gUidDlf, string cTable, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFAccountUpdateFromBulkProcessAsync(int? iKeyId, int? iKeyModule, string cTable, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFAccountUpdateSetAsync(int? ikeyhaha, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFAddCoverageAsync(int? iOwnerNameKeyID, int? iPrimaryInsuredNameKeyID, int? iKeyPolicy, int? iKeySeries, int? iKeyFundingAccount, string cDataStamp, int? iCodeRecordCreationSource, OutputParameter<int?> iKeyCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFAddDownloadInfoNameAsync(string cTaxidInvestor, string cLastname, string cfirstname, string cMiddle, string cPrefix, string cSuffix, bool? bOrganization, int? iCodeGender, int? iCodeNameType, int? iCodeRecordSource, int? iCodeRelationType, DateTime? dDOB, string cDataStamp, int? iKeyDLInfoRegistration, Guid? gUidParty, string cDownloadID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFAdditionsByFileQueryResult>> sp_DLFAdditionsByFileQueryAsync(int? iKeyFile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFAddNameAsync(int? iKeyProducer1InAA, string cTaxidInvestor, string cLastname, string cfirstname, string cMiddle, string cPrefix, string cSuffix, string cDownloadID, int? iKeyModule, bool? bOrganization, int? iCodeGender, int? iCodeDefaultType, DateTime? dDOB, string cDataStamp, OutputParameter<int?> iKeyAAName, OutputParameter<int?> iKeyAAFlexName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFAddNewSecuritiesBySetsResult>> sp_DLFAddNewSecuritiesBySetsAsync(int? iKeyProcess, string cTable, int? ikeyModule, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFALBPrecheckPositionPricesResult>> sp_DLFALBPrecheckPositionPricesAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFAlbReplicationPreCheckInvestorsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFAppendDLFFileAsync(int? KeyID, string Content, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFAppendDLFFile2Async(int? KeyID, byte[] Content, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfAutoAddSecurityResult>> sp_dlfAutoAddSecurityAsync(string cSymbol, string cCusip, string cCusipExt, string cAlternateID, string cTableName, int? iProcessKeyID, string cDataStamp, int? iKeyModule, string cModule, OutputParameter<int?> iKeyOutput, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFBalanceCusipsAndSymbolsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFBulkPositionAccountPreparationAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFBulkPositionAddAccountsResult>> sp_DLFBulkPositionAddAccountsAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iTotalToAdd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFBulkPositionAddNvstResult>> sp_DLFBulkPositionAddNvstAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iTotalToAdd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFBulkPositionAddPositionResult>> sp_DLFBulkPositionAddPositionAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iTotalToAdd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFBulkPositionAddPriceResult>> sp_DLFBulkPositionAddPriceAsync(int? ikeyProcess, string cDataStamp, OutputParameter<int?> iTotalToAdd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFBulkPositionCodeKeyChecksResult>> sp_DLFBulkPositionCodeKeyChecksAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFBulkPositionNvstPreparationAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFBulkPositionPositionPreparationAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFBulkPositionPricePreparationAsync(int? ikeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFBulkPositionReconcileAddResult>> sp_DLFBulkPositionReconcileAddAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFBulkPositionReconcileCheckForReversalsResult>> sp_DLFBulkPositionReconcileCheckForReversalsAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFBulkPositionReconcileCountOutOfBalanceAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFBulkPositionReconcileGetPricesResult>> sp_DLFBulkPositionReconcileGetPricesAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFBulkPositionReconcilePreparationAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFBulkPositionReconcileSummPosSharesResult>> sp_DLFBulkPositionReconcileSummPosSharesAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFBulkPositionReconcileSummTransSharesResult>> sp_DLFBulkPositionReconcileSummTransSharesAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFBulkPositionReconcileValidateDatesAsync(int? iKeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFBulkPositionSecurityPreparationAsync(int? ikeyProcess, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfBulkPositionStatisticsResult>> sp_dlfBulkPositionStatisticsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFBulkPositionUpdatePositionResult>> sp_DLFBulkPositionUpdatePositionAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iTotalToUpdate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfBulkPositionUpdateResultsAsync(int? iKeyProcess, bool? bSkipUnrecognizedProducers, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFCashFlowRecordAsync(Guid? gUidTrans, bool? bCreate, int? iKeySourceType, int? iKeyIdSource, int? iKeyAccount, int? iKeyModule, decimal? yPrincipal, decimal? yWithheld, decimal? yAccruedInt, string cSourceCodePrimary, string cSourceCodeSecondary, DateTime? dTransaction, DateTime? dSettle, DateTime? dTransmittal, string cRef, string cRef2, string cDataStamp, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfCheckCodeKeysAsync(int? iKeyCodeInAA, int? iKeyCodeInDLF, string cCodeType, string cCodeDLF, string cDescriptionDLF, bool? bAutoAdd, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfCleanOutOrphanedDLFRecordsResult>> sp_dlfCleanOutOrphanedDLFRecordsAsync(string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFCleanUpOldFilesAsync(int? iKeyModule, int? iDaysOld, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFCoverageUpdateAsync(int? iKeyCoverage, int? iKeyModule, Guid? gUidDlf, string cTable, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLfCreateZeoBalanceDownloadPositionsAsync(int? iCodePositionType, int? iKeyProcess, OutputParameter<bool?> bComplete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFCreateZeroBalanceCashPositionsResult>> sp_DLFCreateZeroBalanceCashPositionsAsync(int? iCodePositionType, int? iKeyProcess, OutputParameter<bool?> bComplete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFDeleteAddressesByProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfDeleteEmailByProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFDeletePartyByProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfDeletePhonesByProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFDeleteRidersByProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFDSTPrecheckResult>> sp_DLFDSTPrecheckAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DlfDZLUpdateSecurityNamesAsync(int? iProcessKeyID, string cCusip, string cCusipExt, string cDesc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFEndUserProcessesAsync(int? ikeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DlfFCHChangeInvestmentSecurityAsync(int? iKeyInvestment, int? iKeySecurity, string cDataStamp, int? iKeyModule, int? iKeyTranType, DateTime? dTrandate, int? iKeyPlaceholderSecurity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DlfFCHCheckMoneyMarketPositionResult>> sp_DlfFCHCheckMoneyMarketPositionAsync(Guid? gUidPos, string cDataStamp, string cModule, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DlfFCHCheckMoneyMarketSecurityResult>> sp_DlfFCHCheckMoneyMarketSecurityAsync(int? iProcessKeyID, int? iKeyModule, string cDataStamp, string cModule, OutputParameter<int?> iKeySecurity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfFchPrecheckMoneyMarketPositionsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfFCHUpdateMissingPositionRepsResult>> sp_dlfFCHUpdateMissingPositionRepsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFFCHValidateAccountMoneyFundsAsync(int? ikeyAccount, Guid? gUidPos, int? ikeyProcess, string cAccountNumber, OutputParameter<bool?> bUpdated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFFCHValidateMoneyMarketNamesResult>> sp_DLFFCHValidateMoneyMarketNamesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFFIDPreProcessSplitReversalsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFFindRegistrationAsync(int? iKeyLink, string cLinkTable, string cNumber, int? iKeyModule, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iKeyPolicy, OutputParameter<int?> iKeyAccount, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFFolioFNPrecheckTransactionsResult>> sp_DLFFolioFNPrecheckTransactionsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfFoundPlanInAAAsync(string cPlanAbbreviation, string cPlanDescription, OutputParameter<int?> iReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfFoundSecurityInAAAsync(string cSymbol, string cCusip, string cCusipExt, string cAlternateID, OutputParameter<int?> iReturn, OutputParameter<bool?> bFoundInOld, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfGetAccountKeyAsync(string cAccountNum, OutputParameter<int?> iKey, OutputParameter<int?> iProducer1Key, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFGetBaseCoverageFromPolicyAsync(Guid? gPolicy, OutputParameter<Guid?> gCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DlfGetKeysToProcessResult>> sp_DlfGetKeysToProcessAsync(int? iKeyProcess, string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DlfGetKeysToValidateAccountsResult>> sp_DlfGetKeysToValidateAccountsAsync(int? iKeyProcess, string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFGetLastProcessForReportResult>> sp_DLFGetLastProcessForReportAsync(int? ikeyModule, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfGetNonValidatedAccountCountResult>> sp_dlfGetNonValidatedAccountCountAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfGetPlansNotFoundResult>> sp_dlfGetPlansNotFoundAsync(int? iProcessKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfGetPolicyKeyAsync(string cPolicyNumber, int? iKeyProducer, OutputParameter<int?> iKeyPolicy, OutputParameter<int?> iKeyBaseCoverage, OutputParameter<bool?> bMultipleMatchesFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFGetPriceKeysToProcessAsync(string cTableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFGetProcessReportStatsResult>> sp_DLFGetProcessReportStatsAsync(int? ikeyProcess, string cReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfGetRepCodesNotFoundResult>> sp_dlfGetRepCodesNotFoundAsync(int? iKeyBatch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFIBrokePrecheckTransactionsResult>> sp_DLFIBrokePrecheckTransactionsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFInitProcessKeyResult>> sp_DLFInitProcessKeyAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DlfLinkUpTransactionsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFLocateAndCancelTransactionAsync(int? iKeyCancelingTrans, string cCanceledTransactionRefID, int? iShareFlow, string cDataStamp, OutputParameter<int?> iKeyCancelledTransaction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFLPLPrecheckCashTransactionsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfModulePreProcessSecurityResult>> sp_dlfModulePreProcessSecurityAsync(string cSymbol, string cCusip, string cCusipExt, string cAlternateID, string cModule, string cDataStamp, OutputParameter<int?> iKey, OutputParameter<bool?> bFoundInOld, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFNewBizUpdateAsync(int? iKeyCoverage, Guid? gUidNewBiz, string cDataStamp, OutputParameter<bool?> bNewBizAdded, OutputParameter<int?> iProcessResult, OutputParameter<int?> iKeyNewBiz, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFNLGPrecheckPartiesResult>> sp_DLFNLGPrecheckPartiesAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFNvstUpdateFromBulkProcessAsync(int? iKeyAccount, int? iKeySymbol, int? iKeyid, string cTableName, string cDataStamp, int? iKeyModule, int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPolicyAddToNameAsync(int? iOwnerKeyID, string cOwnerTaxID, DateTime? dOwnerDOB, int? iPrimaryInsuredKeyID, int? iKeyModule, int? iKeyRep, string cDataStamp, string cRegistration, string cTable, Guid? gDLF, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iKeyPolicy, OutputParameter<int?> iKeyBaseCoverage, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPolicyAddToPlaceholderAsync(int? iKeyModule, int? iKeyRep, string cDataStamp, string cRegistration, string cOwnerTaxID, DateTime? dOwnerDOB, string cTable, Guid? gDLF, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iKeyPolicy, OutputParameter<int?> iKeyBaseCoverage, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int?> iKeyPolicyPlaceholderNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPolicyPositionUpdateAsync(int? iKeyCoverage, int? iKeyModule, string cDataStamp, DateTime? dPosition, decimal? yCashValue, decimal? yPremiumPaidToDate, decimal? ySurrenderCharge, decimal? ySurrenderValue, decimal? yLoanAmount, decimal? yLoanMax, DateTime? dPremiumPaidThru, OutputParameter<int?> iPositionKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPolicyUpdateAsync(int? iKeyPolicy, int? iKeyModule, Guid? gUidDlf, string cTable, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iKeyFundingAccountOutput, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfPopulateAccountKeysResult>> sp_dlfPopulateAccountKeysAsync(int? iKeyBatch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPopulateAccountKeysByGroupAsync(string cAccount1, string cAccount2, string cAccount3, string cAccount4, string cAccount5, string cAccount6, string cAccount7, string cAccount8, string cAccount9, string cAccount10, int? iKeyProcess, OutputParameter<int?> iAccountsNotFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPopulateAccountKeysOneRecordAsync(int? iProcessKeyID, string cAccount, OutputParameter<bool?> bAccountOkay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DlfPopulateEmptyProducerReferencesResult>> sp_DlfPopulateEmptyProducerReferencesAsync(int? ikeyProcess, int? ikeyBlankProducer, int? iStep, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfPopulatePlanKeysOneRecordAsync(int? iProcessKeyID, string cTableName, string cDataStamp, string cModule, string cPlanAbbreviation, string cPlanDescription, int? iKeyModule, OutputParameter<bool?> bPlanOK, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPopulatePolicyKeysOneRecordAsync(int? iProcessKeyID, string cPolicyNumber, int? iProducerReferenceKeyID, int? iProducerKeyIDPassedIn, OutputParameter<bool?> bPolicyOkay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPopulateProducerKeysAsync(int? ikeyProcess, bool? bAutoAddProducer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfPopulateProducerKeysOneSetAsync(int? iProcessKeyID, string cRepCode, bool? bAutoAddProducers, string cRepNameForAdding, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPopulateSecurityKeysGroupResult>> sp_DLFPopulateSecurityKeysGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, int? iKeyModule, string cDataStamp, string cModuleStamp, int? iKeyProcess, string cTableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfPopulateSecurityKeysOneRecordResult>> sp_dlfPopulateSecurityKeysOneRecordAsync(int? iProcessKeyID, string cTableName, string cDataStamp, string cModule, string cSymbol, string cCusip, string cExt, string cID, int? iKeyModule, OutputParameter<bool?> bSecurityOK, OutputParameter<int?> iKeySecurity, OutputParameter<bool?> bFoundInOld, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPositionAccountUpdateSetResult>> sp_DLFPositionAccountUpdateSetAsync(int? iKeyProcess, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPositionInvestmentUpdateSetResult>> sp_DLFPositionInvestmentUpdateSetAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPositionSecurityUpdateSetResult>> sp_DLFPositionSecurityUpdateSetAsync(int? iKeyProcess, string cDataStamp, OutputParameter<int?> iCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPreCheckAccruedInterestAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DlfPreValidateProducersResult>> sp_DlfPreValidateProducersAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPrsPopulateFundResult>> sp_DLFPrsPopulateFundAsync(int? iProcessKeyID, string cFundId, string cMgrCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPrsProcessMatrixAsync(int? iProcessKeyID, string cMatrixCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPushBalanceGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, string cModuleStamp, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedAccountsCreated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPushOneBalanceAsync(Guid? gUidBal, string cDataStamp, string cModuleStamp, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bUnassignedAccountCreated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPushOnePolicyAsync(Guid? gUidPolicy, string cDataStamp, bool? bAddPolicyOwner, bool? bAddPolicyParties, int? iCodeNameTypeForAddedNames, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bUnassignedPolicyCreated, OutputParameter<int?> iCoveragesProcessed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPushOnePolicyPositionAsync(Guid? gUidPosition, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bUnassignedPolicyCreated, OutputParameter<int?> iPolicyKeyID, OutputParameter<int?> iCoverageKeyID, OutputParameter<int?> iPositionKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPushOnePositionResult>> sp_DLFPushOnePositionAsync(Guid? gUidPos, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bUnassignedAccountCreated, OutputParameter<int?> iKeyNvst, OutputParameter<bool?> bPriceProcessed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPushOnePriceRecordAsync(int? iKeySymbol, decimal? nPrice, DateTime? dPrice, decimal? nPoolFactor, int? iKeyModule, string cDataStamp, string cCusip, bool? bUpdateToAllWithCusip, int? iKeyFile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPushOneRegistrationResult>> sp_DLFPushOneRegistrationAsync(Guid? gUidReg, string cDataStamp, bool? bAddAccountInvestor, bool? bAddAccountOtherParties, int? iCodeNameTypeForAddedNames, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<bool?> bUnassignedAccountCreated, OutputParameter<int?> iCodeProcessResult, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPushOneSecurityResult>> sp_DLFPushOneSecurityAsync(Guid? gUidSec, string cDataStamp, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bPriceProcessed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPushOneTransactionResult>> sp_DLFPushOneTransactionAsync(Guid? gUidTrans, string cDataStamp, string cModuleStamp, int? iCodeAccountStatus, int? iCodeBasisType, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResult, OutputParameter<bool?> bUnassignedAccountCreated, OutputParameter<int?> iCreatedAccountKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPushPolicyGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, bool? bAddPolicyOwner, bool? bAddPolicyParties, int? iCodeNameTypeForAddedNames, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedPolicyCreated, OutputParameter<int?> iCoveragesProcessed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFPushPolicyPositionGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedPoliciesCreated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPushPositonGroupResult>> sp_DLFPushPositonGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedAccountsCreated, OutputParameter<int?> iPricesAdded, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPushRegistrationGroupResult>> sp_DLFPushRegistrationGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, bool? bAddAccountInvestor, bool? bAddAccountOtherParties, int? iCodeNameTypeForAddedNames, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedAccountsCreated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPushSecurityGroupResult>> sp_DLFPushSecurityGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iPricesAdded, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFPushTransactionGroupResult>> sp_DLFPushTransactionGroupAsync(int? iKeyDLF1, int? iKeyDLF2, int? iKeyDLF3, int? iKeyDLF4, int? iKeyDLF5, int? iKeyDLF6, int? iKeyDLF7, int? iKeyDLF8, int? iKeyDLF9, int? iKeyDLF10, string cDataStamp, string cModuleStamp, int? iKeyBlankInDownloadProducerKeyID, int? iCodeAccountStatus, int? iCodeBasisType, bool? bCanUpdateRegistrationsFromOtherModules, bool? bSkipUnrecognizedProducers, OutputParameter<int?> iProcessResultException, OutputParameter<int?> iProcessResultNeedsAttention, OutputParameter<int?> iprocessResultProcessed, OutputParameter<int?> iUnassignedAccountsCreated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFRBCPreCheckPartiesResult>> sp_DLFRBCPreCheckPartiesAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFRBCValidateDividendPositionsResult>> sp_DLFRBCValidateDividendPositionsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFRegistrationUpdateAsync(int? iKeyModule, string cDataStamp, int? iCodeRecordCreationSource, DateTime? dRecord, string cNumber, string cRegistration, string cOwnerTaxID, DateTime? dOwnerDOB, string cInvestorTaxID, DateTime? dInvestorDOB, int? iKeyLink, string cLinkTable, int? iKeyProducerKeyID, int? iKeyBlankInDownloadProducerKeyID, bool? bCanUpdateRegistrationsFromOtherModules, OutputParameter<int?> iKeyPolicy, OutputParameter<int?> iKeyAccount, OutputParameter<int?> iKeyDownloadRegistration, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFRemoveAdditionsFromOneProcessedFileAsync(int? iKeyFile, string cRemove, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFReplicationPreValidateAccountsResult>> sp_DLFReplicationPreValidateAccountsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DlfReplicationPrevalidateSecuritiesResult>> sp_DlfReplicationPrevalidateSecuritiesAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfResetPlanKeysAsync(int? iKeyPlan, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfResetProducerKeysAsync(string cRepCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfResetSecurityKeysAsync(int? iKeySecurity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFRiderUpdateAsync(int? iKeyCoverage, Guid? gUidRider, string cDataStamp, OutputParameter<bool?> bRiderAdded, OutputParameter<int?> iProcessResult, OutputParameter<int?> iKeyRider, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFRJSPrecheckOptionsAsync(int? iKeyProcess, string cPriceTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfSecurityNeededAsync(int? iProcessKeyID, string cSymbol, string cCusip, string cCusipExt, string cAlternateID, OutputParameter<bool?> bSecurityUsed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFSecurityUpdateFromBulkProcessResult>> sp_DLFSecurityUpdateFromBulkProcessAsync(int? iKeySecurityAA, int? ikeyProcess, int? iKeyModule, string cTableName, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFSEIPrecheckAcccountSymbolsAsync(int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfSetProcessKeysForFilesAsync(int? iKeyProcess, int? ikeyfile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFSetupProcessToDeleteAsync(int? iKeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFSWBMoneyMarketTransactionsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFSWBSetMoneyMarketsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFTDAPrecheckPoolAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DlfTDAValidateINIRecordsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFTruncatePositionTempTablesAsync(int? iKeyUser, OutputParameter<bool?> bTruncate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<Sp_dlfUnRecognizedTransactionsResult>> Sp_dlfUnRecognizedTransactionsAsync(int? iKeyBatch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfUpdateAccountKeysAsync(int? iProcessKeyID, int? iKeyAccount, string cAccountNumber, bool? bNeedsValidation, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFUpdateDateOfRecordAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfUpdatePlanKeysAsync(int? iProcessKeyID, int? iKeyPlan, string cPlanAbbreviation, string cPlanDescription, bool? bNeedsValidation, int? iModuleKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfUpdatePolicyKeysAsync(int? iProcessKeyID, int? iKeyPolicy, int? iKeyBaseCoverage, string cPolicyNumber, bool? bNeedsValidation, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfUpdateRepCodeAsync(int? iProcessKeyID, string cRepCode, int? iKeyId, bool? bFlagNeedsValidation, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFUpdateSecurityResult>> sp_DLFUpdateSecurityAsync(int? iKeySecurityAA, Guid? gUidDLF, int? iKeyModule, string cTableName, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfUpdateSecurityKeysAsync(int? iProcessKeyID, int? iKeySecurity, string cSymbol, string cAlternateID, string cCusip, string cCusipExt, bool? bNeedsValidation, bool? bFoundInOld, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValdidateAddressAsync(Guid? gUidDLFAddress, int? ikeyAAName, string cDataStamp, int? iCodeRecordCreationSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValdidateDownloadInfoAddressAsync(Guid? gUidDLFAddress, Guid? gUidParty, string cDataStamp, int? iCodeRecordCreationSource, int? iKeyDlRegistration, bool? bParty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValdidateDownloadInfoEmailAsync(Guid? gUidDLFEmail, Guid? gUidParty, string cDataStamp, int? iCodeRecordCreationSource, int? iKeyDlRegistration, bool? bParty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValdidateDownloadInfoPhoneAsync(Guid? gUidDLFPhone, Guid? gUidParty, string cDataStamp, int? iCodeRecordCreationSource, int? iKeyDlRegistration, bool? bParty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValdidateEmailAsync(Guid? gUidDLFEmail, int? ikeyAAName, string cDataStamp, int? iCodeRecordCreationSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValdidatePhoneAsync(Guid? gUidDLFPhone, int? ikeyAAName, string cDataStamp, int? iCodeRecordCreationSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFValidateAccountsBySetsLeadingZerosResult>> sp_DLFValidateAccountsBySetsLeadingZerosAsync(int? iKeyProcess, string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFValidateAccountsInSetsResult>> sp_DLFValidateAccountsInSetsAsync(int? iKeyProcess, string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValidateDistributionsAndReinvestmentsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValidateDownloadModuleAsync(int? ikeyDownloadModule, int? iKeyPreviousModule, int? iKeyThisModuleOnly, OutputParameter<bool?> bOkayToProceed, OutputParameter<string> cReportMessage, OutputParameter<int?> iProcessResult, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfValidateModuleSecurityMappingResult>> sp_dlfValidateModuleSecurityMappingAsync(string cSymbol, string cCusip, string cCusipExt, string cAlternateID, string cModule, string cDataStamp, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFValidateNvstResult>> sp_DLFValidateNvstAsync(int? iKeyAccount, int? iKeySymbol, Guid? gUidDLF, string cTableName, string cDataStamp, DateTime? dAcquired, DateTime? dAsOf, int? iCodeBasisType, int? iKeyModule, OutputParameter<int?> iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValidatePlaceholderAsync(int? iKeyRep, string cDataStamp, OutputParameter<int?> iKeyAAName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValidatePositionAsync(int? iKeyNvst, DateTime? dPosition, decimal? nUnits, int? iKeyModule, int? iCodeAcctValueType, int? iCodePositionDateType, string cDataStamp, decimal? nUnitPrice, OutputParameter<bool?> bAdded, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValidateProcessOfPriceAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFValidateSecuritiesBySetsResult>> sp_DLFValidateSecuritiesBySetsAsync(int? iKeyProcess, string cTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_dlfValidateSecurityMappingAsync(string cSymbol, string cCusip, string cCusipExt, string cAlternateID, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFValidateUnAssignedAccountsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFValidatevwDSTSecurityResult>> sp_DLFValidatevwDSTSecurityAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DLFWedBushCheckBondFactoringResult>> sp_DLFWedBushCheckBondFactoringAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFWedBushCheckForReinvestmentsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_dlfWedbushPreCheckPartiesResult>> sp_dlfWedbushPreCheckPartiesAsync(int? iKeyBatch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DLFWedbushPrecheckPositionsAsync(int? iKeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DlfZapAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_DlfZeroOutInitReconcilesAsync(int? iKeyModule, int? ikeyProcess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_DSTSetupSecurityViewResult>> sp_DSTSetupSecurityViewAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_EmailAddressSkipArchiveSetAsync(string cEmailAddress, bool? bCheckState, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_EmailAddressSkipArchiveStatusDifferentAsync(string cEmailAddress, bool? bCheckState, OutputParameter<bool?> bDifferent, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ExchangeGetStoreKeyFromStoreIDAsync(string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, int? iSynchType, int? iKeyUser, string cUserInitials, OutputParameter<int?> iKeyStore, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ExchangeSetSysPrefDefaultsAllUsersResult>> sp_ExchangeSetSysPrefDefaultsAllUsersAsync(string cDomain, string cWebURL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ExchangeSynchCalendarEventResult>> sp_ExchangeSynchCalendarEventAsync(string cEntryID, string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, string cOutlookEventType, DateTime? tEventStart, DateTime? tEventEnd, DateTime? tEventDue, string cEventDescription, string cEventLocation, bool? bAllDayEvent, int? iImportance, int? iNumberOfContactsForThisEvent, string mEventNotes, bool? bRecurs, int? iRecurrenceType, int? iDayOfWeekMask, DateTime? tRecurBeginDate, DateTime? tRecurEndDate, int? iRecurInterval, int? iRecurInstance, int? iRecurMonthOfYear, int? iRecurDayOfMonth, DateTime? tOriginalStart, bool? bCompleted, bool? bExchangeServer, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, OutputParameter<Guid?> gAACalEventGUID, OutputParameter<bool?> bEventAlreadyExistsInAA, OutputParameter<bool?> bEventUpdatedInAA, OutputParameter<bool?> bEventAlreadyUpToDateInAA, OutputParameter<bool?> bEventNewerInAA, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ExchangeSynchCalendarEvent_2Result>> sp_ExchangeSynchCalendarEvent_2Async(string cEntryID, string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, string cOutlookEventType, DateTime? tEventStart, DateTime? tEventEnd, DateTime? tEventDue, string cEventDescription, string cEventLocation, bool? bAllDayEvent, int? iImportance, int? iNumberOfContactsForThisEvent, string mEventNotes, bool? bRecurs, int? iRecurrenceType, int? iDayOfWeekMask, DateTime? tRecurBeginDate, DateTime? tRecurEndDate, int? iRecurInterval, int? iRecurInstance, int? iRecurMonthOfYear, int? iRecurDayOfMonth, DateTime? tOriginalStart, bool? bCompleted, int? iSynchType, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, string cDeleteCalendarEventContextMessage, string cProgramVersion, string cWithNameEmails_DoubleBarDelimited, int? iEventColor, OutputParameter<Guid?> gAACalEventGUID, OutputParameter<bool?> bEventAlreadyExistsInAA, OutputParameter<bool?> bEventUpdatedInAA, OutputParameter<bool?> bEventAlreadyUpToDateInAA, OutputParameter<bool?> bEventNewerInAA, OutputParameter<int?> iEventDetailsSet, OutputParameter<string> cWithNameEmailsNotFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ExchangeSynchCalendarEvent_3Result>> sp_ExchangeSynchCalendarEvent_3Async(string cEntryID, string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, string cOutlookEventType, DateTime? tEventStart, DateTime? tEventEnd, DateTime? tEventDue, string cEventDescription, string cEventLocation, bool? bAllDayEvent, int? iImportance, int? iNumberOfContactsForThisEvent, string mEventNotes, bool? bRecurs, int? iRecurrenceType, int? iDayOfWeekMask, DateTime? tRecurBeginDate, DateTime? tRecurEndDate, int? iRecurInterval, int? iRecurInstance, int? iRecurMonthOfYear, int? iRecurDayOfMonth, DateTime? tOriginalStart, bool? bCompleted, int? iSynchType, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, string cDeleteCalendarEventContextMessage, string cProgramVersion, string cWithNameEmails_DoubleBarDelimited, int? iEventColor, OutputParameter<Guid?> gAACalEventGUID, OutputParameter<bool?> bEventAlreadyExistsInAA, OutputParameter<bool?> bEventUpdatedInAA, OutputParameter<bool?> bEventAlreadyUpToDateInAA, OutputParameter<bool?> bEventNewerInAA, OutputParameter<int?> iEventDetailsSet, OutputParameter<string> cWithNameEmailsNotFound, OutputParameter<bool?> bEventDeletedInAA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ExchangeSynchCalendarEvent_4Result>> sp_ExchangeSynchCalendarEvent_4Async(string cEntryID, int? iStoreKeyID, string cOutlookEventType, DateTime? tEventStart, DateTime? tEventEnd, DateTime? tEventDue, string cEventDescription, string cEventLocation, bool? bAllDayEvent, int? iImportance, int? iNumberOfContactsForThisEvent, string mEventNotes, bool? bRecurs, int? iRecurrenceType, int? iDayOfWeekMask, DateTime? tRecurBeginDate, DateTime? tRecurEndDate, int? iRecurInterval, int? iRecurInstance, int? iRecurMonthOfYear, int? iRecurDayOfMonth, DateTime? tOriginalStart, bool? bCompleted, int? iSynchType, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, string cDeleteCalendarEventContextMessage, string cProgramVersion, string cWithNameEmails_DoubleBarDelimited, int? iEventColor, OutputParameter<Guid?> gAACalEventGUID, OutputParameter<bool?> bEventAlreadyExistsInAA, OutputParameter<bool?> bEventUpdatedInAA, OutputParameter<bool?> bEventAlreadyUpToDateInAA, OutputParameter<bool?> bEventNewerInAA, OutputParameter<int?> iEventDetailsSet, OutputParameter<string> cWithNameEmailsNotFound, OutputParameter<bool?> bEventDeletedInAA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ExchangeSynchCalendarEvent_CheckRecurExceptionResult>> sp_ExchangeSynchCalendarEvent_CheckRecurExceptionAsync(DateTime? tEventStart, DateTime? tEventEnd, DateTime? tEventDue, DateTime? tOriginalStart, bool? bCompleted, bool? bDeleted, string cUserInitials, int? iKeyUser, int? iRecurOption, bool? bGenerateDetails, string DeleteCalendarEventContextMessage, string ProgramVersion, OutputParameter<Guid?> gAACalEventGUID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ExchangeSynchCalendarEvent_SetRecurResult>> sp_ExchangeSynchCalendarEvent_SetRecurAsync(Guid? gAACalEventGUID, int? iKeyEvent, int? iRecurOption, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ExchangeSynchContactAddressAsync(Guid? gAANameGUID, int? iCodeAddressLocation, bool? bPrimaryAddress, string cStreetLine, string cCity, string cState, string cZip, string cCountry, string cCompanyName, string cJobTitle, int? iSynchType, int? iKeyUser, OutputParameter<Guid?> gAAAddressGUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ExchangeSynchContactEmailAddressAsync(Guid? gAANameGUID, bool? bPrimaryAddress, string cEmailAddress, string cCompanyName, int? iSynchType, int? iKeyUser, OutputParameter<Guid?> gAAEmailGUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ExchangeSynchContactNameResult>> sp_ExchangeSynchContactNameAsync(string cEntryID, string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, bool? bExchangeServer, string cFirstname, string cMiddlename, string cLastname, string cPrefix, string cSuffix, string cNickName, string cCompanyName, string cFileAs, DateTime? tDOB, DateTime? tAnniversary, int? iCodeGender, string cProfession, string cCategories, int? iKeyProducer, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, bool? bUpdateBirthdateAndAnniversary, OutputParameter<Guid?> gAANameGUID, OutputParameter<bool?> bNameAlreadyExistsInAA, OutputParameter<bool?> bNameUpdatedInAA, OutputParameter<bool?> bNameAlreadyUpToDateInAA, OutputParameter<bool?> bNameNewerInAA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ExchangeSynchContactName2Result>> sp_ExchangeSynchContactName2Async(string cEntryID, string cStoreID, string cOutlookFolderName, string cOutlookFolderEntryID, string cStoreMachineName, string cStoreUserName, string cStoreUserDomainName, int? iSynchType, string cFirstname, string cMiddlename, string cLastname, string cPrefix, string cSuffix, string cNickName, string cCompanyName, string cFileAs, DateTime? tDOB, DateTime? tAnniversary, int? iCodeGender, string cProfession, string cCategories, int? iKeyProducer, int? iKeyUser, bool? bForceUpdate, DateTime? tLastUpdatedInExchange, int? iExchangeDateOffsetFromSQLHours, bool? bUpdateBirthdateAndAnniversary, string cDefaultNametypeDescription, OutputParameter<Guid?> gAANameGUID, OutputParameter<bool?> bNameAlreadyExistsInAA, OutputParameter<bool?> bNameUpdatedInAA, OutputParameter<bool?> bNameAlreadyUpToDateInAA, OutputParameter<bool?> bNameNewerInAA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ExchangeSynchContactNotesAsync(Guid? gAANameGUID, string cNotes, int? iSynchType, int? iKeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ExchangeSynchContactPhoneAsync(Guid? gAANameGUID, int? iCodePhoneLocation, bool? bPrimaryPhone, string cFullPhone, int? iSynchType, int? iKeyUser, bool? bSkipParsingPhoneValuesInvalidFormat, OutputParameter<Guid?> gAAPhoneGUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ExchangeSynchContactWebAddressAsync(Guid? gAANameGUID, bool? bPrimaryAddress, string cWebAddress, string cCompanyName, int? iSynchType, int? iKeyUser, OutputParameter<Guid?> gAAWebGUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_FileHistoryLogRowCountByFileHistoryLogKeyResult>> sp_FileHistoryLogRowCountByFileHistoryLogKeyAsync(int? iFileHistorylogkeyid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_FinanceLogixExportByNameResult>> sp_FinanceLogixExportByNameAsync(int? ikeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_FMGSuiteEmailContactsResult>> sp_FMGSuiteEmailContactsAsync(string NameKeyIDsDelimited, int? PhoneLocationCodeKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventEveryNDaysAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventEveryNDaysInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventEveryNMonthAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventEveryNMonthInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventMonthlyAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventMonthlyInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventMultiDaysAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventMultiDaysInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventNotificationsAsync(int? iKeyEvent, DateTime? dCheckDate, int? iNumberOfMinuteAdvanceNotice, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventNWeekdayNMonthlyAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventNWeekdayNMonthlyInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventNWeekdayNMonthYearlyAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventNWeekdayNMonthYearlyInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventOnceAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventOnceEveryYearAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventOnceEveryYearInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GenerateEventsGenericResult>> sp_GenerateEventsGenericAsync(int? iCalEventID, DateTime? dCheckDate, int? iNumberOfMinuteAdvanceNotice, int? iOccurOption, bool? bGenerateEvents, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventWeeklyAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventWeeklyEveryNWeekAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventWeeklyEveryNWeekInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventWeeklyInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventYearlyAsync(int? iCalEventID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateEventYearlyInternalAsync(int? iCalEventID, OutputParameter<int?> iEventDetailsSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateInsuranceRelationsAsync(int? iKeyPolicy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateInvestmentSplitTransactionsAsync(int? iSymbolKey, int? iGeneratedKey, int? iTransactionType, decimal? nRatio, DateTime? dTransaction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GenerateUserNotificationsAsync(int? iKeyCalUser, DateTime? dCheckDate, int? iNumberOfMinuteAdvanceNotice, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetActiveMessageCountResult>> sp_GetActiveMessageCountAsync(int? UserKeyID, string cComputerName, DateTime? dStationTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetAllCodeForeignKeysResult>> sp_GetAllCodeForeignKeysAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetApplicationInfoByClientIDResult>> sp_GetApplicationInfoByClientIDAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetAppointmentDataSetResult>> sp_GetAppointmentDataSetAsync(int? CalUserKey, DateTime? BeginDate, DateTime? EndDate, bool? IncludeCalls, bool? IncludeTasks, bool? IncludeAppointments, bool? OneRecordPerDay, bool? LimitTo50Rows, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetAppointmentDataSet2Result>> sp_GetAppointmentDataSet2Async(int? CalUserKey, DateTime? BeginDate, DateTime? EndDate, bool? IncludeCalls, bool? IncludeTasks, bool? IncludeAppointments, bool? OneRecordPerDay, bool? LimitTo50Rows, bool? IncludeWorkflowEvents, bool? IncludeDepartmentEvents, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetCalendarUserLookupDataResult>> sp_GetCalendarUserLookupDataAsync(int? iKeySkipCalendarUserKey, int? iKeyAccessUserKey, bool? bShowDeactivated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetCityStateCountyCountryFromZipResult>> sp_GetCityStateCountyCountryFromZipAsync(string cZip, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetClientReportDataResult>> sp_GetClientReportDataAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GetCodeKeyAsync(string cCodeType, string cCode, string cDescription, bool? bAddIfNotFound, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetCostBasisAverageForNvstResult>> sp_GetCostBasisAverageForNvstAsync(int? iKeyNvst, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetCostBasisLotAndGainsForNvstResult>> sp_GetCostBasisLotAndGainsForNvstAsync(int? iKeyNvst, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetDataToProcessByModuleResult>> sp_GetDataToProcessByModuleAsync(int? iKeyModule, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GetDaysFromMaskAsync(int? iDayMask, OutputParameter<bool?> bMonday, OutputParameter<bool?> bTuesday, OutputParameter<bool?> bWednesday, OutputParameter<bool?> bThursday, OutputParameter<bool?> bFriday, OutputParameter<bool?> bSaturday, OutputParameter<bool?> bSunday, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetDistinctDayViewDatesResult>> sp_GetDistinctDayViewDatesAsync(int? iCalendarKeyID, DateTime? tCurrentDate, bool? bIncludeTasksAndCalls, int? iCodeAppointment, int? iCodeTask, int? iCodeCall, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetDuplicateNamesResult>> sp_GetDuplicateNamesAsync(string cFirstname, string cMiddlename, string cLastname, string cSuffix, string cTaxIDEncrypted, bool? bFlagOrganization, int? iCodeGender, DateTime? tDOB, int? iKeyProducer, string cDownloadID, int? iCodeDownloadIDModule, bool? bValidateMatchesFoundByDownloadID, bool? bValidateMatchesFoundByTaxID, bool? bLimitSearchToNamesThatHaveNoProducerAssigned, bool? bMatchPopulatedSuffixCriteriaToEmptySuffixInAA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetEmailExportDataResult>> sp_GetEmailExportDataAsync(int? iNameKeyid, int? iAddrType, int? iPhoneType, bool? bPrimaryEmailOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetEventSummaryByCalendarResult>> sp_GetEventSummaryByCalendarAsync(int? iCalenderKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetEventSummaryByDeptResult>> sp_GetEventSummaryByDeptAsync(int? iDeptID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetEventSummaryByUserResult>> sp_GetEventSummaryByUserAsync(int? iUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetForUserMessageNotificationLogFormResult>> sp_GetForUserMessageNotificationLogFormAsync(int? iKeyMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetGreetingsAndAddresseesByNameResult>> sp_GetGreetingsAndAddresseesByNameAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetHouseholdInfoByClientIDResult>> sp_GetHouseholdInfoByClientIDAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetInsuranceExportDataResult>> sp_GetInsuranceExportDataAsync(int? iCoverageKeyid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetInvestmentExportDataResult>> sp_GetInvestmentExportDataAsync(int? iNvstKeyid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetLatestNoteTopicKeyByClientResult>> sp_GetLatestNoteTopicKeyByClientAsync(int? iKeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetLotForEditScreenResult>> sp_GetLotForEditScreenAsync(int? iKeyNvst, int? iKeySell, DateTime? dtSell, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetMessagesByUserIDResult>> sp_GetMessagesByUserIDAsync(int? iKeyUser, bool? bArchivedRecord, string cSourceOrDestination, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNameActivityResult>> sp_GetNameActivityAsync(int? NameKeyID, int? UserKeyID, bool? bUserCanSeePrivateNotes, bool? bUserHasInsuranceModuleAccess, bool? bUserHasInvestmentsModuleAccess, int? iMonthsBack, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNameExportDataByTypeResult>> sp_GetNameExportDataByTypeAsync(int? iKeyName, int? iCodeAddressLocation, int? iCodePhoneLocation, int? iKeyEmail, bool? bReturnAllClientColumns, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNameLinksResult>> sp_GetNameLinksAsync(int? NameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNAVOnOrAfterResult>> sp_GetNAVOnOrAfterAsync(int? iKeySymbol, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNAVOnOrBeforeResult>> sp_GetNAVOnOrBeforeAsync(int? iKeySymbol, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNextKeyIDResult>> sp_GetNextKeyIDAsync(int? iTable, int? iCurMaxID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GetNextKeyIDForSetInternalByNameAsync(string cTable, int? iCurMaxID, int? iKeyCountNeeded, OutputParameter<int?> iReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GetNextKeyIDInternalAsync(int? iTable, int? iCurMaxID, OutputParameter<int?> iReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GetNextKeyIDInternalByNameAsync(string cTable, int? iCurMaxID, OutputParameter<int?> iReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNoteListFormListResult>> sp_GetNoteListFormListAsync(int? iClientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNoteListFormListMessagesResult>> sp_GetNoteListFormListMessagesAsync(int? iClientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNoteListPagingResult>> sp_GetNoteListPagingAsync(int? LinkKeyID, int? StartIndex, int? NumberOfNotes, DateTime? StartDate, DateTime? EndDate, bool? DateSort, string FilterKeyword, bool? SkipKeyword, DateTime? FilterStartDate, bool? SkipStartDate, DateTime? FilterEndDate, bool? SkipEndDate, string FilterUserInitials, bool? SkipUserInitials, OutputParameter<int?> NoteCount, OutputParameter<int?> FullNoteCount, OutputParameter<DateTime?> FirstDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNoteListPagingByAccountResult>> sp_GetNoteListPagingByAccountAsync(int? LinkKeyID, int? StartIndex, int? NumberOfNotes, DateTime? StartDate, DateTime? EndDate, bool? DateSort, string FilterKeyword, bool? SkipKeyword, DateTime? FilterStartDate, bool? SkipStartDate, DateTime? FilterEndDate, bool? SkipEndDate, string FilterUserInitials, bool? SkipUserInitials, OutputParameter<int?> NoteCount, OutputParameter<int?> FullNoteCount, OutputParameter<DateTime?> FirstDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNoteListPagingByPolicyResult>> sp_GetNoteListPagingByPolicyAsync(int? LinkKeyID, int? StartIndex, int? NumberOfNotes, DateTime? StartDate, DateTime? EndDate, bool? DateSort, string FilterKeyword, bool? SkipKeyword, DateTime? FilterStartDate, bool? SkipStartDate, DateTime? FilterEndDate, bool? SkipEndDate, string FilterUserInitials, bool? SkipUserInitials, OutputParameter<int?> NoteCount, OutputParameter<int?> FullNoteCount, OutputParameter<DateTime?> FirstDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNotesByClientForGridResult>> sp_GetNotesByClientForGridAsync(int? iLinkKeyID, bool? bUserCanSeePrivateNotes, int? ikeyViewingUser, string cLinkingTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNotesByGroupsForGridResult>> sp_GetNotesByGroupsForGridAsync(int? iLinkKeyID, int? ikeyClient, bool? bUserCanSeePrivateNotes, int? ikeyViewingUser, string cSourceType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNotesListViewScreenAndReportResult>> sp_GetNotesListViewScreenAndReportAsync(int? iKeyClient, string cAccountOrPolicy, string cViewScreenOrForm, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNoteTopicListViewScreenMessagesResult>> sp_GetNoteTopicListViewScreenMessagesAsync(int? iClientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNvstSalesAndTaxLotResult>> sp_GetNvstSalesAndTaxLotAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNvstSharesOnOrAfterResult>> sp_GetNvstSharesOnOrAfterAsync(int? iKeyNvst, DateTime? dGet, bool? bNonZeroSharesOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetNvstSharesOnOrBeforeResult>> sp_GetNvstSharesOnOrBeforeAsync(int? iKeyNvst, DateTime? dGet, bool? bNonZeroSharesOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetOutlookEntryIDCalendarRowByEntryIDAndStoreKeyIDResult>> sp_GetOutlookEntryIDCalendarRowByEntryIDAndStoreKeyIDAsync(int? iStoreKeyID, string cEntryID, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetOutlookEntryIDCalendarRowByKeyAALinkAndStoreKeyIDResult>> sp_GetOutlookEntryIDCalendarRowByKeyAALinkAndStoreKeyIDAsync(int? iStoreKeyID, int? iKeyLink, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetOutlookEntryIDNameRowByEntryIDAndStoreKeyIDResult>> sp_GetOutlookEntryIDNameRowByEntryIDAndStoreKeyIDAsync(int? iStoreKeyID, string cEntryID, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetOutlookEntryIDNameRowByKeyAALinkAndStoreKeyIDResult>> sp_GetOutlookEntryIDNameRowByKeyAALinkAndStoreKeyIDAsync(int? iStoreKeyID, int? iKeyLink, string cUserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetPartnerListForAccountResult>> sp_GetPartnerListForAccountAsync(int? ikeyAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetPartnerListForClientResult>> sp_GetPartnerListForClientAsync(int? ikeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GetPhoneValuesFromOutlookPhoneStringAsync(string cFullPhone, OutputParameter<string> cCountry, OutputParameter<string> cAreaCode, OutputParameter<string> cPhoneNum, OutputParameter<string> cPhoneExt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetRORNavDataSetResult>> sp_GetRORNavDataSetAsync(DateTime? dFrom, DateTime? dTo, int? iKeyClient, int? ikeyAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GetScheduleDataSetAsync(string CalUserList, string BeginDate, string EndDate, string IncludeCalls, string IncludeTasks, string IncludeAppointments, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetSecurityTasksByUserResult>> sp_GetSecurityTasksByUserAsync(int? iUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GetServerDateTimeOffsetFromUTCAsync(OutputParameter<int?> iReturn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetStartAndEndNvstSharesAndNavResult>> sp_GetStartAndEndNvstSharesAndNavAsync(int? iKeyNvst, int? iKeySymbol, DateTime? dStart, DateTime? dEnd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetStartAndEndNvstSharesAndNavBulkResult>> sp_GetStartAndEndNvstSharesAndNavBulkAsync(string cUser, string cIDTempRecordIdentity, bool? bResetTempTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetSummedNvstValuesResult>> sp_GetSummedNvstValuesAsync(int? iNvstKeyID, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetSuperViewKeyResult>> sp_GetSuperViewKeyAsync(int? UserKey, OutputParameter<int?> SuperViewKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetSystemInfoResult>> sp_GetSystemInfoAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetTaskAndCallDataSetResult>> sp_GetTaskAndCallDataSetAsync(int? CalUserKey, DateTime? BeginDate, DateTime? EndDate, bool? IncludeWorkflow, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetTaskAndCallDataSet2Result>> sp_GetTaskAndCallDataSet2Async(int? CalUserKey, DateTime? BeginDate, DateTime? EndDate, bool? IncludeWorkflowEvents, bool? IncludeDepartmentEvents, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetTasksAndOverridesResult>> sp_GetTasksAndOverridesAsync(int? iKeyRoleType, int? iKeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetUniqueCodeAbbreviationResult>> sp_GetUniqueCodeAbbreviationAsync(string cAbbreviation, int? iCodeType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetUserGroupLookupDataResult>> sp_GetUserGroupLookupDataAsync(bool? bIncludeInactive, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetUsersByTaskResult>> sp_GetUsersByTaskAsync(int? iTaskID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetUserSyncOptionsByCalendarManyResult>> sp_GetUserSyncOptionsByCalendarManyAsync(string CalendarKeyIDsDelimited, bool? IsRealTimeExportQuery, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetValuationsForRorCalculationsResult>> sp_GetValuationsForRorCalculationsAsync(int? iKeyInvestment, DateTime? dStart, DateTime? dEnd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetValuationsForRorCalculationsBulkResult>> sp_GetValuationsForRorCalculationsBulkAsync(string cUser, string cIDTempRecordIdentity, bool? bResetTempTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewAccountDataResult>> sp_GetViewAccountDataAsync(int? iAccountKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewAccountDataCountResult>> sp_GetViewAccountDataCountAsync(int? iAccountKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewClientAddressesResult>> sp_GetViewClientAddressesAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewClientDataCountResult>> sp_GetViewClientDataCountAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewClientEmailsResult>> sp_GetViewClientEmailsAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewClientNameTypesResult>> sp_GetViewClientNameTypesAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewClientURLsResult>> sp_GetViewClientURLsAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewClientWithNotesClientPerspectiveListResult>> sp_GetViewClientWithNotesClientPerspectiveListAsync(int? iKeyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewInvestmentDataResult>> sp_GetViewInvestmentDataAsync(int? iInvestmentKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewInvestmentDataCountResult>> sp_GetViewInvestmentDataCountAsync(int? iInvestmentKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewPolicyDataCountResult>> sp_GetViewPolicyDataCountAsync(int? iPolicyKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewPolicyDataCoverageResult>> sp_GetViewPolicyDataCoverageAsync(int? iCoverageKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetViewPolicyDataPolicyResult>> sp_GetViewPolicyDataPolicyAsync(int? iPolicyKeyID, int? iCodeGroupWith, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetWorkflowSummaryByUserResult>> sp_GetWorkflowSummaryByUserAsync(int? iUserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_GetWorkflowSummaryByUserGroupResult>> sp_GetWorkflowSummaryByUserGroupAsync(int? iUserGroupKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Google_FixSyncOptionsRefactorAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_GuidTryParseAsync(string ParseThisValue, OutputParameter<Guid?> ParsedGUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ImportAddressAsync(int? iKeyName, string cDataStamp, int? iCodeRecordCreationSource, int? iCodeAddressLocation, int? iCodeDefaultAddressLocation, string cgreet, string caddressee, string ctitle, string cBusinessName, string cstreet1, string cstreet2, string cstreet3, string ccity, string cstate, string ccountry, string cCounty, string czip, string cAddressAbbreviation, string cAddressDescription, bool? bPrimary, string cAddressPoint, string cRoute, OutputParameter<int?> iKeyAddress, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ImportPhoneAsync(int? iKeyName, string cDataStamp, int? iCodeRecordCreationSource, int? iCodePhoneLocation, int? iCodeDefaultPhoneLocation, string cContact, string cCountry, string cAreaCode, string cPhoneNumber, string cPhoneExt, string cPhoneAbbreviation, string cPhoneDescription, string cFullPhone, bool? bPrimary, OutputParameter<int?> iKeyPhone, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Infinet4ToAA_InsertIntoAAResult>> sp_Infinet4ToAA_InsertIntoAAAsync(OutputParameter<bool?> bComplete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Infinet4ToAA_ValidateGroupMembersResult>> sp_Infinet4ToAA_ValidateGroupMembersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Infinet4ToAA_ValidateGroupsResult>> sp_Infinet4ToAA_ValidateGroupsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Infinet4ToAA_ValidateRelationsResult>> sp_Infinet4ToAA_ValidateRelationsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Infinet4ToAAConnectNRAsFromIOLToAAResult>> sp_Infinet4ToAAConnectNRAsFromIOLToAAAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Infinet4ToAAConnectWithTaxidsFromIOLToAAResult>> sp_Infinet4ToAAConnectWithTaxidsFromIOLToAAAsync(OutputParameter<bool?> bComplete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Infinet4ToAAPopulateNewIOL4ContactsResult>> sp_Infinet4ToAAPopulateNewIOL4ContactsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Infinet4ToAAValidateIOLLinkKeysResult>> sp_Infinet4ToAAValidateIOLLinkKeysAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Infinex4ToAAProducerValidationResult>> sp_Infinex4ToAAProducerValidationAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_InitializeFileHistoryLogAsync(int? iCodeProcess, string cDescription, DateTime? dWhenProcessed, string cFilePath, Guid? gFileLink, string cDatabaseVersion, string cProgramVersion, string cUserName, string cUserInitials, OutputParameter<int?> iReturnKeyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_InsertInitTransactionRecordAsync(int? iKeyNvst, int? iKeyTransType, DateTime? dTransaction, decimal? nShares, decimal? yTotal, decimal? yBasisIn, bool? bFreezeBasis, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_InsertReconcileRecordAsync(int? iKeyNvst, int? iKeyTransTable, int? iKeyTransType, DateTime? dTransaction, decimal? nShares, bool? bValues, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_InsertTaxLotRecordAsync(int? iKeyTrans, int? iKeyTaxTable, decimal? nShares, decimal? nShareBasis, bool? bFlagPrimary, bool? bFreeze, DateTime? dTransaction, OutputParameter<int?> iKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_InsertUserViewAccessRecordAsync(int? iKeyView, int? iKeyUser, string cUserID, bool? bDeleteFirst, bool? bPrimary, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_InsertUserViewProducerRecordAsync(int? iKeyView, int? iKeyPdcr, bool? bDeleteFirst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_LinksGetForDiagramByContactResult>> sp_LinksGetForDiagramByContactAsync(int? iNameKeyID, int? iDegrees, string Relationships, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_LiquidateInvestmentResult>> sp_LiquidateInvestmentAsync(int? iKeyNvst, DateTime? dLiquidate, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_LiquidateZeroValueInvestmentsForAccountAsync(int? iKeyAccount, string cDataStamp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_LogCalendarEventNotificationAsync(int? iKeyEvent, int? iKeyUser, DateTime? tEvent, DateTime? tNotified, DateTime? tAcknowledged, int? iPassedInNotificationType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_LogCalendarEventNotificationsAsync(string cEventDetailKeyValues, int? iKeyUser, DateTime? tNotified, DateTime? tAcknowledged, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_LogUserMessageNotificationAsync(int? iKeyMessage, int? iKeyUser, DateTime? tMessage, DateTime? tNotified, DateTime? tAcknowledged, int? iPassedInNotificationType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_LogUserMessageNotificationCurrentViewAsync(int? iKeyUser, DateTime? tNotified, DateTime? tAcknowledged, int? iPassedInNotificationType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ManageUserRecentNameListResult>> sp_ManageUserRecentNameListAsync(int? UniqueNameID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MergeAndDeleteCodesAsync(string cCodeType, int? iKeyOldCode, int? iKeyNewCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MergeAndDeleteProducersAsync(int? iKeySource, int? iKeyTarget, string cProducerReferenceOption, int? iKeyProducerReference, int? iProcessLogKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MergeAndDeleteSymbolsAsync(int? iKeySource, int? iKeyTarget, bool? bDeleteAfterward, string cActionOnHoldings, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MergeOldInvestmentsIntoNewOnesResult>> sp_MergeOldInvestmentsIntoNewOnesAsync(int? ikeyOldSecurity, int? ikeyNewSecurity, bool? bReCalculate, string cDataStatmp, int? ikeyProcessLog, string cProcLogDetailLine1, OutputParameter<int?> iNumberOfHoldingsMerged, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2AddressGreetingsAndAddresseesByNameResult>> sp_Mobile2AddressGreetingsAndAddresseesByNameAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2ChangePasswordAsync(string Username, string NewPassword, string PreviousPasswordsXML, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2CheckUserTaskResult>> sp_Mobile2CheckUserTaskAsync(int? UserKey, int? UserTaskTypeKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2CompleteCalendarEventResult>> sp_Mobile2CompleteCalendarEventAsync(int? DetailKey, bool? Completed, int? UserKeyID, string ProgramVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2CreateAccountNewBizResult>> sp_Mobile2CreateAccountNewBizAsync(int? AccountKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2CreateAddressResult>> sp_Mobile2CreateAddressAsync(int? ClientKey, bool? Primary, string Greeting, string Addressee, string Title, string BusinessName, string Street1, string Street2, string Street3, string City, string State, string Zip, string County, string Country, int? AddressType, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2CreateCoverageNewBizResult>> sp_Mobile2CreateCoverageNewBizAsync(int? CoverageKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2CreateEmailResult>> sp_Mobile2CreateEmailAsync(int? ClientKey, bool? Primary, string Contact, string EmailAddress, string BusinessName, string Title, string Greeting, bool? SkipArchive, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2CreateLinkResult>> sp_Mobile2CreateLinkAsync(int? ClientKey, int? LinkClientKey, int? LinkType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2CreateNameResult>> sp_Mobile2CreateNameAsync(string Firstname, string Middlename, string Lastname, string Prefix, string Suffix, string Nickname, string Dob, string NameType, string Status, string Producer, string Gender, string Anniversary, int? Dependents, string DependentStatus, decimal? EarnedIncome, decimal? TotalIncome, string Industry, decimal? NetWorth, string Occupation, string UserInitials, bool? IsOrganization, string TaxIDEncrypted, string TaxIDEncryptedLookup, string MaritalStatus, string Tobacco, decimal? TaxBracket, string MedicareNumberEncrypted, string SpouseFirstname, string SpouseMiddlename, string SpouseLastname, string SpouseDob, string SpouseGender, string SpouseOccupation, int? SpouseKey, bool? NoSpouse, string AlertNoteText, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2CreateNameNewBizResult>> sp_Mobile2CreateNameNewBizAsync(int? ClientKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2CreatePhoneResult>> sp_Mobile2CreatePhoneAsync(int? ClientKey, bool? Primary, string Areacode, string Phonenum, string Extension, string CountryCode, string Contact, int? PhoneType, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2CreateSavedQueryAsync(int? iKeySavedSet, string cUniqueConditionName, string cOperator, string cValue, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2CreateWebResult>> sp_Mobile2CreateWebAsync(int? ClientKey, string Contact, string BusinessName, bool? Primary, string WebAddress, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2DeleteAddressAsync(int? AddressKey, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<bool?> Deleted, OutputParameter<string> DeleteMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2DeleteEmailAsync(int? EmailKey, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<bool?> Deleted, OutputParameter<string> DeleteMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2DeleteEventAsync(int? DetailEventKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2DeleteImageAsync(int? ClientKey, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2DeleteLinkAsync(int? LinkKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2DeleteMarketAsync(int? MarketKey, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2DeleteNameResult>> sp_Mobile2DeleteNameAsync(int? UniqueNameID, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2DeleteNewBizAsync(int? NewBizKey, int? UserKey, string Source, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2DeleteNoteAsync(int? NoteKey, int? UserKey, bool? DeleteFollowup, string NoteSource, string MobileVersion, DateTime? ProcessDate, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2DeletePhoneAsync(int? PhoneKey, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<bool?> Deleted, OutputParameter<string> DeleteMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2DeleteQuerySetAsync(int? QSKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2DeleteWebAsync(int? WebKey, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<bool?> Deleted, OutputParameter<string> DeleteMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2EditAccountNewBizAsync(int? NewBizKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2EditAddressResult>> sp_Mobile2EditAddressAsync(int? AddressKey, bool? Primary, string Greeting, string Addressee, string Title, string BusinessName, string Street1, string Street2, string Street3, string City, string State, string Zip, string County, string Country, int? AddressType, string Comment, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2EditCoverageNewBizAsync(int? NewBizKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2EditEmailAsync(int? EmailKey, int? ClientKey, bool? Primary, string Contact, string EmailAddress, string BusinessName, string Title, string Greeting, bool? SkipArchive, string Comment, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2EditEventResult>> sp_Mobile2EditEventAsync(int? DetailEventKey, string ClientKeys, int? PrimaryCalendarKey, string CalendarKeys, int? EventType, int? EventSubType, bool? Rollover, int? Priority, string Description, DateTime? Begin, DateTime? End, string Location, string UserInitials, int? Color, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2EditNameAsync(int? ClientKey, string Firstname, string Middlename, string Lastname, string Prefix, string Suffix, string Nickname, string Dob, string NameType, string status, string Producer, int? ProducerRef, string Gender, string Anniversary, int? Dependents, string DependentStatus, decimal? EarnedIncome, decimal? TotalIncome, string Industry, decimal? NetWorth, string Occupation, string UserInitials, bool? IsOrganization, string TaxIDEncrypted, string TaxIDEncryptedLookup, string MaritalStatus, string Tobacco, decimal? TaxBracket, string MedicareNumberEncrypted, string SpouseFirstname, string SpouseMiddlename, string SpouseLastname, string SpouseDob, string SpouseGender, string SpouseOccupation, int? SpouseKey, bool? NoSpouse, string AlertNoteText, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2EditNameAdditionalAsync(int? ClientKey, bool? CanCall, bool? CanMail, bool? CanEmail, DateTime? RetirementDate, int? TimeHorizonUniqueID, int? RiskToleranceUniqueID, int? PrimaryObjectiveUniqueID, int? SecondaryObjectiveUniqueID, string FacebookName, string LinkedInName, string TwitterName, string GooglePlusName, int? EmployerUniqueID, string AdditionalNameTypeKeysDelimited, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2EditNameFlexFieldsAsync(int? FlexKeyID, decimal? Field01, decimal? Field02, decimal? Field03, decimal? Field04, decimal? Field05, decimal? Field06, int? Field07, int? Field08, string Field09, string Field10, string Field11, string Field12, DateTime? Field13, DateTime? Field14, DateTime? Field15, DateTime? Field16, string Field17, string Field18, string Field19, string Field20, DateTime? Field21, DateTime? Field22, string Field23, string Field24, string Field25, string Field26, string Field27, string Field28, string Field29, string Field30, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2EditNameNewBizAsync(int? NewBizKey, int? ActionCode, string Action, int? VendorKey, int? PriorityCode, decimal? Amount, DateTime? InitialDate, DateTime? CompletedDate, DateTime? FollowupDate, string NotePage, string MobileVersion, int? UserKeyID, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2EditNamePersonalIdentificationAsync(int? ClientKey, string DriversLicenseEncrypted, int? DLIssueStateUniqueID, DateTime? DLIssueDate, DateTime? DLExpirationDate, string PassportNumberEncrypted, string CitizenshipNation, DateTime? PassportIssueDate, DateTime? PassportExpirationDate, string NonCitizenIDNumberEncrypted, int? ResidencyStatusUniqueID, DateTime? NonCitizenIDIssueDate, DateTime? NonCitizenIDExpirationDate, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2EditNoteTopicResult>> sp_Mobile2EditNoteTopicAsync(int? TopicKey, int? ClientKey, string Topic, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2EditPhoneResult>> sp_Mobile2EditPhoneAsync(int? PhoneKey, bool? Primary, string Areacode, string Phonenum, string Extension, string CountryCode, string Contact, string Comment, int? PhoneType, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2EditWebAsync(int? WebKey, int? ClientKey, string BusinessName, string Contact, bool? Primary, string WebAddress, string Comment, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetAccountDataResult>> sp_Mobile2GetAccountDataAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetAccountInvestmentListResult>> sp_Mobile2GetAccountInvestmentListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetAccountListResult>> sp_Mobile2GetAccountListAsync(int? UniqueNameID, bool? ShowLiquidated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetAccountNewBizDataResult>> sp_Mobile2GetAccountNewBizDataAsync(int? UniqueNewBizID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetAccountNewBizListResult>> sp_Mobile2GetAccountNewBizListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetAccountRelationListResult>> sp_Mobile2GetAccountRelationListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetAddressDataResult>> sp_Mobile2GetAddressDataAsync(int? UniqueNameID, int? UniqueAddressID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetAlbridgeApplinkDataResult>> sp_Mobile2GetAlbridgeApplinkDataAsync(int? UniqueNameID, int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetAnnuitiesResult>> sp_Mobile2GetAnnuitiesAsync(int? PolicyKeyID, int? AccountKeyID, int? NameKeyID, bool? ShowTerminated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetApplicationInfoByClientIDResult>> sp_Mobile2GetApplicationInfoByClientIDAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetCalendarResult>> sp_Mobile2GetCalendarAsync(int? UserKeyID, int? CalKeyID, DateTime? StartDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetCalendarDayResult>> sp_Mobile2GetCalendarDayAsync(int? UserKeyID, int? CalKeyID, DateTime? CalDate, int? EventType, string EventStatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetCalendarItemResult>> sp_Mobile2GetCalendarItemAsync(int? DetailKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetCalendarUserResult>> sp_Mobile2GetCalendarUserAsync(int? CalendarKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetCityStateFromZipResult>> sp_Mobile2GetCityStateFromZipAsync(string ZipCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetCoverageDataResult>> sp_Mobile2GetCoverageDataAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetCoverageNewBizDataResult>> sp_Mobile2GetCoverageNewBizDataAsync(int? UniqueNewBizID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetCoverageNewBizListResult>> sp_Mobile2GetCoverageNewBizListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetCoverageRelationListResult>> sp_Mobile2GetCoverageRelationListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetCoverageRiderListResult>> sp_Mobile2GetCoverageRiderListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetEmailDataResult>> sp_Mobile2GetEmailDataAsync(int? EmailKey, int? ClientKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetEventDataResult>> sp_Mobile2GetEventDataAsync(int? UniqueNameID, int? UniqueEventDetailID, bool? IncludeAppointments, bool? IncludeTasks, bool? IncludeCalls, bool? IncludeWorkflow, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetFileDataResult>> sp_Mobile2GetFileDataAsync(int? UniqueNameID, int? UniqueFileID, string ReferenceType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2GetFirstNameAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetFlexLabelsResult>> sp_Mobile2GetFlexLabelsAsync(int? NameKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetFlexNameFieldsResult>> sp_Mobile2GetFlexNameFieldsAsync(int? NameKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetImageDataResult>> sp_Mobile2GetImageDataAsync(int? ImageKey, int? ClientKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetInvestmentDataResult>> sp_Mobile2GetInvestmentDataAsync(int? UniqueInvestmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetInvestmentTransactionsResult>> sp_Mobile2GetInvestmentTransactionsAsync(int? InvestmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetNameDataResult>> sp_Mobile2GetNameDataAsync(int? UniqueNameID, int? UserKeyID, bool? SetRecent, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetNameDataAdditionalResult>> sp_Mobile2GetNameDataAdditionalAsync(int? UniqueNameID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2GetNameListAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetNameListByInitialResult>> sp_Mobile2GetNameListByInitialAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetNameNewBizDataResult>> sp_Mobile2GetNameNewBizDataAsync(int? UniqueNewBizID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetNameNewBizListResult>> sp_Mobile2GetNameNewBizListAsync(int? UniqueNameID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetNamePersonalIdentificationResult>> sp_Mobile2GetNamePersonalIdentificationAsync(int? UniqueNameID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetNoteResult>> sp_Mobile2GetNoteAsync(int? TopicKeyID, string Source, int? NumberOfNotes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetNotePagingResult>> sp_Mobile2GetNotePagingAsync(int? TopicKeyID, string Source, int? StartIndex, int? NumberOfNotes, DateTime? StartDate, DateTime? EndDate, bool? DateSort, string Keyword, OutputParameter<int?> NoteCount, OutputParameter<int?> FullNoteCount, OutputParameter<DateTime?> FirstDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2GetPartialNameListAsync(int? UserKeyID, string Group, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetPhoneDataResult>> sp_Mobile2GetPhoneDataAsync(int? UniqueNameID, int? UniquePhoneID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetPolicyDataResult>> sp_Mobile2GetPolicyDataAsync(int? UniquePolicyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetPolicyListResult>> sp_Mobile2GetPolicyListAsync(int? UniqueNameID, bool? ShowTerminated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetProducerIDListResult>> sp_Mobile2GetProducerIDListAsync(int? UniqueProdID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetReadyDocLoginResult>> sp_Mobile2GetReadyDocLoginAsync(int? UserKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetRecentNameListResult>> sp_Mobile2GetRecentNameListAsync(int? UserKeyID, bool? IncludeContactData, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetReportListResult>> sp_Mobile2GetReportListAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetSavedQueryListResult>> sp_Mobile2GetSavedQueryListAsync(int? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetSavedQuerySetResult>> sp_Mobile2GetSavedQuerySetAsync(int? SetID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetTaskStackResult>> sp_Mobile2GetTaskStackAsync(int? UserGroupKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetViewableCalendarsResult>> sp_Mobile2GetViewableCalendarsAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetViewableCalendarsForGroupResult>> sp_Mobile2GetViewableCalendarsForGroupAsync(int? UserGroupKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetViewClientDataCountResult>> sp_Mobile2GetViewClientDataCountAsync(int? iKeyClient, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2GetWebDataResult>> sp_Mobile2GetWebDataAsync(int? WebKey, int? ClientKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2InsertNoteResult>> sp_Mobile2InsertNoteAsync(int? TopicKey, string NotePage, DateTime? FollowupDate, string UserName, int? UserKeyID, string NoteSource, string MobileVersion, bool? PersonalContact, int? PrivateUserKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2LoginResult>> sp_Mobile2LoginAsync(string Username, string Password, Guid? LicenseID, string RawPassword, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2LoginSSOResult>> sp_Mobile2LoginSSOAsync(string SSOToken, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2MoneyGuidProByNameResult>> sp_Mobile2MoneyGuidProByNameAsync(int? iKeyName, bool? bEnforceHousehold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2ProcessLogUpdateAsync(int? UserKey, int? ProcessLogTypeCodeKey, int? ProcessLogDetailTypeCodeKey, string ProcessLogDescription, string ProcessLogDetailDescription1, string ProcessLogDetailDescription2, DateTime? ProcessDate, string MobileVersion, OutputParameter<int?> ProcessLogKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2ProcessMarketValuesForAccountResult>> sp_Mobile2ProcessMarketValuesForAccountAsync(int? iKeyAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2SaveImageAsync(int? ClientKey, byte[] FullImage, byte[] Thumbnail, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2SetTaskStackOrderAsync(int? EventKeyID, int? CalendarKeyID, int? Ordinal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2UpdateFileAsync(string ReferenceType, int? FileKey, string Description, int? CategoryCode, DateTime? FileDate, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2UpdateLinkResult>> sp_Mobile2UpdateLinkAsync(int? LinkKey, int? ClientKey, int? LinkClientKey, int? LinkType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2UpdateLoginActivityResult>> sp_Mobile2UpdateLoginActivityAsync(string SubscriberID, string Username, bool? ValidSubscriberID, bool? LoginSuccessful, int? HostingUserID, int? NameKeyID, int? UserKeyID, string ErrorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2UpdateMarketResult>> sp_Mobile2UpdateMarketAsync(int? MarketKey, int? ClientKey, int? MarketCode, int? UserKeyID, DateTime? FollowupDate, string MobileVersion, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2UpdateMarketFollowupAsync(int? iKeyMarket, DateTime? tFollowupDate, int? iKeyCalendar, int? iKeyName, string cWhoChange, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int?> FollowupKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2UpdateNewBizFollowupAsync(int? iKeyNewBiz, int? iKeyNote, DateTime? tFollowupDate, int? iKeyCalendar, int? iSourceType, string cWhoChange, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2UpdateNoteAsync(int? NoteKeyID, DateTime? FollowupDate, string NotePage, string WhoChange, int? UserKeyID, string NoteSource, string MobileVersion, bool? PersonalContact, int? PrivateUserKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2UpdateNoteFollowupAsync(int? iKeyNote, DateTime? tFollowupDate, int? iKeyCalendar, string cNoteSource, string cWhoChange, int? UserKey, string MobileVersion, DateTime? ProcessDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_Mobile2UpdateReadyDocLoginAsync(int? UserKey, string ClientID, string UserName, string Password, string ServiceURL, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2UpdateSavedQuerySetResult>> sp_Mobile2UpdateSavedQuerySetAsync(int? iKeyId, int? iKeyOwningUser, string cName, bool? bFlagPrevious, bool? bFlagInsuranceExcludeUnrelatedNames, bool? bFlagInvestmentsExcludeUnrelatedNames, bool? bFlagInsuranceSelectAll, bool? bFlagInvestmentsSelectAll, int? iInsuranceNamesRelationship, int? iInvestmentsNamesRelationship, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_Mobile2ValidateUserEmailAddressResult>> sp_Mobile2ValidateUserEmailAddressAsync(string email, OutputParameter<bool?> preventPasswordChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileAddressGreetingsAndAddresseesByNameResult>> sp_MobileAddressGreetingsAndAddresseesByNameAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileCheckUserTaskResult>> sp_MobileCheckUserTaskAsync(int? UserKey, int? UserTaskTypeKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileCompleteCalendarEventAsync(int? DetailKey, bool? Completed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileCreateAddressResult>> sp_MobileCreateAddressAsync(int? ClientKey, bool? Primary, string Greeting, string Addressee, string Title, string BusinessName, string Street1, string Street2, string City, string State, string Zip, string Country, int? AddressType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileCreateEmailResult>> sp_MobileCreateEmailAsync(int? ClientKey, bool? Primary, string Contact, string EmailAddress, string BusinessName, string Title, string Greeting, bool? SkipArchive, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileCreateLinkResult>> sp_MobileCreateLinkAsync(int? ClientKey, int? LinkClientKey, int? LinkType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileCreateNameResult>> sp_MobileCreateNameAsync(string Firstname, string Middlename, string Lastname, string Dob, string NameType, string status, string Producer, string Gender, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileCreatePhoneResult>> sp_MobileCreatePhoneAsync(int? ClientKey, bool? Primary, string Areacode, string Phonenum, string Extension, string CountryCode, string Contact, int? PhoneType, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileCreateWebResult>> sp_MobileCreateWebAsync(int? ClientKey, string Contact, string BusinessName, bool? Primary, string WebAddress, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileCurrentViewNameResult>> sp_MobileCurrentViewNameAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileDeleteEventAsync(int? DetailEventKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileDeleteLinkAsync(int? LinkKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileDeleteMarketAsync(int? MarketKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileDeleteNameResult>> sp_MobileDeleteNameAsync(int? UniqueNameID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileDeleteNoteAsync(int? NoteKey, string NoteSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileEditAddressAsync(int? AddressKey, int? ClientKey, bool? Primary, string Greeting, string Addressee, string Title, string BusinessName, string Street1, string Street2, string City, string State, string Zip, string Country, int? AddressType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileEditEmailResult>> sp_MobileEditEmailAsync(int? EmailKey, int? ClientKey, bool? Primary, string Contact, string EmailAddress, string BusinessName, string Title, string Greeting, bool? SkipArchive, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileEditEventResult>> sp_MobileEditEventAsync(int? DetailEventKey, int? ClientKey, int? CalendarKey, int? EventType, int? EventSubType, int? Priority, string Description, DateTime? Begin, DateTime? End, string Location, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileEditMarketResult>> sp_MobileEditMarketAsync(int? MarketKey, int? MarketCode, int? UserKeyID, DateTime? FollowupDate, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileEditNameAsync(int? ClientKey, string Firstname, string Middlename, string Lastname, string Dob, string NameType, string status, string Producer, string Gender, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileEditNoteTopicResult>> sp_MobileEditNoteTopicAsync(int? TopicKey, int? ClientKey, string Topic, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileEditPhoneAsync(int? PhoneKey, int? ClientKey, bool? Primary, string Areacode, string Phonenum, string Extension, string CountryCode, string Contact, int? PhoneType, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileEditWebResult>> sp_MobileEditWebAsync(int? WebKey, int? ClientKey, string BusinessName, string Contact, bool? Primary, string WebAddress, string Comment, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetAccountDataResult>> sp_MobileGetAccountDataAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetAccountInvestmentListResult>> sp_MobileGetAccountInvestmentListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetAccountListResult>> sp_MobileGetAccountListAsync(int? UniqueNameID, bool? ShowLiquidated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetAccountNewBizListResult>> sp_MobileGetAccountNewBizListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetAccountRelationListResult>> sp_MobileGetAccountRelationListAsync(int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetAddressDataResult>> sp_MobileGetAddressDataAsync(int? UniqueNameID, int? UniqueAddressID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetAlbridgeApplinkDataResult>> sp_MobileGetAlbridgeApplinkDataAsync(int? UniqueNameID, int? UniqueAccountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetCalendarResult>> sp_MobileGetCalendarAsync(int? UserKeyID, int? CalKeyID, DateTime? StartDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetCalendarDayResult>> sp_MobileGetCalendarDayAsync(int? UserKeyID, int? CalKeyID, DateTime? CalDate, int? EventType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetCalendarItemResult>> sp_MobileGetCalendarItemAsync(int? DetailKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetCoverageDataResult>> sp_MobileGetCoverageDataAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetCoverageNewBizDataResult>> sp_MobileGetCoverageNewBizDataAsync(int? UniqueNewBizID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetCoverageNewBizListResult>> sp_MobileGetCoverageNewBizListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetCoverageRelationListResult>> sp_MobileGetCoverageRelationListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetCoverageRiderListResult>> sp_MobileGetCoverageRiderListAsync(int? UniqueCoverageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetEmailDataResult>> sp_MobileGetEmailDataAsync(int? EmailKey, int? ClientKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetEventDataResult>> sp_MobileGetEventDataAsync(int? UniqueNameID, int? UniqueEventID, int? EventType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetHouseholdDataResult>> sp_MobileGetHouseholdDataAsync(int? UniqueNameID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetInvestmentDataResult>> sp_MobileGetInvestmentDataAsync(int? UniqueInvestmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetNameDataResult>> sp_MobileGetNameDataAsync(int? UniqueNameID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileGetNameListAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetNameListByInitialResult>> sp_MobileGetNameListByInitialAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetNoteResult>> sp_MobileGetNoteAsync(int? TopicKeyID, string Source, int? NumberOfNotes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetNotePagingResult>> sp_MobileGetNotePagingAsync(int? TopicKeyID, string Source, int? StartIndex, int? NumberOfNotes, OutputParameter<int?> NoteCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileGetPartialNameListAsync(int? UserKeyID, string Group, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetPhoneDataResult>> sp_MobileGetPhoneDataAsync(int? UniqueNameID, int? UniquePhoneID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetPolicyDataResult>> sp_MobileGetPolicyDataAsync(int? UniquePolicyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetPolicyListResult>> sp_MobileGetPolicyListAsync(int? UniqueNameID, bool? ShowTerminated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetPolicyRelationResult>> sp_MobileGetPolicyRelationAsync(int? UniquePolicyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetRecentNameListResult>> sp_MobileGetRecentNameListAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetRiderDataResult>> sp_MobileGetRiderDataAsync(int? UniqueRiderID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetViewableCalendarsResult>> sp_MobileGetViewableCalendarsAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileGetWebDataResult>> sp_MobileGetWebDataAsync(int? WebKey, int? ClientKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileInsertNoteResult>> sp_MobileInsertNoteAsync(int? TopicKey, string NotePage, string UserName, string NoteSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileLoginResult>> sp_MobileLoginAsync(string Username, string Password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileLoginSSOResult>> sp_MobileLoginSSOAsync(string SSOToken, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileProcessLogUpdateAsync(int? UserKey, int? ProcessLogTypeCodeKey, int? ProcessLogDetailTypeCodeKey, string ProcessLogDescription, string ProcessLogDetailDescription1, string ProcessLogDetailDescription2, DateTime? ProcessDate, string MobileVersion, OutputParameter<int?> ProcessLogKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileProcessMarketValuesForAccountResult>> sp_MobileProcessMarketValuesForAccountAsync(int? iKeyAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileRolloverAllCalendarResult>> sp_MobileRolloverAllCalendarAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileUpdateLinkResult>> sp_MobileUpdateLinkAsync(int? LinkKey, int? ClientKey, int? LinkClientKey, int? LinkType, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MobileUpdateMarketResult>> sp_MobileUpdateMarketAsync(int? MarketKey, int? ClientKey, int? MarketCode, int? UserKeyID, DateTime? FollowupDate, string UserInitials, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileUpdateMarketFollowupAsync(int? iKeyMarket, DateTime? tFollowupDate, int? iKeyCalendar, int? iKeyName, string cWhoChange, OutputParameter<int?> FollowupKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileUpdateNoteAsync(int? NoteKeyID, string WhoChange, string NotePage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_MobileUpdateNoteFollowupAsync(int? iKeyNote, DateTime? tFollowupDate, int? iKeyCalendar, string cNoteSource, string cFollowupDescription, string cWhoChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_MoneyGuideProExportByNameResult>> sp_MoneyGuideProExportByNameAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_NameGetLastActivityAsync(int? NameKeyID, OutputParameter<DateTime?> LatestDate, OutputParameter<string> LatestActionDesc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameGetLastActivityAndVisibilityManyResult>> sp_NameGetLastActivityAndVisibilityManyAsync(string NameKeyIDsDelimited, int? UserKeyID, int? CurrentViewKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameGetLastActivityManyResult>> sp_NameGetLastActivityManyAsync(string NameKeyIDsDelimited, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupByAllResult>> sp_NameLookupByAllAsync(int? iKeyView, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupByCityResult>> sp_NameLookupByCityAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupByFirstNameResult>> sp_NameLookupByFirstNameAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupByLastNameResult>> sp_NameLookupByLastNameAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupByNameTypeResult>> sp_NameLookupByNameTypeAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupByNickNameResult>> sp_NameLookupByNickNameAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupByProducerResult>> sp_NameLookupByProducerAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupByStateResult>> sp_NameLookupByStateAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupByStreetResult>> sp_NameLookupByStreetAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupBySuffixResult>> sp_NameLookupBySuffixAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupByTitleResult>> sp_NameLookupByTitleAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupByZipResult>> sp_NameLookupByZipAsync(int? iKeyView, string PartialString, bool? bReturnFullCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameLookupGetProducerKeysForViewResult>> sp_NameLookupGetProducerKeysForViewAsync(int? iKeyView, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_NameVisibilityAsync(int? NameKeyID, int? UserKeyID, int? CurrentViewKeyID, OutputParameter<bool?> Visible, OutputParameter<string> Message, OutputParameter<int?> SwitchViewKeyID, OutputParameter<string> SwitchViewLabel, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NameVisibilityManyResult>> sp_NameVisibilityManyAsync(string NameKeyIDsDelimited, int? UserKeyID, int? CurrentViewKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_NAVDeleteByTempKeyTableAsync(string UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_NewCodeRowAsync(string sCodeID, string sDesc, int? iCodeType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_NoteCatalogDropAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NoteCatalogValidateResult>> sp_NoteCatalogValidateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_NotesExportResult>> sp_NotesExportAsync(int? NameKeyID, bool? UserCanSeePrivateNotes, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_NotesMoveTopicAsync(int? moveFromTopicKeyID, int? moveToTopicKeyID, int? noteKeyID, bool? copyFlag, string cUserStamp, string cProgramVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_OutlookEntryCalendarDeleteByEntryIDAndStoreKeyIDAsync(string cEntryID, int? iKeyStore, Guid? gAAID, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_OutlookEntryCalendarDeleteByEntryIDAndStoreKeyID_2Async(string cEntryID, int? iKeyStore, Guid? gAAID, string UserInitials, int? UserKeyID, string ContextMessage, string ProgramVersion, OutputParameter<bool?> bFoundAndDeleted, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_OverwriteProducerReferenceAsync(int? ikeyName, int? iKeyProducerFrom, int? iKeyProducerto, string cDataStamp, bool? bUpdatePrimary, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_PlanningExportByNameResult>> sp_PlanningExportByNameAsync(int? iNameKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_PositionRemovalAsync(int? iKeyNvst, int? iKeyModule, DateTime? dLatestPosition, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_PrecheckValuationKeysAsync(int? iKeyNvst, bool? bFlagTradeDateCalculations, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ProcessEventExceptionsResult>> sp_ProcessEventExceptionsAsync(int? iKeyEvent, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ProcessEventExceptionsInternalResult>> sp_ProcessEventExceptionsInternalAsync(int? iKeyEvent, OutputParameter<int?> iEventDetailsRemoved, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ProcessLogAddDetailAsync(int? iKeyProcessLog, int? iCodeDetailType, string cDetail1, string cDetail2, string cDetail3, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ProcessLogInsertAsync(int? icodeProcess, string cprocessDescription, DateTime? dprocessed, string mnotes, string cuserInitials, OutputParameter<int?> iReturnKeyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ProcessLogRowCountByProcessLogKeyResult>> sp_ProcessLogRowCountByProcessLogKeyAsync(int? iprocesslogkeyid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ProcessMarketValuesDeleteSetAsync(int? iKeyProcess, string cResults, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ProcessMarketValuesForAccountResult>> sp_ProcessMarketValuesForAccountAsync(int? iKeyAccount, DateTime? dStartPeriod, DateTime? dEndPeriod, bool? bForced, bool? bCalculateBasis, bool? bResetTaxLot, bool? bValidatePeriodicRecords, bool? bUpdateAccount, string cPeriod, bool? bForceValuesToBeSummed, bool? bProcessAllMarketValues, bool? bResetPeriodicRecords, OutputParameter<bool?> bProcessed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ProcessMarketValuesForInvestmentResult>> sp_ProcessMarketValuesForInvestmentAsync(int? iKeyNvst, DateTime? dStartPeriod, DateTime? dEndPeriod, bool? bForced, bool? bCalculateBasis, bool? bResetTaxLot, bool? bValidatePeriodicRecords, string cPeriod, bool? bForceValuesToBeSummed, bool? bProcessAllMarketValues, bool? bResetPeriodicRecords, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_QueryConditionCopyAsync(int? SavedCriteriaSetKeyID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_QueryConditionPopulateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_QueryConditionPopulateAccountsAsync(int? iColumnSqlType_char, int? iColumnSqlType_datetime, int? iColumnSqlType_int, int? iColumnSqlType_bit, int? iColumnSqlType_decimal, int? iColumnSqlType_money, string cBlankLine, int? iBatch_Names, int? iBatch_Investments, int? iBatch_Insurance, int? iReportKeyTable_Names, int? iReportKeyTable_NameNewBiz, int? iReportKeyTable_InvestmentsAndAccounts, int? iReportKeyTable_InvestmentTransactions, int? iReportKeyTable_InvestmentNewBiz, int? iReportKeyTable_PoliciesAndCoverages, int? iReportKeyTable_InsuranceNewBiz, OutputParameter<int?> iNewKey_AAQueryCondition, OutputParameter<int?> iSortOrder_AAQueryCondition, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_QueryConditionPopulateCheckAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_QueryConditionPopulateInsuranceAsync(int? iColumnSqlType_char, int? iColumnSqlType_datetime, int? iColumnSqlType_int, int? iColumnSqlType_bit, int? iColumnSqlType_decimal, int? iColumnSqlType_money, string cBlankLine, int? iBatch_Names, int? iBatch_Investments, int? iBatch_Insurance, int? iReportKeyTable_Names, int? iReportKeyTable_NameNewBiz, int? iReportKeyTable_InvestmentsAndAccounts, int? iReportKeyTable_InvestmentTransactions, int? iReportKeyTable_InvestmentNewBiz, int? iReportKeyTable_PoliciesAndCoverages, int? iReportKeyTable_InsuranceNewBiz, OutputParameter<int?> iNewKey_AAQueryCondition, OutputParameter<int?> iSortOrder_AAQueryCondition, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_QueryConditionPopulateNamesAsync(int? iColumnSqlType_char, int? iColumnSqlType_datetime, int? iColumnSqlType_int, int? iColumnSqlType_bit, int? iColumnSqlType_decimal, int? iColumnSqlType_money, string cBlankLine, int? iBatch_Names, int? iBatch_Investments, int? iBatch_Insurance, int? iReportKeyTable_Names, int? iReportKeyTable_NameNewBiz, int? iReportKeyTable_InvestmentsAndAccounts, int? iReportKeyTable_InvestmentTransactions, int? iReportKeyTable_InvestmentNewBiz, int? iReportKeyTable_PoliciesAndCoverages, int? iReportKeyTable_InsuranceNewBiz, OutputParameter<int?> iNewKey_AAQueryCondition, OutputParameter<int?> iSortOrder_AAQueryCondition, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_QueryConditionShareAsync(int? SavedCriteriaSetKeyID, int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ReconcileCoverageAndPolicyGroupsAsync(int? iKeyCov1, int? iKeyCov2, int? iKeyCov3, int? iKeyCov4, int? iKeyCov5, int? iKeyCov6, int? iKeyCov7, int? iKeyCov8, int? iKeyCov9, int? iKeyCov10, DateTime? dPositionsTo, int? ikeyDefaultAgency, bool? bRecalculateCoverageValues, bool? bCheckPrimaryInsuredRelationship, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ReconcileCoverageToPositionAsync(int? iCoverageKeyID, int? iPositionKeyID, bool? bRecalculateCoverageValues, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ReconcileCoverageToPositionByDateAsync(int? iCoverageKeyID, DateTime? dPositionDate, bool? bRecalculateCoverageValues, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ReconcileInvestmentAsync(int? iKeyNvst, DateTime? dPositionsFrom, DateTime? dPositionsTo, OutputParameter<bool?> bOutOfBalance, OutputParameter<decimal?> nReconcile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ReconcileInvestmentAndCleanupPositionsAsync(int? iKeyNvst, DateTime? dPositionsFrom, DateTime? dPositionsTo, bool? bCleanupPositions, OutputParameter<bool?> bOutOfBalance, OutputParameter<decimal?> nReconcile, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ReconcileInvestmentGroupsAsync(int? iKeyNvst1, int? iKeyNvst2, int? iKeyNvst3, int? iKeyNvst4, int? iKeyNvst5, int? iKeyNvst6, int? iKeyNvst7, int? iKeyNvst8, int? iKeyNvst9, int? iKeyNvst10, DateTime? dPositionsFrom, DateTime? dPositionsTo, bool? bCleanupPositions, OutputParameter<int?> iOutOfBalance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ReconcilePolicyToPositionAsync(int? iPolicyKeyID, int? iPositionKeyID, int? iDefaultAgencyKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ReconcilePolicyToPositionByDateAsync(int? iPolicyKeyID, DateTime? dPositionDate, int? iDefaultAgencyKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_RecordProcessLogDeleteCommissionTransactionAsync(int? iKeyTransaction, int? iKeyProcessLog, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_RecordProcessLogDeletePolicyCoverageAsync(int? iKeyCoverage, int? iKeyProcessLog, bool? bLogPolicyLevelDetails, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_RecordServerUtilitiesActionAsync(string cBackupFileName, string cUserName, string cMachineName, string cServerName, string cDatabaseName, string cServerUtilitiesVersion, string cComment, DateTime? dDate, string cAction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ReCreateTaxLotForInvestmentResult>> sp_ReCreateTaxLotForInvestmentAsync(int? iKeyNvst, DateTime? dStart, int? ikeyBasisType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_RelocateFileAssociationAsync(string cSourceType, string cTargetType, int? iSourceKeyID, int? iTargetLinkKeyID, bool? bKeepOriginal, string cDatabaseVersion, string cProgramVersion, string cUserName, string cUserInit, OutputParameter<bool?> bSuccess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_RelocateFileDetailCodeAsync(string cSourceType, string cTargetType, OutputParameter<int?> iCodeDetail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_RemoveAddressFromHouseholdResult>> sp_RemoveAddressFromHouseholdAsync(int? iKeyHousehold, int? iKeyProcessLog, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_RemoveAdminTaskOverridesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_RemoveCoverageFromGroupAsync(int? iCoverageKeyID, string cWhoChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_RemoveDuplicateMembersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_RemoveExpiredOptionsAsync(DateTime? dEnd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_RemovePhoneFromHouseholdResult>> sp_RemovePhoneFromHouseholdAsync(int? iKeyHousehold, int? iKeyProcessLog, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ReportPrefIncrementTimesRunAsync(int? iReportKeyId, string cUserInitials, DateTime? tDateTimeLastRun, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ResetAATempDataForRORResult>> sp_ResetAATempDataForRORAsync(string cUser, string cIDTempRecordIdentity, bool? bReturnValue, int? iKeysNeeded, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ResetAllUsersToViewAllNamesAsync(int? iDefaultUserViewKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ResetBasisAdjustmentTransactionAsync(int? iKeyTransaction, string cUserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ResetTaxLotRecordsAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_SchlegelGroupWithSummaryReportResult>> sp_SchlegelGroupWithSummaryReportAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ServiceDLFActiveModulesResult>> sp_ServiceDLFActiveModulesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ServiceDLFRemoveRetrievedFilesAsync(int? iKeyModule, int? iKeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ServiceDLFUpdateStatusAsync(int? iKeyModule, string cStatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetCoverageNetCashValueAsync(int? iKeyCoverage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetHouseholdAddressPrimaryAsync(int? iKeyHousehold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetHouseholdNameTypePrimaryAsync(int? iKeyHousehold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetHouseholdPhonePrimaryAsync(int? iKeyHousehold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetInvestmentCashFlowToReconcilesAsync(int? iKeyNvst, int? ikeySymbol, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetNameFaxAsync(int? iNameKeyID, int? iPhoneKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_SetNavForSecurityResult>> sp_SetNavForSecurityAsync(decimal? nNewNav, int? iSecurityId, DateTime? dValueDate, string cUpdateSourceName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetPagesSystemPreferenceAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetPrimaryAddressAsync(int? iNameKeyID, int? iAddressKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetPrimaryEmailAsync(int? iNameKeyID, int? iEmailKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetPrimaryPhoneAsync(int? iNameKeyID, int? iPhoneKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetPrimaryURLAsync(int? iNameKeyID, int? iURLKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SetTodayEventNotifiedAsync(bool? bFlagAcknowledged, bool? bFlagNotified, int? iKeyEvent, int? iKeyCalUser, string cNextNotifyFrom, string cNextNotifyTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_SubReportGetTaxLotForNvstResult>> sp_SubReportGetTaxLotForNvstAsync(int? iKeyNvst, DateTime? dStartDate, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_SubReportGetTaxLotTotalsForNvstResult>> sp_SubReportGetTaxLotTotalsForNvstAsync(int? iKeyNvst, DateTime? dStartDate, DateTime? dEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_SyncGetLatestNameDetailsChangeDateAsync(int? iNameKeyID, OutputParameter<DateTime?> dLatestChangedDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_SyncGetNameKeysByEmailAddressesResult>> sp_SyncGetNameKeysByEmailAddressesAsync(string cWithNameEmails_DoubleBarDelimited, OutputParameter<string> cWithNameEmailsNotFound, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_TempKeysResetAllAsync(int? iKeyUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_TrailerCommUpdateBeginDateOnNvstBySymbolKeyAsync(int? iKeySymbol, int? iAddMonthsToAcquiredDate, string cDataStamp, OutputParameter<int?> iUpdatedCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_TransactionRegistrationExportResult>> sp_TransactionRegistrationExportAsync(int? UserKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_TransferAllCalEventsAsync(int? iTransferFromCalenderKeyID, int? iTransferToCalenderKeyID, bool? bTransferCompletedEvents, int? iKeyIDToTransferFrom, int? iNumberOfEventsToTransfer, OutputParameter<int?> iLowestRemainingKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_UpdateAreaCodeByPrefixResult>> sp_UpdateAreaCodeByPrefixAsync(string cOldAreaCode, string cNewAreaCode, string cPrefix, string cUserName, DateTime? dProcessed, string cDatabaseVersion, string cProgramVersion, string cUserInitials, OutputParameter<int?> iKeyProcessLog, OutputParameter<int?> iPhonesUpdated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateAverageBasisAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_UpdateBasisNoLotResult>> sp_UpdateBasisNoLotAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateCoverageValuesAsync(int? iCoverageKeyID, bool? bCheckRelationships, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateLifoFifoBasisAsync(int? iKeyNvst, string sFIFOLIFO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateLoggedInFlagAsync(int? iUserKeyID, bool? bLoggedIn, bool? bUpdateFlagOnly, string cComputerName, DateTime? dStationTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateLoggedInFlagValidationAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateLotBasisRatioAsync(int? iKeyLot, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateNvstMarketValuationAsync(int? iNvstKeyID, DateTime? dEndDate, bool? bfixedVal, int? iKeySymbol, decimal? yFaceValue, bool? bAccrueInterest, decimal? nAIRate, int? iKeyVal, bool? bProcessAll, DateTime? dLastTransaction, DateTime? dProcessFrom, DateTime? dLastValuation, bool? bPoolFactor, DateTime? dInitialized, bool? bOption, int? ikeyUnderLyingSecurity, decimal? nShareFactor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateNvstRorValuesAsync(int? iKeyNvst, int? iKeyVal, decimal? yAnnualTwr, decimal? yAnnualDwr, decimal? yAnnualBasic, DateTime? dAsOf, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_UpdateNvstRORValuesBulkResult>> sp_UpdateNvstRORValuesBulkAsync(string cUser, string cIDTempRecordIdentity, bool? bResetTempTable, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateNvstWithTrailersBySecurityKeyAsync(int? iKeySymbol, bool? bFlagTrailerComms, int? iTimesYear, decimal? nTrailerCommPct, decimal? nTrailerCommBasisPoints, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdatePolicyValuesAsync(int? iPolicyKeyID, int? iDefaultAgencyKeyID, bool? bCheckPrimaryInsuredRelationship, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateReconcileTransactionAsync(int? iKeyTrans, int? iKeyNvst, int? iKeyTransType, DateTime? dTrans, decimal? yBasisIn, decimal? yBasisOut, string cWhoChange, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateSummedHHIncomeForClientAsync(int? iKeyClient, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateSummedHouseHoldIncomeAsync(int? iKeyHouseHold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateTransactionBasisValuesAsync(int? iKeyTrans, bool? bBasisIn, decimal? yBasisPerShare, int? iKeyLinkedTrans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_UpdateTransactionBasisValuesNoTriggerResult>> sp_UpdateTransactionBasisValuesNoTriggerAsync(int? iKeyTrans, bool? bBasisIn, decimal? yBasisPerShare, int? iKeyLinkedTrans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateTransactionProcessAndLastTransactionDatesAsync(int? iKeyNvst, DateTime? dProcessFrom, bool? bUpdateLastTransaction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateTransactionSummedValuesAsync(int? iNvstKeyID, DateTime? dEndDate, bool? bfixedVal, bool? bAccrueInterest, decimal? nAnnualRate, decimal? yFaceValue, bool? bForceValuesToBeSummed, bool? bProcessAllMarketValues, bool? bPoolFactor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateTransactionSummedValuesWithoutAIAsync(int? iNvstKeyID, DateTime? dEndDate, bool? bfixedVal, bool? bForceValuesToBeSummed, bool? bProcessAllMarketValues, bool? bPoolFactor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UpdtAccountMktValAsync(int? iKeyAccount, DateTime? dValued, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UserProducerValidateAsync(int? userKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_UserTaskTypeSplitAsync(int? iKeyOldTask, int? iKeyNewTask, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateAccountProducersAsync(int? iKeyAccount, int? iKeyProducer1, int? iKeyProducer2, int? iKeyProducer3, int? iKeyProducer4, int? iKeyManager1, int? iKeyManager2, int? iKeyManager3, int? iKeyManager4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateBasisAdjustmentsResult>> sp_ValidateBasisAdjustmentsAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateChangedInvestmentTransValuationKeyAsync(int? iKeyTrans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateCodeForeignKeysAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateCoverageFlexKeysAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateCusipChangedAssetsResult>> sp_ValidateCusipChangedAssetsAsync(string cOldCusip, string cOldFundCode, string cNewCusip, string cNewfundCode, string cDataStamp, int? iKeyProcessLog, OutputParameter<int?> iNumberOfAssetsMerged, OutputParameter<int?> iKeyOldSecurity, OutputParameter<int?> ikeyNewSecurity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateFlowToCashBalanceAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateInvestmentBasisResult>> sp_ValidateInvestmentBasisAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateLotAndSplitLinksAsync(int? iKeyTrans, int? iKeySplit, bool? bDelete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateOneNvstTransactionValuationKeyAsync(int? iKeyNvst, int? iKeyTrans, int? iKeyTransType, DateTime? dTransaction, DateTime? dSettle, bool? bTransactionDateCalculations, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidatePeriodicValuationRecordsAsync(int? iKeyNvst, DateTime? dStartDate, DateTime? dEndDate, string cPeriod, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidatePolicyProducersAsync(int? iKeyPolicy, int? iKeyProducer1, int? iKeyProducer2, int? iKeyProducer3, int? iKeyProducer4, int? iKeyManager1, int? iKeyManager2, int? iKeyManager3, int? iKeyManager4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateProducersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateSSOResult>> sp_ValidateSSOAsync(Guid? gToken, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateStockSplitLinkResult>> sp_ValidateStockSplitLinkAsync(int? iKeyTrans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateTableKeyIdsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateTaxLotBasisForInvestmentResult>> sp_ValidateTaxLotBasisForInvestmentAsync(int? iKeyNvst, DateTime? dStart, int? iKeyBasisType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateTaxLotBasisForSellResult>> sp_ValidateTaxLotBasisForSellAsync(int? iKeySellTransaction, int? ikeyBasisType, bool? bBasisAdjust, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateTaxLotBasisForSplitResult>> sp_ValidateTaxLotBasisForSplitAsync(int? ikeyTrans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateTaxlotForNvstSplitsAsync(int? iKeyNvst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateTaxLotForSellAsync(int? ikeyTransaction, int? iKeyBasisType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_ValidateTaxLotForSplitRecordAsync(int? iKeyNvst, int? iKeyTrans, int? ikeysplit, bool? bFreeze, DateTime? dTransaction, decimal? nTransactionShares, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateTaxLotModelResult>> sp_ValidateTaxLotModelAsync(int? iKeyTrans, int? iKeyTransType, decimal? nShares, decimal? nBasisIn, decimal? nAI, decimal? nTotal, bool? bFreeze, DateTime? dTransaction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateTransactionCashFlowResult>> sp_ValidateTransactionCashFlowAsync(int? iKeyAccount, int? ikeyCashBalance, bool? bSkipBalancing, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateUsernamePasswordResult>> sp_ValidateUsernamePasswordAsync(string sUserName, string sPassword, string sEncryptPassword, int? iLoginAttempts, bool? bStrongPassword, int? iMustChangePWDays, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateUsernamePassword2Result>> sp_ValidateUsernamePassword2Async(string sUserName, string sPassword, string sEncryptPassword, int? iLoginAttempts, bool? bStrongPassword, int? iMustChangePWDays, OutputParameter<bool?> bUserDisabledForTooManyLoginAttempts, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_ValidateZeroRecordsResult>> sp_ValidateZeroRecordsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_WorkflowAssignmentUpdateAsync(int? iKeyOldUserAssignment, int? iKeyOldUserGroupAssignment, int? iKeyNewUserAssignment, int? ikeyNewUserGroupAssignment, string cDataStamp, OutputParameter<int?> iCountEvents, OutputParameter<int?> iCountMasters, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_WorkflowCalEventCanCompleteAsync(int? CalEventKey, OutputParameter<bool?> IsWorkflow, OutputParameter<bool?> CanComplete, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WorkflowCalEventCanCompleteManyResult>> sp_WorkflowCalEventCanCompleteManyAsync(string CalEventKeyIDsDelimited, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WorkflowCompleteEventResult>> sp_WorkflowCompleteEventAsync(int? CalEventKeyID, int? CompleteUserKeyID, DateTime? CompleteDate, string DeleteCalendarEventContextMessage, string ProgramVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WorkflowCreateResult>> sp_WorkflowCreateAsync(int? masterKey, int? userKey, int? userGroupKey, int? priority, string beginDate, int? tasktime, int? policyKey, int? accountKey, int? nameKey, int? taskColorCode, int? currentUserKey, string currentUserInit, OutputParameter<int?> workflowKeyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WorkFlowCreateStepResult>> sp_WorkFlowCreateStepAsync(int? WorkflowKeyID, int? WorkflowMasterKeyID, int? WorkflowEventMasterKeyID, int? NameKeyID, int? Sequence, int? Priority, string Description, int? Duration, int? WaitDay, DateTime? WorkflowBegin, DateTime? Begin, DateTime? Due, DateTime? CalEventBegin, DateTime? CalEventDue, int? Color, int? WorkflowEventType, int? UserKey, int? UserGroupKey, int? NoteTopicKeyID, bool? RevenueFlag, bool? Dependency, string CurrentUserInit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WorkflowDataFixForSupportOnlyResult>> sp_WorkflowDataFixForSupportOnlyAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WorkflowDataFixForSupportOnlyByDaysResult>> sp_WorkflowDataFixForSupportOnlyByDaysAsync(int? NumberOfDaysToFix, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WorkFlowGetLastActivityResult>> sp_WorkFlowGetLastActivityAsync(string WorkflowKeyIDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WorkflowRecalStatusResult>> sp_WorkflowRecalStatusAsync(int? WorkflowKey, bool? UpdateCalEvents, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WorkflowRecalStatusAllResult>> sp_WorkflowRecalStatusAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WorkflowRecalStatusManyResult>> sp_WorkflowRecalStatusManyAsync(string WorkflowKeyIDsDelimited, bool? UpdateCalEvents, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_WorkFlowTerminateAsync(int? WorkFlowKey, string UserInitials, int? UserKeyID, string ProgramVersion, string DeleteCalendarEventContextMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WorkflowUpdateCalEventResult>> sp_WorkflowUpdateCalEventAsync(int? CalEventKey, DateTime? Begin, DateTime? Due, string Desc, int? UserKeyID, int? UserGroupKeyID, int? Priority, int? EventType, bool? SkipDupCheck, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> sp_WriteToFileHistoryLogAsync(int? iCodeProcess, string cDescription, DateTime? dWhenProcessed, string cFilePath, Guid? gFileLink, DateTime? dfiledate, int? iCodeDetail, string cDatabaseVersion, string cProgramVersion, string cContact, string cHolding, string cUserName, string cUserInitials, OutputParameter<int?> iReturnKeyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WSAddSessionResult>> sp_WSAddSessionAsync(Guid? session, DateTime? startTime, string macAddress, string IPAddress, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_WSValidateSessionResult>> sp_WSValidateSessionAsync(Guid? session, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
    }
}
