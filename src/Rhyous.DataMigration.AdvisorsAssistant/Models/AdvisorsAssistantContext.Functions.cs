// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Data;
using System.Linq;
using Rhyous.DataMigration.AdvisorsAssistant.Models;

namespace Rhyous.DataMigration.AdvisorsAssistant.Models
{
    public partial class AdvisorsAssistantContext
    {

        [DbFunction("fn_AnnualizeReturn", "dbo")]
        public static decimal? fn_AnnualizeReturn(decimal? nReturn, DateTime? dStart, DateTime? End)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_CalcTrailerSharePrice", "dbo")]
        public static decimal? fn_CalcTrailerSharePrice(int? iKeyNvst, DateTime? dPeriodBegin, DateTime? dPeriodEnd, string sCalcType, string sFunction)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_CalculateBasisPershare", "dbo")]
        public static decimal? fn_CalculateBasisPershare(decimal? nShares, decimal? yBasisTotal)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_CalculateBasisRatio", "dbo")]
        public static decimal? fn_CalculateBasisRatio(decimal? nRatio)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_CalculatePeriodInterest", "dbo")]
        public static decimal? fn_CalculatePeriodInterest(DateTime? dStart, DateTime? dEnd, decimal? nAnnualRate, decimal? yPrincipal)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_CalculatePremiumDueDates", "dbo")]
        public IQueryable<fn_CalculatePremiumDueDatesResult> fn_CalculatePremiumDueDates(DateTime? dBase, DateTime? dStart, DateTime? dEnd, int? iTimesPerYear)
        {
            return FromExpression(() => fn_CalculatePremiumDueDates(dBase, dStart, dEnd, iTimesPerYear));
        }

        [DbFunction("fn_CalculatePremiumDueDatesWithBlackouts", "dbo")]
        public IQueryable<fn_CalculatePremiumDueDatesWithBlackoutsResult> fn_CalculatePremiumDueDatesWithBlackouts(DateTime? dBase, DateTime? dStart, DateTime? dEnd, int? iTimesPerYear, int? iRateTableKeyID)
        {
            return FromExpression(() => fn_CalculatePremiumDueDatesWithBlackouts(dBase, dStart, dEnd, iTimesPerYear, iRateTableKeyID));
        }

        [DbFunction("fn_CleanCommTransactionComment", "dbo")]
        public static string fn_CleanCommTransactionComment(string cTransactionComment)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_CleanPhone", "dbo")]
        public static string fn_CleanPhone(string cAreaCode, string cPhoneNum)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_DateEndOfBusinessMonth", "dbo")]
        public static bool? fn_DateEndOfBusinessMonth(DateTime? dDateWithTime)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_DateEndOfMonth", "dbo")]
        public static bool? fn_DateEndOfMonth(DateTime? dDateWithTime)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_DateGetLastDayOfMonth", "dbo")]
        public static DateTime? fn_DateGetLastDayOfMonth(DateTime? dAnyDateInTheMonth)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_DayOfWeekName", "dbo")]
        public static string fn_DayOfWeekName(DateTime? date)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_DLFGetDefaultBasisType", "dbo")]
        public static int? fn_DLFGetDefaultBasisType(int? iSecurityKeyID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_DLFGetInvestorForReport", "dbo")]
        public static string fn_DLFGetInvestorForReport(int? iAccountKeyID, string cInvestorFirstname, string cInvestorMiddlename, string cInvestorLastname, bool? bInvestorIsOrg, string cArrangement)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_DLFGetNameKeyInAA", "dbo")]
        public static int? fn_DLFGetNameKeyInAA(string cLastName, string cFirstName, string cMiddle, string cTaxID, DateTime? dDOB, string cDownloadId, int? ikeyModule, int? ikeyAccountOrPolicy, int? iCodeRelation)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_DLFGetProducerKeyFromAA", "dbo")]
        public static int? fn_DLFGetProducerKeyFromAA(string cAccountNum)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_DLFGetRegistrationForReport", "dbo")]
        public static string fn_DLFGetRegistrationForReport(string cRegLine1, string cRegLine2, string cRegLine3, string cRegLine4, string cRegLine5, string cRegLine6, string cRegLine7, string cAddressee, string cStreet1, string cStreet2, string cStreet3, string cCity, string cState, string cZip)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_DLFGetResultKeyID", "dbo")]
        public static int? fn_DLFGetResultKeyID(string cString)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_DLFGetSecurityForReport", "dbo")]
        public static string fn_DLFGetSecurityForReport(string cCusip, string cCusipExt, string cAlternateID, string cSymbol)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_ExplodeDates", "dbo")]
        public IQueryable<fn_ExplodeDatesResult> fn_ExplodeDates(DateTime? startdate, DateTime? enddate)
        {
            return FromExpression(() => fn_ExplodeDates(startdate, enddate));
        }

        [DbFunction("fn_FullTextNoteCatalogName", "dbo")]
        public static string fn_FullTextNoteCatalogName()
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GenerateFullName", "dbo")]
        public static string fn_GenerateFullName(string sFirst, string sMiddle, string sLast, bool? bOrg)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GenerateFullNameLastFirst", "dbo")]
        public static string fn_GenerateFullNameLastFirst(string sFirst, string sMiddle, string sLast, bool? bOrg)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GenerateFullNameLastFirstNoComma", "dbo")]
        public static string fn_GenerateFullNameLastFirstNoComma(string sFirst, string sMiddle, string sLast, bool? bOrg)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GenerateFullNameWithNick", "dbo")]
        public static string fn_GenerateFullNameWithNick(string sFirst, string sMiddle, string sLast, string sNick, bool? bOrg)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GenerateFullNameWithPrefixAndSuffix", "dbo")]
        public static string fn_GenerateFullNameWithPrefixAndSuffix(string sFirst, string sMiddle, string sLast, string sPrefix, string sSuffix, bool? bOrg)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GenerateFullPhone", "dbo")]
        public static string fn_GenerateFullPhone(string sCountryCode, string sAreaCode, string sPhoneNum, string sExtension)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GenerateNameID", "dbo")]
        public static string fn_GenerateNameID(string cFirstname, string cLastname, int? iKeyName)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetActualAge", "dbo")]
        public static int? fn_GetActualAge(DateTime? dDateOfBirth)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetAgencyCommAmount", "dbo")]
        public static decimal? fn_GetAgencyCommAmount(int? iKeyPayee, int? iKeyTransaction, int? iCodeCommissionType, int? iCodeOverride, decimal? nBaseAmt)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetCalEventNotificationLogTypeDescription", "dbo")]
        public static string fn_GetCalEventNotificationLogTypeDescription(int? iNotificationType)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetCashBalanceSecurityKey", "dbo")]
        public static int? fn_GetCashBalanceSecurityKey()
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetCoverageYear", "dbo")]
        public static int? fn_GetCoverageYear(DateTime? tCoverageStart, DateTime? tRenewalStart, DateTime? tReference)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetDateEndFromDatetime", "dbo")]
        public static DateTime? fn_GetDateEndFromDatetime(DateTime? dDateWithTime)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetDateFromDatetime", "dbo")]
        public static DateTime? fn_GetDateFromDatetime(DateTime? dDateWithTime)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetDaylightSavingsTimeEnd", "dbo")]
        public static DateTime? fn_GetDaylightSavingsTimeEnd(string Year)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetDaylightSavingsTimeStart", "dbo")]
        public static DateTime? fn_GetDaylightSavingsTimeStart(string Year)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetDecimalLength", "dbo")]
        public static int? fn_GetDecimalLength(decimal? fNumber)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetDomainFromEmail", "dbo")]
        public static string fn_GetDomainFromEmail(string sEmail)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetDSTAdjustedDatetime", "dbo")]
        public static DateTime? fn_GetDSTAdjustedDatetime(DateTime? EventDateTime, DateTime? FirstEventDateTime, bool? IgnoreDST)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetEventType", "dbo")]
        public static string fn_GetEventType(string sTypeAbbr)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetFileExtension", "dbo")]
        public static string fn_GetFileExtension(string sFilename)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetIntMonthDayFromDateTime", "dbo")]
        public static int? fn_GetIntMonthDayFromDateTime(DateTime? dtCheck, bool? bNullIsOkay)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetLeftAlphaNumeric", "dbo")]
        public static string fn_GetLeftAlphaNumeric(string cString)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetModalPremiumByDate", "dbo")]
        public static decimal? fn_GetModalPremiumByDate(int? iLinkKeyID, DateTime? dReference, string sSource, string sField)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetModalPremiumByYear", "dbo")]
        public static decimal? fn_GetModalPremiumByYear(int? iLinkKeyID, int? iYear, string sSource, string sField)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetMonthDayFromDatetime", "dbo")]
        public static string fn_GetMonthDayFromDatetime(DateTime? dDateWithTime)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetMonthDaySortFromDatetime", "dbo")]
        public static string fn_GetMonthDaySortFromDatetime(DateTime? dDateWithTime)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetMonthYearFromDatetime", "dbo")]
        public static string fn_GetMonthYearFromDatetime(DateTime? dDateWithTime)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetNearestAge", "dbo")]
        public static int? fn_GetNearestAge(DateTime? dDateOfBirth)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetNextTrailerDateByFrequency", "dbo")]
        public static DateTime? fn_GetNextTrailerDateByFrequency(int? iKeySymbol, int? iFrequency, DateTime? dLastPeriodEnd, DateTime? dWholePeriodEnd)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetNoonDateFromDatetime", "dbo")]
        public static DateTime? fn_GetNoonDateFromDatetime(DateTime? dDateWithTime)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetOutlookPhoneStringFromPhoneValues", "dbo")]
        public static string fn_GetOutlookPhoneStringFromPhoneValues(string cCountry, string cAreaCode, string cPhoneNum, string cPhoneExt)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetRecordCreationSourceCodeKeyID", "dbo")]
        public static int? fn_GetRecordCreationSourceCodeKeyID(string cString)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetRoundedDateEndFromDatetime", "dbo")]
        public static DateTime? fn_GetRoundedDateEndFromDatetime(DateTime? dDateWithTime)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetRoundedDateFromDatetime", "dbo")]
        public static DateTime? fn_GetRoundedDateFromDatetime(DateTime? dDateWithTime)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetTimeStringFromDateTime", "dbo")]
        public static string fn_GetTimeStringFromDateTime(DateTime? time)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetTrailerCommPeriodCount", "dbo")]
        public static int? fn_GetTrailerCommPeriodCount(int? iFrequency, DateTime? dBegin, DateTime? dEnd)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetUserMessageNotificationLogTypeDescription", "dbo")]
        public static string fn_GetUserMessageNotificationLogTypeDescription(int? iNotificationType)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetWithNamesByEvent", "dbo")]
        public static string fn_GetWithNamesByEvent(int? EventID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_HumanReadableDateDiff", "dbo")]
        public static string fn_HumanReadableDateDiff(DateTime? dateStart, DateTime? dateEnd, string PRECISION)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_IOL_To_AA_CharAsMoney", "dbo")]
        public static decimal? fn_IOL_To_AA_CharAsMoney(string cValue)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_IOL_To_AA_LinkType", "dbo")]
        public static int? fn_IOL_To_AA_LinkType(int? iIOL_RelationType)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_IOL_To_AA_MarritalStatus", "dbo")]
        public static int? fn_IOL_To_AA_MarritalStatus(int? cIOL_MarritalSTatus)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_IOL_To_AA_NameType", "dbo")]
        public static int? fn_IOL_To_AA_NameType(int? iIOL_ContactType)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_IOL_To_AA_TaxBracket", "dbo")]
        public static decimal? fn_IOL_To_AA_TaxBracket(string cIOL_TaxBracket)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_IOLAddressTypeToAAAddressLocation", "dbo")]
        public static int? fn_IOLAddressTypeToAAAddressLocation(string cIOL_Address_Type)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_IOLContactTypeToAAClientType", "dbo")]
        public static int? fn_IOLContactTypeToAAClientType(int? iIOLType)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_IOLPhoneTypeToAAAphone", "dbo")]
        public static int? fn_IOLPhoneTypeToAAAphone(string cIOL_Phone_Type)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_IsShortTerm", "dbo")]
        public static bool? fn_IsShortTerm(DateTime? dSharesBought, DateTime? dSharesSold)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_JustDigit", "dbo")]
        public static string fn_JustDigit(string cInput)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_JustLetterOrDigit", "dbo")]
        public static string fn_JustLetterOrDigit(string cInput)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_MaskAccountNumber", "dbo")]
        public static string fn_MaskAccountNumber(string cAccountNumber)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_MobileGenerateFullPhone", "dbo")]
        public static string fn_MobileGenerateFullPhone(string sCountryCode, string sAreaCode, string sPhoneNum, string sExtension)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_MobileGetRelationshipOrder", "dbo")]
        public static int? fn_MobileGetRelationshipOrder(int? iCodeRelationship)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_SetNotificationType", "dbo")]
        public static int? fn_SetNotificationType(int? iCurrentNotificationType, int? iPassedInNotificationType)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_Split", "dbo")]
        public IQueryable<fn_SplitResult> fn_Split(string msg, string sep)
        {
            return FromExpression(() => fn_Split(msg, sep));
        }

        [DbFunction("fn_SplitMax", "dbo")]
        public IQueryable<fn_SplitMaxResult> fn_SplitMax(string sText, string sDelim)
        {
            return FromExpression(() => fn_SplitMax(sText, sDelim));
        }

        [DbFunction("fn_StripTaxID", "dbo")]
        public static string fn_StripTaxID(string sTaxID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_SummSharesForPosition", "dbo")]
        public static decimal? fn_SummSharesForPosition(int? iKeyNvst, DateTime? dDate, bool? bIgnoreUnsettled, int? iRounding)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_ValuationNeedsValidation", "dbo")]
        public static bool? fn_ValuationNeedsValidation(bool? bTradeDateCalcs, DateTime? dTransaction, DateTime? dSettle, int? iKeyFlow, int? ikeyCalc, DateTime? dFlowActivity, DateTime? dCalcActivity)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_viewcl", "dbo")]
        public IQueryable<fn_viewclResult> fn_viewcl(int? rep)
        {
            return FromExpression(() => fn_viewcl(rep));
        }

        [DbFunction("fn_WorkflowGetNextBeginDate", "dbo")]
        public static DateTime? fn_WorkflowGetNextBeginDate(DateTime? previousDueDate, int? waitDay)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        protected void OnModelCreatingGeneratedFunctions(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<fn_CalculatePremiumDueDatesResult>().HasNoKey();
            modelBuilder.Entity<fn_CalculatePremiumDueDatesWithBlackoutsResult>().HasNoKey();
            modelBuilder.Entity<fn_ExplodeDatesResult>().HasNoKey();
            modelBuilder.Entity<fn_SplitResult>().HasNoKey();
            modelBuilder.Entity<fn_SplitMaxResult>().HasNoKey();
            modelBuilder.Entity<fn_viewclResult>().HasNoKey();
        }
    }
}
